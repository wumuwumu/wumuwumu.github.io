<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梧木的博客</title>
  
  <subtitle>梧木的博客</subtitle>
  <link href="http://wumuwumu.github.io/atom.xml" rel="self"/>
  
  <link href="http://wumuwumu.github.io/"/>
  <updated>2021-02-27T06:13:13.997Z</updated>
  <id>http://wumuwumu.github.io/</id>
  
  <author>
    <name>wumu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloudGateway基本操作-WebFlux</title>
    <link href="http://wumuwumu.github.io/posts/ac39e4c0.html"/>
    <id>http://wumuwumu.github.io/posts/ac39e4c0.html</id>
    <published>+020201-01-25T09:00:00.000Z</published>
    <updated>2021-02-27T06:13:13.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Create-a-WebFlux-Handler"><a href="#Create-a-WebFlux-Handler" class="headerlink" title="Create a WebFlux Handler"></a>Create a WebFlux Handler</h2><p>In the Spring Reactive approach, we use a handler to handle the request and create a response, as shown in the following example:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//src/main/java/hello/GreetingHandler.java</span><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">BodyInserters</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingHandler</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyInserters</span><span class="token punctuation">.</span><span class="token function">fromValue</span><span class="token punctuation">(</span><span class="token string">"Hello, Spring!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>This simple reactive class always returns “Hello, Spring!” It could return many other things, including a stream of items from a database, a stream of items that were generated by calculations, and so on. Note the reactive code: a <code>Mono</code> object that holds a <code>ServerResponse</code> body.</p><h2 id="Create-a-Router"><a href="#Create-a-Router" class="headerlink" title="Create a Router"></a>Create a Router</h2><p>In this application, we use a router to handle the only route we expose (“/hello”), as shown in the following example:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//src/main/java/hello/GreetingRouter.java</span><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RequestPredicates</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RouterFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RouterFunctions</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerResponse</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingRouter</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token class-name">GreetingHandler</span> greetingHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">RouterFunctions</span>      <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> greetingHandler<span class="token operator">::</span><span class="token function">hello</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>The router listens for traffic on the <code>/hello</code> path and returns the value provided by our reactive handler class.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Create-a-WebFlux-Handler&quot;&gt;&lt;a href=&quot;#Create-a-WebFlux-Handler&quot; class=&quot;headerlink&quot; title=&quot;Create a WebFlux Handler&quot;&gt;&lt;/a&gt;Create a WebFl</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="SpringCloudGateway" scheme="http://wumuwumu.github.io/tags/SpringCloudGateway/"/>
    
  </entry>
  
  <entry>
    <title>rocketmq源码运行</title>
    <link href="http://wumuwumu.github.io/posts/5aea9ffb.html"/>
    <id>http://wumuwumu.github.io/posts/5aea9ffb.html</id>
    <published>2022-02-13T08:25:00.000Z</published>
    <updated>2022-02-13T08:31:11.806Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本架构"><a href="#1-基本架构" class="headerlink" title="1. 基本架构"></a>1. 基本架构</h3><p><code>RocketMQ</code>架构上主要分为四部分，如下图所示:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d7893db87d2415297dc76cf07a9da25~tplv-k3u1fbpfcp-watermark.awebp"></p><ul><li><p><code>Producer</code>：消息发布的角色，支持分布式集群方式部署。<code>Producer</code>通过<code>MQ</code>的负载均衡模块选择相应的<code>Broker</code>集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</p></li><li><p><code>Consumer</code>：消息消费的角色，支持分布式集群方式部署。支持以<code>push</code>推，<code>pull</code>拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。</p></li><li><p><code>NameServer</code>：<code>NameServer</code>是一个非常简单的<code>Topic</code>路由注册中心，其角色类似<code>Dubbo</code>中的<code>zookeeper</code>，支持<code>Broker</code>的动态注册与发现。主要包括两个功能：</p><ul><li><code>Broker</code>管理，<code>NameServer</code>接受<code>Broker</code>集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查<code>Broker</code>是否还存活；</li><li>路由信息管理，每个<code>NameServer</code>将保存关于<code>Broker</code>集群的整个路由信息和用于客户端查询的队列信息。然后<code>Producer</code>和<code>Conumser</code>通过<code>NameServer</code>就可以知道整个<code>Broker</code>集群的路由信息，从而进行消息的投递和消费。</li></ul><p><code>NameServer</code>通常也是集群的方式部署，各实例间相互不进行信息通讯。<code>Broker</code>是向每一台<code>NameServer</code>注册自己的路由信息，所以每一个<code>NameServer</code>实例上面都保存一份完整的路由信息。当某个<code>NameServer</code>因某种原因下线了，<code>Broker</code>仍然可以向其它<code>NameServer</code>同步其路由信息，<code>Producer</code>,<code>Consumer</code>仍然可以动态感知<code>Broker</code>的路由的信息。</p></li><li><p><code>BrokerServer</code>：<code>Broker</code>主要负责消息的存储、投递和查询以及服务高可用保证，为了实现这些功能，<code>Broker</code>包含了以下几个重要子模块：</p><ul><li><code>Remoting Module</code>：整个<code>Broker</code>的实体，负责处理来自<code>clients</code>端的请求。<ul><li><code>Client Manager</code>：负责管理客户端(<code>Producer</code>/<code>Consumer</code>)和维护<code>Consumer</code>的<code>Topic</code>订阅信息</li><li><code>Store Service</code>：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。</li><li><code>HA Service</code>：高可用服务，提供<code>Master Broker</code> 和 <code>Slave Broker</code>之间的数据同步功能。</li><li><code>Index Service</code>：根据特定的<code>Message key</code>对投递到<code>Broker</code>的消息进行索引服务，以提供消息的快速查询。</li></ul></li></ul></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a1d8173de75499f9b46a7aa7091da57~tplv-k3u1fbpfcp-watermark.awebp"></p><h2 id="2-获取源码"><a href="#2-获取源码" class="headerlink" title="2. 获取源码"></a>2. 获取源码</h2><p>rocketMq项目的<code>github</code>仓库为<a href="https://link.juejin.cn/?target=https://github.com/apache/rocketmq.git" title="https://github.com/apache/rocketmq.git">github.com/apache/rock…</a>，由于网络原因，我们并不会直接使用<code>github</code>仓库，而是将其导入到<code>gitee</code>上，只需在<code>gitee</code>创建新仓库时，选择导入已有仓库即可：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/590692126e494bb3bf6afe811d6c4770~tplv-k3u1fbpfcp-watermark.awebp"></p><p>导入到<code>gitee</code>后，就可以进行<code>checkout</code>了，本文对应的gitee仓库为<a href="https://link.juejin.cn/?target=https://gitee.com/funcy/rocketmq.git" title="https://gitee.com/funcy/rocketmq.git">gitee.com/funcy/rocke…</a>。</p><p><code>checkout</code>源码到本地后，默认是<code>master</code>分支，本人习惯基于<code>tag</code>创建自己的分支，然后在自己的分支上进行分析，<code>rocketMq</code>的<code>tag</code>如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1785db1bb7d040a195a449d3f5a79389~tplv-k3u1fbpfcp-watermark.awebp"></p><p>最新版本是<code>4.8.0</code>，我们将基于此tag创建新分支，使用的命令如下：</p><pre class="language-sh" data-language="sh"><code class="language-sh"># 切换到 rocketmq-all-4.8.0git checkout rocketmq-all-4.8.0# 基于 rocketmq-all-4.8.0 创建自己的分析，名称为 rocketmq-all-4.8.0-LEARNgit checkout -b rocketmq-all-4.8.0-LEARN# 将 rocketmq-all-4.8.0-LEARN 分支推送到远程仓库git push -u origin rocketmq-all-4.8.0-LEARN复制代码</code></pre><p>接下来，我们所有的操作都是在<code>rocketmq-all-4.8.0-LEARN</code>分支上进行了。</p><h3 id="3-本地启动"><a href="#3-本地启动" class="headerlink" title="3. 本地启动"></a>3. 本地启动</h3><p>拿到代码后，我们就开始进行本地启动了，没错，就是在idea中进行启动。</p><h4 id="3-1-复制conf目录"><a href="#3-1-复制conf目录" class="headerlink" title="3.1 复制conf目录"></a>3.1 复制<code>conf</code>目录</h4><p>在启动项目前，我们需要进行一些配置，<code>rocketMq</code>项目的配置文件位于<code>rocketmq/distribution</code>模块下的<code>conf</code>目录中，直接整个复制到<code>rocketmq</code>目录下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e5b2dac07b043769e47ceec7506ba82~tplv-k3u1fbpfcp-watermark.awebp"></p><p>也不需要改动，复制出来就行了，这些配置的内容后面分析源码时再讲解吧。</p><h4 id="3-2-启动nameServer"><a href="#3-2-启动nameServer" class="headerlink" title="3.2 启动nameServer"></a>3.2 启动<code>nameServer</code></h4><p><code>nameServer</code>的主类为<code>org.apache.rocketmq.namesrv.NamesrvStartup</code>：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/840bae7379c54826ae0acff203bdf51d~tplv-k3u1fbpfcp-watermark.awebp"></p><p>如果我们直接运行<code>main()</code>方法，会报错：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1dd9d3189a3c487a8a7769d34fc73e8b~tplv-k3u1fbpfcp-watermark.awebp"></p><p>报错信息已经很明确了，需要我们配置<code>ROCKETMQ_HOME</code>目录，我们在<code>idea</code>中进行配置即可：</p><p>打开配置界面：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/724bce8485e6452db2e7d5577c9e98fc~tplv-k3u1fbpfcp-watermark.awebp"></p><p>填写<code>ROCKETMQ_HOME</code>配置：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6b159a7122a422eade6ee30a7a8cfeb~tplv-k3u1fbpfcp-watermark.awebp"></p><p>这里我填写的是<code>ROCKETMQ_HOME=/Users/chengyan/IdeaProjects/myproject/rocketmq</code>，这个<code>ROCKETMQ_HOME</code>路径就是<code>conf</code>文件夹所在的目录。</p><p>填写好后，就可以启动了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50dc93afe5c042c39d437315668648ef~tplv-k3u1fbpfcp-watermark.awebp"></p><h4 id="3-3-启动broker"><a href="#3-3-启动broker" class="headerlink" title="3.3 启动broker"></a>3.3 启动<code>broker</code></h4><p><code>broker</code>的主类为<code>org.apache.rocketmq.broker.BrokerStartup</code>，启动方式与<code>nameServer</code>很相似，启动前也要配置<code>ROCKETMQ_HOME</code>路径：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddcfda6e8349489fac00db4df6e2ec77~tplv-k3u1fbpfcp-watermark.awebp"></p><p>相比于<code>nameServer</code>，这里多配置了启动参数：</p><pre class="language-none"><code class="language-none">-n localhost:9876 autoCreateTopicEnable&#x3D;true复制代码</code></pre><p>这个启动参数是指定<code>nameServer</code>的地址，以及开启自动创建<code>topic</code>的功能。</p><p>配置完成之后就可以启动了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b68e17980f264a4d9994000a92bb3dd9~tplv-k3u1fbpfcp-watermark.awebp"></p><h4 id="3-4-启动管理后台"><a href="#3-4-启动管理后台" class="headerlink" title="3.4 启动管理后台"></a>3.4 启动管理后台</h4><p><code>rocketMq</code>的管理后台在另一个仓库<a href="https://link.juejin.cn/?target=https://github.com/apache/rocketmq-externals" title="https://github.com/apache/rocketmq-externals">github.com/apache/rock…</a>，除了后台，这个仓库还包含了许多的其他模块：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0da6a8741ca4e789c3338d23528249e~tplv-k3u1fbpfcp-watermark.awebp"></p><p>我们并不需要分析这个项目，源码本可以不必下载，但我在找这个项目的<code>release</code>版本时，发现并没有提供已编译好的jar包，需要自己构建代码，因此我就再次下载了这个代码源码。当然，由于网络的原因，这个项目的源码也被我导入到了<code>gitee</code>上，地址为<a href="https://link.juejin.cn/?target=https://gitee.com/funcy/rocketmq-externals.git" title="https://gitee.com/funcy/rocketmq-externals.git">gitee.com/funcy/rocke…</a>.</p><p>这个项目的代码我们并不分析，因此直接在<code>master</code>分支上操作即可，</p><p>管理后台项目为<code>rocketmq-console</code>，主类为<code>org.apache.rocketmq.console.App</code>：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70d88f026bcd406fb9a5f23306599854~tplv-k3u1fbpfcp-watermark.awebp"></p><p>在启动前，我们需要修改下<code>application.properties</code>的配置，找到<code>rocketmq.config.namesrvAddr</code>配置，添加<code>nameServer</code>的ip与端口，这里我们连接的是本地应用，直接填写<code>localhost:9876</code>：</p><pre class="language-properties" data-language="properties"><code class="language-properties">...<span class="token attr-name">rocketmq.config.namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">localhost:9876</span>...复制代码</code></pre><p>启动，结果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bc7934f207f42ff9d63be1789049978~tplv-k3u1fbpfcp-watermark.awebp"></p><p>访问<code>http://localhost:8080</code>，结果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac4f0f12ea614289b8e66f57d8338b54~tplv-k3u1fbpfcp-watermark.awebp"></p><p>可以看到<code>broker</code>已经出现在<code>cluster</code>列表中了，这就表明启动成功了。</p><h3 id="4-收发消息测试"><a href="#4-收发消息测试" class="headerlink" title="4. 收发消息测试"></a>4. 收发消息测试</h3><p><code>rocketMq</code>项目的<code>example</code>模块下有大量的测试示例，我们选择其一进行消息收发测试。</p><h4 id="4-1-启动Consumer"><a href="#4-1-启动Consumer" class="headerlink" title="4.1 启动Consumer"></a>4.1 启动<code>Consumer</code></h4><p>我们先找到<code>org.apache.rocketmq.example.simple.PushConsumer</code>，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PushConsumer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> nameServer <span class="token operator">=</span> <span class="token string">"localhost:9876"</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"CID_JODIE_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span>nameServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">.</span>CONSUME_FROM_FIRST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//wrong time format 2017_0422_221800</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeTimestamp</span><span class="token punctuation">(</span><span class="token string">"20181109221800"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">></span></span> msgs<span class="token punctuation">,</span>                     <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s Receive New Messages: %s %n"</span><span class="token punctuation">,</span>                     <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Consumer Started.%n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>复制代码</code></pre><p>这个<code>Consumer</code>监听的<code>topic</code>是<code>TopicTest</code>，后面我们就会往这个<code>topic</code>发送消息。另外，需要注意<code>nameServer</code>的配置，我们是在本地启动的<code>nameServer</code>，因此这里配置的是<code>localhost:9876</code>。</p><p>运行<code>main()</code>方法，结果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6de3c3f6723a4fd4aa43407ff68bf3d2~tplv-k3u1fbpfcp-watermark.awebp"></p><h4 id="4-2-启动Producer"><a href="#4-2-启动Producer" class="headerlink" title="4.2 启动Producer"></a>4.2 启动<code>Producer</code></h4><p>我们找到 <code>org.apache.rocketmq.example.simple.Producer</code> 类，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> nameServer <span class="token operator">=</span> <span class="token string">"localhost:9876"</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"ProducerGroupName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span>nameServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#123;</span>                    <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span>                        <span class="token string">"TagA"</span><span class="token punctuation">,</span>                        <span class="token string">"OrderID188"</span><span class="token punctuation">,</span>                        <span class="token string">"Hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>复制代码</code></pre><p>同样地，这里使用的是的<code>nameServer</code>地址是<code>localhost:9876</code>，<code>topic</code> 是<code>TopicTest</code>，运行，结果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28988075e4804f86bc195c168b0b376d~tplv-k3u1fbpfcp-watermark.awebp"></p><p>再回过头看看<code>PushConsumer</code>的控制台：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73f8d1ca9d884645a39b2f70e25f9c93~tplv-k3u1fbpfcp-watermark.awebp"></p><p>可以看到，<code>Producer</code>发送消息成功了，<code>PushConsumer</code>也成功获取到消息了。</p><h4 id="4-3-异常分析"><a href="#4-3-异常分析" class="headerlink" title="4.3 异常分析"></a>4.3 异常分析</h4><p>如图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d1b74db64c44773a9538576850c3f86~tplv-k3u1fbpfcp-watermark.awebp"></p><p>如果出现异常：</p><pre class="language-none"><code class="language-none">org.apache.rocketmq.client.exception.MQClientException: No route info of this topic: TopicTest复制代码</code></pre><p>这表明当前<code>broker</code>中没有<code>TopicTest</code>的<code>topic</code>，这时我们可以手动创建<code>topic</code>，也可以在启动时指定<code>autoCreateTopicEnable=true</code>.</p><p>如果是按上面步骤进行的，请确认下<code>org.apache.rocketmq.broker.BrokerStartup</code>是否配置启动参数</p><pre class="language-none"><code class="language-none">-n localhost:9876 autoCreateTopicEnable&#x3D;true复制代码</code></pre><p>配置方式就按<code>3.3节</code>的方式配置就行了。</p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>本文主要介绍了<code>rocketMq</code>的基本架构，通过源码展示了<code>rocketMq</code>的启动方式，最后通过<code>rocketMq</code>项目下<code>example</code>模块中的测试代码展示了消息的收发过程。</p><p>总的来说，本文还是在准备源码分析的环境，下篇文章开始，我们就正式开始<code>rocketMq</code>的源码分析了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基本架构&quot;&gt;&lt;a href=&quot;#1-基本架构&quot; class=&quot;headerlink&quot; title=&quot;1. 基本架构&quot;&gt;&lt;/a&gt;1. 基本架构&lt;/h3&gt;&lt;p&gt;&lt;code&gt;RocketMQ&lt;/code&gt;架构上主要分为四部分，如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    
    <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
    <category term="rocketmq" scheme="http://wumuwumu.github.io/tags/rocketmq/"/>
    
    <category term="mq" scheme="http://wumuwumu.github.io/tags/mq/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://wumuwumu.github.io/posts/0.html"/>
    <id>http://wumuwumu.github.io/posts/0.html</id>
    <published>2021-08-25T07:22:03.127Z</published>
    <updated>2021-08-25T07:22:03.127Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot自定义参数解析器</title>
    <link href="http://wumuwumu.github.io/posts/c3853fa8.html"/>
    <id>http://wumuwumu.github.io/posts/c3853fa8.html</id>
    <published>2021-04-26T05:00:00.000Z</published>
    <updated>2021-04-27T01:12:18.329Z</updated>
    
    <content type="html"><![CDATA[<p>对于如何自定义参数解析器，一个较推荐的方法是，先搞清楚springmvc接收到一个请求之后完整的处理链路，然后再来看在什么地方，什么时机，来插入自定义参数解析器，无论是从理解还是实现都会简单很多。遗憾的是，本篇主要目标放在的是使用角度，所以这里只会简单的提一下参数解析的链路，具体的深入留待后续的源码解析</p><h1 id="参数解析链路"><a href="#参数解析链路" class="headerlink" title="参数解析链路"></a>参数解析链路</h1><p>http请求流程图，来自 <a href="https://www.jianshu.com/p/bf3537334e76">SpringBoot是如何解析HTTP参数的</a></p><p><a href="https://spring.hhui.top/spring-blog/imgs/190831/00.jpg"><img src="https://spring.hhui.top/spring-blog/imgs/190831/00.jpg" alt="img"></a></p><p>既然是参数解析，所以肯定是在方法调用之前就会被触发，在Spring中，负责将http参数与目标方法参数进行关联的，主要是借助<code>org.springframework.web.method.support.HandlerMethodArgumentResolver</code>类来实现</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Iterate over registered &#123;@link HandlerMethodArgumentResolver&#125;s and invoke the one that supports it. * @throws IllegalStateException if no suitable &#123;@link HandlerMethodArgumentResolver&#125; is found. */</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>trueHandlerMethodArgumentResolver resolver <span class="token operator">=</span> <span class="token function">getArgumentResolver</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>trueif <span class="token punctuation">(</span>resolver <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>truetruethrow <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unknown parameter type ["</span> <span class="token operator">+</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span>truereturn resolver<span class="token punctuation">.</span><span class="token function">resolveArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">,</span> binderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上面这段核心代码来自<code>org.springframework.web.method.support.HandlerMethodArgumentResolverComposite#resolveArgument</code>，主要作用就是获取一个合适的<code>HandlerMethodArgumentResolver</code>，实现将http参数(<code>webRequest</code>)映射到目标方法的参数上(<code>parameter</code>)</p><p>所以说，实现自定义参数解析器的核心就是实现一个自己的<code>HandlerMethodArgumentResolver</code></p><h1 id="HandlerMethodArgumentResolver"><a href="#HandlerMethodArgumentResolver" class="headerlink" title="HandlerMethodArgumentResolver"></a>HandlerMethodArgumentResolver</h1><p>实现一个自定义的参数解析器，首先得有个目标，我们在get参数解析篇里面，当时遇到了一个问题，当传参为数组时，定义的方法参数需要为数组，而不能是List，否则无法正常解析；现在我们则希望能实现这样一个参数解析，以支持上面的场景</p><p>为了实现上面这个小目标，我们可以如下操作</p><h2 id="自定义注解ListParam"><a href="#自定义注解ListParam" class="headerlink" title="自定义注解ListParam"></a>自定义注解ListParam</h2><p>定义这个注解，主要就是用于表明，带有这个注解的参数，希望可以使用我们自定义的参数解析器来解析；</p><pre class="language-none"><code class="language-none">@Target(ElementType.PARAMETER)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface ListParam &#123;    &#x2F;**     * Alias for &#123;@link #name&#125;.     *&#x2F;    @AliasFor(&quot;name&quot;) String value() default &quot;&quot;;    &#x2F;**     * The name of the request parameter to bind to.     *     * @since 4.2     *&#x2F;    @AliasFor(&quot;value&quot;) String name() default &quot;&quot;;&#125;</code></pre><h2 id="参数解析器ListHandlerMethodArgumentResolver"><a href="#参数解析器ListHandlerMethodArgumentResolver" class="headerlink" title="参数解析器ListHandlerMethodArgumentResolver"></a>参数解析器ListHandlerMethodArgumentResolver</h2><p>接下来就是自定义的参数解析器了，需要实现接口<code>HandlerMethodArgumentResolver</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListHandlerMethodArgumentResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerMethodArgumentResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ListParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span>            <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListParam</span> param <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ListParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                    <span class="token string">"Unknown parameter type ["</span> <span class="token operator">+</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> param<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> param<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            name <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> ans <span class="token operator">=</span> webRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cells <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>上面虽然实现了自定义的参数解析器，但是我们需要把它注册到<code>HandlerMethodArgumentResolver</code>才能生效，一个简单的方法如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addArgumentResolvers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">></span></span> argumentResolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        argumentResolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListHandlerMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于如何自定义参数解析器，一个较推荐的方法是，先搞清楚springmvc接收到一个请求之后完整的处理链路，然后再来看在什么地方，什么时机，来插入自定义参数解析器，无论是从理解还是实现都会简单很多。遗憾的是，本篇主要目标放在的是使用角度，所以这里只会简单的提一下参数解析的链路</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="http://wumuwumu.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装K8S</title>
    <link href="http://wumuwumu.github.io/posts/5b646136.html"/>
    <id>http://wumuwumu.github.io/posts/5b646136.html</id>
    <published>2021-04-19T04:00:00.000Z</published>
    <updated>2021-04-17T12:19:48.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装准备（每台服务器）"><a href="#安装准备（每台服务器）" class="headerlink" title="安装准备（每台服务器）"></a>安装准备（每台服务器）</h1><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><pre class="language-none"><code class="language-none">systemctl stop firewalldsystemctl disable firewalld</code></pre><h2 id="关闭Selinux"><a href="#关闭Selinux" class="headerlink" title="关闭Selinux"></a>关闭Selinux</h2><ul><li>临时禁用</li></ul><pre class="language-none"><code class="language-none">setenforce 0</code></pre><ul><li>永久禁用</li></ul><pre class="language-none"><code class="language-none">sed -i &#39;s&#x2F;SELINUX&#x3D;permissive&#x2F;SELINUX&#x3D;disabled&#x2F;&#39; &#x2F;etc&#x2F;sysconfig&#x2F;selinuxsed -i &quot;s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;g&quot; &#x2F;etc&#x2F;selinux&#x2F;config</code></pre><h2 id="禁用交换分区"><a href="#禁用交换分区" class="headerlink" title="禁用交换分区"></a>禁用交换分区</h2><ul><li><pre class="language-none"><code class="language-none">swapoff -a</code></pre></li><li><p>永久禁用，打开/etc/fstab注释掉swap那一行。</p></li></ul><pre class="language-none"><code class="language-none">sed -i &#39;s&#x2F;.*swap.*&#x2F;#&amp;&#x2F;&#39; &#x2F;etc&#x2F;fstab</code></pre><h2 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span>  /etc/sysctl.d/k8s.conf</span>net.bridge.bridge-nf-call-iptables=1net.bridge.bridge-nf-call-ip6tables=1net.ipv4.ip_forward=1net.ipv4.tcp_tw_recycle=0vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它vm.overcommit_memory=1 # 不检查物理内存是否够用vm.panic_on_oom=0 # 开启 OOMfs.inotify.max_user_instances=8192fs.inotify.max_user_watches=1048576fs.file-max=52706963fs.nr_open=52706963net.ipv6.conf.all.disable_ipv6=1net.netfilter.nf_conntrack_max=2310720EOF</span>sysctl --system</code></pre><h2 id="调整系统时区"><a href="#调整系统时区" class="headerlink" title="调整系统时区"></a>调整系统时区</h2><h3 id="设置系统时区为-中国-上海"><a href="#设置系统时区为-中国-上海" class="headerlink" title="设置系统时区为 中国/上海"></a>设置系统时区为 中国/上海</h3><pre class="language-none"><code class="language-none">timedatectl set-timezone Asia&#x2F;Shanghai</code></pre><h3 id="将当前的-UTC-时间写入硬件时钟"><a href="#将当前的-UTC-时间写入硬件时钟" class="headerlink" title="将当前的 UTC 时间写入硬件时钟"></a>将当前的 UTC 时间写入硬件时钟</h3><pre class="language-none"><code class="language-none">timedatectl set-local-rtc 0</code></pre><h3 id="重启依赖于系统时间的服务"><a href="#重启依赖于系统时间的服务" class="headerlink" title="重启依赖于系统时间的服务"></a>重启依赖于系统时间的服务</h3><pre class="language-none"><code class="language-none">systemctl restart rsyslogsystemctl restart crond</code></pre><h1 id="安装docker-每台服务器"><a href="#安装docker-每台服务器" class="headerlink" title="安装docker(每台服务器)"></a>安装docker(每台服务器)</h1><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2yum-config-manager <span class="token punctuation">\</span>--add-repo <span class="token punctuation">\</span>http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum update -y <span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> -y docker-ce<span class="token comment">## 创建 /etc/docker 目录</span>grub2-set-default <span class="token string">'CentOS Linux (4.4.202-1.el7.elrepo.x86_64) 7 (Core)'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">reboot</span><span class="token comment"># 重新设置内核</span>systemctl restart docker <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> docker<span class="token comment"># 设置开机自动</span><span class="token function">mkdir</span> /etc/docker<span class="token comment"># 配置 daemon.</span><span class="token function">cat</span> <span class="token operator">></span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span><span class="token string">EOF&#123;    "exec-opts": ["native.cgroupdriver=systemd"],    "log-driver": "json-file",    "log-opts": &#123;    "max-size": "100m"    &#125;&#125;EOF</span><span class="token function">mkdir</span> -p /etc/systemd/system/docker.service.d<span class="token comment"># 重启docker服务</span>systemctl daemon-reload <span class="token operator">&amp;&amp;</span> systemctl restart docker </code></pre><h1 id="安装-Kubeadm-所有服务器"><a href="#安装-Kubeadm-所有服务器" class="headerlink" title="安装 Kubeadm(所有服务器)"></a>安装 Kubeadm(所有服务器)</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo <span class="token operator">&lt;&lt;</span><span class="token string">EOF [kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpghttp://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF</span>yum <span class="token function">install</span> -y kubelet-1.18.4 kubeadm-1.18.4 kubectl-1.18.4systemctl <span class="token builtin class-name">enable</span> kubelet.service</code></pre><h1 id="安装主节点"><a href="#安装主节点" class="headerlink" title="安装主节点"></a>安装主节点</h1><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm config print init-defaults <span class="token operator">></span> kubeadm-config.yaml<span class="token comment"># 修改(以及新增)kubeadm-config.yaml以下内容</span>localAPIEndpoint:  advertiseAddress: <span class="token number">192.168</span>.1.200kubernetesVersion: v1.18.4networking:  podSubnet: <span class="token number">10.244</span>.0.0/16  serviceSubnet: <span class="token number">10.96</span>.0.0/12</code></pre><h2 id="下载初始化必备镜像"><a href="#下载初始化必备镜像" class="headerlink" title="下载初始化必备镜像"></a>下载初始化必备镜像</h2><p>因为 Kubernetes 所需要的初始化必备镜像都是从谷歌官方拉取的，不会走 docker 的加速镜像服务器。由于谷歌被墙，所以我们需要自行下载必备镜像，怎么做呢？</p><p>首先列出使用的镜像以及版本号</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm config images list --config kubeadm-config.yaml</code></pre><p>接着，我们通过国内的第三方镜像仓库下载完毕后再更改镜像名称与谷歌的镜像名称一致即可</p><p>我们编写一个 shell 脚本</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">images</span><span class="token operator">=</span><span class="token punctuation">(</span>    kube-apiserver:v1.18.4    kube-controller-manager:v1.18.4    kube-scheduler:v1.18.4    kube-proxy:v1.18.4    pause:3.2    etcd:3.4.3-0    coredns:1.6.7<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token for-or-select variable">imageName</span> <span class="token keyword">in</span> <span class="token variable">$&#123;images<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    docker pull mirrorgcrio/<span class="token variable">$imageName</span>    docker tag mirrorgcrio/<span class="token variable">$imageName</span> k8s.gcr.io/<span class="token variable">$imageName</span>    docker rmi mirrorgcrio/<span class="token variable">$imageName</span><span class="token keyword">done</span></code></pre><p>当然这里用什么版本，是由 Kubeadm 的版本节点的。通过上方的列出使用的镜像以及版本号我们可以很清楚的知道要下什么版本，下哪些的镜像了。</p><p>然后我们执行脚本，开始下载镜像 (注意哦，这个下载镜像，2 个 node 节点也要做的)</p><p>给予执行权限</p><p>chmod +x docker-download.sh</p><p>初始化,并且将标准输出同时写入至kubeadm-init.log文件</p><p>kubeadm init –config=kubeadm-config.yaml | tee kubeadm-init.log<br>完毕后，控制台输出的日志会告诉我们继续执行什么指令以及 node 节点如何加入</p><p>执行日志中的指令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube<span class="token function">sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config</code></pre><h2 id="部署网络"><a href="#部署网络" class="headerlink" title="部署网络"></a>部署网络</h2><p>只要操作 master 节点即可噢～</p><p>现在我们执行 kubectl 相关指令已经会有了正常响应，但是此时节点处于 NotReady 的状态，这是因为我们还没有为 Kubernetes 指定它的网络模式。我们使用 flannel 来作为它的网络模式，这样就可以让不同节点上的容器跨主机通信。如果对这块感兴趣，可以自行搜索 flannel 的网络实现。</p><p>现在我们开始安装 flannel</p><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /usr/local/install-k8s/plugin/flannel</code></pre><h3 id="进入flannel文件夹"><a href="#进入flannel文件夹" class="headerlink" title="进入flannel文件夹"></a>进入flannel文件夹</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/install-k8s/plugin/flannel</code></pre><h3 id="下载flannel配置文件"><a href="#下载flannel配置文件" class="headerlink" title="下载flannel配置文件"></a>下载flannel配置文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</code></pre><h3 id="安装flannel"><a href="#安装flannel" class="headerlink" title="安装flannel"></a>安装flannel</h3><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl create -f kube-flannel.yml</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看命名空间为kube-system的pod情况</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get pod -n kube-system</code></pre><p>查看更详细的信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get pod -n kube-system -o wide</code></pre><p>查看k8s所有节点连接情况</p><pre class="language-none"><code class="language-none">kubectl get node</code></pre><h2 id="加入子节点"><a href="#加入子节点" class="headerlink" title="加入子节点"></a>加入子节点</h2><p>根据 kubeadm-init.log 日志文件内容或者安装的时候的标准输出，在 node 节点执行指令</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.1.200:6443 --token abcdef.0123456789abcdef <span class="token punctuation">\</span>    --discovery-token-ca-cert-hash sha256:7c2677754a3b09da10d5ffa6a7d6348ad63219cd69d2f5c3a27642d4b95ff15b</code></pre><p>即可将 node 节点加入 master</p><h1 id="子节点配置"><a href="#子节点配置" class="headerlink" title="子节点配置"></a>子节点配置</h1><h2 id="下载docker相关组件"><a href="#下载docker相关组件" class="headerlink" title="下载docker相关组件"></a>下载docker相关组件</h2><p>参考主节点配置</p><h2 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h2><h2 id="清除加入"><a href="#清除加入" class="headerlink" title="清除加入"></a>清除加入</h2><pre class="language-none"><code class="language-none">kubeadm reset</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://learnku.com/docs/go-micro-build/1.0/kubernetes-1804-cluster-installation-tutorial-based-on-centos7/8877#6077e2">https://learnku.com/docs/go-micro-build/1.0/kubernetes-1804-cluster-installation-tutorial-based-on-centos7/8877#6077e2</a></p><p><a href="https://www.yinxiang.com/everhub/note/f420816c-2019-47a1-8dcd-7b3ade25ac1f">https://www.yinxiang.com/everhub/note/f420816c-2019-47a1-8dcd-7b3ade25ac1f</a></p><p><a href="https://www.jianshu.com/p/4a5e0de015a9">https://www.jianshu.com/p/4a5e0de015a9</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装准备（每台服务器）&quot;&gt;&lt;a href=&quot;#安装准备（每台服务器）&quot; class=&quot;headerlink&quot; title=&quot;安装准备（每台服务器）&quot;&gt;&lt;/a&gt;安装准备（每台服务器）&lt;/h1&gt;&lt;h3 id=&quot;关闭防火墙&quot;&gt;&lt;a href=&quot;#关闭防火墙&quot; class</summary>
      
    
    
    
    
    <category term="centos" scheme="http://wumuwumu.github.io/tags/centos/"/>
    
    <category term="k8s" scheme="http://wumuwumu.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>centos安装imgproxy</title>
    <link href="http://wumuwumu.github.io/posts/7a004090.html"/>
    <id>http://wumuwumu.github.io/posts/7a004090.html</id>
    <published>2021-04-06T04:00:00.000Z</published>
    <updated>2021-04-06T12:56:37.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过docker安装"><a href="#通过docker安装" class="headerlink" title="通过docker安装"></a>通过docker安装</h1><pre class="language-bash" data-language="bash"><code class="language-bash">docker pull darthsim/imgproxy:latestdocker run -e <span class="token assign-left variable">IMGPROXY_USE_S3</span><span class="token operator">=</span>true -e <span class="token assign-left variable">IMGPROXY_S3_ENDPOINT</span><span class="token operator">=</span>http://192.168.100.11:9228 -e <span class="token assign-left variable">AWS_ACCESS_KEY_ID</span><span class="token operator">=</span>AKIAIOSFSDODNN7EXAMPLE -e <span class="token assign-left variable">AWS_SECRET_ACCESS_KEY</span><span class="token operator">=</span>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEDXXAMPLEKEY -p <span class="token number">9340</span>:8080 -d  darthsim/imgproxy</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过docker安装&quot;&gt;&lt;a href=&quot;#通过docker安装&quot; class=&quot;headerlink&quot; title=&quot;通过docker安装&quot;&gt;&lt;/a&gt;通过docker安装&lt;/h1&gt;&lt;pre class=&quot;language-bash&quot; data-language=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis的数据过期清除策略与内存淘汰策略</title>
    <link href="http://wumuwumu.github.io/posts/395bf0bd.html"/>
    <id>http://wumuwumu.github.io/posts/395bf0bd.html</id>
    <published>2021-03-28T10:00:00.000Z</published>
    <updated>2021-03-28T15:08:38.379Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Redis时，我们一般会为Redis的缓存空间设置一个大小，不会让数据无限制地放入Redis缓存中。可以使用下面命令来设定缓存的大小，比如设置为4GB：在使用Redis时，我们一般会为Redis的缓存空间设置一个大小，不会让数据无限制地放入Redis缓存中。可以使用下面命令来设定缓存的大小，比如设置为4GB：</p><pre class="language-redis" data-language="redis"><code class="language-redis">CONFIG SET maxmemory 4gb</code></pre><p>既然 Redis 设置了缓存的容量大小，那缓存被写满就是不可避免的。当缓存被写满时，我们需要考虑下面两个问题：决定淘汰哪些数据，如何处理那些被淘汰的数据。</p><h1 id="Redis的数据过期清除策略："><a href="#Redis的数据过期清除策略：" class="headerlink" title="Redis的数据过期清除策略："></a>Redis的数据过期清除策略：</h1><p>如果我们设置了Redis的key-value的过期时间，当缓存中的数据过期之后，Redis就需要将这些数据进行清除，释放占用的内存空间。Redis中主要使用 定期删除 + 惰性删除 两种数据过期清除策略。</p><p>过期策略：定期删除+惰性删除：</p><h2 id="定期删除："><a href="#定期删除：" class="headerlink" title="定期删除："></a>定期删除：</h2><p>redis默认每隔100ms就随机抽取一些设置了过期时间的key，检查其是否过期，如果有过期就删除。注意这里是随机抽取的。为什么要随机呢？你想一想假如 redis 存了几十万个 key ，每隔100ms就遍历所有的设置过期时间的 key 的话，就会给 CPU 带来很大的负载。</p><p>为什么不用定时删除策略呢？</p><p>定时删除，用一个定时器来负责监视key，过期则自动删除。虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key，因此没有采用这一策略。</p><h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>定期删除可能导致很多过期的key 到了时间并没有被删除掉。这时就要使用到惰性删除。在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间并且过期了，是的话就删除。</p><h2 id="定期删除-惰性删除存在的问题："><a href="#定期删除-惰性删除存在的问题：" class="headerlink" title="定期删除+惰性删除存在的问题："></a>定期删除+惰性删除存在的问题：</h2><p>如果某个key过期后，定期删除没删除成功，然后也没再次去请求key，也就是说惰性删除也没生效。这时，如果大量过期的key堆积在内存中，redis的内存会越来越高，导致redis的内存块耗尽。那么就应该采用内存淘汰机制。</p><h1 id="Redis的缓存淘汰策略："><a href="#Redis的缓存淘汰策略：" class="headerlink" title="Redis的缓存淘汰策略："></a>Redis的缓存淘汰策略：</h1><p>Redis共提供了8中缓存淘汰策略，其中 volatile-lfu 和 allkeys-lfu 是Redis 4.0版本新增的。</p><p>1、noeviction：不进行淘汰数据。一旦缓存被写满，再有写请求进来，Redis就不再提供服务，而是直接返回错误。Redis 用作缓存时，实际的数据集通常都是大于缓存容量的，总会有新的数据要写入缓存，这个策略本身不淘汰数据，也就不会腾出新的缓存空间，我们不把它用在 Redis 缓存中。</p><p>2、volatile-ttl：在设置了过期时间的键值对中，移除即将过期的键值对。</p><p>3、volatile-random：在设置了过期时间的键值对中，随机移除某个键值对。</p><p>4、volatile-lru：在设置了过期时间的键值对中，移除最近最少使用的键值对。</p><p>5、volatile-lfu：在设置了过期时间的键值对中，移除最近最不频繁使用的键值对</p><p>6、allkeys-random：在所有键值对中，随机移除某个key。</p><p>7、allkeys-lru：在所有的键值对中，移除最近最少使用的键值对。</p><p>8、allkeys-lfu：在所有的键值对中，移除最近最不频繁使用的键值对</p><p>通常情况下推荐优先使用 allkeys-lru 策略。这样可以充分利用 LRU 这一经典缓存算法的优势，把最近最常访问的数据留在缓存中，提升应用的访问性能。</p><p>如果你的业务数据中有明显的冷热数据区分，建议使用 allkeys-lru 策略。</p><p>如果业务应用中的数据访问频率相差不大，没有明显的冷热数据区分，建议使用 allkeys-random 策略，随机选择淘汰的数据就行。</p><p>如果没有设置过期时间的键值对，那么 volatile-lru，volatile-lfu，volatile-random 和 volatile-ttl 策略的行为, 和 noeviction 基本上一致。</p><h1 id="Redis中的LRU和LFU算法："><a href="#Redis中的LRU和LFU算法：" class="headerlink" title="Redis中的LRU和LFU算法："></a>Redis中的LRU和LFU算法：</h1><h2 id="LRU算法："><a href="#LRU算法：" class="headerlink" title="LRU算法："></a>LRU算法：</h2><p>LRU 算法的全称是 Least Recently Uses，按照最近最少使用的原则来筛选数据，最不常用的数据会被筛选出来。LRU 会把所有的数据组织成一个链表，链表的头和尾分别表示 MRU 端和 LRU 端，分别代表最近最常使用的数据和最近最不常用的数据。我们看一个例子。</p><p>如果有一个新数据 45 要被写入缓存，但此时已经没有缓存空间了，也就是链表没有空余位置了，那么LRU 算法做两件事：数据 45 是刚被访问的，所以它会被放到 MRU 端；算法把 LRU 端的数据 5 从缓存中删除，相应的链表中就没有数据 5 的记录了。LRU认为刚刚被访问的数据，肯定还会被再次访问，所以就把它放在 MRU 端；长久不访问的数据，肯定就不会再被访问了，所以就让它逐渐后移到 LRU 端，在缓存满时，就优先删除它。</p><p>LRU 算法在实际实现时，需要用链表管理所有的缓存数据，移除元素时直接从链表队尾移除，增加时加到头部就可以了，但这会带来额外的空间开销。而且，当有数据被访问时，需要在链表上把该数据移动到 MRU 端，如果有大量数据被访问，就会带来很多链表移动操作，会很耗时，进而会降低 Redis 缓存性能。</p><p>所以，在 Redis 中，LRU 算法被做了简化，以减轻数据淘汰对缓存性能的影响。具体来说：Redis 默认会记录每个数据的最近一次访问的时间戳（由键值对数据结构 RedisObject 中的 lru 字段记录）。然后，Redis 在决定淘汰的数据时，第一次会随机选出 N 个数据，把它们作为一个候选集合。接下来，Redis 会比较这 N 个数据的 lru 字段，把 lru 字段值最小的数据从缓存中淘汰出去。当需要再次淘汰数据时，Redis 需要挑选数据进入第一次淘汰时创建的候选集合。这里的挑选标准是：能进入候选集合的数据的 lru 字段值必须小于候选集合中最小的 lru 值。当有新数据进入候选数据集后，如果候选数据集中的数据个数达到了 N 个，Redis 就把候选数据集中 lru 字段值最小的数据淘汰出去。这样一来，Redis 缓存不用为所有的数据维护一个大链表，也不用在每次数据访问时都移动链表项，提升了缓存的性能。</p><p>Redis 提供了一个配置参数 maxmemory-samples，这个参数就是 Redis 选出的数据个数 N。例如，我们执行如下命令，可以让 Redis 选出 100 个数据作为候选数据集：</p><p>CONFIG SET maxmemory-samples 100</p><p>RedisObject 的定义如下：（简单理解为一个 key-value）</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> lru<span class="token operator">:</span>LRU_BITS<span class="token punctuation">;</span> <span class="token comment">/* LRU time (relative to global lru_clock) or                            * LFU data (least significant 8 bits frequency                            * and most significant 16 bits access time). */</span>    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> robj<span class="token punctuation">;</span></code></pre><h2 id="LFU算法："><a href="#LFU算法：" class="headerlink" title="LFU算法："></a>LFU算法：</h2><p>LFU是在Redis4.0后出现的，它的核心思想是根据key的最近被访问的频率进行淘汰，很少被访问的优先被淘汰，被访问的多的则被留下来。LFU算法能更好的表示一个key被访问的热度。假如你使用的是LRU算法，一个key很久没有被访问到，只刚刚是偶尔被访问了一次，那么它就被认为是热点数据，不会被淘汰，而有些key将来是很有可能被访问到的则被淘汰了。如果使用LFU算法则不会出现这种情况，因为使用一次并不会使一个key成为热点数据。它的使用与LRU有所区别：</p><p>LFU (Least Frequently Used) ：最近最不频繁使用，跟使用的次数有关，淘汰使用次数最少的。</p><p>LRU (Least Recently Used)：最近最少使用，跟使用的最后一次时间有关，淘汰最近使用时间离现在最久的。</p><p>LRU的最近最少使用实际上并不精确，考虑下面的情况，如果在 “|” 处删除，那么A距离的时间最久，但实际上A的使用频率要比D频繁，所以合理的淘汰策略应该是淘汰D。LFU就是为应对这种情况而生的。</p><pre class="language-none"><code class="language-none">~~~~~A~~~~~A~~~~~A~~~~A~~~~~A~~~~~A~~|~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~|​~~~~~~~~~~C~~~~~~~~~C~~~~~~~~~C~~~~~~|​~~~~~D~~~~~~~~~~D~~~~~~~~~D~~~~~~~~~D|</code></pre><p>每个波浪号代表一秒，A 每五秒，R 每两秒，C 和 D 每十秒 ， 最近被访问的字符是 D，但显然按照现有的规律，下一个被访问的更可能是 R 而不是 D。</p><p>LFU 实现比较复杂，需要考虑几个问题：</p><p>如果实现为链表，当对象被访问时按访问次数移动到链表的某个有序位置可能是低效的，因为可能存在大量访问次数相同的 key，最差情况是O(n)<br>某些 key 访问次数可能非常之大，理论上可以无限大，但实际上我们并不需要精确的访问次数<br>访问次数特别大的 key 可能以后都不再访问了，但是因为访问次数大而一直占用着内存不被淘汰，需要一个方法来逐步“驱除”（有点 LRU的意思），最简单的就是逐步衰减访问次数<br>本着能省则省的原则，Redis 只用了 24bit （server.lruclock 也是24bit）来记录上述的信息，是的不是 24byte，连32位指针都放不下！</p><p>16bit : 上一次递减时间 （解决第三个问题）</p><p>8bit : 访问次数 （解决第二个问题）</p><p>访问次数的计算如下：</p><pre class="language-c" data-language="c"><code class="language-c">uint8_t <span class="token function">LFULogIncr</span><span class="token punctuation">(</span>uint8_t counter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>RAND_MAX<span class="token punctuation">;</span>    <span class="token keyword">double</span> baseval <span class="token operator">=</span> counter <span class="token operator">-</span> LFU_INIT_VAL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>baseval <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> baseval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span>baseval<span class="token operator">*</span>server<span class="token punctuation">.</span>lfu_log_factor<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> counter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>核心就是访问次数越大，访问次数被递增的可能性越小，最大 255，可以在配置 redis.conf 中写明访问多少次递增多少。由于访问次数是有限的，所以第一个问题也被解决了，直接一个255数组或链表都可以。</p><p>16bit 部分保存的是时间戳的后16位（分钟），表示上一次递减的时间，算法是这样执行，随机采样N个key，检查递减时间，如果距离现在超过 N 分钟（可配置），则递减或者减半（如果访问次数数值比较大）。</p><p>此外，由于新加入的 key 访问次数很可能比不被访问的老 key小，为了不被马上淘汰，新key访问次数设为 5。</p><pre class="language-redis" data-language="redis"><code class="language-redis">CONFIG SET maxmemory 4gb</code></pre><p>既然 Redis 设置了缓存的容量大小，那缓存被写满就是不可避免的。当缓存被写满时，我们需要考虑下面两个问题：决定淘汰哪些数据，如何处理那些被淘汰的数据。</p><h1 id="Redis的数据过期清除策略：-1"><a href="#Redis的数据过期清除策略：-1" class="headerlink" title="Redis的数据过期清除策略："></a>Redis的数据过期清除策略：</h1><p>如果我们设置了Redis的key-value的过期时间，当缓存中的数据过期之后，Redis就需要将这些数据进行清除，释放占用的内存空间。Redis中主要使用 定期删除 + 惰性删除 两种数据过期清除策略。</p><p>过期策略：定期删除+惰性删除：</p><h2 id="定期删除：-1"><a href="#定期删除：-1" class="headerlink" title="定期删除："></a>定期删除：</h2><p>redis默认每隔100ms就随机抽取一些设置了过期时间的key，检查其是否过期，如果有过期就删除。注意这里是随机抽取的。为什么要随机呢？你想一想假如 redis 存了几十万个 key ，每隔100ms就遍历所有的设置过期时间的 key 的话，就会给 CPU 带来很大的负载。</p><p>为什么不用定时删除策略呢？</p><p>定时删除，用一个定时器来负责监视key，过期则自动删除。虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key，因此没有采用这一策略。</p><h2 id="惰性删除-1"><a href="#惰性删除-1" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>定期删除可能导致很多过期的key 到了时间并没有被删除掉。这时就要使用到惰性删除。在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间并且过期了，是的话就删除。</p><h2 id="定期删除-惰性删除存在的问题：-1"><a href="#定期删除-惰性删除存在的问题：-1" class="headerlink" title="定期删除+惰性删除存在的问题："></a>定期删除+惰性删除存在的问题：</h2><p>如果某个key过期后，定期删除没删除成功，然后也没再次去请求key，也就是说惰性删除也没生效。这时，如果大量过期的key堆积在内存中，redis的内存会越来越高，导致redis的内存块耗尽。那么就应该采用内存淘汰机制。</p><h1 id="Redis的缓存淘汰策略：-1"><a href="#Redis的缓存淘汰策略：-1" class="headerlink" title="Redis的缓存淘汰策略："></a>Redis的缓存淘汰策略：</h1><p>Redis共提供了8中缓存淘汰策略，其中 volatile-lfu 和 allkeys-lfu 是Redis 4.0版本新增的。</p><p>1、noeviction：不进行淘汰数据。一旦缓存被写满，再有写请求进来，Redis就不再提供服务，而是直接返回错误。Redis 用作缓存时，实际的数据集通常都是大于缓存容量的，总会有新的数据要写入缓存，这个策略本身不淘汰数据，也就不会腾出新的缓存空间，我们不把它用在 Redis 缓存中。</p><p>2、volatile-ttl：在设置了过期时间的键值对中，移除即将过期的键值对。</p><p>3、volatile-random：在设置了过期时间的键值对中，随机移除某个键值对。</p><p>4、volatile-lru：在设置了过期时间的键值对中，移除最近最少使用的键值对。</p><p>5、volatile-lfu：在设置了过期时间的键值对中，移除最近最不频繁使用的键值对</p><p>6、allkeys-random：在所有键值对中，随机移除某个key。</p><p>7、allkeys-lru：在所有的键值对中，移除最近最少使用的键值对。</p><p>8、allkeys-lfu：在所有的键值对中，移除最近最不频繁使用的键值对</p><p>通常情况下推荐优先使用 allkeys-lru 策略。这样可以充分利用 LRU 这一经典缓存算法的优势，把最近最常访问的数据留在缓存中，提升应用的访问性能。</p><p>如果你的业务数据中有明显的冷热数据区分，建议使用 allkeys-lru 策略。</p><p>如果业务应用中的数据访问频率相差不大，没有明显的冷热数据区分，建议使用 allkeys-random 策略，随机选择淘汰的数据就行。</p><p>如果没有设置过期时间的键值对，那么 volatile-lru，volatile-lfu，volatile-random 和 volatile-ttl 策略的行为, 和 noeviction 基本上一致。</p><h1 id="Redis中的LRU和LFU算法：-1"><a href="#Redis中的LRU和LFU算法：-1" class="headerlink" title="Redis中的LRU和LFU算法："></a>Redis中的LRU和LFU算法：</h1><h2 id="LRU算法：-1"><a href="#LRU算法：-1" class="headerlink" title="LRU算法："></a>LRU算法：</h2><p>LRU 算法的全称是 Least Recently Uses，按照最近最少使用的原则来筛选数据，最不常用的数据会被筛选出来。LRU 会把所有的数据组织成一个链表，链表的头和尾分别表示 MRU 端和 LRU 端，分别代表最近最常使用的数据和最近最不常用的数据。我们看一个例子。</p><p>如果有一个新数据 45 要被写入缓存，但此时已经没有缓存空间了，也就是链表没有空余位置了，那么LRU 算法做两件事：数据 45 是刚被访问的，所以它会被放到 MRU 端；算法把 LRU 端的数据 5 从缓存中删除，相应的链表中就没有数据 5 的记录了。LRU认为刚刚被访问的数据，肯定还会被再次访问，所以就把它放在 MRU 端；长久不访问的数据，肯定就不会再被访问了，所以就让它逐渐后移到 LRU 端，在缓存满时，就优先删除它。</p><p>LRU 算法在实际实现时，需要用链表管理所有的缓存数据，移除元素时直接从链表队尾移除，增加时加到头部就可以了，但这会带来额外的空间开销。而且，当有数据被访问时，需要在链表上把该数据移动到 MRU 端，如果有大量数据被访问，就会带来很多链表移动操作，会很耗时，进而会降低 Redis 缓存性能。</p><p>所以，在 Redis 中，LRU 算法被做了简化，以减轻数据淘汰对缓存性能的影响。具体来说：Redis 默认会记录每个数据的最近一次访问的时间戳（由键值对数据结构 RedisObject 中的 lru 字段记录）。然后，Redis 在决定淘汰的数据时，第一次会随机选出 N 个数据，把它们作为一个候选集合。接下来，Redis 会比较这 N 个数据的 lru 字段，把 lru 字段值最小的数据从缓存中淘汰出去。当需要再次淘汰数据时，Redis 需要挑选数据进入第一次淘汰时创建的候选集合。这里的挑选标准是：能进入候选集合的数据的 lru 字段值必须小于候选集合中最小的 lru 值。当有新数据进入候选数据集后，如果候选数据集中的数据个数达到了 N 个，Redis 就把候选数据集中 lru 字段值最小的数据淘汰出去。这样一来，Redis 缓存不用为所有的数据维护一个大链表，也不用在每次数据访问时都移动链表项，提升了缓存的性能。</p><p>Redis 提供了一个配置参数 maxmemory-samples，这个参数就是 Redis 选出的数据个数 N。例如，我们执行如下命令，可以让 Redis 选出 100 个数据作为候选数据集：</p><p>CONFIG SET maxmemory-samples 100</p><p>RedisObject 的定义如下：（简单理解为一个 key-value）</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> lru<span class="token operator">:</span>LRU_BITS<span class="token punctuation">;</span> <span class="token comment">/* LRU time (relative to global lru_clock) or                            * LFU data (least significant 8 bits frequency                            * and most significant 16 bits access time). */</span>    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> robj<span class="token punctuation">;</span></code></pre><h2 id="LFU算法：-1"><a href="#LFU算法：-1" class="headerlink" title="LFU算法："></a>LFU算法：</h2><p>LFU是在Redis4.0后出现的，它的核心思想是根据key的最近被访问的频率进行淘汰，很少被访问的优先被淘汰，被访问的多的则被留下来。LFU算法能更好的表示一个key被访问的热度。假如你使用的是LRU算法，一个key很久没有被访问到，只刚刚是偶尔被访问了一次，那么它就被认为是热点数据，不会被淘汰，而有些key将来是很有可能被访问到的则被淘汰了。如果使用LFU算法则不会出现这种情况，因为使用一次并不会使一个key成为热点数据。它的使用与LRU有所区别：</p><p>LFU (Least Frequently Used) ：最近最不频繁使用，跟使用的次数有关，淘汰使用次数最少的。</p><p>LRU (Least Recently Used)：最近最少使用，跟使用的最后一次时间有关，淘汰最近使用时间离现在最久的。</p><p>LRU的最近最少使用实际上并不精确，考虑下面的情况，如果在 “|” 处删除，那么A距离的时间最久，但实际上A的使用频率要比D频繁，所以合理的淘汰策略应该是淘汰D。LFU就是为应对这种情况而生的。</p><pre class="language-none"><code class="language-none">~~~~~A~~~~~A~~~~~A~~~~A~~~~~A~~~~~A~~|~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~|​~~~~~~~~~~C~~~~~~~~~C~~~~~~~~~C~~~~~~|​~~~~~D~~~~~~~~~~D~~~~~~~~~D~~~~~~~~~D|</code></pre><p>每个波浪号代表一秒，A 每五秒，R 每两秒，C 和 D 每十秒 ， 最近被访问的字符是 D，但显然按照现有的规律，下一个被访问的更可能是 R 而不是 D。</p><p>LFU 实现比较复杂，需要考虑几个问题：</p><p>如果实现为链表，当对象被访问时按访问次数移动到链表的某个有序位置可能是低效的，因为可能存在大量访问次数相同的 key，最差情况是O(n)<br>某些 key 访问次数可能非常之大，理论上可以无限大，但实际上我们并不需要精确的访问次数<br>访问次数特别大的 key 可能以后都不再访问了，但是因为访问次数大而一直占用着内存不被淘汰，需要一个方法来逐步“驱除”（有点 LRU的意思），最简单的就是逐步衰减访问次数<br>本着能省则省的原则，Redis 只用了 24bit （server.lruclock 也是24bit）来记录上述的信息，是的不是 24byte，连32位指针都放不下！</p><p>16bit : 上一次递减时间 （解决第三个问题）</p><p>8bit : 访问次数 （解决第二个问题）</p><p>访问次数的计算如下：</p><pre class="language-c" data-language="c"><code class="language-c">uint8_t <span class="token function">LFULogIncr</span><span class="token punctuation">(</span>uint8_t counter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>RAND_MAX<span class="token punctuation">;</span>    <span class="token keyword">double</span> baseval <span class="token operator">=</span> counter <span class="token operator">-</span> LFU_INIT_VAL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>baseval <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> baseval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span>baseval<span class="token operator">*</span>server<span class="token punctuation">.</span>lfu_log_factor<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> counter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>核心就是访问次数越大，访问次数被递增的可能性越小，最大 255，可以在配置 redis.conf 中写明访问多少次递增多少。由于访问次数是有限的，所以第一个问题也被解决了，直接一个255数组或链表都可以。</p><p>16bit 部分保存的是时间戳的后16位（分钟），表示上一次递减的时间，算法是这样执行，随机采样N个key，检查递减时间，如果距离现在超过 N 分钟（可配置），则递减或者减半（如果访问次数数值比较大）。</p><p>此外，由于新加入的 key 访问次数很可能比不被访问的老 key小，为了不被马上淘汰，新key访问次数设为 5。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用Redis时，我们一般会为Redis的缓存空间设置一个大小，不会让数据无限制地放入Redis缓存中。可以使用下面命令来设定缓存的大小，比如设置为4GB：在使用Redis时，我们一般会为Redis的缓存空间设置一个大小，不会让数据无限制地放入Redis缓存中。可以使用下</summary>
      
    
    
    
    
    <category term="redis" scheme="http://wumuwumu.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis面试题</title>
    <link href="http://wumuwumu.github.io/posts/adbd2430.html"/>
    <id>http://wumuwumu.github.io/posts/adbd2430.html</id>
    <published>2021-03-28T10:00:00.000Z</published>
    <updated>2021-03-28T15:26:22.915Z</updated>
    
    <content type="html"><![CDATA[<p>什么是Redis<br>Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。</p><p>Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p><p>与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA脚本、LRU驱动事件、多种集群方案。</p><p>Redis有哪些优缺点<br>优点</p><p>读写性能优异， Redis能读的速度是110000次/s，写的速度是81000次/s。<br>支持数据持久化，支持AOF和RDB两种持久化方式。<br>支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。<br>数据结构丰富，除了支持string类型的value外还支持hash、set、zset、list等数据结构。<br>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。<br>缺点</p><p>数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。<br>Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。<br>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。<br>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。<br>为什么要用 Redis /为什么要用缓存<br>主要从“高性能”和“高并发”这两点来看待这个问题。</p><p>高性能：</p><p>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p><p>高并发：</p><p>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</p><p>为什么要用 Redis 而不用 map/guava 做缓存?<br>缓存分为本地缓存和分布式缓存。以 Java 为例，使用自带的 map 或者 guava 实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。</p><p>使用 redis 或 memcached 之类的称为分布式缓存，在多实例的情况下，各实例共用一份缓存数据，缓存具有一致性。缺点是需要保持 redis 或 memcached服务的高可用，整个程序架构上较为复杂。</p><p>Redis为什么这么快<br>1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是O(1)；</p><p>2、数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</p><p>3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p><p>4、使用多路 I/O 复用模型，非阻塞 IO；</p><p>5、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</p><p>数据类型<br>Redis有哪些数据类型<br>Redis主要有5种数据类型，包括String，List，Set，Zset，Hash，满足大部分的使用要求</p><p>数据类型    可以存储的值    操作    应用场景<br>STRING    字符串、整数或者浮点数    对整个字符串或者字符串的其中一部分执行操作<br>对整数和浮点数执行自增或者自减操作    做简单的键值对缓存<br>LIST    列表    从两端压入或者弹出元素<br>对单个或者多个元素进行修剪，<br>只保留一个范围内的元素    存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类的数据<br>SET    无序集合    添加、获取、移除单个元素<br>检查一个元素是否存在于集合中<br>计算交集、并集、差集<br>从集合里面随机获取元素    交集、并集、差集的操作，比如交集，可以把两个人的粉丝列表整一个交集<br>HASH    包含键值对的无序散列表    添加、获取、移除单个键值对<br>获取所有键值对<br>检查某个键是否存在    结构化的数据，比如一个对象<br>ZSET    有序集合    添加、获取、删除元素<br>根据分值范围或者成员来获取元素<br>计算一个键的排名    去重但可以排序，如获取排名前几名的用户<br>Redis的应用场景<br>总结一</p><p>计数器</p><p>可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p><p>缓存</p><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p><p>会话缓存</p><p>可以使用 Redis 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p><p>全页缓存（FPC）</p><p>除基本的会话token之外，Redis还提供很简便的FPC平台。以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><p>查找表</p><p>例如 DNS 记录就很适合使用 Redis 进行存储。查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p><p>消息队列(发布/订阅功能)</p><p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息。不过最好使用 Kafka、RabbitMQ 等消息中间件。</p><p>分布式锁实现</p><p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p><p>其它</p><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。ZSet 可以实现有序性操作，从而实现排行榜等功能。</p><p>总结二</p><p>Redis相比其他缓存，有一个非常大的优势，就是支持多种数据类型。</p><p>数据类型说明string字符串，最简单的k-v存储hashhash格式，value为field和value，适合ID-Detail这样的场景。list简单的list，顺序列表，支持首位或者末尾插入数据set无序list，查找速度快，适合交集、并集、差集处理sorted set有序的set</p><p>其实，通过上面的数据类型的特性，基本就能想到合适的应用场景了。</p><p>string——适合最简单的k-v存储，类似于memcached的存储结构，短信验证码，配置信息等，就用这种类型来存储。</p><p>hash——一般key为ID或者唯一标示，value对应的就是详情了。如商品详情，个人信息详情，新闻详情等。</p><p>list——因为list是有序的，比较适合存储一些有序且数据相对固定的数据。如省市区表、字典表等。因为list是有序的，适合根据写入的时间来排序，如：最新的***，消息队列等。</p><p>set——可以简单的理解为ID-List的模式，如微博中一个人有哪些好友，set最牛的地方在于，可以对两个set提供交集、并集、差集操作。例如：查找两个人共同的好友等。</p><p>Sorted Set——是set的增强版本，增加了一个score参数，自动会根据score的值进行排序。比较适合类似于top 10等不根据插入的时间来排序的数据。</p><p>如上所述，虽然Redis不像关系数据库那么复杂的数据结构，但是，也能适合很多场景，比一般的缓存数据结构要多。了解每种数据结构适合的业务场景，不仅有利于提升开发效率，也能有效利用Redis的性能。</p><p>持久化<br>什么是Redis持久化？<br>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。</p><p>Redis 的持久化机制是什么？各自的优缺点？<br>Redis 提供两种持久化机制 RDB（默认） 和 AOF 机制:</p><p>RDB：是Redis DataBase缩写快照</p><p>RDB是Redis默认的持久化方式。按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为dump.rdb。通过配置文件中的save参数来定义快照的周期。</p><p>优点：</p><p>1、只有一个文件 dump.rdb，方便持久化。<br>2、容灾性好，一个文件可以保存到安全的磁盘。<br>3、性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能<br>4.相对于数据集大时，比 AOF 的启动效率更高。<br>缺点：</p><p>1、数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候)<br>2、AOF（Append-only file)持久化方式： 是指所有的命令行记录以 redis 命令请 求协议的格式完全持久化存储)保存为 aof 文件。<br>AOF：持久化</p><p>AOF持久化(即Append Only File持久化)，则是将Redis执行的每次写命令记录到单独的日志文件中，当重启Redis会重新将持久化的日志中文件恢复数据。</p><p>当两种方式同时开启时，数据恢复Redis会优先选择AOF恢复。</p><p>优点：</p><p>1、数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次 命令操作就记录到 aof 文件中一次。<br>2、通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。<br>3、AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令 进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)<br>缺点：</p><p>1、AOF 文件比 RDB 文件大，且恢复速度慢。<br>2、数据集大的时候，比 rdb 启动效率低。<br>优缺点是什么？</p><p>AOF文件比RDB更新频率高，优先使用AOF还原数据。<br>AOF比RDB更安全也更大<br>RDB性能比AOF好<br>如果两个都配了优先加载AOF<br>如何选择合适的持久化方式<br>一般来说， 如果想达到足以媲美PostgreSQL的数据安全性，你应该同时使用两种持久化功能。在这种情况下，当 Redis 重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</p><p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失，那么你可以只使用RDB持久化。</p><p>有很多用户都只使用AOF持久化，但并不推荐这种方式，因为定时生成RDB快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快，除此之外，使用RDB还可以避免AOF程序的bug。</p><p>如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式。</p><p>Redis持久化数据和缓存怎么做扩容？<br>如果Redis被当做缓存使用，使用一致性哈希实现动态扩容缩容。</p><p>如果Redis被当做一个持久化存储使用，必须使用固定的keys-to-nodes映射关系，节点的数量一旦确定不能变化。否则的话(即Redis节点需要动态变化的情况），必须使用可以在运行时进行数据再平衡的一套系统，而当前只有Redis集群可以做到这样。</p><p>过期键的删除策略<br>Redis的过期键的删除策略<br>我们都知道，Redis是key-value数据库，我们可以设置Redis中缓存的key的过期时间。Redis的过期策略就是指当Redis中缓存的key过期了，Redis如何处理。</p><p>过期策略通常有以下三种：</p><p>定时过期：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。<br>惰性过期：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。<br>定期过期：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。<br>(expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。)<br>Redis中同时使用了惰性过期和定期过期两种过期策略。</p><p>Redis key的过期时间和永久有效分别怎么设置？<br>EXPIRE和PERSIST命令。</p><p>我们知道通过expire来设置key 的过期时间，那么对过期的数据怎么处理呢?<br>除了缓存服务器自带的缓存失效策略之外（Redis默认的有6中策略可供选择），我们还可以根据具体的业务需求进行自定义的缓存淘汰，常见的策略有两种：</p><p>定时去清理过期的缓存；</p><p>当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。</p><p>两者各有优劣，第一种的缺点是维护大量缓存的key是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！具体用哪种方案，大家可以根据自己的应用场景来权衡。</p><p>内存相关<br>MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据<br>redis内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</p><p>Redis的内存淘汰策略有哪些<br>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p><p>全局的键空间选择性移除</p><p>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。<br>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。（这个是最常用的）<br>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。<br>设置过期时间的键空间选择性移除</p><p>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。<br>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。<br>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。<br>总结</p><p>Redis的内存淘汰策略的选取并不会影响过期的key的处理。内存淘汰策略用于处理内存不足时的需要申请额外空间的数据；过期策略用于处理过期的缓存数据。</p><p>Redis主要消耗什么物理资源？<br>内存。</p><p>Redis的内存用完了会发生什么？<br>如果达到设置的上限，Redis的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以配置内存淘汰机制，当Redis达到内存上限时会冲刷掉旧的内容。</p><p>Redis如何做内存优化？<br>可以好好利用Hash,list,sorted set,set等集合类型数据，因为通常情况下很多小的Key-Value可以用更紧凑的方式存放到一起。尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key，而是应该把这个用户的所有信息存储到一张散列表里面</p><p>线程模型<br>Redis线程模型<br>Redis基于Reactor模式开发了网络事件处理器，这个处理器被称为文件事件处理器（file event handler）。它的组成结构为4部分：多个套接字、IO多路复用程序、文件事件分派器、事件处理器。因为文件事件分派器队列的消费是单线程的，所以Redis才叫单线程模型。</p><p>文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字， 并根据套接字目前执行的任务来为套接字关联不同的事件处理器。<br>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时， 与操作相对应的文件事件就会产生， 这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。<br>虽然文件事件处理器以单线程方式运行， 但通过使用 I/O 多路复用程序来监听多个套接字， 文件事件处理器既实现了高性能的网络通信模型， 又可以很好地与 redis 服务器中其他同样以单线程方式运行的模块进行对接， 这保持了 Redis 内部单线程设计的简单性。</p><p>参考：<a href="https://www.cnblogs.com/barrywxx/p/8570821.html">https://www.cnblogs.com/barrywxx/p/8570821.html</a></p><p>事务<br>什么是事务？<br>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p><p>Redis事务的概念<br>Redis 事务的本质是通过MULTI、EXEC、WATCH等一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p><p>总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</p><p>Redis事务的三个阶段<br>事务开始 MULTI<br>命令入队<br>事务执行 EXEC<br>事务执行过程中，如果服务端收到有EXEC、DISCARD、WATCH、MULTI之外的请求，将会把请求放入队列中排队</p><p>Redis事务相关命令<br>Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的</p><p>Redis会将一个事务中的所有命令序列化，然后按顺序执行。</p><p>redis 不支持回滚，“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”， 所以 Redis 的内部可以保持简单且快速。<br>如果在一个事务中的命令出现错误，那么所有的命令都不会执行；<br>如果在一个事务中出现运行错误，那么正确的命令会被执行。<br>WATCH 命令是一个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。 可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到EXEC命令。<br>MULTI命令用于开启一个事务，它总是返回OK。 MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当EXEC命令被调用时，所有队列中的命令才会被执行。<br>EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。<br>通过调用DISCARD，客户端可以清空事务队列，并放弃执行事务， 并且客户端会从事务状态中退出。<br>UNWATCH命令可以取消watch对所有key的监控。<br>事务管理（ACID）概述<br>原子性（Atomicity）<br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p><p>一致性（Consistency）<br>事务前后数据的完整性必须保持一致。</p><p>隔离性（Isolation）<br>多个事务并发执行时，一个事务的执行不应影响其他事务的执行</p><p>持久性（Durability）<br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p><p>Redis的事务总是具有ACID中的一致性和隔离性，其他特性是不支持的。当服务器运行在AOF持久化模式下，并且appendfsync选项的值为always时，事务也具有耐久性。</p><p>Redis事务支持隔离性吗<br>Redis 是单进程程序，并且它保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完所有事务队列中的命令为止。因此，Redis 的事务是总是带有隔离性的。</p><p>Redis事务保证原子性吗，支持回滚吗<br>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p><p>Redis事务其他实现<br>基于Lua脚本，Redis可以保证脚本内的命令一次性、按顺序地执行，<br>其同时也不提供事务运行错误的回滚，执行过程中如果部分命令运行错误，剩下的命令还是会继续运行完<br>基于中间标记变量，通过另外的标记变量来标识事务是否执行完成，读取数据时先读取该标记变量判断是否事务执行完成。但这样会需要额外写代码实现，比较繁琐<br>集群方案<br>哨兵模式</p><p>哨兵的介绍</p><p>sentinel，中文名是哨兵。哨兵是 redis 集群机构中非常重要的一个组件，主要有以下功能：</p><p>集群监控：负责监控 redis master 和 slave 进程是否正常工作。<br>消息通知：如果某个 redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。<br>故障转移：如果 master node 挂掉了，会自动转移到 slave node 上。<br>配置中心：如果故障转移发生了，通知 client 客户端新的 master 地址。<br>哨兵用于实现 redis 集群的高可用，本身也是分布式的，作为一个哨兵集群去运行，互相协同工作。</p><p>故障转移时，判断一个 master node 是否宕机了，需要大部分的哨兵都同意才行，涉及到了分布式选举的问题。<br>即使部分哨兵节点挂掉了，哨兵集群还是能正常工作的，因为如果一个作为高可用机制重要组成部分的故障转移系统本身是单点的，那就很坑爹了。<br>哨兵的核心知识</p><p>哨兵至少需要 3 个实例，来保证自己的健壮性。<br>哨兵 + redis 主从的部署架构，是不保证数据零丢失的，只能保证 redis 集群的高可用性。<br>对于哨兵 + redis 主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练。<br>官方Redis Cluster 方案(服务端路由查询)</p><p>redis 集群模式的工作原理能说一下么？在集群模式下，redis 的 key 是如何寻址的？分布式寻址都有哪些算法？了解一致性 hash 算法吗？</p><p>简介</p><p>Redis Cluster是一种服务端Sharding技术，3.0版本开始正式提供。Redis Cluster并没有使用一致性hash，而是采用slot(槽)的概念，一共分成16384个槽。将请求发送到任意节点，接收到请求的节点会将查询请求发送到正确的节点上执行</p><p>方案说明</p><p>通过哈希的方式，将数据分片，每个节点均分存储一定哈希槽(哈希值)区间的数据，默认分配了16384 个槽位<br>每份数据分片会存储在多个互为主从的多节点上<br>数据写入先写主节点，再同步到从节点(支持配置为阻塞同步)<br>同一分片多个节点间的数据不保持一致性<br>读取数据时，当客户端操作的key没有分配在该节点上时，redis会返回转向指令，指向正确的节点<br>扩容时时需要需要把旧节点的数据迁移一部分到新节点<br>在 redis cluster 架构下，每个 redis 要放开两个端口号，比如一个是 6379，另外一个就是 加1w 的端口号，比如 16379。</p><p>16379 端口号是用来进行节点间通信的，也就是 cluster bus 的东西，cluster bus 的通信，用来进行故障检测、配置更新、故障转移授权。cluster bus 用了另外一种二进制的协议，gossip 协议，用于节点间进行高效的数据交换，占用更少的网络带宽和处理时间。</p><p>节点间的内部通信机制</p><p>基本通信原理</p><p>集群元数据的维护有两种方式：集中式、Gossip 协议。redis cluster 节点间采用 gossip 协议进行通信。</p><p>分布式寻址算法</p><p>hash 算法（大量缓存重建）<br>一致性 hash 算法（自动缓存迁移）+ 虚拟节点（自动负载均衡）<br>redis cluster 的 hash slot 算法<br>优点</p><p>无中心架构，支持动态扩容，对业务透明<br>具备Sentinel的监控和自动Failover(故障转移)能力<br>客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可<br>高性能，客户端直连redis服务，免去了proxy代理的损耗<br>缺点</p><p>运维也很复杂，数据迁移需要人工干预<br>只能使用0号数据库<br>不支持批量操作(pipeline管道操作)<br>分布式逻辑和存储模块耦合等<br>基于客户端分配</p><p>简介</p><p>Redis Sharding是Redis Cluster出来之前，业界普遍使用的多Redis实例集群方法。其主要思想是采用哈希算法将Redis数据的key进行散列，通过hash函数，特定的key会映射到特定的Redis节点上。Java redis客户端驱动jedis，支持Redis Sharding功能，即ShardedJedis以及结合缓存池的ShardedJedisPool</p><p>优点</p><p>优势在于非常简单，服务端的Redis实例彼此独立，相互无关联，每个Redis实例像单服务器一样运行，非常容易线性扩展，系统的灵活性很强</p><p>缺点</p><p>由于sharding处理放到客户端，规模进一步扩大时给运维带来挑战。<br>客户端sharding不支持动态增删节点。服务端Redis实例群拓扑结构有变化时，每个客户端都需要更新调整。连接不能共享，当应用规模增大时，资源浪费制约优化<br>基于代理服务器分片</p><p>简介</p><p>客户端发送请求到一个代理组件，代理解析客户端的数据，并将请求转发至正确的节点，最后将结果回复给客户端</p><p>特征</p><p>透明接入，业务程序不用关心后端Redis实例，切换成本低<br>Proxy 的逻辑和存储的逻辑是隔离的<br>代理层多了一次转发，性能有所损耗<br>业界开源方案</p><p>Twtter开源的Twemproxy<br>豌豆荚开源的Codis<br>Redis 主从架构<br>单机的 redis，能够承载的 QPS 大概就在上万到几万不等。对于缓存来说，一般都是用来支撑读高并发的。因此架构做成主从(master-slave)架构，一主多从，主负责写，并且将数据复制到其它的 slave 节点，从节点负责读。所有的读请求全部走从节点。这样也可以很轻松实现水平扩容，支撑读高并发。</p><p>redis replication -&gt; 主从架构 -&gt; 读写分离 -&gt; 水平扩容支撑读高并发</p><p>redis replication 的核心机制</p><p>redis 采用异步方式复制数据到 slave 节点，不过 redis2.8 开始，slave node 会周期性地确认自己每次复制的数据量；<br>一个 master node 是可以配置多个 slave node 的；<br>slave node 也可以连接其他的 slave node；<br>slave node 做复制的时候，不会 block master node 的正常工作；<br>slave node 在做复制的时候，也不会 block 对自己的查询操作，它会用旧的数据集来提供服务；但是复制完成的时候，需要删除旧数据集，加载新数据集，这个时候就会暂停对外服务了；<br>slave node 主要用来进行横向扩容，做读写分离，扩容的 slave node 可以提高读的吞吐量。<br>注意，如果采用了主从架构，那么建议必须开启 master node 的持久化，不建议用 slave node 作为 master node 的数据热备，因为那样的话，如果你关掉 master 的持久化，可能在 master 宕机重启的时候数据是空的，然后可能一经过复制， slave node 的数据也丢了。</p><p>另外，master 的各种备份方案，也需要做。万一本地的所有文件丢失了，从备份中挑选一份 rdb 去恢复 master，这样才能确保启动的时候，是有数据的，即使采用了后续讲解的高可用机制，slave node 可以自动接管 master node，但也可能 sentinel 还没检测到 master failure，master node 就自动重启了，还是可能导致上面所有的 slave node 数据被清空。</p><p>redis 主从复制的核心原理</p><p>当启动一个 slave node 的时候，它会发送一个 PSYNC 命令给 master node。</p><p>如果这是 slave node 初次连接到 master node，那么会触发一次 full resynchronization 全量复制。此时 master 会启动一个后台线程，开始生成一份 RDB 快照文件，</p><p>同时还会将从客户端 client 新收到的所有写命令缓存在内存中。RDB 文件生成完毕后， master 会将这个 RDB 发送给 slave，slave 会先写入本地磁盘，然后再从本地磁盘加载到内存中，</p><p>接着 master 会将内存中缓存的写命令发送到 slave，slave 也会同步这些数据。</p><p>slave node 如果跟 master node 有网络故障，断开了连接，会自动重连，连接之后 master node 仅会复制给 slave 部分缺少的数据。</p><p>过程原理</p><p>当从库和主库建立MS关系后，会向主数据库发送SYNC命令<br>主库接收到SYNC命令后会开始在后台保存快照(RDB持久化过程)，并将期间接收到的写命令缓存起来<br>当快照完成后，主Redis会将快照文件和所有缓存的写命令发送给从Redis<br>从Redis接收到后，会载入快照文件并且执行收到的缓存的命令<br>之后，主Redis每当接收到写命令时就会将命令发送从Redis，从而保证数据的一致<br>缺点</p><p>所有的slave节点数据的复制和同步都由master节点来处理，会照成master节点压力太大，使用主从从结构来解决</p><p>Redis集群的主从复制模型是怎样的？<br>为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型，每个节点都会有N-1个复制品</p><p>生产环境中的 redis 是怎么部署的？<br>redis cluster，10 台机器，5 台机器部署了 redis 主实例，另外 5 台机器部署了 redis 的从实例，每个主实例挂了一个从实例，5 个节点对外提供读写服务，每个节点的读写高峰qps可能可以达到每秒 5 万，5 台机器最多是 25 万读写请求/s。</p><p>机器是什么配置？32G 内存+ 8 核 CPU + 1T 磁盘，但是分配给 redis 进程的是10g内存，一般线上生产环境，redis 的内存尽量不要超过 10g，超过 10g 可能会有问题。</p><p>5 台机器对外提供读写，一共有 50g 内存。</p><p>因为每个主实例都挂了一个从实例，所以是高可用的，任何一个主实例宕机，都会自动故障迁移，redis 从实例会自动变成主实例继续提供读写服务。</p><p>你往内存里写的是什么数据？每条数据的大小是多少？商品数据，每条数据是 10kb。100 条数据是 1mb，10 万条数据是 1g。常驻内存的是 200 万条商品数据，占用内存是 20g，仅仅不到总内存的 50%。目前高峰期每秒就是 3500 左右的请求量。</p><p>其实大型的公司，会有基础架构的 team 负责缓存集群的运维。</p><p>说说Redis哈希槽的概念？<br>Redis集群没有使用一致性hash,而是引入了哈希槽的概念，Redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。</p><p>Redis集群会有写操作丢失吗？为什么？<br>Redis并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。</p><p>Redis集群之间是如何复制的？<br>异步复制</p><p>Redis集群最大节点个数是多少？<br>16384个</p><p>Redis集群如何选择数据库？<br>Redis集群目前无法做数据库选择，默认在0数据库。</p><p>分区<br>Redis是单线程的，如何提高多核CPU的利用率？<br>可以在同一个服务器部署多个Redis的实例，并把他们当作不同的服务器来使用，在某些时候，无论如何一个服务器是不够的， 所以，如果你想使用多个CPU，你可以考虑一下分片（shard）。</p><p>为什么要做Redis分区？<br>分区可以让Redis管理更大的内存，Redis将可以使用所有机器的内存。如果没有分区，你最多只能使用一台机器的内存。分区使Redis的计算能力通过简单地增加计算机得到成倍提升，Redis的网络带宽也会随着计算机和网卡的增加而成倍增长。</p><p>你知道有哪些Redis分区实现方案？<br>客户端分区就是在客户端就已经决定数据会被存储到哪个redis节点或者从哪个redis节点读取。大多数客户端已经实现了客户端分区。<br>代理分区 意味着客户端将请求发送给代理，然后代理决定去哪个节点写数据或者读数据。代理根据分区规则决定请求哪些Redis实例，然后根据Redis的响应结果返回给客户端。redis和memcached的一种代理实现就是Twemproxy<br>查询路由(Query routing) 的意思是客户端随机地请求任意一个redis实例，然后由Redis将请求转发给正确的Redis节点。Redis Cluster实现了一种混合形式的查询路由，但并不是直接将请求从一个redis节点转发到另一个redis节点，而是在客户端的帮助下直接redirected到正确的redis节点。<br>Redis分区有什么缺点？<br>涉及多个key的操作通常不会被支持。例如你不能对两个集合求交集，因为他们可能被存储到不同的Redis实例（实际上这种情况也有办法，但是不能直接使用交集指令）。<br>同时操作多个key,则不能使用Redis事务.<br>分区使用的粒度是key，不能使用一个非常长的排序key存储一个数据集（The partitioning granularity is the key, so it is not possible to shard a dataset with a single huge key like a very big sorted set）<br>当使用分区的时候，数据处理会非常复杂，例如为了备份你必须从不同的Redis实例和主机同时收集RDB / AOF文件。<br>分区时动态扩容或缩容可能非常复杂。Redis集群在运行时增加或者删除Redis节点，能做到最大程度对用户透明地数据再平衡，但其他一些客户端分区或者代理分区方法则不支持这种特性。然而，有一种预分片的技术也可以较好的解决这个问题。<br>分布式问题<br>Redis实现分布式锁<br>Redis为单进程单线程模式，采用队列模式将并发访问变成串行访问，且多客户端对Redis的连接并不存在竞争关系Redis中可以使用SETNX命令实现分布式锁。</p><p>当且仅当 key 不存在，将 key 的值设为 value。 若给定的 key 已经存在，则 SETNX 不做任何动作</p><p>SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p><p>返回值：设置成功，返回 1 。设置失败，返回 0 。</p><p>使用SETNX完成同步锁的流程及事项如下：</p><p>使用SETNX命令获取锁，若返回0（key已存在，锁已存在）则获取失败，反之获取成功</p><p>为了防止获取锁后程序出现异常，导致其他线程/进程调用SETNX命令总是返回0而进入死锁状态，需要为该key设置一个“合理”的过期时间</p><p>释放锁，使用DEL命令将锁数据删除</p><p>如何解决 Redis 的并发竞争 Key 问题<br>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同！</p><p>推荐一种方案：分布式锁（zookeeper 和 redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能）</p><p>基于zookeeper临时有序节点可以实现的分布式锁。大致思想为：每个客户端对某个方法加锁时，在zookeeper上的与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点。 判断是否获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。完成业务流程后，删除对应的子节点释放锁。</p><p>在实践中，当然是从以可靠性为主。所以首推Zookeeper。</p><p>参考：<a href="https://www.jianshu.com/p/8bddd381de06">https://www.jianshu.com/p/8bddd381de06</a></p><p>分布式Redis是前期做还是后期规模上来了再做好？为什么？<br>既然Redis是如此的轻量（单实例只使用1M内存），为防止以后的扩容，最好的办法就是一开始就启动较多实例。即便你只有一台服务器，你也可以一开始就让Redis以分布式的方式运行，使用分区，在同一台服务器上启动多个实例。</p><p>一开始就多设置几个Redis实例，例如32或者64个实例，对大多数用户来说这操作起来可能比较麻烦，但是从长久来看做这点牺牲是值得的。</p><p>这样的话，当你的数据不断增长，需要更多的Redis服务器时，你需要做的就是仅仅将Redis实例从一台服务迁移到另外一台服务器而已（而不用考虑重新分区的问题）。一旦你添加了另一台服务器，你需要将你一半的Redis实例从第一台机器迁移到第二台机器。</p><p>什么是 RedLock<br>Redis 官方站提出了一种权威的基于 Redis 实现分布式锁的方式名叫 Redlock，此种方式比原先的单节点的方法更安全。它可以保证以下特性：</p><p>安全特性：互斥访问，即永远只有一个 client 能拿到锁<br>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使原本锁住某资源的 client crash 了或者出现了网络分区<br>容错性：只要大部分 Redis 节点存活就可以正常提供服务<br>缓存异常<br>缓存雪崩<br>缓存雪崩是指缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p>解决方案</p><p>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。<br>一般并发量不是特别多的时候，使用最多的解决方案是加锁排队。<br>给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。<br>缓存穿透<br>缓存穿透是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p>解决方案</p><p>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；<br>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击<br>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力<br>附加</p><p>对于空间的利用到达了一种极致，那就是Bitmap和布隆过滤器(Bloom Filter)。<br>Bitmap： 典型的就是哈希表<br>缺点是，Bitmap对于每个元素只能记录1bit信息，如果还想完成额外的功能，恐怕只能靠牺牲更多的空间、时间来完成了。</p><p>布隆过滤器（推荐）</p><p>就是引入了k(k&gt;1)k(k&gt;1)个相互独立的哈希函数，保证在给定的空间、误判率下，完成元素判重的过程。<br>它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。<br>Bloom-Filter算法的核心思想就是利用多个不同的Hash函数来解决“冲突”。<br>Hash存在一个冲突（碰撞）的问题，用同一个Hash得到的两个URL的值有可能相同。为了减少冲突，我们可以多引入几个Hash，如果通过其中的一个Hash值我们得出某元素不在集合中，那么该元素肯定不在集合中。只有在所有的Hash函数告诉我们该元素在集合中时，才能确定该元素存在于集合中。这便是Bloom-Filter的基本思想。<br>Bloom-Filter一般用于在大数据量的集合中判定某元素是否存在。</p><p>缓存击穿<br>缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><p>解决方案</p><p>设置热点数据永远不过期。<br>加互斥锁，互斥锁<br>缓存预热<br>缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><p>解决方案</p><p>直接写个缓存刷新页面，上线时手工操作一下；</p><p>数据量不大，可以在项目启动的时候自动进行加载；</p><p>定时刷新缓存；</p><p>缓存降级<br>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。</p><p>缓存降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。</p><p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：</p><p>一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</p><p>警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；</p><p>错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；</p><p>严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</p><p>服务降级的目的，是为了防止Redis服务故障，导致数据库跟着一起发生雪崩问题。因此，对于不重要的缓存数据，可以采取服务降级策略，例如一个比较常见的做法就是，Redis出现问题，不去数据库查询，而是直接返回默认值给用户。</p><p>热点数据和冷数据<br>热点数据，缓存才有价值</p><p>对于冷数据而言，大部分数据可能还没有再次访问到就已经被挤出内存，不仅占用内存，而且价值不大。频繁修改的数据，看情况考虑使用缓存</p><p>对于热点数据，比如我们的某IM产品，生日祝福模块，当天的寿星列表，缓存以后可能读取数十万次。再举个例子，某导航产品，我们将导航信息，缓存以后可能读取数百万次。</p><p>数据更新前至少读取两次，缓存才有意义。这个是最基本的策略，如果缓存还没有起作用就失效了，那就没有太大价值了。</p><p>那存不存在，修改频率很高，但是又不得不考虑缓存的场景呢？有！比如，这个读取接口对数据库的压力很大，但是又是热点数据，这个时候就需要考虑通过缓存手段，减少数据库的压力，比如我们的某助手产品的，点赞数，收藏数，分享数等是非常典型的热点数据，但是又不断变化，此时就需要将数据同步保存到Redis缓存，减少数据库压力。</p><p>缓存热点key<br>缓存中的一个Key(比如一个促销商品)，在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p>解决方案</p><p>对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询</p><p>常用工具<br>Redis支持的Java客户端都有哪些？官方推荐用哪个？<br>Redisson、Jedis、lettuce等等，官方推荐使用Redisson。</p><p>Redis和Redisson有什么关系？<br>Redisson是一个高级的分布式协调Redis客服端，能帮助用户在分布式环境中轻松实现一些Java的对象 (Bloom filter, BitSet, Set, SetMultimap, ScoredSortedSet, SortedSet, Map, ConcurrentMap, List, ListMultimap, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, ReadWriteLock, AtomicLong, CountDownLatch, Publish / Subscribe, HyperLogLog)。</p><p>Jedis与Redisson对比有什么优缺点？<br>Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持；Redisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><p>其他问题<br>Redis与Memcached的区别<br>两者都是非关系型内存键值数据库，现在公司一般都是用 Redis 来实现缓存，而且 Redis 自身也越来越强大了！Redis 与 Memcached 主要有以下不同：</p><p>对比参数    Redis    Memcached<br>类型    1. 支持内存 2. 非关系型数据库    1. 支持内存 2. 键值对形式 3. 缓存形式<br>数据存储类型    1. String 2. List 3. Set 4. Hash 5. Sort Set 【俗称ZSet】    1. 文本型 2. 二进制类型<br>查询【操作】类型    1. 批量操作 2. 事务支持 3. 每个类型不同的CRUD    1.常用的CRUD 2. 少量的其他命令<br>附加功能    1. 发布/订阅模式 2. 主从分区 3. 序列化支持 4. 脚本支持【Lua脚本】    1. 多线程服务支持<br>网络IO模型    1. 单线程的多路 IO 复用模型    1. 多线程，非阻塞IO模式<br>事件库    自封转简易事件库AeEvent    贵族血统的LibEvent事件库<br>持久化支持    1. RDB 2. AOF    不支持<br>集群模式    原生支持 cluster 模式，可以实现主从复制，读写分离    没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据<br>内存管理机制    在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘    Memcached 的数据则会一直在内存中，Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。<br>适用场景    复杂数据结构，有持久化，高可用需求，value存储内容较大    纯key-value，数据量非常大，并发量非常大的业务<br>(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</p><p>(2) redis的速度比memcached快很多</p><p>(3) redis可以持久化其数据</p><p>如何保证缓存与数据库双写时的数据一致性？<br>你只要用缓存，就可能会涉及到缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性的问题，那么你如何解决一致性问题？</p><p>一般来说，就是如果你的系统不是严格要求缓存+数据库必须一致性的话，缓存可以稍微的跟数据库偶尔有不一致的情况，最好不要做这个方案，读请求和写请求串行化，串到一个内存队列里去，这样就可以保证一定不会出现不一致的情况</p><p>串行化之后，就会导致系统的吞吐量会大幅度的降低，用比正常情况下多几倍的机器去支撑线上的一个请求。</p><p>还有一种方式就是可能会暂时产生不一致的情况，但是发生的几率特别小，就是先更新数据库，然后再删除缓存。</p><p>问题场景    描述    解决<br>先写缓存，再写数据库，缓存写成功，数据库写失败    缓存写成功，但写数据库失败或者响应延迟，则下次读取（并发读）缓存时，就出现脏读    这个写缓存的方式，本身就是错误的，需要改为先写数据库，把旧缓存置为失效；读取数据的时候，如果缓存不存在，则读取数据库再写缓存<br>先写数据库，再写缓存，数据库写成功，缓存写失败    写数据库成功，但写缓存失败，则下次读取（并发读）缓存时，则读不到数据    缓存使用时，假如读缓存失败，先读数据库，再回写缓存的方式实现<br>需要缓存异步刷新    指数据库操作和写缓存不在一个操作步骤中，比如在分布式场景下，无法做到同时写缓存或需要异步刷新（补救措施）时候    确定哪些数据适合此类场景，根据经验值确定合理的数据不一致时间，用户数据刷新的时间间隔<br>Redis常见性能问题和解决方案？<br>Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化。<br>如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。<br>为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内。<br>尽量避免在压力较大的主库上增加从库<br>Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。<br>为了Master的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关系为：Master&lt;–Slave1&lt;–Slave2&lt;–Slave3…，这样的结构也方便解决单点故障问题，实现Slave对Master的替换，也即，如果Master挂了，可以立马启用Slave1做Master，其他不变。<br>Redis官方为什么不提供Windows版本？<br>因为目前Linux版本已经相当稳定，而且用户量很大，无需开发windows版本，反而会带来兼容性等问题。</p><p>一个字符串类型的值能存储最大容量是多少？<br>512M</p><p>Redis如何做大量数据插入？<br>Redis2.6开始redis-cli支持一种新的被称之为pipe mode的新模式用于执行大量数据插入工作。</p><p>假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？<br>使用keys指令可以扫出指定模式的key列表。<br>对方接着追问：如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？<br>这个时候你要回答redis关键的一个特性：redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。</p><p>使用Redis做过异步队列吗，是如何实现的<br>使用list类型保存数据信息，rpush生产消息，lpop消费消息，当lpop没有消息时，可以sleep一段时间，然后再检查有没有信息，如果不想sleep的话，可以使用blpop, 在没有信息的时候，会一直阻塞，直到信息的到来。redis可以通过pub/sub主题订阅模式实现一个生产者，多个消费者，当然也存在一定的缺点，当消费者下线时，生产的消息会丢失。</p><p>Redis如何实现延时队列<br>使用sortedset，使用时间戳做score, 消息内容作为key,调用zadd来生产消息，消费者使用zrangbyscore获取n秒之前的数据做轮询处理。</p><p>Redis回收进程如何工作的？<br>一个客户端运行了新的命令，添加了新的数据。<br>Redis检查内存使用情况，如果大于maxmemory的限制， 则根据设定好的策略进行回收。<br>一个新的命令被执行，等等。<br>所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。<br>如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。</p><p>Redis回收使用的是什么算法？<br>LRU算法<br>————————————————<br>版权声明：本文为CSDN博主「ThinkWon」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/ThinkWon/article/details/103522351">https://blog.csdn.net/ThinkWon/article/details/103522351</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是Redis&lt;br&gt;Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。&lt;/p&gt;
&lt;p&gt;Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支</summary>
      
    
    
    
    
    <category term="redis" scheme="http://wumuwumu.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper1-安装</title>
    <link href="http://wumuwumu.github.io/posts/eb173626.html"/>
    <id>http://wumuwumu.github.io/posts/eb173626.html</id>
    <published>2021-03-05T06:00:00.000Z</published>
    <updated>2021-03-24T06:21:42.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre class="language-curl" data-language="curl"><code class="language-curl">https:&#x2F;&#x2F;zookeeper.apache.org&#x2F;releases.html</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>初次使用 ZooKeeper 时, 需要将 $ZOOKEEPER_HOME/conf 目录下的 zoo_sample.cfg 重命名为 zoo.cfg, zoo.cfg 默认配置如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># The number of milliseconds of each </span><span class="token assign-left variable">ticktickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token comment"># The number of ticks that the initial </span><span class="token comment"># synchronization phase can take</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token comment"># The number of ticks that can pass between </span><span class="token comment"># sending a request and getting an acknowledgement</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token comment"># the directory where the snapshot is stored.</span><span class="token comment"># do not use /tmp for storage, /tmp here is just </span><span class="token comment"># example sakes.dataDir=/tmp/zookeeper</span><span class="token comment"># the port at which the clients will connect</span><span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token comment"># the maximum number of client connections.</span><span class="token comment"># increase this if you need to handle more clients</span><span class="token comment">#maxClientCnxns=60</span><span class="token comment">#</span><span class="token comment"># Be sure to read the maintenance section of the </span><span class="token comment"># administrator guide before turning on autopurge.</span><span class="token comment">#</span><span class="token comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><span class="token comment">#</span><span class="token comment"># The number of snapshots to retain in dataDir</span><span class="token comment">#autopurge.snapRetainCount=3</span><span class="token comment"># Purge task interval in hours</span><span class="token comment"># Set to "0" to disable auto purge feature</span><span class="token comment">#autopurge.purgeInterval=1</span></code></pre><p>配置项说明如下:</p><ul><li>tickTime: ZooKeeper 中使用的基本时间单元, 以毫秒为单位, 默认值是 2000。它用来调节心跳和超时。例如, 默认的会话超时时间是两倍的 tickTime。</li><li>initLimit: 默认值是 10, 即 tickTime 属性值的 10 倍。它用于配置允许 followers 连接并同步到 leader 的最大时间。如果 ZooKeeper 管理的数据量很大的话可以增加这个值。</li><li>syncLimit: 默认值是 5, 即 tickTime 属性值的 5 倍。它用于配置leader 和 followers 间进行心跳检测的最大延迟时间。如果在设置的时间内 followers 无法与 leader 进行通信, 那么 followers 将会被丢弃。</li><li>dataDir: ZooKeeper 用来存储内存数据库快照的目录, 并且除非指定其它目录, 否则数据库更新的事务日志也将会存储在该目录下。建议配置 dataLogDir 参数来指定 ZooKeeper 事务日志的存储目录。</li><li>clientPort: 服务器监听客户端连接的端口, 也即客户端尝试连接的端口, 默认值是 2181。</li><li>maxClientCnxns: 在 socket 级别限制单个客户端与单台服务器之前的并发连接数量, 可以通过 IP 地址来区分不同的客户端。它用来防止某种类型的 DoS 攻击, 包括文件描述符耗尽。默认值是 60。将其设置为 0 将完全移除并发连接数的限制。</li><li>autopurge.snapRetainCount: 配置 ZooKeeper 在自动清理的时候需要保留的数据文件快照的数量和对应的事务日志文件, 默认值是 3。</li><li>autopurge.purgeInterval: 和参数 autopurge.snapRetainCount 配套使用, 用于配置 ZooKeeper 自动清理文件的频率, 默认值是 1, 即默认开启自动清理功能, 设置为 0 则表示禁用自动清理功能。</li></ul><p>更多 ZooKeeper 配置后面会写文章详细描述。</p><h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><hr><ol><li><p>zoo.cfg配置</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">ticketTime<span class="token operator">=</span><span class="token number">2000</span>clientPort<span class="token operator">=</span><span class="token number">2181</span>dataDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>datadataLogDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>logs</code></pre></li><li><p>启动 ZooKeeper 服务</p></li></ol><p>可以使用如下命令来启动 ZooKeeper 服务</p><pre class="language-css" data-language="css"><code class="language-css">zkServer.sh start</code></pre><p>服务启动信息如下:</p><p><img src="https://static.oschina.net/uploads/img/201607/09230216_6V5D.png" alt="img"></p><ol><li>验证 ZooKeeper 服务</li></ol><p>服务启动完成后, 可以使用 telnet 和 stat 命令验证服务器启动是否正常:</p><p><img src="https://static.oschina.net/uploads/img/201607/09230628_Royv.png" alt="img"></p><p>在单机模式中, Mode 的值是 “standalone”。</p><ol><li>停止 ZooKeeper 服务</li></ol><p>想要停止 ZooKeeper 服务, 可以使用如下命令:</p><pre class="language-css" data-language="css"><code class="language-css">zkServer.sh stop</code></pre><p>服务停止信息如下:</p><p><img src="https://static.oschina.net/uploads/img/201607/09231902_N5Rw.png" alt="img"></p><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><hr><ol><li>zoo.cfg配置</li></ol><p>在 master 机器上, 在单机模式的配置文件下增加了最后 5 行配置:</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">ticketTime<span class="token operator">=</span><span class="token number">2000</span>clientPort<span class="token operator">=</span><span class="token number">2181</span>dataDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>datadataLogDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>logsinitLimit<span class="token operator">=</span><span class="token number">10</span>syncLimit<span class="token operator">=</span><span class="token number">5</span>server<span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">=</span>master<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span>server<span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">=</span>slave01<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span>server<span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">=</span>slave02<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span></code></pre><p>相关配置说明:</p><ul><li><p>集群模式中, 集群中的每台机器都需要感知其它机器, 在 zoo.cfg 配置文件中, 可以按照如下格式进行配置, 每一行代表一台服务器配置:</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">server.id&#x3D;host:port:port</code></pre><p>id 被称为 Server ID, 用来标识服务器在集群中的序号。同时每台 ZooKeeper 服务器上, 都需要在数据目录(即 dataDir 指定的目录) 下创建一个 myid 文件, 该文件只有一行内容, 即对应于每台服务器的Server ID。</p></li><li><p>ZooKeeper 集群中, 每台服务器上的 zoo.cfg 配置文件内容一致。</p></li><li><p>server.1 的 myid 文件内容就是 “1”。每个服务器的 myid 内容都不同, 且需要保证和自己的 zoo.cfg 配置文件中 “server.id=host:port:port” 的 id 值一致。</p></li><li><p>id 的范围是 1 ~ 255。</p></li></ul><ol><li>创建myid文件</li></ol><p>在 dataDir 指定的目录下 (即 /opt/zookeeper/data 目录) 创建名为 myid 的文件, 文件内容和 zoo.cfg 中当前机器的 id 一致。根据上述配置, master 的 myid 文件内容为 1。</p><ol><li>slave配置</li></ol><p>按照相同步骤, 为 slave01 和 slave02 配置 zoo.cfg 和 myid 文件。zoo.cfg文件内容相同, slave01 的 myid 文件内容为 2, slave02 的 myid 文件内容为 3。</p><ol><li>集群启动</li></ol><p>在集群中的每台机器上执行以下启动命令:</p><pre class="language-css" data-language="css"><code class="language-css">zkServer.sh start</code></pre><p>启动信息如下:</p><p><img src="https://static.oschina.net/uploads/img/201607/10003352_Cbks.png" alt="img"></p><p><img src="https://static.oschina.net/uploads/img/201607/10003628_6l47.png" alt="img"></p><p>master 和 slave01 两台服务器的 Mode 值均为 follower, 表明它们在集群中的角色为 Follower。</p><p><img src="https://static.oschina.net/uploads/img/201607/10003835_gyYt.png" alt="img"></p><p>slave02 服务器的 Mode 值为 leader, 表明它在集群中的角色为 Leader。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/de90172ea680">https://www.jianshu.com/p/de90172ea680</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单机&quot;&gt;&lt;a href=&quot;#单机&quot; class=&quot;headerlink&quot; title=&quot;单机&quot;&gt;&lt;/a&gt;单机&lt;/h1&gt;&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;pre c</summary>
      
    
    
    
    
    <category term="ZooKeeper" scheme="http://wumuwumu.github.io/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>VuePress搭建文档网站</title>
    <link href="http://wumuwumu.github.io/posts/0.html"/>
    <id>http://wumuwumu.github.io/posts/0.html</id>
    <published>2021-02-27T06:00:00.000Z</published>
    <updated>2021-03-01T06:18:52.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工程构建"><a href="#工程构建" class="headerlink" title="工程构建"></a>工程构建</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> stong-user-manual <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> stong-user-manual<span class="token function">yarn</span> init<span class="token function">yarn</span> <span class="token function">add</span> -D vuepress<span class="token comment">## 按照常用插件</span><span class="token function">yarn</span> <span class="token function">add</span> -D vuepress-bar boboidream/vuepress-plugin-rpurl vuepress-plugin-permalink-pinyin<span class="token function">mkdir</span> content</code></pre><h2 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a>配置package.json</h2><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vuepress dev content"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vuepress build content"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="创建工程结构"><a href="#创建工程结构" class="headerlink" title="创建工程结构"></a>创建工程结构</h1><p><img src="http://wumu.rescreate.cn/image20210301141728.png"></p><h1 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> getConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vuepress-bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> nav<span class="token punctuation">,</span> sidebar <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"permalink-pinyin"</span><span class="token punctuation">,</span> <span class="token string">"rpurl"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  title<span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>  description<span class="token operator">:</span> <span class="token string">"description"</span><span class="token punctuation">,</span>  themeConfig<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    logo<span class="token operator">:</span> <span class="token string">"/assets/img/logo.png"</span><span class="token punctuation">,</span>    nav<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> text<span class="token operator">:</span> <span class="token string">"官网"</span><span class="token punctuation">,</span> link<span class="token operator">:</span> <span class="token string">"http://www.sciento.cn/"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">...</span>nav<span class="token punctuation">]</span><span class="token punctuation">,</span>    sidebar<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;工程构建&quot;&gt;&lt;a href=&quot;#工程构建&quot; class=&quot;headerlink&quot; title=&quot;工程构建&quot;&gt;&lt;/a&gt;工程构建&lt;/h1&gt;&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;lang</summary>
      
    
    
    
    
    <category term="公司" scheme="http://wumuwumu.github.io/tags/%E5%85%AC%E5%8F%B8/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudSentinel学习2-Nacos储存规则</title>
    <link href="http://wumuwumu.github.io/posts/88fae02d.html"/>
    <id>http://wumuwumu.github.io/posts/88fae02d.html</id>
    <published>2021-02-19T06:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.018Z</updated>
    
    <content type="html"><![CDATA[<p>要通过 Sentinel 控制台配置集群流控规则，需要对控制台进行改造。主要改造规则可以参考：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>Sentinel<span class="token operator">/</span>wiki<span class="token operator">/</span>Sentinel<span class="token operator">-</span>控制台（集群流控管理）#规则配置</code></pre><p>其控制台推送规则：</p><ul><li>将规则推送到Nacos或其他远程配置中心</li><li>Sentinel客户端链接Nacos，获取规则配置；并监听Nacos配置变化，如发生变化，就更新本地缓存。</li></ul><p>控制台监听Nacos配置变化，如发生变化就更新本地缓存。从而让控制台本地缓存总是和Nacos一致。</p><h1 id="改造Sentinel"><a href="#改造Sentinel" class="headerlink" title="改造Sentinel"></a>改造Sentinel</h1><p>下载Sentinel 源代码，然后对sentinel-dashboard模块进行改造</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>Sentinel<span class="token operator">/</span>archive<span class="token operator">/</span><span class="token number">1.7</span><span class="token number">.2</span><span class="token punctuation">.</span>zip</code></pre><ul><li>对pom.xml进行修改</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>将**<scope>test</scope>**注释掉</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><ul><li>修改java代码</li></ul><p>找到如下目录（位于test目录）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">sentinel<span class="token operator">-</span>dashboard<span class="token operator">/</span>src<span class="token operator">/</span>test<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>csp<span class="token operator">/</span>sentinel<span class="token operator">/</span>dashboard<span class="token operator">/</span>rule<span class="token operator">/</span>nacos</code></pre><p>将整个目录拷贝到</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">sentinel<span class="token operator">-</span>dashboard<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>csp<span class="token operator">/</span>sentinel<span class="token operator">/</span>dashboard<span class="token operator">/</span>rule<span class="token operator">/</span>nacos</code></pre><ul><li>修改com.alibaba.csp.sentinel.dashboard.controller.v2.FlowControllerV2.java</li></ul><p><img src="http://wumu.rescreate.cn/image20210219164606.png">修改成</p><ul><li><p><img src="http://wumu.rescreate.cn/image20210219164634.png">修改HTML页面</p></li><li><p>修改配置文件</p><ul><li><p>NacosConfig.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ConfigService</span> <span class="token function">nacosConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Properties</span> properties<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>SERVER_ADDR<span class="token punctuation">,</span> <span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>SERVER_ADDR<span class="token punctuation">,</span><span class="token string">"localhost:8848"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>NAMESPACE<span class="token punctuation">,</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>USERNAME<span class="token punctuation">,</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>PASSWORD<span class="token punctuation">,</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">ConfigFactory</span><span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>DashBoardConfig.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DashboardConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_MACHINE_HEALTHY_TIMEOUT_MS <span class="token operator">=</span> <span class="token number">60_000</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Login username     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_AUTH_USERNAME <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.auth.username"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Login password     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_AUTH_PASSWORD <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.auth.password"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Hide application name in sidebar when it has no healthy machines after specific period in millisecond.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_HIDE_APP_NO_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.app.hideAppNoMachineMillis"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Remove application when it has no healthy machines after specific period in millisecond.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_REMOVE_APP_NO_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.removeAppNoMachineMillis"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Timeout     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_UNHEALTHY_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.unhealthyMachineMillis"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Auto remove unhealthy machine after specific period in millisecond.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_AUTO_REMOVE_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.autoRemoveMachineMillis"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_SERVER_URL  <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.server"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_SERVER_NAMESPACE <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.namespace"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_USERNAME <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.username"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_PASSWORD <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.password"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// env</span>        <span class="token class-name">String</span> val <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// properties</span>        val <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> val <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> defaultVal<span class="token punctuation">,</span> <span class="token keyword">int</span> minVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token function">getConfig</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> defaultVal<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> minVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> minVal<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAuthUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_AUTH_USERNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAuthPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_AUTH_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getHideAppNoMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_HIDE_APP_NO_MACHINE_MILLIS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRemoveAppNoMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_REMOVE_APP_NO_MACHINE_MILLIS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getAutoRemoveMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_AUTO_REMOVE_MACHINE_MILLIS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getUnhealthyMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_UNHEALTHY_MACHINE_MILLIS<span class="token punctuation">,</span> DEFAULT_MACHINE_HEALTHY_TIMEOUT_MS<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cacheMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_SERVER_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_SERVER_NAMESPACE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_USERNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>sidebar.html页面</p></li></ul><p><code>sentinel-dashboard/src/main/webapp/resources/app/scripts/directives/sidebar.html</code>并找到如下代码段后，并把注释放开</p><p><img src="https://bytetrick.com/upload/2020/10/image-7bc469b8c8854cc1a61b3bd7e90fff4e.png">经过以上步骤就已经把流控规则改造成推模式持久化了。</p><ul><li><p>修改请求接口</p><p>src/main/webapp/resources/app/scripts/controllers/identity.js</p><p><img src="http://wumu.rescreate.cn/image20210220152130.png"></p></li></ul><p><strong>0x02：编译生成jar包</strong></p><p>执行命令</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">mvn clean <span class="token keyword">package</span> <span class="token operator">-</span>DskipTests</code></pre><p>编译成功后，在项目的 target 目录可以找到sentinel-dashboard.jar ，执行以下命令可以启动控制台：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">java <span class="token operator">-</span>jar sentinel<span class="token operator">-</span>dashboard<span class="token punctuation">.</span>jar</code></pre><p><strong>0x03：改造微服务</strong></p><ul><li>新建项目olive-nacos-sentinel-datasource</li></ul><p>对应的pom.xml文件引入</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span> xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>    xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>sentinel<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>olive<span class="token operator">-</span>nacos<span class="token operator">-</span>sentinel<span class="token operator">-</span>datasource<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token number">.1</span><span class="token operator">-</span><span class="token constant">SNAPSHOT</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span>packaging<span class="token operator">></span>jar<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">></span>    <span class="token operator">&lt;</span>parent<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token number">.3</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lookup parent <span class="token keyword">from</span> repository <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>olive<span class="token operator">-</span>nacos<span class="token operator">-</span>sentinel<span class="token operator">-</span>datasource<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>    <span class="token operator">&lt;</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>java<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token punctuation">.</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>sentinel<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencyManagement<span class="token operator">></span>        <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>Greenwich<span class="token punctuation">.</span><span class="token constant">SR3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>alibaba<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token number">.0</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span> <span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencyManagement<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span></code></pre><ul><li>新建SpringBoot启动类</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">package</span> com<span class="token punctuation">.</span>olive<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token comment">/** * Hello world! * */</span>@SpringBootApplication<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">String<span class="token punctuation">[</span><span class="token punctuation">]</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>class<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>创建控制器</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">package</span> com<span class="token punctuation">.</span>olive<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>@RestController<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    @<span class="token function">GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token string">"000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>修改配置文件application.yml</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">spring<span class="token operator">:</span>  application<span class="token operator">:</span>    name<span class="token operator">:</span> olive<span class="token operator">-</span>nacos<span class="token operator">-</span>sentinel<span class="token operator">-</span>datasource  cloud<span class="token operator">:</span>    sentinel<span class="token operator">:</span>      transport<span class="token operator">:</span>        dashboard<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">8080</span>      datasource<span class="token operator">:</span>        # 名称随意        flow<span class="token operator">:</span>          nacos<span class="token operator">:</span>            server<span class="token operator">-</span>addr<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">8848</span>            dataId<span class="token operator">:</span> $<span class="token punctuation">&#123;</span>spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">-</span>flow<span class="token operator">-</span>rules            groupId<span class="token operator">:</span> <span class="token constant">SENTINEL_GROUP</span>            # 规则类型，取值见：            # org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>RuleType            rule<span class="token operator">-</span>type<span class="token operator">:</span> flowserver<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">8866</span></code></pre><p><strong>0x04：验证</strong></p><p><strong>主要验证场景</strong></p><ul><li>场景1：用Sentinel控制台【菜单栏的 流控规则 V1 】推送流控规则，规则会存储到Nacos；</li><li>场景2：直接在Nacos上修改流控规则，然后刷新Sentinel控制台，控制台上的显示也会被修改；</li><li>场景3：重启Sentinel控制台，并重启微服务；刷新控制台，可以发现规则依然存在。</li></ul><p><strong>启动服务</strong></p><ul><li>Sentinel控制台</li><li>Nacos</li><li>olive-nacos-sentinel-datasource</li></ul><p><strong>Nacos中创建限流规则的配置</strong></p><p> <a href="http://127.0.0.1:8848/nacos/#/login">http://127.0.0.1:8848/nacos/#/login</a></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"resource"</span><span class="token operator">:</span> <span class="token string">"/getUser"</span><span class="token punctuation">,</span>        <span class="token string">"limitApp"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token string">"grade"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"count"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token string">"strategy"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"controlBehavior"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"clusterMode"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><p>如下图</p><p><img src="http://wumu.rescreate.cn/image20210219164855.png"><strong>访问接口（olive-nacos-sentinel-datasource服务提供的接口）</strong></p><p>​     <a href="http://localhost:8866/getUser">http://localhost:8866/getUser</a></p><p><strong>访问Sentinel控制台</strong></p><p>​     <a href="http://127.0.0.1:8080/#/login">http://127.0.0.1:8080/#/login</a></p><p><img src="http://wumu.rescreate.cn/image20210219164912.png">以上这条记录就是在Nacos中配置的限流规则。可以测试在<strong>Sentinel控制台</strong>修改规则是否同步到<strong>Nacos，</strong>或者在<strong>Nacos</strong>上修改规则是否同步到<strong>Sentinel控制台</strong>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://cloud.tencent.com/developer/article/1665816">https://cloud.tencent.com/developer/article/1665816</a></p><p><a href="https://blog.csdn.net/EnjoyEDU/article/details/109587953">https://blog.csdn.net/EnjoyEDU/article/details/109587953</a></p></blockquote><p>配置sentinel持久化nacos</p><blockquote><p><a href="https://bytetrick.com/archives/sentinel-dashboard%E6%8C%81%E4%B9%85%E5%8C%96nacos">https://bytetrick.com/archives/sentinel-dashboard%E6%8C%81%E4%B9%85%E5%8C%96nacos</a></p><p><a href="https://blog.csdn.net/u014386444/article/details/112064291">https://blog.csdn.net/u014386444/article/details/112064291</a></p><p><a href="https://www.cnblogs.com/jian0110/p/14139044.html">https://www.cnblogs.com/jian0110/p/14139044.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要通过 Sentinel 控制台配置集群流控规则，需要对控制台进行改造。主要改造规则可以参考：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot; data-language=&quot;javascript&quot;&gt;&lt;code class=&quot;language-jav</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudSentinel学习1-安装</title>
    <link href="http://wumuwumu.github.io/posts/4bd69169.html"/>
    <id>http://wumuwumu.github.io/posts/4bd69169.html</id>
    <published>2021-02-19T04:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h1><h2 id="获取-Sentinel-控制台"><a href="#获取-Sentinel-控制台" class="headerlink" title="获取 Sentinel 控制台"></a>获取 Sentinel 控制台</h2><p>您可以从 <a href="https://github.com/alibaba/Sentinel/releases">release 页面</a> 下载最新版本的控制台 jar 包。</p><p>您也可以从最新版本的源码自行构建 Sentinel 控制台：</p><ul><li>下载 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-dashboard">控制台</a> 工程</li><li>使用以下命令将代码打包成一个 fat jar: <code>mvn clean package</code></li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p><strong>注意</strong>：启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本。</p></blockquote><p>使用如下命令启动控制台：</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -Dserver.port<span class="token operator">=</span><span class="token number">8080</span> -Dcsp.sentinel.dashboard.server<span class="token operator">=</span>localhost:8080 -Dproject.name<span class="token operator">=</span>sentinel-dashboard -jar sentinel-dashboard.jar</code></pre><p>其中 <code>-Dserver.port=8080</code> 用于指定 Sentinel 控制台端口为 <code>8080</code>。</p><p>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的<strong>登录</strong>功能，默认用户名和密码都是 <code>sentinel</code>。可以参考 <a href="https://sentinelguard.io/zh-cn/docs/dashboard.html#%E9%89%B4%E6%9D%83">鉴权模块文档</a> 配置用户名和密码。</p><blockquote><p>注：若您的应用为 Spring Boot 或 Spring Cloud 应用，您可以通过 Spring 配置文件来指定配置，详情请参考 <a href="https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Sentinel">Spring Cloud Alibaba Sentinel 文档</a>。</p></blockquote><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><ul><li><p>Clone project</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;zhoutaoo&#x2F;sentinel-dashboard-docker.git</code></pre></li><li><p>Build Image</p><pre class="language-none"><code class="language-none">cd builddocker build -t cike&#x2F;sentinel-dashboard-docker .</code></pre></li><li><p>Run With docker</p></li></ul><pre class="language-none"><code class="language-none">docker run -p 8021:8021 -it cike&#x2F;sentinel-dashboard-docker</code></pre><ul><li><p>Run With docker-compose</p><pre class="language-none"><code class="language-none">docker-compose up</code></pre></li><li><p>Open the Sentinel Dashboard console in your browser</p><p>link：<a href="http://127.0.0.1:8021/">http://127.0.0.1:8021/</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;手动安装&quot;&gt;&lt;a href=&quot;#手动安装&quot; class=&quot;headerlink&quot; title=&quot;手动安装&quot;&gt;&lt;/a&gt;手动安装&lt;/h1&gt;&lt;h2 id=&quot;获取-Sentinel-控制台&quot;&gt;&lt;a href=&quot;#获取-Sentinel-控制台&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudFeign学习2-自定义负载均衡规则</title>
    <link href="http://wumuwumu.github.io/posts/287249d4.html"/>
    <id>http://wumuwumu.github.io/posts/287249d4.html</id>
    <published>2021-02-19T03:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrayMetadataRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NacosDiscoveryProperties</span> nacosDiscoveryProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NacosServiceManager</span> nacosServiceManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> iClientConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> clusterName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> group <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DynamicServerListLoadBalancer</span> loadBalancer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DynamicServerListLoadBalancer</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NamingService</span> namingService <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosServiceManager<span class="token punctuation">.</span><span class="token function">getNamingService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getNacosProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            instances <span class="token operator">=</span> namingService<span class="token punctuation">.</span><span class="token function">selectInstances</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instances <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"没有相关服务 &#123;&#125;"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到相关服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.cnblogs.com/ITPower/p/13353248.html">https://www.cnblogs.com/ITPower/p/13353248.html</a></p><p><a href="https://blog.csdn.net/forezp/article/details/74820899">https://blog.csdn.net/forezp/article/details/74820899</a></p><p><a href="https://blog.didispace.com/springcloud-sourcecode-ribbon/">https://blog.didispace.com/springcloud-sourcecode-ribbon/</a></p><p><a href="https://www.cnblogs.com/rickiyang/p/11802465.html">https://www.cnblogs.com/rickiyang/p/11802465.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h1&gt;&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-jav</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Feign添加认证请求头</title>
    <link href="http://wumuwumu.github.io/posts/6a05c2e6.html"/>
    <id>http://wumuwumu.github.io/posts/6a05c2e6.html</id>
    <published>2021-02-02T08:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.010Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Authentication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignOauth2RequestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">RequestInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AUTHORIZATION_HEADER <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> BEARER_TOKEN_TYPE <span class="token operator">=</span> <span class="token string">"Bearer"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> requestTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SecurityContext</span> securityContext <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> securityContext<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> authentication<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OAuth2AuthenticationDetails</span> details <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>AUTHORIZATION_HEADER<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> BEARER_TOKEN_TYPE<span class="token punctuation">,</span> details<span class="token punctuation">.</span><span class="token function">getTokenValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token nam</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity3-Oauth2自定义返回</title>
    <link href="http://wumuwumu.github.io/posts/2af70476.html"/>
    <id>http://wumuwumu.github.io/posts/2af70476.html</id>
    <published>2021-02-02T06:00:00.000Z</published>
    <updated>2021-02-27T06:13:13.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="token返回"><a href="#token返回" class="headerlink" title="token返回"></a>token返回</h1><h2 id="扩展参数"><a href="#扩展参数" class="headerlink" title="扩展参数"></a>扩展参数</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CusTokenConverter</span> <span class="token keyword">implements</span> <span class="token class-name">TokenEnhancer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">OAuth2AccessToken</span> <span class="token function">enhance</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AccessToken</span> accessToken<span class="token punctuation">,</span> <span class="token class-name">OAuth2Authentication</span> authentication<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> additionalInformation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"wumu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        additionalInformation<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultOAuth2AccessToken</span><span class="token punctuation">)</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAdditionalInformation</span><span class="token punctuation">(</span>additionalInformation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> accessToken<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="重新格式化返回结果"><a href="#重新格式化返回结果" class="headerlink" title="重新格式化返回结果"></a>重新格式化返回结果</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/oauth"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OauthController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TokenEndpoint</span> tokenEndpoint<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/token"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">custom</span><span class="token punctuation">(</span>tokenEndpoint<span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/token"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">postAccessToken</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span><span class="token punctuation">,</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">custom</span><span class="token punctuation">(</span>tokenEndpoint<span class="token punctuation">.</span><span class="token function">postAccessToken</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//自定义返回格式</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">custom</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AccessToken</span> accessToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DefaultOAuth2AccessToken</span> token <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultOAuth2AccessToken</span><span class="token punctuation">)</span> accessToken<span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getAdditionalInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"accessToken"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getRefreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"refreshToken"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getRefreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="认证错误"><a href="#认证错误" class="headerlink" title="认证错误"></a>认证错误</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionConfig</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@ResponseBody</span>        <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">OAuth2Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">handleOauth2</span><span class="token punctuation">(</span><span class="token class-name">OAuth2Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> map<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/u012702547/article/details/105804972">https://blog.csdn.net/u012702547/article/details/105804972</a></p><p><a href="https://juejin.cn/post/6857296054392471559">https://juejin.cn/post/6857296054392471559</a></p><p><a href="https://blog.csdn.net/u013905744/article/details/100637224">https://blog.csdn.net/u013905744/article/details/100637224</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;token返回&quot;&gt;&lt;a href=&quot;#token返回&quot; class=&quot;headerlink&quot; title=&quot;token返回&quot;&gt;&lt;/a&gt;token返回&lt;/h1&gt;&lt;h2 id=&quot;扩展参数&quot;&gt;&lt;a href=&quot;#扩展参数&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringSecurity-利用jwt生成token</title>
    <link href="http://wumuwumu.github.io/posts/46051755.html"/>
    <id>http://wumuwumu.github.io/posts/46051755.html</id>
    <published>2021-01-31T12:00:00.000Z</published>
    <updated>2021-02-27T06:13:13.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>实现Token的方式有很多，本篇介绍的是利用Json Web Token(JWT)生成的Token.JWT生成的Token有什么好处呢？</p><ul><li>安全性比较高，加上密匙加密而且支持多种算法。</li><li>携带的信息是自定义的，而且可以做到验证token是否过期。</li><li>验证信息可以由前端保存，后端不需要为保存token消耗内存。</li></ul><p>本篇分3部分进行讲解。</p><ul><li><ol><li>什么是JWT</li></ol></li><li><ol><li>JWT的代码实现<ul><li>用HS256 对称算法加密</li><li>用RS256 非对称算法加密</li></ul></li></ol></li><li><ol><li>总结</li></ol></li></ul><blockquote><p>如果原理很难懂，没关系。可以直接看JWT的代码实现。代码已经上传<a href="https://links.jianshu.com/go?to=https://github.com/MyBaron/JAVA_JWT_Token">github</a>。已经对代码进行封装成工具类。可以直接使用。</p></blockquote><h2 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h2><p>JSON Web Token 简称JWT。<br> 一个JWT实际上就是一个字符串，它由三部分组成，<code>头部</code>、<code>载荷</code>与<code>签名</code>。<br> JWT生成的token是这样的</p><pre class="language-css" data-language="css"><code class="language-css">eyJpc3MiOiJKb2huI.eyJpc3MiOiJ.Kb2huIFd1IEp</code></pre><blockquote><p>生成的token，是3段，用<code>.</code>连接。下面有解释。</p></blockquote><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。<br> 例如：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>   <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">,</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">&#125;</span></code></pre><h3 id="载荷"><a href="#载荷" class="headerlink" title="载荷"></a>载荷</h3><p>其实就是自定义的数据，一般存储用户Id，过期时间等信息。也就是JWT的核心所在，因为这些数据就是使后端知道此token是哪个用户已经登录的凭证。而且这些数据是存在token里面的，由前端携带，所以后端几乎不需要保存任何数据。<br> 例如：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"uid"</span><span class="token operator">:</span> <span class="token string">"xxxxidid"</span><span class="token punctuation">,</span>  <span class="token comment">//用户id</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token string">"12121212"</span>  <span class="token comment">//过期时间</span><span class="token punctuation">&#125;</span></code></pre><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p>签名其实就是：<br> 1.头部和载荷<code>各自base64加密后用.连接起来</code>，然后就形成了xxx.xx的前两段token。<br> 2.最后一段token的形成是，前两段加入一个密匙用HS256算法或者其他算法加密形成。</p><ol><li>所以token3段的形成就是在签名处形成的。</li></ol><blockquote><p><a href="https://links.jianshu.com/go?to=http://blog.leapoahead.com/2015/09/06/understanding-jwt/">JWT的原理参考文章</a></p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>1.看代码前一定要知道JWT是由<code>头部</code>、<code>载荷</code>与<code>签名</code>组成。<br> 2.<a href="https://links.jianshu.com/go?to=https://github.com/MyBaron/JAVA_JWT_Token">代码已上传github</a>,希望点个赞</p><ol><li>代码将JWT封装成两个工具类，可以直接调用。</li></ol><h3 id="需要下载的jar包"><a href="#需要下载的jar包" class="headerlink" title="需要下载的jar包"></a>需要下载的jar包</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.nimbusds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nimbus-jose-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="HS256-对称加密"><a href="#HS256-对称加密" class="headerlink" title="HS256  对称加密"></a>HS256  对称加密</h3><h4 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 创建秘钥    */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> SECRET <span class="token operator">=</span> <span class="token string">"6MNSobBRCHGIO0fS6MNSobBRCHGIO0fS"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/**    * 过期时间5秒    */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_TIME <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">/**    * 生成Token    * @param account    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">buildJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">/**            * 1.创建一个32-byte的密匙            */</span>           <span class="token class-name">MACSigner</span> macSigner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MACSigner</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 2. 建立payload 载体            */</span>           <span class="token class-name">JWTClaimsSet</span> claimsSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JWTClaimsSet</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">subject</span><span class="token punctuation">(</span><span class="token string">"doi"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">issuer</span><span class="token punctuation">(</span><span class="token string">"http://www.doiduoyi.com"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">expirationTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRE_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">,</span>account<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 3. 建立签名            */</span>           <span class="token class-name">SignedJWT</span> signedJWT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWSHeader</span><span class="token punctuation">(</span><span class="token class-name">JWSAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">)</span><span class="token punctuation">,</span> claimsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>           signedJWT<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>macSigner<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 4. 生成token            */</span>           <span class="token class-name">String</span> token <span class="token operator">=</span> signedJWT<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> token<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeyLengthException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="验证token"><a href="#验证token" class="headerlink" title="验证token"></a>验证token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 校验token    * @param token    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">vaildToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">SignedJWT</span> jwt <span class="token operator">=</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">JWSVerifier</span> verifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MACVerifier</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//校验是否有效</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>verifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Token 无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//校验超时</span>           <span class="token class-name">Date</span> expirationTime <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpirationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>expirationTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Token 已过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//获取载体中的数据</span>           <span class="token class-name">Object</span> account <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//是否有openUid</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"账号为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> account<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="调用的业务逻辑"><a href="#调用的业务逻辑" class="headerlink" title="调用的业务逻辑"></a>调用的业务逻辑</h4><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHS256</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TestHS256</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestHS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">testHS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试HS256加密生成Token</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> JWTHS256<span class="token punctuation">.</span><span class="token function">buildJWT</span><span class="token punctuation">(</span><span class="token string">"account123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解密token</span>        <span class="token class-name">String</span> account <span class="token operator">=</span> JWTHS256<span class="token punctuation">.</span><span class="token function">vaildToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"校验token成功，token的账号："</span><span class="token operator">+</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试过期</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account <span class="token operator">=</span> JWTHS256<span class="token punctuation">.</span><span class="token function">vaildToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><pre class="language-java" data-language="java"><code class="language-java">校验token成功，token的账号：account123测试token过期<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token operator">:</span> <span class="token class-name">Token</span> 已过期    at token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">59</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>JWTHS256<span class="token punctuation">.</span><span class="token function">vaildToken</span><span class="token punctuation">(</span>JWTHS256<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">89</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span><span class="token function">testHS256</span><span class="token punctuation">(</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span></code></pre><h3 id="RS256-非对称加密"><a href="#RS256-非对称加密" class="headerlink" title="RS256 非对称加密"></a>RS256 非对称加密</h3><h4 id="生成加密密钥"><a href="#生成加密密钥" class="headerlink" title="生成加密密钥"></a>生成加密密钥</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 创建加密key     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RSAKey</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JOSEException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RSAKeyGenerator</span> rsaKeyGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSAKeyGenerator</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RSAKey</span> rsaJWK <span class="token operator">=</span> rsaKeyGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rsaJWK<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="生成token-1"><a href="#生成token-1" class="headerlink" title="生成token"></a>生成token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 过期时间5秒    */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_TIME <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RSAKey</span> rsaKey<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RSAKey</span> publicRsaKey<span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**        * 生成公钥，公钥是提供出去，让使用者校验token的签名        */</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           rsaKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSAKeyGenerator</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           publicRsaKey <span class="token operator">=</span> rsaKey<span class="token punctuation">.</span><span class="token function">toPublicJWK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">buildToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">/**            * 1. 生成秘钥,秘钥是token的签名方持有，不可对外泄漏            */</span>           <span class="token class-name">RSASSASigner</span> rsassaSigner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSASSASigner</span><span class="token punctuation">(</span>rsaKey<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 2. 建立payload 载体            */</span>           <span class="token class-name">JWTClaimsSet</span> claimsSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JWTClaimsSet</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">subject</span><span class="token punctuation">(</span><span class="token string">"doi"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">issuer</span><span class="token punctuation">(</span><span class="token string">"http://www.doiduoyi.com"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">expirationTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRE_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">,</span>account<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 3. 建立签名            */</span>           <span class="token class-name">SignedJWT</span> signedJWT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWSHeader</span><span class="token punctuation">(</span><span class="token class-name">JWSAlgorithm</span><span class="token punctuation">.</span>RS256<span class="token punctuation">)</span><span class="token punctuation">,</span> claimsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>           signedJWT<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>rsassaSigner<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 4. 生成token            */</span>           <span class="token class-name">String</span> token <span class="token operator">=</span> signedJWT<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> token<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="验证token-1"><a href="#验证token-1" class="headerlink" title="验证token"></a>验证token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">volidToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">SignedJWT</span> jwt <span class="token operator">=</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//添加私密钥匙 进行解密</span>           <span class="token class-name">RSASSAVerifier</span> rsassaVerifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSASSAVerifier</span><span class="token punctuation">(</span>publicRsaKey<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//校验是否有效</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>rsassaVerifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Token 无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//校验超时</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpirationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Token 已过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//获取载体中的数据</span>           <span class="token class-name">Object</span> account <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//是否有openUid</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"账号为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> account<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="业务逻辑调用"><a href="#业务逻辑调用" class="headerlink" title="业务逻辑调用"></a>业务逻辑调用</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRS256</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TestRS256</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestRS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">testRS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试RS256加密生成Token</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> JWTRSA256<span class="token punctuation">.</span><span class="token function">buildToken</span><span class="token punctuation">(</span><span class="token string">"account123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解密token</span>        <span class="token class-name">String</span> account <span class="token operator">=</span> JWTRSA256<span class="token punctuation">.</span><span class="token function">volidToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"校验token成功，token的账号："</span><span class="token operator">+</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试过期</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account <span class="token operator">=</span> JWTRSA256<span class="token punctuation">.</span><span class="token function">volidToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><pre class="language-java" data-language="java"><code class="language-java">校验token成功，token的账号：account123测试token过期<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token operator">:</span> <span class="token class-name">Token</span> 已过期    at token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">59</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>JWTRSA256<span class="token punctuation">.</span><span class="token function">volidToken</span><span class="token punctuation">(</span>JWTRSA256<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">96</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span><span class="token function">testRS256</span><span class="token punctuation">(</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JWT 的实践其实还是挺简单。安全性也是得到了保证，后端只需要保存着密匙，其他数据可以保存在token，由前端携带，这样可以减低后端的内存消耗。<br> 虽然token是加密的，但是携带的验证数据还是不要是敏感数据.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h2&gt;&lt;p&gt;实现Token的方式有很多，本篇介绍的是利用Json Web Token(JWT)生成的Token.JWT生成的Token有什么好处呢？&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis持久化</title>
    <link href="http://wumuwumu.github.io/posts/dcfaa904.html"/>
    <id>http://wumuwumu.github.io/posts/dcfaa904.html</id>
    <published>2021-01-29T04:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.023Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://redis.io/">Redis</a>有两种持久化的方式：快照（<code>RDB</code>文件）和追加式文件（<code>AOF</code>文件）：</p><ul><li>RDB持久化方式会在一个特定的间隔保存那个时间点的一个数据快照。</li><li>AOF持久化方式则会记录每一个服务器收到的写操作。在服务启动时，这些记录的操作会逐条执行从而重建出原来的数据。写操作命令记录的格式跟Redis协议一致，以追加的方式进行保存。</li><li>Redis的持久化是可以禁用的，就是说你可以让数据的生命周期只存在于服务器的运行时间里。</li><li>两种方式的持久化是可以同时存在的，但是当Redis重启时，AOF文件会被优先用于重建数据。</li></ul><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>Redis调用fork()，产生一个子进程。</li><li>子进程把数据写到一个临时的RDB文件。</li><li>当子进程写完新的RDB文件后，把旧的RDB文件替换掉。</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>RDB文件是一个很简洁的单文件，它保存了某个时间点的Redis数据，很适合用于做备份。你可以设定一个时间点对RDB文件进行归档，这样就能在需要的时候很轻易的把数据恢复到不同的版本。</li><li>基于上面所描述的特性，RDB很适合用于灾备。单文件很方便就能传输到远程的服务器上。</li><li>RDB的性能很好，需要进行持久化时，主进程会fork一个子进程出来，然后把持久化的工作交给子进程，自己不会有相关的I/O操作。</li><li>比起AOF，在数据量比较大的情况下，RDB的启动速度更快。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>RDB容易造成数据的丢失。假设每5分钟保存一次快照，如果Redis因为某些原因不能正常工作，那么从上次产生快照到Redis出现问题这段时间的数据就会丢失了。</li><li>RDB使用<code>fork()</code>产生子进程进行数据的持久化，如果数据比较大的话可能就会花费点时间，造成Redis停止服务几毫秒。如果数据量很大且CPU性能不是很好的时候，停止服务的时间甚至会到1秒。</li></ul><h3 id="文件路径和名称"><a href="#文件路径和名称" class="headerlink" title="文件路径和名称"></a>文件路径和名称</h3><p>默认Redis会把快照文件存储为当前目录下一个名为<code>dump.rdb</code>的文件。要修改文件的存储路径和名称，可以通过修改配置文件<code>redis.conf</code>实现：</p><pre class="language-none"><code class="language-none"># RDB文件名，默认为dump.rdb。dbfilename dump.rdb# 文件存放的目录，AOF文件同样存放在此目录下。默认为当前工作目录。dir .&#x2F;</code></pre><h3 id="保存点（RDB的启用和禁用）"><a href="#保存点（RDB的启用和禁用）" class="headerlink" title="保存点（RDB的启用和禁用）"></a>保存点（RDB的启用和禁用）</h3><p>你可以配置保存点，使Redis如果在每N秒后数据发生了M次改变就保存快照文件。例如下面这个保存点配置表示每60秒，如果数据发生了1000次以上的变动，Redis就会自动保存快照文件：</p><pre class="language-none"><code class="language-none">save 60 1000</code></pre><p>保存点可以设置多个，Redis的配置文件就默认设置了3个保存点：</p><pre class="language-none"><code class="language-none"># 格式为：save &lt;seconds&gt; &lt;changes&gt;# 可以设置多个。save 900 1 #900秒后至少1个key有变动save 300 10 #300秒后至少10个key有变动save 60 10000 #60秒后至少10000个key有变动</code></pre><p>如果想禁用快照保存的功能，可以通过注释掉所有”save”配置达到，或者在最后一条”save”配置后添加如下的配置：</p><pre class="language-none"><code class="language-none">save &quot;&quot;</code></pre><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>默认情况下，如果Redis在后台生成快照的时候失败，那么就会停止接收数据，目的是让用户能知道数据没有持久化成功。但是如果你有其他的方式可以监控到Redis及其持久化的状态，那么可以把这个功能禁止掉。</p><pre class="language-none"><code class="language-none">stop-writes-on-bgsave-error yes</code></pre><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><p>默认Redis会采用<code>LZF</code>对数据进行压缩。如果你想节省点CPU的性能，你可以把压缩功能禁用掉，但是数据集就会比没压缩的时候要打。</p><pre class="language-none"><code class="language-none">rdbcompression yes</code></pre><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><p>从版本5的RDB的开始，一个<code>CRC64</code>的校验码会放在文件的末尾。这样更能保证文件的完整性，但是在保存或者加载文件时会损失一定的性能（大概10%）。如果想追求更高的性能，可以把它禁用掉，这样文件在写入校验码时会用<code>0</code>替代，加载的时候看到<code>0</code>就会直接跳过校验。</p><pre class="language-none"><code class="language-none">rdbchecksum yes</code></pre><h3 id="手动生成快照"><a href="#手动生成快照" class="headerlink" title="手动生成快照"></a>手动生成快照</h3><p>Redis提供了两个命令用于手动生成快照。</p><h4 id="SAVE"><a href="#SAVE" class="headerlink" title="SAVE"></a>SAVE</h4><p><a href="http://redis.io/commands/save">SAVE</a>命令会使用同步的方式生成RDB快照文件，这意味着在这个过程中会阻塞所有其他客户端的请求。因此不建议在生产环境使用这个命令，除非因为某种原因需要去阻止Redis使用子进程进行后台生成快照（例如调用<code>fork(2)</code>出错）。</p><h4 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h4><p><a href="http://redis.io/commands/bgsave">BGSAVE</a>命令使用后台的方式保存RDB文件，调用此命令后，会立刻返回<code>OK</code>返回码。Redis会产生一个子进程进行处理并立刻恢复对客户端的服务。在客户端我们可以使用<a href="http://redis.io/commands/lastsave">LASTSAVE</a>命令查看操作是否成功。</p><pre class="language-none"><code class="language-none">127.0.0.1:6379&gt; BGSAVEBackground saving started127.0.0.1:6379&gt; LASTSAVE(integer) 1433936394</code></pre><blockquote><p>配置文件里禁用了快照生成功能不影响<code>SAVE</code>和<code>BGSAVE</code>命令的效果。</p></blockquote><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>快照并不是很可靠。如果你的电脑突然宕机了，或者电源断了，又或者不小心杀掉了进程，那么最新的数据就会丢失。而AOF文件则提供了一种更为可靠的持久化方式。每当Redis接受到会修改数据集的命令时，就会把命令追加到AOF文件里，当你重启Redis时，AOF里的命令会被重新执行一次，重建数据。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>比RDB可靠。你可以制定不同的fsync策略：不进行fsync、每秒fsync一次和每次查询进行fsync。默认是每秒fsync一次。这意味着你最多丢失一秒钟的数据。</li><li>AOF日志文件是一个纯追加的文件。就算是遇到突然停电的情况，也不会出现日志的定位或者损坏问题。甚至如果因为某些原因（例如磁盘满了）命令只写了一半到日志文件里，我们也可以用<code>redis-check-aof</code>这个工具很简单的进行修复。</li><li>当AOF文件太大时，Redis会自动在后台进行重写。重写很安全，因为重写是在一个新的文件上进行，同时Redis会继续往旧的文件追加数据。新文件上会写入能重建当前数据集的最小操作命令的集合。当新文件重写完，Redis会把新旧文件进行切换，然后开始把数据写到新文件上。</li><li>AOF把操作命令以简单易懂的格式一条接一条的保存在文件里，很容易导出来用于恢复数据。例如我们不小心用<code>FLUSHALL</code>命令把所有数据刷掉了，只要文件没有被重写，我们可以把服务停掉，把最后那条命令删掉，然后重启服务，这样就能把被刷掉的数据恢复回来。</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>在相同的数据集下，AOF文件的大小一般会比RDB文件大。</li><li>在某些fsync策略下，AOF的速度会比RDB慢。通常fsync设置为每秒一次就能获得比较高的性能，而在禁止fsync的情况下速度可以达到RDB的水平。</li><li>在过去曾经发现一些很罕见的BUG导致使用AOF重建的数据跟原数据不一致的问题。</li></ul><h3 id="启用AOF"><a href="#启用AOF" class="headerlink" title="启用AOF"></a>启用AOF</h3><p>把配置项<code>appendonly</code>设为<code>yes</code>：</p><pre class="language-none"><code class="language-none">appendonly yes</code></pre><h3 id="文件路径和名称-1"><a href="#文件路径和名称-1" class="headerlink" title="文件路径和名称"></a>文件路径和名称</h3><pre class="language-none"><code class="language-none"># 文件存放目录，与RDB共用。默认为当前工作目录。dir .&#x2F;# 默认文件名为appendonly.aofappendfilename &quot;appendonly.aof&quot;</code></pre><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>你可以配置Redis调用fsync的频率，有三个选项：</p><ul><li>每当有新命令追加到AOF的时候调用fsync。速度最慢，但是最安全。</li><li>每秒fsync一次。速度快（2.4版本跟快照方式速度差不多），安全性不错（最多丢失1秒的数据）。</li><li>从不fsync，交由系统去处理。这个方式速度最快，但是安全性一般。</li></ul><p>推荐使用每秒fsync一次的方式（默认的方式），因为它速度快，安全性也不错。相关配置如下：</p><pre class="language-none"><code class="language-none"># appendfsync alwaysappendfsync everysec# appendfsync no</code></pre><h3 id="日志重写"><a href="#日志重写" class="headerlink" title="日志重写"></a>日志重写</h3><p>随着写操作的不断增加，AOF文件会越来越大。例如你递增一个计数器100次，那么最终结果就是数据集里的计数器的值为最终的递增结果，但是AOF文件里却会把这100次操作完整的记录下来。而事实上要恢复这个记录，只需要1个命令就行了，也就是说AOF文件里那100条命令其实可以精简为1条。所以Redis支持这样一个功能：在不中断服务的情况下在后台重建AOF文件。</p><p>工作原理如下：</p><ul><li>Redis调用fork()，产生一个子进程。</li><li>子进程把新的AOF写到一个临时文件里。</li><li>主进程持续把新的变动写到内存里的buffer，同时也会把这些新的变动写到旧的AOF里，这样即使重写失败也能保证数据的安全。</li><li>当子进程完成文件的重写后，主进程会获得一个信号，然后把内存里的buffer追加到子进程生成的那个新AOF里。</li><li>Redis</li></ul><p>我们可以通过配置设置日志重写的条件：</p><pre class="language-none"><code class="language-none"># Redis会记住自从上一次重写后AOF文件的大小（如果自Redis启动后还没重写过，则记住启动时使用的AOF文件的大小）。# 如果当前的文件大小比起记住的那个大小超过指定的百分比，则会触发重写。# 同时需要设置一个文件大小最小值，只有大于这个值文件才会重写，以防文件很小，但是已经达到百分比的情况。auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb</code></pre><p>要禁用自动的日志重写功能，我们可以把百分比设置为0：</p><pre class="language-none"><code class="language-none">auto-aof-rewrite-percentage 0</code></pre><blockquote><p>Redis 2.4以上才可以自动进行日志重写，之前的版本需要手动运行<a href="http://redis.io/commands/bgrewriteaof">BGREWRITEAOF</a>这个命令。</p></blockquote><h3 id="数据损坏修复"><a href="#数据损坏修复" class="headerlink" title="数据损坏修复"></a>数据损坏修复</h3><p>如果因为某些原因（例如服务器崩溃）AOF文件损坏了，导致Redis加载不了，可以通过以下方式进行修复：</p><ul><li><p>备份AOF文件。</p></li><li><p>使用<code>redis-check-aof</code>命令修复原始的AOF文件：</p><pre class="language-none"><code class="language-none">$ redis-check-aof --fix</code></pre></li><li><p>可以使用<code>diff -u</code>命令看下两个文件的差异。</p></li><li><p>使用修复过的文件重启Redis服务。</p></li></ul><h3 id="从RDB切换到AOF"><a href="#从RDB切换到AOF" class="headerlink" title="从RDB切换到AOF"></a>从RDB切换到AOF</h3><p>这里只说Redis &gt;= 2.2版本的方式：</p><ul><li><p>备份一个最新的<code>dump.rdb</code>的文件，并把备份文件放在一个安全的地方。</p></li><li><p>运行以下两条命令：</p><pre class="language-none"><code class="language-none">$ redis-cli config set appendonly yes$ redis-cli config set save &quot;&quot;</code></pre></li><li><p>确保数据跟切换前一致。</p></li><li><p>确保数据正确的写到AOF文件里。</p></li></ul><blockquote><p>第二条命令是用来禁用RDB的持久化方式，但是这不是必须的，因为你可以同时启用两种持久化方式。</p></blockquote><blockquote><p>记得对配置文件<code>redis.conf</code>进行编辑启用AOF，因为命令行方式修改配置在重启Redis后就会失效。</p></blockquote><h1 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h1><h2 id="持久化配置"><a href="#持久化配置" class="headerlink" title="持久化配置"></a>持久化配置</h2><ul><li>RBD和AOF建议同时打开（Redis4.0之后支持）</li><li>RDB做冷备，AOF做数据恢复（数据更可靠）</li><li>RDB采取默认配置即可，AOF推荐采取everysec每秒策略</li></ul><p>AOF和RDB还不懂的，请转移到如下几篇：</p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247492839&idx=1&sn=c205eb385b0b1255f1ef9c8b3e3b4b6d&chksm=ebd5dbcbdca252dd677f470e4f2df3578c952015c312246d0171b126e3b1fd007d277e96f602&scene=21#wechat_redirect">看完这篇还不懂Redis的RDB持久化，你们来打我！</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247492865&idx=1&sn=00904394aa074df14bb65a14a56e1ffe&chksm=ebd5da2ddca2533ba1e3d20fd82b8acee93fc75199e9c10e38b62387ca0579c80390f72e3bbd&scene=21#wechat_redirect">天天在用Redis，那你对Redis的AOF持久化到底了解多少呢？</a></p><h2 id="数据备份方案"><a href="#数据备份方案" class="headerlink" title="数据备份方案"></a>数据备份方案</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>我们需要定时备份rdb文件来做冷备，为什么？不是有aof和rbd了吗为什么还要单独写定时任务去备份？因为Redis的aof和rdb是仅仅有一个最新的，比如谁手贱再Redis宕机的时候执行<code>rm -rf aof/rdb</code>了，那不就GG了吗？或者rdb/aof文件损坏了等不可预期的情况。所以我们需要单独备份rdb文件以防万一。</p><p>为什么不定时备份aof而是rdb？定时备份aof没意义呀，<strong>定时</strong>本身就是冷备份，不是实时的，rdb文件又小恢复又快，她哪里不香？</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ul><li>写crontab定时调度脚本去做数据备份。</li><li>每小时都copy一份redis的rdb文件到一个其他目录中，这个目录里的rdb文件仅仅保留48小时内的。也就是每小时都做备份，保留2天内的rdb，只保留48个rdb。</li><li>每天0点0分copy一份redis的rdb文件到一个其他目录中，这个保留一个月的。也就是按天备份。</li><li>每天半夜找个时间将当前服务上的所有rdb备份都上传到云服务上。</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="按小时"><a href="#按小时" class="headerlink" title="按小时"></a>按小时</h4><blockquote><p>每小时copy一次备份，删除48小时前的数据。</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> -e<span class="token comment"># 每小时都执行/usr/local/redis/copy/redis_rdb_copy_hourly.sh脚本</span><span class="token number">0</span> * * * * <span class="token function">sh</span> /usr/local/redis/copy/redis_rdb_copy_hourly.sh<span class="token comment"># redis_rdb_copy_hourly.sh脚本的内容如下：</span><span class="token comment">#!/bin/sh </span><span class="token comment"># +%Y%m%d%k == 年月日时</span><span class="token assign-left variable">cur_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d%k<span class="token variable">`</span></span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token function">mkdir</span> /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># 拷贝rdb到目录</span><span class="token function">cp</span> /var/redis/6379/dump.rdb /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># date -d -48hour +%Y%m%d%k == 48小时前的日期，比如今天2020060214，这个结果就是2020053114</span><span class="token assign-left variable">del_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d -48hour +%Y%m%d%k<span class="token variable">`</span></span><span class="token comment"># 删除48小时之前的目录</span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$del_date</span></code></pre><h3 id="按天"><a href="#按天" class="headerlink" title="按天"></a>按天</h3><blockquote><p>每天copy一次备份，删除一个月前的数据。</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> -e<span class="token comment"># 每天0点0分开始执行/usr/local/redis/copy/redis_rdb_copy_daily.sh脚本</span><span class="token number">0</span> <span class="token number">0</span> * * * <span class="token function">sh</span> /usr/local/redis/copy/redis_rdb_copy_daily.sh<span class="token comment"># redis_rdb_copy_daily.sh脚本的内容如下：</span><span class="token comment">#!/bin/sh </span><span class="token comment"># 年月日</span><span class="token assign-left variable">cur_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d<span class="token variable">`</span></span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token function">mkdir</span> /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># 拷贝rdb到目录</span><span class="token function">cp</span> /var/redis/6379/dump.rdb /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># 获取一个月前的时间，比如今天是20200602，那么del_date就是20200502</span><span class="token assign-left variable">del_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d -1month +%Y%m%d<span class="token variable">`</span></span><span class="token comment"># 删除一个月前的数据</span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$del_date</span></code></pre><h3 id="传到云"><a href="#传到云" class="headerlink" title="传到云"></a>传到云</h3><p>没法演示，最终目的就是磁盘备份完上传到云，云保留多少天等策略自己看需求。</p><h2 id="数据恢复方案"><a href="#数据恢复方案" class="headerlink" title="数据恢复方案"></a>数据恢复方案</h2><h3 id="redis挂了"><a href="#redis挂了" class="headerlink" title="redis挂了"></a>redis挂了</h3><p>如果仅仅是redis进程挂了，那么直接重启redis进程即可，Redis会按照持久化配置直接基于持久化文件进行恢复数据。</p><p>如果有AOF则按照AOF，AOF和RDB一起开的话也走AOF。</p><h3 id="持久化文件丢了"><a href="#持久化文件丢了" class="headerlink" title="持久化文件丢了"></a>持久化文件丢了</h3><p>如果持久化文件（rdb/aof）损坏了，或者直接丢失了。那么就要采取我们上面所做的rdb备份来进行恢复了。</p><blockquote><p>不要脑子一热想着很简单，就以为直接把rdb拖过来重启redis进程就完事了，这种想法有很多问题。慢慢道来。</p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>问题一：直接把备份的rdb扔到redis持久化目录下然后重启redis不行的原因在于：redis是按照先aof后rdb进行恢复的，所以都是开启aof的，redis启动后会重新生成新的aof文件，里面是空的。所以不会进行任何数据恢复，也就是说虽然你把rdb丢给redis了，但是redis会按照aof来恢复，而aof是redis启动的时候新生成的空文件，所以不会有任何数据进行恢复。</p><p>问题二：那么我们把rdb文件丢给redis后，先将redis的aof关闭再启动redis进程不就能按照rdb来进行恢复了吗？是这样的，没毛病！但是新的问题来了，我们aof肯定要开的，aof对数据保障更可靠。那什么我们按照rdb文件恢复完后再修改redis配置文件开启aof然后重启redis进程不就得了嘛？大哥…你打开aof然后重启redis，这时候redis又会生成一个空的aof文件，这时候恢复的时候又是啥数据都没了。</p><blockquote><p>因为数据是存到内存里，你重启后肯定没了，需要持久化文件来恢复。这时候aof是空的，我恢复个鸡毛啊。</p></blockquote><h3 id="具体方案-1"><a href="#具体方案-1" class="headerlink" title="具体方案"></a>具体方案</h3><blockquote><p>可能有人想到方案了，但是耐心看完，看看我的文采如何。</p></blockquote><p>我不管你是持久化文件丢了还是坏了，我都先<code>rm -rf *</code> 给他删了。</p><ul><li>停止redis进程</li><li>删除坏掉的rdb和aof持久化文件。</li><li>修改配置文件关闭redis的aof持久化。</li><li>找到最新备份的rdb文件扔到redis的持久化目录里。（这里最新的肯定是按照小时备份的最后一个）</li><li>启动Redis进程</li><li>执行<code>set appendonly yes</code>动态打开aof持久化。</li></ul><blockquote><p>也就是说打开aof的操作不是修改配置文件然后重启，而是先热修改让他生成aof，这次生成肯定是会带着内存中完整的数据的。然后再修改配置文件重启。</p></blockquote><ul><li>等aof文件生成后再修改redis配置文件打开aof。</li><li>重启redis进程。</li><li>完美收官。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;有两种持久化的方式：快照（&lt;code&gt;RDB&lt;/code&gt;文件）和追加式文件（&lt;code&gt;AOF&lt;/code&gt;文件）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB持久化方式会在一个特定的间隔保存那个时间点的一个数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis基本操作</title>
    <link href="http://wumuwumu.github.io/posts/2a3c893b.html"/>
    <id>http://wumuwumu.github.io/posts/2a3c893b.html</id>
    <published>2021-01-29T03:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.022Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t0">Redis 基本(basic)命令</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t1">Redis 键(key)命令</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t2">Redis 数据类型概述</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t3">Redis 字符串(String)</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t4">Redis 哈希（Hash）</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t5">Redis 列表(List)</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t6">Redis 集合(Set)</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t7">Redis 有序集合(sorted set)</a></p><hr><h1 id="Redis-基本-basic-命令"><a href="#Redis-基本-basic-命令" class="headerlink" title="Redis 基本(basic)命令"></a>Redis 基本(basic)命令</h1><p>1、Redis 命令用于在 redis 服务上执行操作，要在 redis 服务上执行命令需要一个 redis 客户端。安装目录下的 redis-cli 就是自带的测试客户端。</p><p>命令行启动自带的 redis-cli 客户端连接到本地的 redis 服务：redis-cli连接远程 redis 服务器：redis-cli -h host -p port -a password</p><table><thead><tr><th><strong>PING</strong></th><th>用于检测 redis 服务是否启动,连接是否正常，连接成功时返回 PONG</th></tr></thead><tbody><tr><td>select index</td><td>Redis Select 命令用于切换到指定的数据库，数据库索引号 index 用数字值指定，以 0 作为起始索引值。</td></tr><tr><td>exit</td><td>退出 redis-cli</td></tr><tr><td>auth password</td><td>当 redis 服务器开启密码验证，客户端连接时没有指定密码时，连接后必须使用 “auth 密码” 先进行授权，否则其它命令会使用不了。</td></tr><tr><td>set key value</td><td>往 redis 数据库设置数据</td></tr><tr><td>get key</td><td>从 redis 数据库读取数据。key 不存在时，返回 nil</td></tr><tr><td>keys *</td><td>查询 redis 数据库中的所有 key 值</td></tr><tr><td>del key</td><td>删除指定的 key 的内容</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20190519102237597.gif" alt="img"></p><h1 id="Redis-键-key-命令"><a href="#Redis-键-key-命令" class="headerlink" title="Redis 键(key)命令"></a>Redis 键(key)命令</h1><p>1、Redis 键命令用于管理 redis 的键。</p><p>2、Redis 键命令的基本语法：command KEY_NAME</p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.redis.net.cn/order/3528.html">del key</a></td><td align="left">删除指定的 key。key 不存在时不影响。可以同时删除多个，如 del key1 key2 …。list、set、zset、hash 中的元素全部删除后，key 也会自动被删除。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/order/3529.html">dump key</a></td><td align="left">序列化给定 key ，并返回被序列化的值。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/order/3530.html">exists key</a></td><td align="left">检查给定 key 是否存在。返回 1 表示存在，返回 0 表示不存在。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/order/3531.html">expire key</a> seconds</td><td align="left">为给定 key 设置过期时间。单位 秒。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/order/3532.html">expireat key timestamp</a></td><td align="left">EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.redis.net.cn/order/3533.html">pexpire key milliseconds</a></td><td align="left">设置 key 的过期时间亿以毫秒计。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3533.html">pexpire</a>at<a href="https://www.redis.net.cn/order/3534.html"> key milliseconds-timestamp</a></td><td align="left">设置 key 过期时间的时间戳(unix timestamp) 以毫秒计。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">8</td><td align="left">keys<a href="https://www.redis.net.cn/order/3535.html"> pattern</a></td><td align="left">查找所有符合给定模式( pattern)的 key 。* 表示1个或多个，？ 表示一个任意字符。keys * ：查找所有key，keys user*：查找以 user 开头的 key，keys ag?：查找 ag 开头，且后面只有一个字符的 key。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/order/3536.html">move key db</a></td><td align="left">将当前数据库的 key 移动到给定的数据库 db 当中。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.redis.net.cn/order/3537.html">persist key</a></td><td align="left">移除 key 的过期时间，key 将持久保持。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.redis.net.cn/order/3538.html">pttl key</a></td><td align="left">以毫秒为单位返回 key 的剩余的过期时间。如果没有对 key 设置超时，则返回 -1；-1 表示超时不存在。正常情况返回大于0的正数。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.redis.net.cn/order/3539.html">ttl key</a></td><td align="left">以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td></tr><tr><td align="left">13</td><td align="left">randomkey</td><td align="left">从当前数据库中随机返回一个 key 。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.redis.net.cn/order/3541.html">rename key newkey</a></td><td align="left">修改 key 的名称。key 不存在时会报错：(error) ERR no such key。如果 newkey 已经存在时，则会删除旧值。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.redis.net.cn/order/3542.html">renamenx key newkey</a></td><td align="left">仅当 newkey 不存在时，将 key 改名为 newkey 。key 不存在时报错。</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.redis.net.cn/order/3543.html">type key</a></td><td align="left">返回 key 所储存的值的类型。有 string、list、set、zset、hash。如果 key 不存在，则返回 none</td></tr></tbody></table><p>在线命令演示源码：[Redis 基本命令、键（key）命令、数据类型概述.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 基本命令、键（key）命令、数据类型概述.sql)</p><h1 id="Redis-数据类型概述"><a href="#Redis-数据类型概述" class="headerlink" title="Redis 数据类型概述"></a>Redis 数据类型概述</h1><p>1、Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p><p>2、这里暂时先做个概述，后续会详细说明。</p><p>3、在线命令演示源码：[Redis 基本命令、键（key）命令、数据类型概述.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 基本命令、键（key）命令、数据类型概述.sql)</p><h1 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串(String)"></a>Redis 字符串(String)</h1><p>1、string 是 redis最基本的类型，一个key对应一个value。一个键最大能存储512MB。</p><p>2、string 类型是二进制安全的，可以包含任何数据，比如 jpg 图片或者序列化的对象 。</p><p>3、Redis 字符串(String)官网文档：<a href="https://www.redis.net.cn/order/3544.html">https://www.redis.net.cn/order/3544.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">set <a href="https://www.redis.net.cn/tutorial/8669.html">key value</a></td><td align="left">设置指定 key 的值。key 存在时，覆盖其值。总是返回ok。设置的数字会自动转为字符串存储</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8670.html">get key</a></td><td align="left">获取指定 key 的值。如果 key 不存在，则返回 (nil) 相当于 null。如果 key 的类型不是 string ，则报错。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8671.html">getrange key start end</a></td><td align="left"><a href="https://www.redis.net.cn/tutorial/8671.html">range</a>：范围、界限。返回 key 中字符串值的子字符。索引 [start ,end] 从 0开始。可以为负数，如 -1表示倒数第一位，-2 表示倒数第二位。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8672.html">getset key value</a></td><td align="left">将给定 key 的值设为 value ，并返回 key 的旧值(old value)。key 不存在时返回为(nil)，同时创建新值。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8673.html">getbit key offset</a></td><td align="left">对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td></tr><tr><td align="left">6</td><td align="left">[mget key1 <a href="https://www.redis.net.cn/tutorial/8674.html">key2..]</a></td><td align="left">获取所有(一个或多个)给定 key 的值。不存在的 key 返回 (nil)</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8675.html">setbit key offset value</a></td><td align="left">对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8676.html">setex key seconds value</a></td><td align="left">将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8677.html">setnx key value</a></td><td align="left">只有在 key 不存在时设置 key 的值。</td></tr><tr><td align="left">10</td><td align="left">setrange<a href="https://www.redis.net.cn/tutorial/8678.html"> key offset value</a></td><td align="left">用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td align="left">11</td><td align="left">strlen<a href="https://www.redis.net.cn/tutorial/8679.html"> key</a></td><td align="left">返回 key 所储存的字符串值的长度。不存在的 key 返回 0</td></tr><tr><td align="left">12</td><td align="left">[mset key value <a href="https://www.redis.net.cn/tutorial/8680.html">key value …]</a></td><td align="left">同时设置一个或多个 key-value 对。key 存在时，覆盖其值。</td></tr><tr><td align="left">13</td><td align="left">[msetnx key value <a href="https://www.redis.net.cn/tutorial/8681.html">key value …]</a></td><td align="left">同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在才设置。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8682.html">psetex key milliseconds value</a></td><td align="left">这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8683.html">incr key</a></td><td align="left">将 key 中储存的数字值增一。increment：ˈɪŋkrəmənt 增量、增加。如果不是数值，则报错。如果 key 不存在，则新建，incr 后，值为1。</td></tr><tr><td align="left">16</td><td align="left">incrby <a href="https://www.redis.net.cn/tutorial/8684.html">key increment</a></td><td align="left">将 key 所储存的值加上给定的增量值（increment） 。如果不是数值，则报错。如果 key 不存在，则新建。</td></tr><tr><td align="left">17</td><td align="left">incrbyfloat<a href="https://www.redis.net.cn/tutorial/8685.html"> key increment</a></td><td align="left">将 key 所储存的值加上给定的浮点增量值（increment） 。如果不是数值，则报错。如果 key 不存在，则新建。<a href="https://www.redis.net.cn/tutorial/8685.html">increment</a> 不能是变量。</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8686.html">decr key</a></td><td align="left">将 key 中储存的数字值减一。如果不是数值，则报错。如果 key 不存在，则新建，decr 后，值为 -1。如果 key 不存在，则新建。</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8687.html">decrby key decrement</a></td><td align="left">key 所储存的值减去给定的减量值（decrement） 。如果 key 不存在，则新建。<a href="https://www.redis.net.cn/tutorial/8685.html">increment</a></td></tr><tr><td align="left">20</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8688.html">append key value</a></td><td align="left">如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。如果 key 不存在，则新建。value 不能是变量。</td></tr></tbody></table><p>4、在线命令演示：[Redis 字符串(String)命令演示.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 字符串(String)命令演示.sql)</p><p><img src="https://img-blog.csdnimg.cn/20201010201027478.gif" alt="img"></p><h1 id="Redis-哈希（Hash）"><a href="#Redis-哈希（Hash）" class="headerlink" title="Redis 哈希（Hash）"></a><strong>Redis 哈希（Hash）</strong></h1><p>1、Redis hash 是一个键值对集合，值可以看成一个 Map。</p><p>2、Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>3、每个 hash 可以存储 40多亿键值对。</p><p>hmset key filed value [filed2 value2 filed3 value3 …]：同时为 key 指定多个 filed 与 valuehgetall key：获取 key 中的所有 filed-value</p><p>4、Redis 哈希(Hash)官网文档：<a href="https://www.redis.net.cn/order/3564.html">https://www.redis.net.cn/order/3564.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[hdel key field2 <a href="https://www.redis.net.cn/order/3564.html">field2]</a></td><td align="left">删除一个或多个哈希表字段。返回值成功删除的个数。key 或 field 不存在时会自动忽略。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/order/3565.html">hexists key field</a></td><td align="left">查看哈希表 key 中，指定的字段是否存在。返回1表示有，返回0表示没有。key 不存在时也返回0.</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/order/3566.html">hget key field</a></td><td align="left">获取存储在哈希表中指定字段的值。key 或 field 不存在时，返回 (nil)。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/order/3567.html">hgetall key</a></td><td align="left">获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/order/3568.html">hincrby key field increment</a></td><td align="left">为哈希表 key 中的指定字段的整数值加上增量 increment 。field 必须是数值，否则报错。key 不存在时会自动新建。field 不存在时也会自动新建。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.redis.net.cn/order/3569.html">hincrbyfloat key field increment</a></td><td align="left">为哈希表 key 中的指定字段的浮点数值加上增量 increment 。field 必须是数值，否则报错。key 不存在时会自动新建。field 不存在时也会自动新建。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3570.html">hkeys key</a></td><td align="left">获取所有哈希表中的字段</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.redis.net.cn/order/3571.html">hlen key</a></td><td align="left">获取哈希表中字段的数量。key 不存在时返回0.</td></tr><tr><td align="left">9</td><td align="left">[hmget key field1 <a href="https://www.redis.net.cn/order/3572.html">field2]</a></td><td align="left">获取所有给定字段的值。key 或 field 不存在时，返回 (nil)。</td></tr><tr><td align="left">10</td><td align="left">[hmset key field1 value1 <a href="https://www.redis.net.cn/order/3573.html">field2 value2 ]</a></td><td align="left">同时将多个 field-value (域-值)对设置到哈希表 key 中。field 存在时，覆盖 value。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.redis.net.cn/order/3574.html">hset key field value</a></td><td align="left">将哈希表 key 中的字段 field 的值设为 value 。field 存在时，覆盖 value。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.redis.net.cn/order/3575.html">hsetnx key field value</a></td><td align="left">只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.redis.net.cn/order/3576.html">hvals key</a></td><td align="left">获取哈希表中所有值</td></tr><tr><td align="left">14</td><td align="left">HSCAN key cursor [MATCH pattern] [COUNT count]</td><td align="left">迭代哈希表中的键值对。</td></tr></tbody></table><p>5、命令在线演示：[Redis 哈希（Hash）命令演示.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 哈希（Hash）命令演示.sql)</p><p><img src="https://img-blog.csdnimg.cn/20201010201056850.gif" alt="img"></p><h1 id="Redis-列表-List"><a href="#Redis-列表-List" class="headerlink" title="Redis 列表(List)"></a>Redis 列表(List)</h1><p>1、Redis 列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素导列表的头部（左边）或者尾部（右边）。</p><p>2、每个列表最多可存储 4294967295 个元素（约40多亿)</p><p>lpush key value1 value2 value3 …：在指定的 key 关联的 lsit 的头部插入所有的 value，如果 key 不存在，则会先创建一个与该 key 关联的空链表，之后向链表的头部插入数据，插入成功，返回插入的个数。lrange key start end：获取链表中 [start,end] 之间的元素值，从0开始计数。可以为负数，如 -1 表示链表尾部的元素，-2 表示倒数第二个。</p><p>3、Redis 列表(List)官网文档：<a href="https://www.redis.net.cn/order/3577.html">https://www.redis.net.cn/order/3577.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[blpop key1 <a href="https://www.redis.net.cn/order/3577.html">key2 ] timeout</a></td><td align="left">移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">2</td><td align="left">[brpop key1 <a href="https://www.redis.net.cn/order/3578.html">key2 ] timeout</a></td><td align="left">移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/order/3579.html">brpoplpush source destination timeout</a></td><td align="left">从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/order/3580.html">lindex key index</a></td><td align="left">通过索引获取列表中的元素</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/order/3581.html">linsert key BEFORE|AFTER pivot value</a></td><td align="left">在 pivot 元素前/后插入 value 元素。成功时返回列表中元素的个数。key 不存在时返回0。pivot 不存在时返回-1。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.redis.net.cn/order/3582.html">llen key</a></td><td align="left">获取列表长度。key 不存在时返回0；</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3583.html">lpop key</a></td><td align="left">返回并弹出指定 key 关联的列表中的第一个元素（头部元素）。如果 key 不存在，则返回(nil)。弹出之后，列表中的此元素也就不存在了。</td></tr><tr><td align="left">8</td><td align="left">[lpush key value1 <a href="https://www.redis.net.cn/order/3584.html">value2]</a></td><td align="left">将一个或多个值插入到列表头部。如果 key 不存在，则先创建一个与该 key 关联的空列表，然后向列表的头部插入数据，返回插入成功的个数。因为有索引，所以可以插入重复的元素。返回 list 中的元素个数。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/order/3585.html">lpushx key value</a></td><td align="left">将一个或多个值插入到已存在的列表头部</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.redis.net.cn/order/3586.html">lrange key start stop</a></td><td align="left">获取链表中 [start,end] 之间的元素值。索引从0开始，可以为负数，如 -1 表示倒数第一个元素，-2 表示倒数第二个元素…。end 可以超出列表的整个大小，此时多余的会自动忽略。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.redis.net.cn/order/3587.html">lrem key count value</a></td><td align="left">删除 count 个值为 value 的元素。count &gt; 0，则从头向尾遍历并删除 count 个值为 value 的元素，count &lt; 0 ，则从尾向前遍历进行删除。count =0，则删除链表中所有的 value 元素。返回删除成功的个数。value 不存在时返回0。key 不存在时返回0。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.redis.net.cn/order/3588.html">lset key index value</a></td><td align="left">设置列表中索引为 index 的元素值，0 表示首元素，-1表示尾元素。如果 index 不存在，则抛出异常。如果 key 不存在，也抛出异常。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.redis.net.cn/order/3589.html">ltrim key start stop</a></td><td align="left">对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.redis.net.cn/order/3590.html">rpop key</a></td><td align="left">移除并获取列表最后一个元素</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.redis.net.cn/order/3591.html">rpoplpush source destination</a></td><td align="left">将 resource 链表的尾部元素弹出并添加到 destination 链表的头部。成功时返回操作的元素。如果resource不存在，则返回（nil）。如果 destination 不存在，则自动会新建。</td></tr><tr><td align="left">16</td><td align="left">[rpush key value1 <a href="https://www.redis.net.cn/order/3592.html">value2]</a></td><td align="left">在列表尾部添加一个或多个值</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.redis.net.cn/order/3593.html">rpushx key value</a></td><td align="left">为已存在的列表的尾部添加值</td></tr></tbody></table><p>rpoplpush 使用场景：</p><p>  Redis 链表经常会被用于消息队列的服务，已完成多程序之间的消息交互。   假设一个应用程序正在执行 lpush 操作向链表头部插入新的元素，通常将这样的程序称之为”生产者(Producer)”，   而另一个应用程序正在执行 rpop 操作从链表的尾部取出元素，通常称之为”消费者（Consumer）”。   如果此时消费者程序取出消息后突然崩溃了，由于该消息已经被取出且没有被正常处理，那么就认为此消息已经丢失，由此可能导致业务数据丢失。   然而通过 rpoplpush 命令，消费者程序在主消息队列中取出消息之后再将其插入到备份队列中，直到消费者程序完成正常的处理后，再将该消息从备份列表中删除。   同时还可以提供一个守护进程，当发现备份队列中的消息过期时，可以重新将其再放回到主消息队列中，以便其它消费者程序继续处理。</p><p> <img src="https://img-blog.csdnimg.cn/20201010200802602.gif" alt="img"></p><h1 id="Redis-集合-Set"><a href="#Redis-集合-Set" class="headerlink" title="Redis 集合(Set)"></a>Redis 集合(Set)</h1><p>1、Redis 的 Set 是 string 类型的无序集合。和 java 一样，集合中不会有重复的元素。</p><p>2、集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>3、每个集合中最大的成员数为 4294967295（40多亿个成员)。</p><p>sadd key value1 value2 …：向集合 key 中添加元素，key 不存在时会自动新建，value 存在时，后一次的会被忽略。smembers key：获取集合 key 中的所有元素。</p><p>4、Redis 集合(Set)官网文档：<a href="https://www.redis.net.cn/order/3594.html">https://www.redis.net.cn/order/3594.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[sadd key member1 <a href="https://www.redis.net.cn/order/3594.html">member2]</a></td><td align="left">向集合添加一个或多个成员。如果 value 已经存在，则不会再添加。返回插入成功的个数。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/order/3595.html">scard key</a></td><td align="left">获取集合的成员数。key 不存在时，返回0。</td></tr><tr><td align="left">3</td><td align="left">[sdiff key1 <a href="https://www.redis.net.cn/order/3596.html">key2]</a></td><td align="left">返回给定所有集合的差集。求 key1 与 key2 key3 …的差集，即 key1 中有，但 key2 key3 …都没有的元素。</td></tr><tr><td align="left">4</td><td align="left">[sdiffstore destination key1 <a href="https://www.redis.net.cn/order/3597.html">key2]</a></td><td align="left">将 key1 集合与其它集合的差集放入到 destination 集合中。如果 destination 已经存在且有值，则会被全部清除，不存在时会新建。</td></tr><tr><td align="left">5</td><td align="left">[sinter key1 <a href="https://www.redis.net.cn/order/3598.html">key2]</a></td><td align="left">返回给定所有集合的交集。求 key1 与 key2 key3 …集合的交集。</td></tr><tr><td align="left">6</td><td align="left">[sinterstore destination key1 <a href="https://www.redis.net.cn/order/3599.html">key2]</a></td><td align="left">将 key1 与其它集合的交集存放到 destination 集合中。如果 destination 集合已经有值，则会先被清理。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3600.html">sismember key member</a></td><td align="left">判断 member 元素是否是集合 key 的成员。返回1表示存在，返回0表示不存在。key 不存在时也返回0。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.redis.net.cn/order/3601.html">smembers key</a></td><td align="left">返回集合中的所有成员</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/order/3602.html">smove source destination member</a></td><td align="left">将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.redis.net.cn/order/3603.html">spop key</a></td><td align="left">移除并返回集合中的一个随机元素</td></tr><tr><td align="left">11</td><td align="left">[srandmember key <a href="https://www.redis.net.cn/order/3604.html">count]</a></td><td align="left">返回集合中一个或多个随机数。key 不存在时返回（nil）</td></tr><tr><td align="left">12</td><td align="left">[srem key member1 <a href="https://www.redis.net.cn/order/3605.html">member2]</a></td><td align="left">移除集合中一个或多个成员。返回成功删除的个数。 当然也可以使用 del key 直接删除整个集合。</td></tr><tr><td align="left">13</td><td align="left">[sunion key1 <a href="https://www.redis.net.cn/order/3606.html">key2]</a> …</td><td align="left">返回所有给定集合的并集。求 key1 与集合 key2 key3 …的并集。</td></tr><tr><td align="left">14</td><td align="left">[sunionstore destination key1 <a href="https://www.redis.net.cn/order/3607.html">key2]</a> …</td><td align="left">所有给定集合的并集存储在 destination 集合中。将并集结果存放到 destination 集合中。如果 destination 已经有值，则会被清除。</td></tr><tr><td align="left">15</td><td align="left">[sscan key cursor <a href="https://www.redis.net.cn/order/3608.html">MATCH pattern] [COUNT count]</a></td><td align="left">迭代集合中的元素</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20201010200903246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdteDE5OTMzMjg=,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20201010200914979.gif" alt="img"></p><h1 id="Redis-有序集合-sorted-set"><a href="#Redis-有序集合-sorted-set" class="headerlink" title="Redis 有序集合(sorted set)"></a>Redis 有序集合(sorted set)</h1><p>1、Redis zset 和 set 一样也是 string 类型元素的集合，且不允许重复的成员。</p><p>2、不同的是每个元素都会关联一个 double 类型的分数，redis 正是通过分数来为集合中的成员进行从小到大的排序。</p><p>3、zset 的成员是唯一的，但分数(score)却可以重复。</p><p>zadd key score1 member1 score2 member2 …：添加元素到集合，元素在集合中存在则更新对应 score：zrangebyscore key min max ：返回分数在 [mix,max]之间的成员，并按照分数由低到高排序。</p><p>4、Redis 有序集合(sorted set)官网文档：<a href="https://www.redis.net.cn/order/3609.html">https://www.redis.net.cn/order/3609.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wangmx1993328/article/details/90339509#t0&quot;&gt;Redis 基本(basic)命令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wan</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringSecurity自定义异常</title>
    <link href="http://wumuwumu.github.io/posts/d6f2c8a8.html"/>
    <id>http://wumuwumu.github.io/posts/d6f2c8a8.html</id>
    <published>2021-01-28T07:00:00.000Z</published>
    <updated>2021-02-27T06:13:13.987Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Spring Security</strong> 中的异常主要分为两大类：一类是认证异常，另一类是授权相关的异常。</p><h1 id="AuthenticationException"><a href="#AuthenticationException" class="headerlink" title="AuthenticationException"></a>AuthenticationException</h1><p><code>AuthenticationException</code> 是在用户认证的时候出现错误时抛出的异常。主要的子类如图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/11/7/16e42fa6b14db7fe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="AuthenticationException.png"></p><p>根据该图的信息，系统用户不存在，被锁定，凭证失效，密码错误等认证过程中出现的异常都由 <code>AuthenticationException</code> 处理。</p><h1 id="AccessDeniedException"><a href="#AccessDeniedException" class="headerlink" title="AccessDeniedException"></a>AccessDeniedException</h1><p><code>AccessDeniedException</code> 主要是在用户在访问受保护资源时被拒绝而抛出的异常。同 <code>AuthenticationException</code> 一样它也提供了一些具体的子类。如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/11/7/16e42fa6d6e875bf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="AccessDeniedException.png"></p><p><code>AccessDeniedException</code> 的子类比较少，主要是 <code>CSRF</code> 相关的异常和授权服务异常。</p><h1 id="Http-状态对认证授权的规定"><a href="#Http-状态对认证授权的规定" class="headerlink" title="Http 状态对认证授权的规定"></a>Http 状态对认证授权的规定</h1><p><strong>Http</strong> 协议对认证授权的响应结果也有规定。</p><h2 id="401-未授权状态"><a href="#401-未授权状态" class="headerlink" title="401 未授权状态"></a>401 未授权状态</h2><p><strong>HTTP 401 错误 - 未授权(Unauthorized)</strong> 一般来说该错误消息表明您首先需要登录（输入有效的用户名和密码）。 如果你刚刚输入这些信息，立刻就看到一个 <code>401</code> 错误，就意味着，无论出于何种原因您的用户名和密码其中之一或两者都无效（输入有误，用户名暂时停用，账户被锁定，凭证失效等） 。总之就是认证失败了。其实正好对应我们上面的 <code>AuthenticationException</code> 。</p><h2 id="403-被拒绝状态"><a href="#403-被拒绝状态" class="headerlink" title="403 被拒绝状态"></a>403 被拒绝状态</h2><p><strong>HTTP 403 错误 - 被禁止(Forbidden)</strong>  出现该错误表明您在访问受限资源时没有得到许可。服务器理解了本次请求但是拒绝执行该任务，该请求不该重发给服务器。并且服务器想让客户端知道为什么没有权限访问特定的资源，服务器应该在返回的信息中描述拒绝的理由。一般实践中我们会比较模糊的表明原因。 该错误对应了我们上面的 <code>AccessDeniedException</code> 。</p><h1 id="Spring-Security-中的异常处理"><a href="#Spring-Security-中的异常处理" class="headerlink" title="Spring Security 中的异常处理"></a>Spring Security 中的异常处理</h1><p>我们在 <strong>Spring Security</strong> 实战干货系列文章中的 <a href="https://felord.cn/spring-security-httpsecurity.html">自定义配置类入口 WebSecurityConfigurerAdapter</a> 一文中提到 <code>HttpSecurity</code> 提供的 <code>exceptionHandling()</code> 方法用来提供异常处理。该方法构造出 <code>ExceptionHandlingConfigurer</code> 异常处理配置类。该配置类提供了两个实用接口：</p><ul><li><strong>AuthenticationEntryPoint</strong> 该类用来统一处理 <code>AuthenticationException</code> 异常</li><li><strong>AccessDeniedHandler</strong>  该类用来统一处理 <code>AccessDeniedException</code> 异常</li></ul><p>我们只要实现并配置这两个异常处理类即可实现对 <strong>Spring Security</strong> 认证授权相关的异常进行统一的自定义处理。</p><h3 id="4-1-实现-AuthenticationEntryPoint"><a href="#4-1-实现-AuthenticationEntryPoint" class="headerlink" title="4.1 实现 AuthenticationEntryPoint"></a>4.1 实现 AuthenticationEntryPoint</h3><p>以 <code>json</code> 信息响应。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationEntryPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token comment">/** * @author dax * @since 2019/11/6 22:11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAuthenticationEntryPoint</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> authException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//todo your business</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span>SC_UNAUTHORIZED<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> resBody <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> printWriter <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-2-实现-AccessDeniedHandler"><a href="#4-2-实现-AccessDeniedHandler" class="headerlink" title="4.2 实现 AccessDeniedHandler"></a>4.2 实现 AccessDeniedHandler</h3><p>同样以 <code>json</code> 信息响应。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token comment">/** * @author dax * @since 2019/11/6 22:19 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAccessDeniedHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedException</span> accessDeniedException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//todo your business</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span>SC_FORBIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> resBody <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> printWriter <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-3-个人实践建议"><a href="#4-3-个人实践建议" class="headerlink" title="4.3 个人实践建议"></a>4.3 个人实践建议</h3><p>其实我个人建议 <strong>Http</strong> 状态码 都返回 <code>200</code> 而将 401 状态在 元信息 <code>Map</code> 中返回。因为异常状态码在浏览器端会以 <strong>error</strong> 显示。我们只要能捕捉到 <code>401</code> 和 <code>403</code> 就能认定是认证问题还是授权问题。</p><h3 id="4-4-配置"><a href="#4-4-配置" class="headerlink" title="4.4 配置"></a>4.4 配置</h3><p>实现了上述两个接口后，我们只需要在 <code>WebSecurityConfigurerAdapter</code> 的 <code>configure(HttpSecurity http)</code> 方法中配置即可。相关的配置片段如下：</p><pre class="language-java" data-language="java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><a href="https://juejin.cn/post/6844903988895154184">https://juejin.cn/post/6844903988895154184</a></p><p><a href="https://ld246.com/article/1545318463746">https://ld246.com/article/1545318463746</a></p><p><a href="https://blog.csdn.net/qq_38225558/category_9395795.html">https://blog.csdn.net/qq_38225558/category_9395795.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Spring Security&lt;/strong&gt; 中的异常主要分为两大类：一类是认证异常，另一类是授权相关的异常。&lt;/p&gt;
&lt;h1 id=&quot;AuthenticationException&quot;&gt;&lt;a href=&quot;#AuthenticationException&quot;</summary>
      
    
    
    
    
    <category term="SpringSecurity" scheme="http://wumuwumu.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud API聚合</title>
    <link href="http://wumuwumu.github.io/posts/3cb9b8de.html"/>
    <id>http://wumuwumu.github.io/posts/3cb9b8de.html</id>
    <published>2021-01-28T07:00:00.000Z</published>
    <updated>2021-02-27T06:13:14.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用原本的Swagger"><a href="#使用原本的Swagger" class="headerlink" title="使用原本的Swagger"></a>使用原本的Swagger</h1><h2 id="重写接口"><a href="#重写接口" class="headerlink" title="重写接口"></a>重写接口</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SwaggerService</span> swaggerService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/swagger-resources/configuration/security"</span><span class="token punctuation">)</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityConfiguration</span><span class="token punctuation">></span></span> <span class="token function">securityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getSecurityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/swagger-resources/configuration/ui"</span><span class="token punctuation">)</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UiConfiguration</span><span class="token punctuation">></span></span> <span class="token function">uiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UiConfiguration</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getUiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取swagger服务列表，swagger页面自动请求     *     * @return list     */</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/swagger-resources"</span><span class="token punctuation">)</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">swaggerResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查询不包含跳过的服务的路由列表     */</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/swaggers/resources"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">resources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>查询可以提供的接口服务，可以从注册中心中去查找，这里直接写固定的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SwaggerService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span></span> <span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UiConfiguration</span> <span class="token function">getUiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SecurityConfiguration</span> <span class="token function">getSecurityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SwaggerService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span></span> <span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span></span> resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SwaggerResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resource<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"demo-user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resource<span class="token punctuation">.</span><span class="token function">setSwaggerVersion</span><span class="token punctuation">(</span><span class="token string">"2.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里可以使用网关地址，获取自己手动请求，不然有跨域问题</span>        resource<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:9000/user/v2/api-docs"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        resources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resources<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UiConfiguration</span> <span class="token function">getUiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UiConfiguration</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">SecurityConfiguration</span> <span class="token function">getSecurityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecurityConfiguration</span><span class="token punctuation">(</span>                <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"unknown"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span>                <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">,</span>                <span class="token class-name">ApiKeyVehicle</span><span class="token punctuation">.</span>HEADER<span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h1 id="knife4j"><a href="#knife4j" class="headerlink" title="knife4j"></a>knife4j</h1><p><a href="https://doc.xiaominfo.com/knife4j/resources/aggregation-introduction.html">https://doc.xiaominfo.com/knife4j/resources/aggregation-introduction.html</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://juejin.cn/post/6854573219916201997">https://juejin.cn/post/6854573219916201997</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用原本的Swagger&quot;&gt;&lt;a href=&quot;#使用原本的Swagger&quot; class=&quot;headerlink&quot; title=&quot;使用原本的Swagger&quot;&gt;&lt;/a&gt;使用原本的Swagger&lt;/h1&gt;&lt;h2 id=&quot;重写接口&quot;&gt;&lt;a href=&quot;#重写接口&quot; cla</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://wumuwumu.github.io/tags/SpringCloud/"/>
    
    <category term="Swagger" scheme="http://wumuwumu.github.io/tags/Swagger/"/>
    
  </entry>
  
</feed>
