<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringCloudGateway基本操作-WebFlux</title>
      <link href="posts/ac39e4c0.html"/>
      <url>posts/ac39e4c0.html</url>
      
        <content type="html"><![CDATA[<h2 id="Create-a-WebFlux-Handler"><a href="#Create-a-WebFlux-Handler" class="headerlink" title="Create a WebFlux Handler"></a>Create a WebFlux Handler</h2><p>In the Spring Reactive approach, we use a handler to handle the request and create a response, as shown in the following example:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//src/main/java/hello/GreetingHandler.java</span><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">BodyInserters</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingHandler</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">BodyInserters</span><span class="token punctuation">.</span><span class="token function">fromValue</span><span class="token punctuation">(</span><span class="token string">"Hello, Spring!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>This simple reactive class always returns “Hello, Spring!” It could return many other things, including a stream of items from a database, a stream of items that were generated by calculations, and so on. Note the reactive code: a <code>Mono</code> object that holds a <code>ServerResponse</code> body.</p><h2 id="Create-a-Router"><a href="#Create-a-Router" class="headerlink" title="Create a Router"></a>Create a Router</h2><p>In this application, we use a router to handle the only route we expose (“/hello”), as shown in the following example:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//src/main/java/hello/GreetingRouter.java</span><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RequestPredicates</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RouterFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">RouterFunctions</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerResponse</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingRouter</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token class-name">GreetingHandler</span> greetingHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">RouterFunctions</span>      <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>TEXT_PLAIN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> greetingHandler<span class="token operator">::</span><span class="token function">hello</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>The router listens for traffic on the <code>/hello</code> path and returns the value provided by our reactive handler class.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudGateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rocketmq源码运行</title>
      <link href="posts/5aea9ffb.html"/>
      <url>posts/5aea9ffb.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-基本架构"><a href="#1-基本架构" class="headerlink" title="1. 基本架构"></a>1. 基本架构</h3><p><code>RocketMQ</code>架构上主要分为四部分，如下图所示:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d7893db87d2415297dc76cf07a9da25~tplv-k3u1fbpfcp-watermark.awebp"></p><ul><li><p><code>Producer</code>：消息发布的角色，支持分布式集群方式部署。<code>Producer</code>通过<code>MQ</code>的负载均衡模块选择相应的<code>Broker</code>集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</p></li><li><p><code>Consumer</code>：消息消费的角色，支持分布式集群方式部署。支持以<code>push</code>推，<code>pull</code>拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。</p></li><li><p><code>NameServer</code>：<code>NameServer</code>是一个非常简单的<code>Topic</code>路由注册中心，其角色类似<code>Dubbo</code>中的<code>zookeeper</code>，支持<code>Broker</code>的动态注册与发现。主要包括两个功能：</p><ul><li><code>Broker</code>管理，<code>NameServer</code>接受<code>Broker</code>集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查<code>Broker</code>是否还存活；</li><li>路由信息管理，每个<code>NameServer</code>将保存关于<code>Broker</code>集群的整个路由信息和用于客户端查询的队列信息。然后<code>Producer</code>和<code>Conumser</code>通过<code>NameServer</code>就可以知道整个<code>Broker</code>集群的路由信息，从而进行消息的投递和消费。</li></ul><p><code>NameServer</code>通常也是集群的方式部署，各实例间相互不进行信息通讯。<code>Broker</code>是向每一台<code>NameServer</code>注册自己的路由信息，所以每一个<code>NameServer</code>实例上面都保存一份完整的路由信息。当某个<code>NameServer</code>因某种原因下线了，<code>Broker</code>仍然可以向其它<code>NameServer</code>同步其路由信息，<code>Producer</code>,<code>Consumer</code>仍然可以动态感知<code>Broker</code>的路由的信息。</p></li><li><p><code>BrokerServer</code>：<code>Broker</code>主要负责消息的存储、投递和查询以及服务高可用保证，为了实现这些功能，<code>Broker</code>包含了以下几个重要子模块：</p><ul><li><code>Remoting Module</code>：整个<code>Broker</code>的实体，负责处理来自<code>clients</code>端的请求。<ul><li><code>Client Manager</code>：负责管理客户端(<code>Producer</code>/<code>Consumer</code>)和维护<code>Consumer</code>的<code>Topic</code>订阅信息</li><li><code>Store Service</code>：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。</li><li><code>HA Service</code>：高可用服务，提供<code>Master Broker</code> 和 <code>Slave Broker</code>之间的数据同步功能。</li><li><code>Index Service</code>：根据特定的<code>Message key</code>对投递到<code>Broker</code>的消息进行索引服务，以提供消息的快速查询。</li></ul></li></ul></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a1d8173de75499f9b46a7aa7091da57~tplv-k3u1fbpfcp-watermark.awebp"></p><h2 id="2-获取源码"><a href="#2-获取源码" class="headerlink" title="2. 获取源码"></a>2. 获取源码</h2><p>rocketMq项目的<code>github</code>仓库为<a href="https://link.juejin.cn/?target=https://github.com/apache/rocketmq.git" title="https://github.com/apache/rocketmq.git">github.com/apache/rock…</a>，由于网络原因，我们并不会直接使用<code>github</code>仓库，而是将其导入到<code>gitee</code>上，只需在<code>gitee</code>创建新仓库时，选择导入已有仓库即可：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/590692126e494bb3bf6afe811d6c4770~tplv-k3u1fbpfcp-watermark.awebp"></p><p>导入到<code>gitee</code>后，就可以进行<code>checkout</code>了，本文对应的gitee仓库为<a href="https://link.juejin.cn/?target=https://gitee.com/funcy/rocketmq.git" title="https://gitee.com/funcy/rocketmq.git">gitee.com/funcy/rocke…</a>。</p><p><code>checkout</code>源码到本地后，默认是<code>master</code>分支，本人习惯基于<code>tag</code>创建自己的分支，然后在自己的分支上进行分析，<code>rocketMq</code>的<code>tag</code>如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1785db1bb7d040a195a449d3f5a79389~tplv-k3u1fbpfcp-watermark.awebp"></p><p>最新版本是<code>4.8.0</code>，我们将基于此tag创建新分支，使用的命令如下：</p><pre class="language-sh" data-language="sh"><code class="language-sh"># 切换到 rocketmq-all-4.8.0git checkout rocketmq-all-4.8.0# 基于 rocketmq-all-4.8.0 创建自己的分析，名称为 rocketmq-all-4.8.0-LEARNgit checkout -b rocketmq-all-4.8.0-LEARN# 将 rocketmq-all-4.8.0-LEARN 分支推送到远程仓库git push -u origin rocketmq-all-4.8.0-LEARN复制代码</code></pre><p>接下来，我们所有的操作都是在<code>rocketmq-all-4.8.0-LEARN</code>分支上进行了。</p><h3 id="3-本地启动"><a href="#3-本地启动" class="headerlink" title="3. 本地启动"></a>3. 本地启动</h3><p>拿到代码后，我们就开始进行本地启动了，没错，就是在idea中进行启动。</p><h4 id="3-1-复制conf目录"><a href="#3-1-复制conf目录" class="headerlink" title="3.1 复制conf目录"></a>3.1 复制<code>conf</code>目录</h4><p>在启动项目前，我们需要进行一些配置，<code>rocketMq</code>项目的配置文件位于<code>rocketmq/distribution</code>模块下的<code>conf</code>目录中，直接整个复制到<code>rocketmq</code>目录下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e5b2dac07b043769e47ceec7506ba82~tplv-k3u1fbpfcp-watermark.awebp"></p><p>也不需要改动，复制出来就行了，这些配置的内容后面分析源码时再讲解吧。</p><h4 id="3-2-启动nameServer"><a href="#3-2-启动nameServer" class="headerlink" title="3.2 启动nameServer"></a>3.2 启动<code>nameServer</code></h4><p><code>nameServer</code>的主类为<code>org.apache.rocketmq.namesrv.NamesrvStartup</code>：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/840bae7379c54826ae0acff203bdf51d~tplv-k3u1fbpfcp-watermark.awebp"></p><p>如果我们直接运行<code>main()</code>方法，会报错：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1dd9d3189a3c487a8a7769d34fc73e8b~tplv-k3u1fbpfcp-watermark.awebp"></p><p>报错信息已经很明确了，需要我们配置<code>ROCKETMQ_HOME</code>目录，我们在<code>idea</code>中进行配置即可：</p><p>打开配置界面：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/724bce8485e6452db2e7d5577c9e98fc~tplv-k3u1fbpfcp-watermark.awebp"></p><p>填写<code>ROCKETMQ_HOME</code>配置：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6b159a7122a422eade6ee30a7a8cfeb~tplv-k3u1fbpfcp-watermark.awebp"></p><p>这里我填写的是<code>ROCKETMQ_HOME=/Users/chengyan/IdeaProjects/myproject/rocketmq</code>，这个<code>ROCKETMQ_HOME</code>路径就是<code>conf</code>文件夹所在的目录。</p><p>填写好后，就可以启动了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50dc93afe5c042c39d437315668648ef~tplv-k3u1fbpfcp-watermark.awebp"></p><h4 id="3-3-启动broker"><a href="#3-3-启动broker" class="headerlink" title="3.3 启动broker"></a>3.3 启动<code>broker</code></h4><p><code>broker</code>的主类为<code>org.apache.rocketmq.broker.BrokerStartup</code>，启动方式与<code>nameServer</code>很相似，启动前也要配置<code>ROCKETMQ_HOME</code>路径：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddcfda6e8349489fac00db4df6e2ec77~tplv-k3u1fbpfcp-watermark.awebp"></p><p>相比于<code>nameServer</code>，这里多配置了启动参数：</p><pre class="language-none"><code class="language-none">-n localhost:9876 autoCreateTopicEnable&#x3D;true复制代码</code></pre><p>这个启动参数是指定<code>nameServer</code>的地址，以及开启自动创建<code>topic</code>的功能。</p><p>配置完成之后就可以启动了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b68e17980f264a4d9994000a92bb3dd9~tplv-k3u1fbpfcp-watermark.awebp"></p><h4 id="3-4-启动管理后台"><a href="#3-4-启动管理后台" class="headerlink" title="3.4 启动管理后台"></a>3.4 启动管理后台</h4><p><code>rocketMq</code>的管理后台在另一个仓库<a href="https://link.juejin.cn/?target=https://github.com/apache/rocketmq-externals" title="https://github.com/apache/rocketmq-externals">github.com/apache/rock…</a>，除了后台，这个仓库还包含了许多的其他模块：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0da6a8741ca4e789c3338d23528249e~tplv-k3u1fbpfcp-watermark.awebp"></p><p>我们并不需要分析这个项目，源码本可以不必下载，但我在找这个项目的<code>release</code>版本时，发现并没有提供已编译好的jar包，需要自己构建代码，因此我就再次下载了这个代码源码。当然，由于网络的原因，这个项目的源码也被我导入到了<code>gitee</code>上，地址为<a href="https://link.juejin.cn/?target=https://gitee.com/funcy/rocketmq-externals.git" title="https://gitee.com/funcy/rocketmq-externals.git">gitee.com/funcy/rocke…</a>.</p><p>这个项目的代码我们并不分析，因此直接在<code>master</code>分支上操作即可，</p><p>管理后台项目为<code>rocketmq-console</code>，主类为<code>org.apache.rocketmq.console.App</code>：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70d88f026bcd406fb9a5f23306599854~tplv-k3u1fbpfcp-watermark.awebp"></p><p>在启动前，我们需要修改下<code>application.properties</code>的配置，找到<code>rocketmq.config.namesrvAddr</code>配置，添加<code>nameServer</code>的ip与端口，这里我们连接的是本地应用，直接填写<code>localhost:9876</code>：</p><pre class="language-properties" data-language="properties"><code class="language-properties">...<span class="token attr-name">rocketmq.config.namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">localhost:9876</span>...复制代码</code></pre><p>启动，结果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bc7934f207f42ff9d63be1789049978~tplv-k3u1fbpfcp-watermark.awebp"></p><p>访问<code>http://localhost:8080</code>，结果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac4f0f12ea614289b8e66f57d8338b54~tplv-k3u1fbpfcp-watermark.awebp"></p><p>可以看到<code>broker</code>已经出现在<code>cluster</code>列表中了，这就表明启动成功了。</p><h3 id="4-收发消息测试"><a href="#4-收发消息测试" class="headerlink" title="4. 收发消息测试"></a>4. 收发消息测试</h3><p><code>rocketMq</code>项目的<code>example</code>模块下有大量的测试示例，我们选择其一进行消息收发测试。</p><h4 id="4-1-启动Consumer"><a href="#4-1-启动Consumer" class="headerlink" title="4.1 启动Consumer"></a>4.1 启动<code>Consumer</code></h4><p>我们先找到<code>org.apache.rocketmq.example.simple.PushConsumer</code>，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PushConsumer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">MQClientException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> nameServer <span class="token operator">=</span> <span class="token string">"localhost:9876"</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"CID_JODIE_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span>nameServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">.</span>CONSUME_FROM_FIRST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//wrong time format 2017_0422_221800</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeTimestamp</span><span class="token punctuation">(</span><span class="token string">"20181109221800"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">></span></span> msgs<span class="token punctuation">,</span>                     <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s Receive New Messages: %s %n"</span><span class="token punctuation">,</span>                     <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Consumer Started.%n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>复制代码</code></pre><p>这个<code>Consumer</code>监听的<code>topic</code>是<code>TopicTest</code>，后面我们就会往这个<code>topic</code>发送消息。另外，需要注意<code>nameServer</code>的配置，我们是在本地启动的<code>nameServer</code>，因此这里配置的是<code>localhost:9876</code>。</p><p>运行<code>main()</code>方法，结果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6de3c3f6723a4fd4aa43407ff68bf3d2~tplv-k3u1fbpfcp-watermark.awebp"></p><h4 id="4-2-启动Producer"><a href="#4-2-启动Producer" class="headerlink" title="4.2 启动Producer"></a>4.2 启动<code>Producer</code></h4><p>我们找到 <code>org.apache.rocketmq.example.simple.Producer</code> 类，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">MQClientException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> nameServer <span class="token operator">=</span> <span class="token string">"localhost:9876"</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"ProducerGroupName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span>nameServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#123;</span>                    <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span>                        <span class="token string">"TagA"</span><span class="token punctuation">,</span>                        <span class="token string">"OrderID188"</span><span class="token punctuation">,</span>                        <span class="token string">"Hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>复制代码</code></pre><p>同样地，这里使用的是的<code>nameServer</code>地址是<code>localhost:9876</code>，<code>topic</code> 是<code>TopicTest</code>，运行，结果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28988075e4804f86bc195c168b0b376d~tplv-k3u1fbpfcp-watermark.awebp"></p><p>再回过头看看<code>PushConsumer</code>的控制台：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73f8d1ca9d884645a39b2f70e25f9c93~tplv-k3u1fbpfcp-watermark.awebp"></p><p>可以看到，<code>Producer</code>发送消息成功了，<code>PushConsumer</code>也成功获取到消息了。</p><h4 id="4-3-异常分析"><a href="#4-3-异常分析" class="headerlink" title="4.3 异常分析"></a>4.3 异常分析</h4><p>如图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d1b74db64c44773a9538576850c3f86~tplv-k3u1fbpfcp-watermark.awebp"></p><p>如果出现异常：</p><pre class="language-none"><code class="language-none">org.apache.rocketmq.client.exception.MQClientException: No route info of this topic: TopicTest复制代码</code></pre><p>这表明当前<code>broker</code>中没有<code>TopicTest</code>的<code>topic</code>，这时我们可以手动创建<code>topic</code>，也可以在启动时指定<code>autoCreateTopicEnable=true</code>.</p><p>如果是按上面步骤进行的，请确认下<code>org.apache.rocketmq.broker.BrokerStartup</code>是否配置启动参数</p><pre class="language-none"><code class="language-none">-n localhost:9876 autoCreateTopicEnable&#x3D;true复制代码</code></pre><p>配置方式就按<code>3.3节</code>的方式配置就行了。</p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>本文主要介绍了<code>rocketMq</code>的基本架构，通过源码展示了<code>rocketMq</code>的启动方式，最后通过<code>rocketMq</code>项目下<code>example</code>模块中的测试代码展示了消息的收发过程。</p><p>总的来说，本文还是在准备源码分析的环境，下篇文章开始，我们就正式开始<code>rocketMq</code>的源码分析了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> rocketmq </tag>
            
            <tag> mq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="posts/0.html"/>
      <url>posts/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自定义参数解析器</title>
      <link href="posts/c3853fa8.html"/>
      <url>posts/c3853fa8.html</url>
      
        <content type="html"><![CDATA[<p>对于如何自定义参数解析器，一个较推荐的方法是，先搞清楚springmvc接收到一个请求之后完整的处理链路，然后再来看在什么地方，什么时机，来插入自定义参数解析器，无论是从理解还是实现都会简单很多。遗憾的是，本篇主要目标放在的是使用角度，所以这里只会简单的提一下参数解析的链路，具体的深入留待后续的源码解析</p><h1 id="参数解析链路"><a href="#参数解析链路" class="headerlink" title="参数解析链路"></a>参数解析链路</h1><p>http请求流程图，来自 <a href="https://www.jianshu.com/p/bf3537334e76">SpringBoot是如何解析HTTP参数的</a></p><p><a href="https://spring.hhui.top/spring-blog/imgs/190831/00.jpg"><img src="https://spring.hhui.top/spring-blog/imgs/190831/00.jpg" alt="img"></a></p><p>既然是参数解析，所以肯定是在方法调用之前就会被触发，在Spring中，负责将http参数与目标方法参数进行关联的，主要是借助<code>org.springframework.web.method.support.HandlerMethodArgumentResolver</code>类来实现</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Iterate over registered &#123;@link HandlerMethodArgumentResolver&#125;s and invoke the one that supports it. * @throws IllegalStateException if no suitable &#123;@link HandlerMethodArgumentResolver&#125; is found. */</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span><span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>trueHandlerMethodArgumentResolver resolver <span class="token operator">=</span> <span class="token function">getArgumentResolver</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>trueif <span class="token punctuation">(</span>resolver <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>truetruethrow <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unknown parameter type ["</span> <span class="token operator">+</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span>truereturn resolver<span class="token punctuation">.</span><span class="token function">resolveArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">,</span> binderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上面这段核心代码来自<code>org.springframework.web.method.support.HandlerMethodArgumentResolverComposite#resolveArgument</code>，主要作用就是获取一个合适的<code>HandlerMethodArgumentResolver</code>，实现将http参数(<code>webRequest</code>)映射到目标方法的参数上(<code>parameter</code>)</p><p>所以说，实现自定义参数解析器的核心就是实现一个自己的<code>HandlerMethodArgumentResolver</code></p><h1 id="HandlerMethodArgumentResolver"><a href="#HandlerMethodArgumentResolver" class="headerlink" title="HandlerMethodArgumentResolver"></a>HandlerMethodArgumentResolver</h1><p>实现一个自定义的参数解析器，首先得有个目标，我们在get参数解析篇里面，当时遇到了一个问题，当传参为数组时，定义的方法参数需要为数组，而不能是List，否则无法正常解析；现在我们则希望能实现这样一个参数解析，以支持上面的场景</p><p>为了实现上面这个小目标，我们可以如下操作</p><h2 id="自定义注解ListParam"><a href="#自定义注解ListParam" class="headerlink" title="自定义注解ListParam"></a>自定义注解ListParam</h2><p>定义这个注解，主要就是用于表明，带有这个注解的参数，希望可以使用我们自定义的参数解析器来解析；</p><pre class="language-none"><code class="language-none">@Target(ElementType.PARAMETER)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface ListParam &#123;    &#x2F;**     * Alias for &#123;@link #name&#125;.     *&#x2F;    @AliasFor(&quot;name&quot;) String value() default &quot;&quot;;    &#x2F;**     * The name of the request parameter to bind to.     *     * @since 4.2     *&#x2F;    @AliasFor(&quot;value&quot;) String name() default &quot;&quot;;&#125;</code></pre><h2 id="参数解析器ListHandlerMethodArgumentResolver"><a href="#参数解析器ListHandlerMethodArgumentResolver" class="headerlink" title="参数解析器ListHandlerMethodArgumentResolver"></a>参数解析器ListHandlerMethodArgumentResolver</h2><p>接下来就是自定义的参数解析器了，需要实现接口<code>HandlerMethodArgumentResolver</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListHandlerMethodArgumentResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerMethodArgumentResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> parameter<span class="token punctuation">.</span><span class="token function">hasParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ListParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span>            <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListParam</span> param <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ListParam</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                    <span class="token string">"Unknown parameter type ["</span> <span class="token operator">+</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> param<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> param<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            name <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> ans <span class="token operator">=</span> webRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cells <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>cells<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>上面虽然实现了自定义的参数解析器，但是我们需要把它注册到<code>HandlerMethodArgumentResolver</code>才能生效，一个简单的方法如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addArgumentResolvers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">></span></span> argumentResolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        argumentResolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListHandlerMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装K8S</title>
      <link href="posts/5b646136.html"/>
      <url>posts/5b646136.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装准备（每台服务器）"><a href="#安装准备（每台服务器）" class="headerlink" title="安装准备（每台服务器）"></a>安装准备（每台服务器）</h1><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><pre class="language-none"><code class="language-none">systemctl stop firewalldsystemctl disable firewalld</code></pre><h2 id="关闭Selinux"><a href="#关闭Selinux" class="headerlink" title="关闭Selinux"></a>关闭Selinux</h2><ul><li>临时禁用</li></ul><pre class="language-none"><code class="language-none">setenforce 0</code></pre><ul><li>永久禁用</li></ul><pre class="language-none"><code class="language-none">sed -i &#39;s&#x2F;SELINUX&#x3D;permissive&#x2F;SELINUX&#x3D;disabled&#x2F;&#39; &#x2F;etc&#x2F;sysconfig&#x2F;selinuxsed -i &quot;s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;g&quot; &#x2F;etc&#x2F;selinux&#x2F;config</code></pre><h2 id="禁用交换分区"><a href="#禁用交换分区" class="headerlink" title="禁用交换分区"></a>禁用交换分区</h2><ul><li><pre class="language-none"><code class="language-none">swapoff -a</code></pre></li><li><p>永久禁用，打开/etc/fstab注释掉swap那一行。</p></li></ul><pre class="language-none"><code class="language-none">sed -i &#39;s&#x2F;.*swap.*&#x2F;#&amp;&#x2F;&#39; &#x2F;etc&#x2F;fstab</code></pre><h2 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span>  /etc/sysctl.d/k8s.conf</span>net.bridge.bridge-nf-call-iptables=1net.bridge.bridge-nf-call-ip6tables=1net.ipv4.ip_forward=1net.ipv4.tcp_tw_recycle=0vm.swappiness=0 # 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它vm.overcommit_memory=1 # 不检查物理内存是否够用vm.panic_on_oom=0 # 开启 OOMfs.inotify.max_user_instances=8192fs.inotify.max_user_watches=1048576fs.file-max=52706963fs.nr_open=52706963net.ipv6.conf.all.disable_ipv6=1net.netfilter.nf_conntrack_max=2310720EOF</span>sysctl --system</code></pre><h2 id="调整系统时区"><a href="#调整系统时区" class="headerlink" title="调整系统时区"></a>调整系统时区</h2><h3 id="设置系统时区为-中国-上海"><a href="#设置系统时区为-中国-上海" class="headerlink" title="设置系统时区为 中国/上海"></a>设置系统时区为 中国/上海</h3><pre class="language-none"><code class="language-none">timedatectl set-timezone Asia&#x2F;Shanghai</code></pre><h3 id="将当前的-UTC-时间写入硬件时钟"><a href="#将当前的-UTC-时间写入硬件时钟" class="headerlink" title="将当前的 UTC 时间写入硬件时钟"></a>将当前的 UTC 时间写入硬件时钟</h3><pre class="language-none"><code class="language-none">timedatectl set-local-rtc 0</code></pre><h3 id="重启依赖于系统时间的服务"><a href="#重启依赖于系统时间的服务" class="headerlink" title="重启依赖于系统时间的服务"></a>重启依赖于系统时间的服务</h3><pre class="language-none"><code class="language-none">systemctl restart rsyslogsystemctl restart crond</code></pre><h1 id="安装docker-每台服务器"><a href="#安装docker-每台服务器" class="headerlink" title="安装docker(每台服务器)"></a>安装docker(每台服务器)</h1><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2yum-config-manager <span class="token punctuation">\</span>--add-repo <span class="token punctuation">\</span>http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum update -y <span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> -y docker-ce<span class="token comment">## 创建 /etc/docker 目录</span>grub2-set-default <span class="token string">'CentOS Linux (4.4.202-1.el7.elrepo.x86_64) 7 (Core)'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">reboot</span><span class="token comment"># 重新设置内核</span>systemctl restart docker <span class="token operator">&amp;&amp;</span> systemctl <span class="token builtin class-name">enable</span> docker<span class="token comment"># 设置开机自动</span><span class="token function">mkdir</span> /etc/docker<span class="token comment"># 配置 daemon.</span><span class="token function">cat</span> <span class="token operator">></span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span><span class="token string">EOF&#123;    "exec-opts": ["native.cgroupdriver=systemd"],    "log-driver": "json-file",    "log-opts": &#123;    "max-size": "100m"    &#125;&#125;EOF</span><span class="token function">mkdir</span> -p /etc/systemd/system/docker.service.d<span class="token comment"># 重启docker服务</span>systemctl daemon-reload <span class="token operator">&amp;&amp;</span> systemctl restart docker </code></pre><h1 id="安装-Kubeadm-所有服务器"><a href="#安装-Kubeadm-所有服务器" class="headerlink" title="安装 Kubeadm(所有服务器)"></a>安装 Kubeadm(所有服务器)</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo <span class="token operator">&lt;&lt;</span><span class="token string">EOF [kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpghttp://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF</span>yum <span class="token function">install</span> -y kubelet-1.18.4 kubeadm-1.18.4 kubectl-1.18.4systemctl <span class="token builtin class-name">enable</span> kubelet.service</code></pre><h1 id="安装主节点"><a href="#安装主节点" class="headerlink" title="安装主节点"></a>安装主节点</h1><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm config print init-defaults <span class="token operator">></span> kubeadm-config.yaml<span class="token comment"># 修改(以及新增)kubeadm-config.yaml以下内容</span>localAPIEndpoint:  advertiseAddress: <span class="token number">192.168</span>.1.200kubernetesVersion: v1.18.4networking:  podSubnet: <span class="token number">10.244</span>.0.0/16  serviceSubnet: <span class="token number">10.96</span>.0.0/12</code></pre><h2 id="下载初始化必备镜像"><a href="#下载初始化必备镜像" class="headerlink" title="下载初始化必备镜像"></a>下载初始化必备镜像</h2><p>因为 Kubernetes 所需要的初始化必备镜像都是从谷歌官方拉取的，不会走 docker 的加速镜像服务器。由于谷歌被墙，所以我们需要自行下载必备镜像，怎么做呢？</p><p>首先列出使用的镜像以及版本号</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm config images list --config kubeadm-config.yaml</code></pre><p>接着，我们通过国内的第三方镜像仓库下载完毕后再更改镜像名称与谷歌的镜像名称一致即可</p><p>我们编写一个 shell 脚本</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">images</span><span class="token operator">=</span><span class="token punctuation">(</span>    kube-apiserver:v1.18.4    kube-controller-manager:v1.18.4    kube-scheduler:v1.18.4    kube-proxy:v1.18.4    pause:3.2    etcd:3.4.3-0    coredns:1.6.7<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token for-or-select variable">imageName</span> <span class="token keyword">in</span> <span class="token variable">$&#123;images<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    docker pull mirrorgcrio/<span class="token variable">$imageName</span>    docker tag mirrorgcrio/<span class="token variable">$imageName</span> k8s.gcr.io/<span class="token variable">$imageName</span>    docker rmi mirrorgcrio/<span class="token variable">$imageName</span><span class="token keyword">done</span></code></pre><p>当然这里用什么版本，是由 Kubeadm 的版本节点的。通过上方的列出使用的镜像以及版本号我们可以很清楚的知道要下什么版本，下哪些的镜像了。</p><p>然后我们执行脚本，开始下载镜像 (注意哦，这个下载镜像，2 个 node 节点也要做的)</p><p>给予执行权限</p><p>chmod +x docker-download.sh</p><p>初始化,并且将标准输出同时写入至kubeadm-init.log文件</p><p>kubeadm init –config=kubeadm-config.yaml | tee kubeadm-init.log<br>完毕后，控制台输出的日志会告诉我们继续执行什么指令以及 node 节点如何加入</p><p>执行日志中的指令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube<span class="token function">sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config</code></pre><h2 id="部署网络"><a href="#部署网络" class="headerlink" title="部署网络"></a>部署网络</h2><p>只要操作 master 节点即可噢～</p><p>现在我们执行 kubectl 相关指令已经会有了正常响应，但是此时节点处于 NotReady 的状态，这是因为我们还没有为 Kubernetes 指定它的网络模式。我们使用 flannel 来作为它的网络模式，这样就可以让不同节点上的容器跨主机通信。如果对这块感兴趣，可以自行搜索 flannel 的网络实现。</p><p>现在我们开始安装 flannel</p><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /usr/local/install-k8s/plugin/flannel</code></pre><h3 id="进入flannel文件夹"><a href="#进入flannel文件夹" class="headerlink" title="进入flannel文件夹"></a>进入flannel文件夹</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/install-k8s/plugin/flannel</code></pre><h3 id="下载flannel配置文件"><a href="#下载flannel配置文件" class="headerlink" title="下载flannel配置文件"></a>下载flannel配置文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</code></pre><h3 id="安装flannel"><a href="#安装flannel" class="headerlink" title="安装flannel"></a>安装flannel</h3><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl create -f kube-flannel.yml</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看命名空间为kube-system的pod情况</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get pod -n kube-system</code></pre><p>查看更详细的信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get pod -n kube-system -o wide</code></pre><p>查看k8s所有节点连接情况</p><pre class="language-none"><code class="language-none">kubectl get node</code></pre><h2 id="加入子节点"><a href="#加入子节点" class="headerlink" title="加入子节点"></a>加入子节点</h2><p>根据 kubeadm-init.log 日志文件内容或者安装的时候的标准输出，在 node 节点执行指令</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.1.200:6443 --token abcdef.0123456789abcdef <span class="token punctuation">\</span>    --discovery-token-ca-cert-hash sha256:7c2677754a3b09da10d5ffa6a7d6348ad63219cd69d2f5c3a27642d4b95ff15b</code></pre><p>即可将 node 节点加入 master</p><h1 id="子节点配置"><a href="#子节点配置" class="headerlink" title="子节点配置"></a>子节点配置</h1><h2 id="下载docker相关组件"><a href="#下载docker相关组件" class="headerlink" title="下载docker相关组件"></a>下载docker相关组件</h2><p>参考主节点配置</p><h2 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h2><h2 id="清除加入"><a href="#清除加入" class="headerlink" title="清除加入"></a>清除加入</h2><pre class="language-none"><code class="language-none">kubeadm reset</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://learnku.com/docs/go-micro-build/1.0/kubernetes-1804-cluster-installation-tutorial-based-on-centos7/8877#6077e2">https://learnku.com/docs/go-micro-build/1.0/kubernetes-1804-cluster-installation-tutorial-based-on-centos7/8877#6077e2</a></p><p><a href="https://www.yinxiang.com/everhub/note/f420816c-2019-47a1-8dcd-7b3ade25ac1f">https://www.yinxiang.com/everhub/note/f420816c-2019-47a1-8dcd-7b3ade25ac1f</a></p><p><a href="https://www.jianshu.com/p/4a5e0de015a9">https://www.jianshu.com/p/4a5e0de015a9</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装imgproxy</title>
      <link href="posts/7a004090.html"/>
      <url>posts/7a004090.html</url>
      
        <content type="html"><![CDATA[<h1 id="通过docker安装"><a href="#通过docker安装" class="headerlink" title="通过docker安装"></a>通过docker安装</h1><pre class="language-bash" data-language="bash"><code class="language-bash">docker pull darthsim/imgproxy:latestdocker run -e <span class="token assign-left variable">IMGPROXY_USE_S3</span><span class="token operator">=</span>true -e <span class="token assign-left variable">IMGPROXY_S3_ENDPOINT</span><span class="token operator">=</span>http://192.168.100.11:9228 -e <span class="token assign-left variable">AWS_ACCESS_KEY_ID</span><span class="token operator">=</span>AKIAIOSFSDODNN7EXAMPLE -e <span class="token assign-left variable">AWS_SECRET_ACCESS_KEY</span><span class="token operator">=</span>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEDXXAMPLEKEY -p <span class="token number">9340</span>:8080 -d  darthsim/imgproxy</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis的数据过期清除策略与内存淘汰策略</title>
      <link href="posts/395bf0bd.html"/>
      <url>posts/395bf0bd.html</url>
      
        <content type="html"><![CDATA[<p>在使用Redis时，我们一般会为Redis的缓存空间设置一个大小，不会让数据无限制地放入Redis缓存中。可以使用下面命令来设定缓存的大小，比如设置为4GB：在使用Redis时，我们一般会为Redis的缓存空间设置一个大小，不会让数据无限制地放入Redis缓存中。可以使用下面命令来设定缓存的大小，比如设置为4GB：</p><pre class="language-redis" data-language="redis"><code class="language-redis">CONFIG SET maxmemory 4gb</code></pre><p>既然 Redis 设置了缓存的容量大小，那缓存被写满就是不可避免的。当缓存被写满时，我们需要考虑下面两个问题：决定淘汰哪些数据，如何处理那些被淘汰的数据。</p><h1 id="Redis的数据过期清除策略："><a href="#Redis的数据过期清除策略：" class="headerlink" title="Redis的数据过期清除策略："></a>Redis的数据过期清除策略：</h1><p>如果我们设置了Redis的key-value的过期时间，当缓存中的数据过期之后，Redis就需要将这些数据进行清除，释放占用的内存空间。Redis中主要使用 定期删除 + 惰性删除 两种数据过期清除策略。</p><p>过期策略：定期删除+惰性删除：</p><h2 id="定期删除："><a href="#定期删除：" class="headerlink" title="定期删除："></a>定期删除：</h2><p>redis默认每隔100ms就随机抽取一些设置了过期时间的key，检查其是否过期，如果有过期就删除。注意这里是随机抽取的。为什么要随机呢？你想一想假如 redis 存了几十万个 key ，每隔100ms就遍历所有的设置过期时间的 key 的话，就会给 CPU 带来很大的负载。</p><p>为什么不用定时删除策略呢？</p><p>定时删除，用一个定时器来负责监视key，过期则自动删除。虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key，因此没有采用这一策略。</p><h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>定期删除可能导致很多过期的key 到了时间并没有被删除掉。这时就要使用到惰性删除。在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间并且过期了，是的话就删除。</p><h2 id="定期删除-惰性删除存在的问题："><a href="#定期删除-惰性删除存在的问题：" class="headerlink" title="定期删除+惰性删除存在的问题："></a>定期删除+惰性删除存在的问题：</h2><p>如果某个key过期后，定期删除没删除成功，然后也没再次去请求key，也就是说惰性删除也没生效。这时，如果大量过期的key堆积在内存中，redis的内存会越来越高，导致redis的内存块耗尽。那么就应该采用内存淘汰机制。</p><h1 id="Redis的缓存淘汰策略："><a href="#Redis的缓存淘汰策略：" class="headerlink" title="Redis的缓存淘汰策略："></a>Redis的缓存淘汰策略：</h1><p>Redis共提供了8中缓存淘汰策略，其中 volatile-lfu 和 allkeys-lfu 是Redis 4.0版本新增的。</p><p>1、noeviction：不进行淘汰数据。一旦缓存被写满，再有写请求进来，Redis就不再提供服务，而是直接返回错误。Redis 用作缓存时，实际的数据集通常都是大于缓存容量的，总会有新的数据要写入缓存，这个策略本身不淘汰数据，也就不会腾出新的缓存空间，我们不把它用在 Redis 缓存中。</p><p>2、volatile-ttl：在设置了过期时间的键值对中，移除即将过期的键值对。</p><p>3、volatile-random：在设置了过期时间的键值对中，随机移除某个键值对。</p><p>4、volatile-lru：在设置了过期时间的键值对中，移除最近最少使用的键值对。</p><p>5、volatile-lfu：在设置了过期时间的键值对中，移除最近最不频繁使用的键值对</p><p>6、allkeys-random：在所有键值对中，随机移除某个key。</p><p>7、allkeys-lru：在所有的键值对中，移除最近最少使用的键值对。</p><p>8、allkeys-lfu：在所有的键值对中，移除最近最不频繁使用的键值对</p><p>通常情况下推荐优先使用 allkeys-lru 策略。这样可以充分利用 LRU 这一经典缓存算法的优势，把最近最常访问的数据留在缓存中，提升应用的访问性能。</p><p>如果你的业务数据中有明显的冷热数据区分，建议使用 allkeys-lru 策略。</p><p>如果业务应用中的数据访问频率相差不大，没有明显的冷热数据区分，建议使用 allkeys-random 策略，随机选择淘汰的数据就行。</p><p>如果没有设置过期时间的键值对，那么 volatile-lru，volatile-lfu，volatile-random 和 volatile-ttl 策略的行为, 和 noeviction 基本上一致。</p><h1 id="Redis中的LRU和LFU算法："><a href="#Redis中的LRU和LFU算法：" class="headerlink" title="Redis中的LRU和LFU算法："></a>Redis中的LRU和LFU算法：</h1><h2 id="LRU算法："><a href="#LRU算法：" class="headerlink" title="LRU算法："></a>LRU算法：</h2><p>LRU 算法的全称是 Least Recently Uses，按照最近最少使用的原则来筛选数据，最不常用的数据会被筛选出来。LRU 会把所有的数据组织成一个链表，链表的头和尾分别表示 MRU 端和 LRU 端，分别代表最近最常使用的数据和最近最不常用的数据。我们看一个例子。</p><p>如果有一个新数据 45 要被写入缓存，但此时已经没有缓存空间了，也就是链表没有空余位置了，那么LRU 算法做两件事：数据 45 是刚被访问的，所以它会被放到 MRU 端；算法把 LRU 端的数据 5 从缓存中删除，相应的链表中就没有数据 5 的记录了。LRU认为刚刚被访问的数据，肯定还会被再次访问，所以就把它放在 MRU 端；长久不访问的数据，肯定就不会再被访问了，所以就让它逐渐后移到 LRU 端，在缓存满时，就优先删除它。</p><p>LRU 算法在实际实现时，需要用链表管理所有的缓存数据，移除元素时直接从链表队尾移除，增加时加到头部就可以了，但这会带来额外的空间开销。而且，当有数据被访问时，需要在链表上把该数据移动到 MRU 端，如果有大量数据被访问，就会带来很多链表移动操作，会很耗时，进而会降低 Redis 缓存性能。</p><p>所以，在 Redis 中，LRU 算法被做了简化，以减轻数据淘汰对缓存性能的影响。具体来说：Redis 默认会记录每个数据的最近一次访问的时间戳（由键值对数据结构 RedisObject 中的 lru 字段记录）。然后，Redis 在决定淘汰的数据时，第一次会随机选出 N 个数据，把它们作为一个候选集合。接下来，Redis 会比较这 N 个数据的 lru 字段，把 lru 字段值最小的数据从缓存中淘汰出去。当需要再次淘汰数据时，Redis 需要挑选数据进入第一次淘汰时创建的候选集合。这里的挑选标准是：能进入候选集合的数据的 lru 字段值必须小于候选集合中最小的 lru 值。当有新数据进入候选数据集后，如果候选数据集中的数据个数达到了 N 个，Redis 就把候选数据集中 lru 字段值最小的数据淘汰出去。这样一来，Redis 缓存不用为所有的数据维护一个大链表，也不用在每次数据访问时都移动链表项，提升了缓存的性能。</p><p>Redis 提供了一个配置参数 maxmemory-samples，这个参数就是 Redis 选出的数据个数 N。例如，我们执行如下命令，可以让 Redis 选出 100 个数据作为候选数据集：</p><p>CONFIG SET maxmemory-samples 100</p><p>RedisObject 的定义如下：（简单理解为一个 key-value）</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> lru<span class="token operator">:</span>LRU_BITS<span class="token punctuation">;</span> <span class="token comment">/* LRU time (relative to global lru_clock) or                            * LFU data (least significant 8 bits frequency                            * and most significant 16 bits access time). */</span>    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> robj<span class="token punctuation">;</span></code></pre><h2 id="LFU算法："><a href="#LFU算法：" class="headerlink" title="LFU算法："></a>LFU算法：</h2><p>LFU是在Redis4.0后出现的，它的核心思想是根据key的最近被访问的频率进行淘汰，很少被访问的优先被淘汰，被访问的多的则被留下来。LFU算法能更好的表示一个key被访问的热度。假如你使用的是LRU算法，一个key很久没有被访问到，只刚刚是偶尔被访问了一次，那么它就被认为是热点数据，不会被淘汰，而有些key将来是很有可能被访问到的则被淘汰了。如果使用LFU算法则不会出现这种情况，因为使用一次并不会使一个key成为热点数据。它的使用与LRU有所区别：</p><p>LFU (Least Frequently Used) ：最近最不频繁使用，跟使用的次数有关，淘汰使用次数最少的。</p><p>LRU (Least Recently Used)：最近最少使用，跟使用的最后一次时间有关，淘汰最近使用时间离现在最久的。</p><p>LRU的最近最少使用实际上并不精确，考虑下面的情况，如果在 “|” 处删除，那么A距离的时间最久，但实际上A的使用频率要比D频繁，所以合理的淘汰策略应该是淘汰D。LFU就是为应对这种情况而生的。</p><pre class="language-none"><code class="language-none">~~~~~A~~~~~A~~~~~A~~~~A~~~~~A~~~~~A~~|~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~|​~~~~~~~~~~C~~~~~~~~~C~~~~~~~~~C~~~~~~|​~~~~~D~~~~~~~~~~D~~~~~~~~~D~~~~~~~~~D|</code></pre><p>每个波浪号代表一秒，A 每五秒，R 每两秒，C 和 D 每十秒 ， 最近被访问的字符是 D，但显然按照现有的规律，下一个被访问的更可能是 R 而不是 D。</p><p>LFU 实现比较复杂，需要考虑几个问题：</p><p>如果实现为链表，当对象被访问时按访问次数移动到链表的某个有序位置可能是低效的，因为可能存在大量访问次数相同的 key，最差情况是O(n)<br>某些 key 访问次数可能非常之大，理论上可以无限大，但实际上我们并不需要精确的访问次数<br>访问次数特别大的 key 可能以后都不再访问了，但是因为访问次数大而一直占用着内存不被淘汰，需要一个方法来逐步“驱除”（有点 LRU的意思），最简单的就是逐步衰减访问次数<br>本着能省则省的原则，Redis 只用了 24bit （server.lruclock 也是24bit）来记录上述的信息，是的不是 24byte，连32位指针都放不下！</p><p>16bit : 上一次递减时间 （解决第三个问题）</p><p>8bit : 访问次数 （解决第二个问题）</p><p>访问次数的计算如下：</p><pre class="language-c" data-language="c"><code class="language-c">uint8_t <span class="token function">LFULogIncr</span><span class="token punctuation">(</span>uint8_t counter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>RAND_MAX<span class="token punctuation">;</span>    <span class="token keyword">double</span> baseval <span class="token operator">=</span> counter <span class="token operator">-</span> LFU_INIT_VAL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>baseval <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> baseval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span>baseval<span class="token operator">*</span>server<span class="token punctuation">.</span>lfu_log_factor<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> counter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>核心就是访问次数越大，访问次数被递增的可能性越小，最大 255，可以在配置 redis.conf 中写明访问多少次递增多少。由于访问次数是有限的，所以第一个问题也被解决了，直接一个255数组或链表都可以。</p><p>16bit 部分保存的是时间戳的后16位（分钟），表示上一次递减的时间，算法是这样执行，随机采样N个key，检查递减时间，如果距离现在超过 N 分钟（可配置），则递减或者减半（如果访问次数数值比较大）。</p><p>此外，由于新加入的 key 访问次数很可能比不被访问的老 key小，为了不被马上淘汰，新key访问次数设为 5。</p><pre class="language-redis" data-language="redis"><code class="language-redis">CONFIG SET maxmemory 4gb</code></pre><p>既然 Redis 设置了缓存的容量大小，那缓存被写满就是不可避免的。当缓存被写满时，我们需要考虑下面两个问题：决定淘汰哪些数据，如何处理那些被淘汰的数据。</p><h1 id="Redis的数据过期清除策略：-1"><a href="#Redis的数据过期清除策略：-1" class="headerlink" title="Redis的数据过期清除策略："></a>Redis的数据过期清除策略：</h1><p>如果我们设置了Redis的key-value的过期时间，当缓存中的数据过期之后，Redis就需要将这些数据进行清除，释放占用的内存空间。Redis中主要使用 定期删除 + 惰性删除 两种数据过期清除策略。</p><p>过期策略：定期删除+惰性删除：</p><h2 id="定期删除：-1"><a href="#定期删除：-1" class="headerlink" title="定期删除："></a>定期删除：</h2><p>redis默认每隔100ms就随机抽取一些设置了过期时间的key，检查其是否过期，如果有过期就删除。注意这里是随机抽取的。为什么要随机呢？你想一想假如 redis 存了几十万个 key ，每隔100ms就遍历所有的设置过期时间的 key 的话，就会给 CPU 带来很大的负载。</p><p>为什么不用定时删除策略呢？</p><p>定时删除，用一个定时器来负责监视key，过期则自动删除。虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key，因此没有采用这一策略。</p><h2 id="惰性删除-1"><a href="#惰性删除-1" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>定期删除可能导致很多过期的key 到了时间并没有被删除掉。这时就要使用到惰性删除。在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间并且过期了，是的话就删除。</p><h2 id="定期删除-惰性删除存在的问题：-1"><a href="#定期删除-惰性删除存在的问题：-1" class="headerlink" title="定期删除+惰性删除存在的问题："></a>定期删除+惰性删除存在的问题：</h2><p>如果某个key过期后，定期删除没删除成功，然后也没再次去请求key，也就是说惰性删除也没生效。这时，如果大量过期的key堆积在内存中，redis的内存会越来越高，导致redis的内存块耗尽。那么就应该采用内存淘汰机制。</p><h1 id="Redis的缓存淘汰策略：-1"><a href="#Redis的缓存淘汰策略：-1" class="headerlink" title="Redis的缓存淘汰策略："></a>Redis的缓存淘汰策略：</h1><p>Redis共提供了8中缓存淘汰策略，其中 volatile-lfu 和 allkeys-lfu 是Redis 4.0版本新增的。</p><p>1、noeviction：不进行淘汰数据。一旦缓存被写满，再有写请求进来，Redis就不再提供服务，而是直接返回错误。Redis 用作缓存时，实际的数据集通常都是大于缓存容量的，总会有新的数据要写入缓存，这个策略本身不淘汰数据，也就不会腾出新的缓存空间，我们不把它用在 Redis 缓存中。</p><p>2、volatile-ttl：在设置了过期时间的键值对中，移除即将过期的键值对。</p><p>3、volatile-random：在设置了过期时间的键值对中，随机移除某个键值对。</p><p>4、volatile-lru：在设置了过期时间的键值对中，移除最近最少使用的键值对。</p><p>5、volatile-lfu：在设置了过期时间的键值对中，移除最近最不频繁使用的键值对</p><p>6、allkeys-random：在所有键值对中，随机移除某个key。</p><p>7、allkeys-lru：在所有的键值对中，移除最近最少使用的键值对。</p><p>8、allkeys-lfu：在所有的键值对中，移除最近最不频繁使用的键值对</p><p>通常情况下推荐优先使用 allkeys-lru 策略。这样可以充分利用 LRU 这一经典缓存算法的优势，把最近最常访问的数据留在缓存中，提升应用的访问性能。</p><p>如果你的业务数据中有明显的冷热数据区分，建议使用 allkeys-lru 策略。</p><p>如果业务应用中的数据访问频率相差不大，没有明显的冷热数据区分，建议使用 allkeys-random 策略，随机选择淘汰的数据就行。</p><p>如果没有设置过期时间的键值对，那么 volatile-lru，volatile-lfu，volatile-random 和 volatile-ttl 策略的行为, 和 noeviction 基本上一致。</p><h1 id="Redis中的LRU和LFU算法：-1"><a href="#Redis中的LRU和LFU算法：-1" class="headerlink" title="Redis中的LRU和LFU算法："></a>Redis中的LRU和LFU算法：</h1><h2 id="LRU算法：-1"><a href="#LRU算法：-1" class="headerlink" title="LRU算法："></a>LRU算法：</h2><p>LRU 算法的全称是 Least Recently Uses，按照最近最少使用的原则来筛选数据，最不常用的数据会被筛选出来。LRU 会把所有的数据组织成一个链表，链表的头和尾分别表示 MRU 端和 LRU 端，分别代表最近最常使用的数据和最近最不常用的数据。我们看一个例子。</p><p>如果有一个新数据 45 要被写入缓存，但此时已经没有缓存空间了，也就是链表没有空余位置了，那么LRU 算法做两件事：数据 45 是刚被访问的，所以它会被放到 MRU 端；算法把 LRU 端的数据 5 从缓存中删除，相应的链表中就没有数据 5 的记录了。LRU认为刚刚被访问的数据，肯定还会被再次访问，所以就把它放在 MRU 端；长久不访问的数据，肯定就不会再被访问了，所以就让它逐渐后移到 LRU 端，在缓存满时，就优先删除它。</p><p>LRU 算法在实际实现时，需要用链表管理所有的缓存数据，移除元素时直接从链表队尾移除，增加时加到头部就可以了，但这会带来额外的空间开销。而且，当有数据被访问时，需要在链表上把该数据移动到 MRU 端，如果有大量数据被访问，就会带来很多链表移动操作，会很耗时，进而会降低 Redis 缓存性能。</p><p>所以，在 Redis 中，LRU 算法被做了简化，以减轻数据淘汰对缓存性能的影响。具体来说：Redis 默认会记录每个数据的最近一次访问的时间戳（由键值对数据结构 RedisObject 中的 lru 字段记录）。然后，Redis 在决定淘汰的数据时，第一次会随机选出 N 个数据，把它们作为一个候选集合。接下来，Redis 会比较这 N 个数据的 lru 字段，把 lru 字段值最小的数据从缓存中淘汰出去。当需要再次淘汰数据时，Redis 需要挑选数据进入第一次淘汰时创建的候选集合。这里的挑选标准是：能进入候选集合的数据的 lru 字段值必须小于候选集合中最小的 lru 值。当有新数据进入候选数据集后，如果候选数据集中的数据个数达到了 N 个，Redis 就把候选数据集中 lru 字段值最小的数据淘汰出去。这样一来，Redis 缓存不用为所有的数据维护一个大链表，也不用在每次数据访问时都移动链表项，提升了缓存的性能。</p><p>Redis 提供了一个配置参数 maxmemory-samples，这个参数就是 Redis 选出的数据个数 N。例如，我们执行如下命令，可以让 Redis 选出 100 个数据作为候选数据集：</p><p>CONFIG SET maxmemory-samples 100</p><p>RedisObject 的定义如下：（简单理解为一个 key-value）</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> lru<span class="token operator">:</span>LRU_BITS<span class="token punctuation">;</span> <span class="token comment">/* LRU time (relative to global lru_clock) or                            * LFU data (least significant 8 bits frequency                            * and most significant 16 bits access time). */</span>    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> robj<span class="token punctuation">;</span></code></pre><h2 id="LFU算法：-1"><a href="#LFU算法：-1" class="headerlink" title="LFU算法："></a>LFU算法：</h2><p>LFU是在Redis4.0后出现的，它的核心思想是根据key的最近被访问的频率进行淘汰，很少被访问的优先被淘汰，被访问的多的则被留下来。LFU算法能更好的表示一个key被访问的热度。假如你使用的是LRU算法，一个key很久没有被访问到，只刚刚是偶尔被访问了一次，那么它就被认为是热点数据，不会被淘汰，而有些key将来是很有可能被访问到的则被淘汰了。如果使用LFU算法则不会出现这种情况，因为使用一次并不会使一个key成为热点数据。它的使用与LRU有所区别：</p><p>LFU (Least Frequently Used) ：最近最不频繁使用，跟使用的次数有关，淘汰使用次数最少的。</p><p>LRU (Least Recently Used)：最近最少使用，跟使用的最后一次时间有关，淘汰最近使用时间离现在最久的。</p><p>LRU的最近最少使用实际上并不精确，考虑下面的情况，如果在 “|” 处删除，那么A距离的时间最久，但实际上A的使用频率要比D频繁，所以合理的淘汰策略应该是淘汰D。LFU就是为应对这种情况而生的。</p><pre class="language-none"><code class="language-none">~~~~~A~~~~~A~~~~~A~~~~A~~~~~A~~~~~A~~|~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~~R~|​~~~~~~~~~~C~~~~~~~~~C~~~~~~~~~C~~~~~~|​~~~~~D~~~~~~~~~~D~~~~~~~~~D~~~~~~~~~D|</code></pre><p>每个波浪号代表一秒，A 每五秒，R 每两秒，C 和 D 每十秒 ， 最近被访问的字符是 D，但显然按照现有的规律，下一个被访问的更可能是 R 而不是 D。</p><p>LFU 实现比较复杂，需要考虑几个问题：</p><p>如果实现为链表，当对象被访问时按访问次数移动到链表的某个有序位置可能是低效的，因为可能存在大量访问次数相同的 key，最差情况是O(n)<br>某些 key 访问次数可能非常之大，理论上可以无限大，但实际上我们并不需要精确的访问次数<br>访问次数特别大的 key 可能以后都不再访问了，但是因为访问次数大而一直占用着内存不被淘汰，需要一个方法来逐步“驱除”（有点 LRU的意思），最简单的就是逐步衰减访问次数<br>本着能省则省的原则，Redis 只用了 24bit （server.lruclock 也是24bit）来记录上述的信息，是的不是 24byte，连32位指针都放不下！</p><p>16bit : 上一次递减时间 （解决第三个问题）</p><p>8bit : 访问次数 （解决第二个问题）</p><p>访问次数的计算如下：</p><pre class="language-c" data-language="c"><code class="language-c">uint8_t <span class="token function">LFULogIncr</span><span class="token punctuation">(</span>uint8_t counter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>RAND_MAX<span class="token punctuation">;</span>    <span class="token keyword">double</span> baseval <span class="token operator">=</span> counter <span class="token operator">-</span> LFU_INIT_VAL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>baseval <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> baseval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> p <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span>baseval<span class="token operator">*</span>server<span class="token punctuation">.</span>lfu_log_factor<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> counter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>核心就是访问次数越大，访问次数被递增的可能性越小，最大 255，可以在配置 redis.conf 中写明访问多少次递增多少。由于访问次数是有限的，所以第一个问题也被解决了，直接一个255数组或链表都可以。</p><p>16bit 部分保存的是时间戳的后16位（分钟），表示上一次递减的时间，算法是这样执行，随机采样N个key，检查递减时间，如果距离现在超过 N 分钟（可配置），则递减或者减半（如果访问次数数值比较大）。</p><p>此外，由于新加入的 key 访问次数很可能比不被访问的老 key小，为了不被马上淘汰，新key访问次数设为 5。</p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis面试题</title>
      <link href="posts/adbd2430.html"/>
      <url>posts/adbd2430.html</url>
      
        <content type="html"><![CDATA[<p>什么是Redis<br>Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。</p><p>Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p><p>与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA脚本、LRU驱动事件、多种集群方案。</p><p>Redis有哪些优缺点<br>优点</p><p>读写性能优异， Redis能读的速度是110000次/s，写的速度是81000次/s。<br>支持数据持久化，支持AOF和RDB两种持久化方式。<br>支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。<br>数据结构丰富，除了支持string类型的value外还支持hash、set、zset、list等数据结构。<br>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。<br>缺点</p><p>数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。<br>Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。<br>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。<br>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。<br>为什么要用 Redis /为什么要用缓存<br>主要从“高性能”和“高并发”这两点来看待这个问题。</p><p>高性能：</p><p>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p><p>高并发：</p><p>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</p><p>为什么要用 Redis 而不用 map/guava 做缓存?<br>缓存分为本地缓存和分布式缓存。以 Java 为例，使用自带的 map 或者 guava 实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。</p><p>使用 redis 或 memcached 之类的称为分布式缓存，在多实例的情况下，各实例共用一份缓存数据，缓存具有一致性。缺点是需要保持 redis 或 memcached服务的高可用，整个程序架构上较为复杂。</p><p>Redis为什么这么快<br>1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是O(1)；</p><p>2、数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</p><p>3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p><p>4、使用多路 I/O 复用模型，非阻塞 IO；</p><p>5、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</p><p>数据类型<br>Redis有哪些数据类型<br>Redis主要有5种数据类型，包括String，List，Set，Zset，Hash，满足大部分的使用要求</p><p>数据类型    可以存储的值    操作    应用场景<br>STRING    字符串、整数或者浮点数    对整个字符串或者字符串的其中一部分执行操作<br>对整数和浮点数执行自增或者自减操作    做简单的键值对缓存<br>LIST    列表    从两端压入或者弹出元素<br>对单个或者多个元素进行修剪，<br>只保留一个范围内的元素    存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类的数据<br>SET    无序集合    添加、获取、移除单个元素<br>检查一个元素是否存在于集合中<br>计算交集、并集、差集<br>从集合里面随机获取元素    交集、并集、差集的操作，比如交集，可以把两个人的粉丝列表整一个交集<br>HASH    包含键值对的无序散列表    添加、获取、移除单个键值对<br>获取所有键值对<br>检查某个键是否存在    结构化的数据，比如一个对象<br>ZSET    有序集合    添加、获取、删除元素<br>根据分值范围或者成员来获取元素<br>计算一个键的排名    去重但可以排序，如获取排名前几名的用户<br>Redis的应用场景<br>总结一</p><p>计数器</p><p>可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p><p>缓存</p><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p><p>会话缓存</p><p>可以使用 Redis 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p><p>全页缓存（FPC）</p><p>除基本的会话token之外，Redis还提供很简便的FPC平台。以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><p>查找表</p><p>例如 DNS 记录就很适合使用 Redis 进行存储。查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p><p>消息队列(发布/订阅功能)</p><p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息。不过最好使用 Kafka、RabbitMQ 等消息中间件。</p><p>分布式锁实现</p><p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p><p>其它</p><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。ZSet 可以实现有序性操作，从而实现排行榜等功能。</p><p>总结二</p><p>Redis相比其他缓存，有一个非常大的优势，就是支持多种数据类型。</p><p>数据类型说明string字符串，最简单的k-v存储hashhash格式，value为field和value，适合ID-Detail这样的场景。list简单的list，顺序列表，支持首位或者末尾插入数据set无序list，查找速度快，适合交集、并集、差集处理sorted set有序的set</p><p>其实，通过上面的数据类型的特性，基本就能想到合适的应用场景了。</p><p>string——适合最简单的k-v存储，类似于memcached的存储结构，短信验证码，配置信息等，就用这种类型来存储。</p><p>hash——一般key为ID或者唯一标示，value对应的就是详情了。如商品详情，个人信息详情，新闻详情等。</p><p>list——因为list是有序的，比较适合存储一些有序且数据相对固定的数据。如省市区表、字典表等。因为list是有序的，适合根据写入的时间来排序，如：最新的***，消息队列等。</p><p>set——可以简单的理解为ID-List的模式，如微博中一个人有哪些好友，set最牛的地方在于，可以对两个set提供交集、并集、差集操作。例如：查找两个人共同的好友等。</p><p>Sorted Set——是set的增强版本，增加了一个score参数，自动会根据score的值进行排序。比较适合类似于top 10等不根据插入的时间来排序的数据。</p><p>如上所述，虽然Redis不像关系数据库那么复杂的数据结构，但是，也能适合很多场景，比一般的缓存数据结构要多。了解每种数据结构适合的业务场景，不仅有利于提升开发效率，也能有效利用Redis的性能。</p><p>持久化<br>什么是Redis持久化？<br>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。</p><p>Redis 的持久化机制是什么？各自的优缺点？<br>Redis 提供两种持久化机制 RDB（默认） 和 AOF 机制:</p><p>RDB：是Redis DataBase缩写快照</p><p>RDB是Redis默认的持久化方式。按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为dump.rdb。通过配置文件中的save参数来定义快照的周期。</p><p>优点：</p><p>1、只有一个文件 dump.rdb，方便持久化。<br>2、容灾性好，一个文件可以保存到安全的磁盘。<br>3、性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能<br>4.相对于数据集大时，比 AOF 的启动效率更高。<br>缺点：</p><p>1、数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候)<br>2、AOF（Append-only file)持久化方式： 是指所有的命令行记录以 redis 命令请 求协议的格式完全持久化存储)保存为 aof 文件。<br>AOF：持久化</p><p>AOF持久化(即Append Only File持久化)，则是将Redis执行的每次写命令记录到单独的日志文件中，当重启Redis会重新将持久化的日志中文件恢复数据。</p><p>当两种方式同时开启时，数据恢复Redis会优先选择AOF恢复。</p><p>优点：</p><p>1、数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次 命令操作就记录到 aof 文件中一次。<br>2、通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。<br>3、AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令 进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)<br>缺点：</p><p>1、AOF 文件比 RDB 文件大，且恢复速度慢。<br>2、数据集大的时候，比 rdb 启动效率低。<br>优缺点是什么？</p><p>AOF文件比RDB更新频率高，优先使用AOF还原数据。<br>AOF比RDB更安全也更大<br>RDB性能比AOF好<br>如果两个都配了优先加载AOF<br>如何选择合适的持久化方式<br>一般来说， 如果想达到足以媲美PostgreSQL的数据安全性，你应该同时使用两种持久化功能。在这种情况下，当 Redis 重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</p><p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失，那么你可以只使用RDB持久化。</p><p>有很多用户都只使用AOF持久化，但并不推荐这种方式，因为定时生成RDB快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快，除此之外，使用RDB还可以避免AOF程序的bug。</p><p>如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式。</p><p>Redis持久化数据和缓存怎么做扩容？<br>如果Redis被当做缓存使用，使用一致性哈希实现动态扩容缩容。</p><p>如果Redis被当做一个持久化存储使用，必须使用固定的keys-to-nodes映射关系，节点的数量一旦确定不能变化。否则的话(即Redis节点需要动态变化的情况），必须使用可以在运行时进行数据再平衡的一套系统，而当前只有Redis集群可以做到这样。</p><p>过期键的删除策略<br>Redis的过期键的删除策略<br>我们都知道，Redis是key-value数据库，我们可以设置Redis中缓存的key的过期时间。Redis的过期策略就是指当Redis中缓存的key过期了，Redis如何处理。</p><p>过期策略通常有以下三种：</p><p>定时过期：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。该策略可以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量。<br>惰性过期：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存。<br>定期过期：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。<br>(expires字典会保存所有设置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。)<br>Redis中同时使用了惰性过期和定期过期两种过期策略。</p><p>Redis key的过期时间和永久有效分别怎么设置？<br>EXPIRE和PERSIST命令。</p><p>我们知道通过expire来设置key 的过期时间，那么对过期的数据怎么处理呢?<br>除了缓存服务器自带的缓存失效策略之外（Redis默认的有6中策略可供选择），我们还可以根据具体的业务需求进行自定义的缓存淘汰，常见的策略有两种：</p><p>定时去清理过期的缓存；</p><p>当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。</p><p>两者各有优劣，第一种的缺点是维护大量缓存的key是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！具体用哪种方案，大家可以根据自己的应用场景来权衡。</p><p>内存相关<br>MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据<br>redis内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</p><p>Redis的内存淘汰策略有哪些<br>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p><p>全局的键空间选择性移除</p><p>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。<br>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。（这个是最常用的）<br>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。<br>设置过期时间的键空间选择性移除</p><p>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。<br>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。<br>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。<br>总结</p><p>Redis的内存淘汰策略的选取并不会影响过期的key的处理。内存淘汰策略用于处理内存不足时的需要申请额外空间的数据；过期策略用于处理过期的缓存数据。</p><p>Redis主要消耗什么物理资源？<br>内存。</p><p>Redis的内存用完了会发生什么？<br>如果达到设置的上限，Redis的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以配置内存淘汰机制，当Redis达到内存上限时会冲刷掉旧的内容。</p><p>Redis如何做内存优化？<br>可以好好利用Hash,list,sorted set,set等集合类型数据，因为通常情况下很多小的Key-Value可以用更紧凑的方式存放到一起。尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key，而是应该把这个用户的所有信息存储到一张散列表里面</p><p>线程模型<br>Redis线程模型<br>Redis基于Reactor模式开发了网络事件处理器，这个处理器被称为文件事件处理器（file event handler）。它的组成结构为4部分：多个套接字、IO多路复用程序、文件事件分派器、事件处理器。因为文件事件分派器队列的消费是单线程的，所以Redis才叫单线程模型。</p><p>文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字， 并根据套接字目前执行的任务来为套接字关联不同的事件处理器。<br>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时， 与操作相对应的文件事件就会产生， 这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。<br>虽然文件事件处理器以单线程方式运行， 但通过使用 I/O 多路复用程序来监听多个套接字， 文件事件处理器既实现了高性能的网络通信模型， 又可以很好地与 redis 服务器中其他同样以单线程方式运行的模块进行对接， 这保持了 Redis 内部单线程设计的简单性。</p><p>参考：<a href="https://www.cnblogs.com/barrywxx/p/8570821.html">https://www.cnblogs.com/barrywxx/p/8570821.html</a></p><p>事务<br>什么是事务？<br>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p><p>Redis事务的概念<br>Redis 事务的本质是通过MULTI、EXEC、WATCH等一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p><p>总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</p><p>Redis事务的三个阶段<br>事务开始 MULTI<br>命令入队<br>事务执行 EXEC<br>事务执行过程中，如果服务端收到有EXEC、DISCARD、WATCH、MULTI之外的请求，将会把请求放入队列中排队</p><p>Redis事务相关命令<br>Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的</p><p>Redis会将一个事务中的所有命令序列化，然后按顺序执行。</p><p>redis 不支持回滚，“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”， 所以 Redis 的内部可以保持简单且快速。<br>如果在一个事务中的命令出现错误，那么所有的命令都不会执行；<br>如果在一个事务中出现运行错误，那么正确的命令会被执行。<br>WATCH 命令是一个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。 可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到EXEC命令。<br>MULTI命令用于开启一个事务，它总是返回OK。 MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当EXEC命令被调用时，所有队列中的命令才会被执行。<br>EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。<br>通过调用DISCARD，客户端可以清空事务队列，并放弃执行事务， 并且客户端会从事务状态中退出。<br>UNWATCH命令可以取消watch对所有key的监控。<br>事务管理（ACID）概述<br>原子性（Atomicity）<br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p><p>一致性（Consistency）<br>事务前后数据的完整性必须保持一致。</p><p>隔离性（Isolation）<br>多个事务并发执行时，一个事务的执行不应影响其他事务的执行</p><p>持久性（Durability）<br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p><p>Redis的事务总是具有ACID中的一致性和隔离性，其他特性是不支持的。当服务器运行在AOF持久化模式下，并且appendfsync选项的值为always时，事务也具有耐久性。</p><p>Redis事务支持隔离性吗<br>Redis 是单进程程序，并且它保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完所有事务队列中的命令为止。因此，Redis 的事务是总是带有隔离性的。</p><p>Redis事务保证原子性吗，支持回滚吗<br>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p><p>Redis事务其他实现<br>基于Lua脚本，Redis可以保证脚本内的命令一次性、按顺序地执行，<br>其同时也不提供事务运行错误的回滚，执行过程中如果部分命令运行错误，剩下的命令还是会继续运行完<br>基于中间标记变量，通过另外的标记变量来标识事务是否执行完成，读取数据时先读取该标记变量判断是否事务执行完成。但这样会需要额外写代码实现，比较繁琐<br>集群方案<br>哨兵模式</p><p>哨兵的介绍</p><p>sentinel，中文名是哨兵。哨兵是 redis 集群机构中非常重要的一个组件，主要有以下功能：</p><p>集群监控：负责监控 redis master 和 slave 进程是否正常工作。<br>消息通知：如果某个 redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。<br>故障转移：如果 master node 挂掉了，会自动转移到 slave node 上。<br>配置中心：如果故障转移发生了，通知 client 客户端新的 master 地址。<br>哨兵用于实现 redis 集群的高可用，本身也是分布式的，作为一个哨兵集群去运行，互相协同工作。</p><p>故障转移时，判断一个 master node 是否宕机了，需要大部分的哨兵都同意才行，涉及到了分布式选举的问题。<br>即使部分哨兵节点挂掉了，哨兵集群还是能正常工作的，因为如果一个作为高可用机制重要组成部分的故障转移系统本身是单点的，那就很坑爹了。<br>哨兵的核心知识</p><p>哨兵至少需要 3 个实例，来保证自己的健壮性。<br>哨兵 + redis 主从的部署架构，是不保证数据零丢失的，只能保证 redis 集群的高可用性。<br>对于哨兵 + redis 主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练。<br>官方Redis Cluster 方案(服务端路由查询)</p><p>redis 集群模式的工作原理能说一下么？在集群模式下，redis 的 key 是如何寻址的？分布式寻址都有哪些算法？了解一致性 hash 算法吗？</p><p>简介</p><p>Redis Cluster是一种服务端Sharding技术，3.0版本开始正式提供。Redis Cluster并没有使用一致性hash，而是采用slot(槽)的概念，一共分成16384个槽。将请求发送到任意节点，接收到请求的节点会将查询请求发送到正确的节点上执行</p><p>方案说明</p><p>通过哈希的方式，将数据分片，每个节点均分存储一定哈希槽(哈希值)区间的数据，默认分配了16384 个槽位<br>每份数据分片会存储在多个互为主从的多节点上<br>数据写入先写主节点，再同步到从节点(支持配置为阻塞同步)<br>同一分片多个节点间的数据不保持一致性<br>读取数据时，当客户端操作的key没有分配在该节点上时，redis会返回转向指令，指向正确的节点<br>扩容时时需要需要把旧节点的数据迁移一部分到新节点<br>在 redis cluster 架构下，每个 redis 要放开两个端口号，比如一个是 6379，另外一个就是 加1w 的端口号，比如 16379。</p><p>16379 端口号是用来进行节点间通信的，也就是 cluster bus 的东西，cluster bus 的通信，用来进行故障检测、配置更新、故障转移授权。cluster bus 用了另外一种二进制的协议，gossip 协议，用于节点间进行高效的数据交换，占用更少的网络带宽和处理时间。</p><p>节点间的内部通信机制</p><p>基本通信原理</p><p>集群元数据的维护有两种方式：集中式、Gossip 协议。redis cluster 节点间采用 gossip 协议进行通信。</p><p>分布式寻址算法</p><p>hash 算法（大量缓存重建）<br>一致性 hash 算法（自动缓存迁移）+ 虚拟节点（自动负载均衡）<br>redis cluster 的 hash slot 算法<br>优点</p><p>无中心架构，支持动态扩容，对业务透明<br>具备Sentinel的监控和自动Failover(故障转移)能力<br>客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可<br>高性能，客户端直连redis服务，免去了proxy代理的损耗<br>缺点</p><p>运维也很复杂，数据迁移需要人工干预<br>只能使用0号数据库<br>不支持批量操作(pipeline管道操作)<br>分布式逻辑和存储模块耦合等<br>基于客户端分配</p><p>简介</p><p>Redis Sharding是Redis Cluster出来之前，业界普遍使用的多Redis实例集群方法。其主要思想是采用哈希算法将Redis数据的key进行散列，通过hash函数，特定的key会映射到特定的Redis节点上。Java redis客户端驱动jedis，支持Redis Sharding功能，即ShardedJedis以及结合缓存池的ShardedJedisPool</p><p>优点</p><p>优势在于非常简单，服务端的Redis实例彼此独立，相互无关联，每个Redis实例像单服务器一样运行，非常容易线性扩展，系统的灵活性很强</p><p>缺点</p><p>由于sharding处理放到客户端，规模进一步扩大时给运维带来挑战。<br>客户端sharding不支持动态增删节点。服务端Redis实例群拓扑结构有变化时，每个客户端都需要更新调整。连接不能共享，当应用规模增大时，资源浪费制约优化<br>基于代理服务器分片</p><p>简介</p><p>客户端发送请求到一个代理组件，代理解析客户端的数据，并将请求转发至正确的节点，最后将结果回复给客户端</p><p>特征</p><p>透明接入，业务程序不用关心后端Redis实例，切换成本低<br>Proxy 的逻辑和存储的逻辑是隔离的<br>代理层多了一次转发，性能有所损耗<br>业界开源方案</p><p>Twtter开源的Twemproxy<br>豌豆荚开源的Codis<br>Redis 主从架构<br>单机的 redis，能够承载的 QPS 大概就在上万到几万不等。对于缓存来说，一般都是用来支撑读高并发的。因此架构做成主从(master-slave)架构，一主多从，主负责写，并且将数据复制到其它的 slave 节点，从节点负责读。所有的读请求全部走从节点。这样也可以很轻松实现水平扩容，支撑读高并发。</p><p>redis replication -&gt; 主从架构 -&gt; 读写分离 -&gt; 水平扩容支撑读高并发</p><p>redis replication 的核心机制</p><p>redis 采用异步方式复制数据到 slave 节点，不过 redis2.8 开始，slave node 会周期性地确认自己每次复制的数据量；<br>一个 master node 是可以配置多个 slave node 的；<br>slave node 也可以连接其他的 slave node；<br>slave node 做复制的时候，不会 block master node 的正常工作；<br>slave node 在做复制的时候，也不会 block 对自己的查询操作，它会用旧的数据集来提供服务；但是复制完成的时候，需要删除旧数据集，加载新数据集，这个时候就会暂停对外服务了；<br>slave node 主要用来进行横向扩容，做读写分离，扩容的 slave node 可以提高读的吞吐量。<br>注意，如果采用了主从架构，那么建议必须开启 master node 的持久化，不建议用 slave node 作为 master node 的数据热备，因为那样的话，如果你关掉 master 的持久化，可能在 master 宕机重启的时候数据是空的，然后可能一经过复制， slave node 的数据也丢了。</p><p>另外，master 的各种备份方案，也需要做。万一本地的所有文件丢失了，从备份中挑选一份 rdb 去恢复 master，这样才能确保启动的时候，是有数据的，即使采用了后续讲解的高可用机制，slave node 可以自动接管 master node，但也可能 sentinel 还没检测到 master failure，master node 就自动重启了，还是可能导致上面所有的 slave node 数据被清空。</p><p>redis 主从复制的核心原理</p><p>当启动一个 slave node 的时候，它会发送一个 PSYNC 命令给 master node。</p><p>如果这是 slave node 初次连接到 master node，那么会触发一次 full resynchronization 全量复制。此时 master 会启动一个后台线程，开始生成一份 RDB 快照文件，</p><p>同时还会将从客户端 client 新收到的所有写命令缓存在内存中。RDB 文件生成完毕后， master 会将这个 RDB 发送给 slave，slave 会先写入本地磁盘，然后再从本地磁盘加载到内存中，</p><p>接着 master 会将内存中缓存的写命令发送到 slave，slave 也会同步这些数据。</p><p>slave node 如果跟 master node 有网络故障，断开了连接，会自动重连，连接之后 master node 仅会复制给 slave 部分缺少的数据。</p><p>过程原理</p><p>当从库和主库建立MS关系后，会向主数据库发送SYNC命令<br>主库接收到SYNC命令后会开始在后台保存快照(RDB持久化过程)，并将期间接收到的写命令缓存起来<br>当快照完成后，主Redis会将快照文件和所有缓存的写命令发送给从Redis<br>从Redis接收到后，会载入快照文件并且执行收到的缓存的命令<br>之后，主Redis每当接收到写命令时就会将命令发送从Redis，从而保证数据的一致<br>缺点</p><p>所有的slave节点数据的复制和同步都由master节点来处理，会照成master节点压力太大，使用主从从结构来解决</p><p>Redis集群的主从复制模型是怎样的？<br>为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型，每个节点都会有N-1个复制品</p><p>生产环境中的 redis 是怎么部署的？<br>redis cluster，10 台机器，5 台机器部署了 redis 主实例，另外 5 台机器部署了 redis 的从实例，每个主实例挂了一个从实例，5 个节点对外提供读写服务，每个节点的读写高峰qps可能可以达到每秒 5 万，5 台机器最多是 25 万读写请求/s。</p><p>机器是什么配置？32G 内存+ 8 核 CPU + 1T 磁盘，但是分配给 redis 进程的是10g内存，一般线上生产环境，redis 的内存尽量不要超过 10g，超过 10g 可能会有问题。</p><p>5 台机器对外提供读写，一共有 50g 内存。</p><p>因为每个主实例都挂了一个从实例，所以是高可用的，任何一个主实例宕机，都会自动故障迁移，redis 从实例会自动变成主实例继续提供读写服务。</p><p>你往内存里写的是什么数据？每条数据的大小是多少？商品数据，每条数据是 10kb。100 条数据是 1mb，10 万条数据是 1g。常驻内存的是 200 万条商品数据，占用内存是 20g，仅仅不到总内存的 50%。目前高峰期每秒就是 3500 左右的请求量。</p><p>其实大型的公司，会有基础架构的 team 负责缓存集群的运维。</p><p>说说Redis哈希槽的概念？<br>Redis集群没有使用一致性hash,而是引入了哈希槽的概念，Redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。</p><p>Redis集群会有写操作丢失吗？为什么？<br>Redis并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。</p><p>Redis集群之间是如何复制的？<br>异步复制</p><p>Redis集群最大节点个数是多少？<br>16384个</p><p>Redis集群如何选择数据库？<br>Redis集群目前无法做数据库选择，默认在0数据库。</p><p>分区<br>Redis是单线程的，如何提高多核CPU的利用率？<br>可以在同一个服务器部署多个Redis的实例，并把他们当作不同的服务器来使用，在某些时候，无论如何一个服务器是不够的， 所以，如果你想使用多个CPU，你可以考虑一下分片（shard）。</p><p>为什么要做Redis分区？<br>分区可以让Redis管理更大的内存，Redis将可以使用所有机器的内存。如果没有分区，你最多只能使用一台机器的内存。分区使Redis的计算能力通过简单地增加计算机得到成倍提升，Redis的网络带宽也会随着计算机和网卡的增加而成倍增长。</p><p>你知道有哪些Redis分区实现方案？<br>客户端分区就是在客户端就已经决定数据会被存储到哪个redis节点或者从哪个redis节点读取。大多数客户端已经实现了客户端分区。<br>代理分区 意味着客户端将请求发送给代理，然后代理决定去哪个节点写数据或者读数据。代理根据分区规则决定请求哪些Redis实例，然后根据Redis的响应结果返回给客户端。redis和memcached的一种代理实现就是Twemproxy<br>查询路由(Query routing) 的意思是客户端随机地请求任意一个redis实例，然后由Redis将请求转发给正确的Redis节点。Redis Cluster实现了一种混合形式的查询路由，但并不是直接将请求从一个redis节点转发到另一个redis节点，而是在客户端的帮助下直接redirected到正确的redis节点。<br>Redis分区有什么缺点？<br>涉及多个key的操作通常不会被支持。例如你不能对两个集合求交集，因为他们可能被存储到不同的Redis实例（实际上这种情况也有办法，但是不能直接使用交集指令）。<br>同时操作多个key,则不能使用Redis事务.<br>分区使用的粒度是key，不能使用一个非常长的排序key存储一个数据集（The partitioning granularity is the key, so it is not possible to shard a dataset with a single huge key like a very big sorted set）<br>当使用分区的时候，数据处理会非常复杂，例如为了备份你必须从不同的Redis实例和主机同时收集RDB / AOF文件。<br>分区时动态扩容或缩容可能非常复杂。Redis集群在运行时增加或者删除Redis节点，能做到最大程度对用户透明地数据再平衡，但其他一些客户端分区或者代理分区方法则不支持这种特性。然而，有一种预分片的技术也可以较好的解决这个问题。<br>分布式问题<br>Redis实现分布式锁<br>Redis为单进程单线程模式，采用队列模式将并发访问变成串行访问，且多客户端对Redis的连接并不存在竞争关系Redis中可以使用SETNX命令实现分布式锁。</p><p>当且仅当 key 不存在，将 key 的值设为 value。 若给定的 key 已经存在，则 SETNX 不做任何动作</p><p>SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p><p>返回值：设置成功，返回 1 。设置失败，返回 0 。</p><p>使用SETNX完成同步锁的流程及事项如下：</p><p>使用SETNX命令获取锁，若返回0（key已存在，锁已存在）则获取失败，反之获取成功</p><p>为了防止获取锁后程序出现异常，导致其他线程/进程调用SETNX命令总是返回0而进入死锁状态，需要为该key设置一个“合理”的过期时间</p><p>释放锁，使用DEL命令将锁数据删除</p><p>如何解决 Redis 的并发竞争 Key 问题<br>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同！</p><p>推荐一种方案：分布式锁（zookeeper 和 redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能）</p><p>基于zookeeper临时有序节点可以实现的分布式锁。大致思想为：每个客户端对某个方法加锁时，在zookeeper上的与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点。 判断是否获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。完成业务流程后，删除对应的子节点释放锁。</p><p>在实践中，当然是从以可靠性为主。所以首推Zookeeper。</p><p>参考：<a href="https://www.jianshu.com/p/8bddd381de06">https://www.jianshu.com/p/8bddd381de06</a></p><p>分布式Redis是前期做还是后期规模上来了再做好？为什么？<br>既然Redis是如此的轻量（单实例只使用1M内存），为防止以后的扩容，最好的办法就是一开始就启动较多实例。即便你只有一台服务器，你也可以一开始就让Redis以分布式的方式运行，使用分区，在同一台服务器上启动多个实例。</p><p>一开始就多设置几个Redis实例，例如32或者64个实例，对大多数用户来说这操作起来可能比较麻烦，但是从长久来看做这点牺牲是值得的。</p><p>这样的话，当你的数据不断增长，需要更多的Redis服务器时，你需要做的就是仅仅将Redis实例从一台服务迁移到另外一台服务器而已（而不用考虑重新分区的问题）。一旦你添加了另一台服务器，你需要将你一半的Redis实例从第一台机器迁移到第二台机器。</p><p>什么是 RedLock<br>Redis 官方站提出了一种权威的基于 Redis 实现分布式锁的方式名叫 Redlock，此种方式比原先的单节点的方法更安全。它可以保证以下特性：</p><p>安全特性：互斥访问，即永远只有一个 client 能拿到锁<br>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使原本锁住某资源的 client crash 了或者出现了网络分区<br>容错性：只要大部分 Redis 节点存活就可以正常提供服务<br>缓存异常<br>缓存雪崩<br>缓存雪崩是指缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p>解决方案</p><p>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。<br>一般并发量不是特别多的时候，使用最多的解决方案是加锁排队。<br>给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。<br>缓存穿透<br>缓存穿透是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><p>解决方案</p><p>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；<br>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击<br>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力<br>附加</p><p>对于空间的利用到达了一种极致，那就是Bitmap和布隆过滤器(Bloom Filter)。<br>Bitmap： 典型的就是哈希表<br>缺点是，Bitmap对于每个元素只能记录1bit信息，如果还想完成额外的功能，恐怕只能靠牺牲更多的空间、时间来完成了。</p><p>布隆过滤器（推荐）</p><p>就是引入了k(k&gt;1)k(k&gt;1)个相互独立的哈希函数，保证在给定的空间、误判率下，完成元素判重的过程。<br>它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。<br>Bloom-Filter算法的核心思想就是利用多个不同的Hash函数来解决“冲突”。<br>Hash存在一个冲突（碰撞）的问题，用同一个Hash得到的两个URL的值有可能相同。为了减少冲突，我们可以多引入几个Hash，如果通过其中的一个Hash值我们得出某元素不在集合中，那么该元素肯定不在集合中。只有在所有的Hash函数告诉我们该元素在集合中时，才能确定该元素存在于集合中。这便是Bloom-Filter的基本思想。<br>Bloom-Filter一般用于在大数据量的集合中判定某元素是否存在。</p><p>缓存击穿<br>缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><p>解决方案</p><p>设置热点数据永远不过期。<br>加互斥锁，互斥锁<br>缓存预热<br>缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><p>解决方案</p><p>直接写个缓存刷新页面，上线时手工操作一下；</p><p>数据量不大，可以在项目启动的时候自动进行加载；</p><p>定时刷新缓存；</p><p>缓存降级<br>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。</p><p>缓存降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。</p><p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：</p><p>一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</p><p>警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警；</p><p>错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；</p><p>严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</p><p>服务降级的目的，是为了防止Redis服务故障，导致数据库跟着一起发生雪崩问题。因此，对于不重要的缓存数据，可以采取服务降级策略，例如一个比较常见的做法就是，Redis出现问题，不去数据库查询，而是直接返回默认值给用户。</p><p>热点数据和冷数据<br>热点数据，缓存才有价值</p><p>对于冷数据而言，大部分数据可能还没有再次访问到就已经被挤出内存，不仅占用内存，而且价值不大。频繁修改的数据，看情况考虑使用缓存</p><p>对于热点数据，比如我们的某IM产品，生日祝福模块，当天的寿星列表，缓存以后可能读取数十万次。再举个例子，某导航产品，我们将导航信息，缓存以后可能读取数百万次。</p><p>数据更新前至少读取两次，缓存才有意义。这个是最基本的策略，如果缓存还没有起作用就失效了，那就没有太大价值了。</p><p>那存不存在，修改频率很高，但是又不得不考虑缓存的场景呢？有！比如，这个读取接口对数据库的压力很大，但是又是热点数据，这个时候就需要考虑通过缓存手段，减少数据库的压力，比如我们的某助手产品的，点赞数，收藏数，分享数等是非常典型的热点数据，但是又不断变化，此时就需要将数据同步保存到Redis缓存，减少数据库压力。</p><p>缓存热点key<br>缓存中的一个Key(比如一个促销商品)，在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p>解决方案</p><p>对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询</p><p>常用工具<br>Redis支持的Java客户端都有哪些？官方推荐用哪个？<br>Redisson、Jedis、lettuce等等，官方推荐使用Redisson。</p><p>Redis和Redisson有什么关系？<br>Redisson是一个高级的分布式协调Redis客服端，能帮助用户在分布式环境中轻松实现一些Java的对象 (Bloom filter, BitSet, Set, SetMultimap, ScoredSortedSet, SortedSet, Map, ConcurrentMap, List, ListMultimap, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, ReadWriteLock, AtomicLong, CountDownLatch, Publish / Subscribe, HyperLogLog)。</p><p>Jedis与Redisson对比有什么优缺点？<br>Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持；Redisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><p>其他问题<br>Redis与Memcached的区别<br>两者都是非关系型内存键值数据库，现在公司一般都是用 Redis 来实现缓存，而且 Redis 自身也越来越强大了！Redis 与 Memcached 主要有以下不同：</p><p>对比参数    Redis    Memcached<br>类型    1. 支持内存 2. 非关系型数据库    1. 支持内存 2. 键值对形式 3. 缓存形式<br>数据存储类型    1. String 2. List 3. Set 4. Hash 5. Sort Set 【俗称ZSet】    1. 文本型 2. 二进制类型<br>查询【操作】类型    1. 批量操作 2. 事务支持 3. 每个类型不同的CRUD    1.常用的CRUD 2. 少量的其他命令<br>附加功能    1. 发布/订阅模式 2. 主从分区 3. 序列化支持 4. 脚本支持【Lua脚本】    1. 多线程服务支持<br>网络IO模型    1. 单线程的多路 IO 复用模型    1. 多线程，非阻塞IO模式<br>事件库    自封转简易事件库AeEvent    贵族血统的LibEvent事件库<br>持久化支持    1. RDB 2. AOF    不支持<br>集群模式    原生支持 cluster 模式，可以实现主从复制，读写分离    没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据<br>内存管理机制    在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘    Memcached 的数据则会一直在内存中，Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。<br>适用场景    复杂数据结构，有持久化，高可用需求，value存储内容较大    纯key-value，数据量非常大，并发量非常大的业务<br>(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</p><p>(2) redis的速度比memcached快很多</p><p>(3) redis可以持久化其数据</p><p>如何保证缓存与数据库双写时的数据一致性？<br>你只要用缓存，就可能会涉及到缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性的问题，那么你如何解决一致性问题？</p><p>一般来说，就是如果你的系统不是严格要求缓存+数据库必须一致性的话，缓存可以稍微的跟数据库偶尔有不一致的情况，最好不要做这个方案，读请求和写请求串行化，串到一个内存队列里去，这样就可以保证一定不会出现不一致的情况</p><p>串行化之后，就会导致系统的吞吐量会大幅度的降低，用比正常情况下多几倍的机器去支撑线上的一个请求。</p><p>还有一种方式就是可能会暂时产生不一致的情况，但是发生的几率特别小，就是先更新数据库，然后再删除缓存。</p><p>问题场景    描述    解决<br>先写缓存，再写数据库，缓存写成功，数据库写失败    缓存写成功，但写数据库失败或者响应延迟，则下次读取（并发读）缓存时，就出现脏读    这个写缓存的方式，本身就是错误的，需要改为先写数据库，把旧缓存置为失效；读取数据的时候，如果缓存不存在，则读取数据库再写缓存<br>先写数据库，再写缓存，数据库写成功，缓存写失败    写数据库成功，但写缓存失败，则下次读取（并发读）缓存时，则读不到数据    缓存使用时，假如读缓存失败，先读数据库，再回写缓存的方式实现<br>需要缓存异步刷新    指数据库操作和写缓存不在一个操作步骤中，比如在分布式场景下，无法做到同时写缓存或需要异步刷新（补救措施）时候    确定哪些数据适合此类场景，根据经验值确定合理的数据不一致时间，用户数据刷新的时间间隔<br>Redis常见性能问题和解决方案？<br>Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化。<br>如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。<br>为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内。<br>尽量避免在压力较大的主库上增加从库<br>Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。<br>为了Master的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关系为：Master&lt;–Slave1&lt;–Slave2&lt;–Slave3…，这样的结构也方便解决单点故障问题，实现Slave对Master的替换，也即，如果Master挂了，可以立马启用Slave1做Master，其他不变。<br>Redis官方为什么不提供Windows版本？<br>因为目前Linux版本已经相当稳定，而且用户量很大，无需开发windows版本，反而会带来兼容性等问题。</p><p>一个字符串类型的值能存储最大容量是多少？<br>512M</p><p>Redis如何做大量数据插入？<br>Redis2.6开始redis-cli支持一种新的被称之为pipe mode的新模式用于执行大量数据插入工作。</p><p>假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？<br>使用keys指令可以扫出指定模式的key列表。<br>对方接着追问：如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？<br>这个时候你要回答redis关键的一个特性：redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。</p><p>使用Redis做过异步队列吗，是如何实现的<br>使用list类型保存数据信息，rpush生产消息，lpop消费消息，当lpop没有消息时，可以sleep一段时间，然后再检查有没有信息，如果不想sleep的话，可以使用blpop, 在没有信息的时候，会一直阻塞，直到信息的到来。redis可以通过pub/sub主题订阅模式实现一个生产者，多个消费者，当然也存在一定的缺点，当消费者下线时，生产的消息会丢失。</p><p>Redis如何实现延时队列<br>使用sortedset，使用时间戳做score, 消息内容作为key,调用zadd来生产消息，消费者使用zrangbyscore获取n秒之前的数据做轮询处理。</p><p>Redis回收进程如何工作的？<br>一个客户端运行了新的命令，添加了新的数据。<br>Redis检查内存使用情况，如果大于maxmemory的限制， 则根据设定好的策略进行回收。<br>一个新的命令被执行，等等。<br>所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。<br>如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。</p><p>Redis回收使用的是什么算法？<br>LRU算法<br>————————————————<br>版权声明：本文为CSDN博主「ThinkWon」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/ThinkWon/article/details/103522351">https://blog.csdn.net/ThinkWon/article/details/103522351</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZooKeeper1-安装</title>
      <link href="posts/eb173626.html"/>
      <url>posts/eb173626.html</url>
      
        <content type="html"><![CDATA[<h1 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre class="language-curl" data-language="curl"><code class="language-curl">https:&#x2F;&#x2F;zookeeper.apache.org&#x2F;releases.html</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>初次使用 ZooKeeper 时, 需要将 $ZOOKEEPER_HOME/conf 目录下的 zoo_sample.cfg 重命名为 zoo.cfg, zoo.cfg 默认配置如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># The number of milliseconds of each </span><span class="token assign-left variable">ticktickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token comment"># The number of ticks that the initial </span><span class="token comment"># synchronization phase can take</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token comment"># The number of ticks that can pass between </span><span class="token comment"># sending a request and getting an acknowledgement</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token comment"># the directory where the snapshot is stored.</span><span class="token comment"># do not use /tmp for storage, /tmp here is just </span><span class="token comment"># example sakes.dataDir=/tmp/zookeeper</span><span class="token comment"># the port at which the clients will connect</span><span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token comment"># the maximum number of client connections.</span><span class="token comment"># increase this if you need to handle more clients</span><span class="token comment">#maxClientCnxns=60</span><span class="token comment">#</span><span class="token comment"># Be sure to read the maintenance section of the </span><span class="token comment"># administrator guide before turning on autopurge.</span><span class="token comment">#</span><span class="token comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><span class="token comment">#</span><span class="token comment"># The number of snapshots to retain in dataDir</span><span class="token comment">#autopurge.snapRetainCount=3</span><span class="token comment"># Purge task interval in hours</span><span class="token comment"># Set to "0" to disable auto purge feature</span><span class="token comment">#autopurge.purgeInterval=1</span></code></pre><p>配置项说明如下:</p><ul><li>tickTime: ZooKeeper 中使用的基本时间单元, 以毫秒为单位, 默认值是 2000。它用来调节心跳和超时。例如, 默认的会话超时时间是两倍的 tickTime。</li><li>initLimit: 默认值是 10, 即 tickTime 属性值的 10 倍。它用于配置允许 followers 连接并同步到 leader 的最大时间。如果 ZooKeeper 管理的数据量很大的话可以增加这个值。</li><li>syncLimit: 默认值是 5, 即 tickTime 属性值的 5 倍。它用于配置leader 和 followers 间进行心跳检测的最大延迟时间。如果在设置的时间内 followers 无法与 leader 进行通信, 那么 followers 将会被丢弃。</li><li>dataDir: ZooKeeper 用来存储内存数据库快照的目录, 并且除非指定其它目录, 否则数据库更新的事务日志也将会存储在该目录下。建议配置 dataLogDir 参数来指定 ZooKeeper 事务日志的存储目录。</li><li>clientPort: 服务器监听客户端连接的端口, 也即客户端尝试连接的端口, 默认值是 2181。</li><li>maxClientCnxns: 在 socket 级别限制单个客户端与单台服务器之前的并发连接数量, 可以通过 IP 地址来区分不同的客户端。它用来防止某种类型的 DoS 攻击, 包括文件描述符耗尽。默认值是 60。将其设置为 0 将完全移除并发连接数的限制。</li><li>autopurge.snapRetainCount: 配置 ZooKeeper 在自动清理的时候需要保留的数据文件快照的数量和对应的事务日志文件, 默认值是 3。</li><li>autopurge.purgeInterval: 和参数 autopurge.snapRetainCount 配套使用, 用于配置 ZooKeeper 自动清理文件的频率, 默认值是 1, 即默认开启自动清理功能, 设置为 0 则表示禁用自动清理功能。</li></ul><p>更多 ZooKeeper 配置后面会写文章详细描述。</p><h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><hr><ol><li><p>zoo.cfg配置</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">ticketTime<span class="token operator">=</span><span class="token number">2000</span>clientPort<span class="token operator">=</span><span class="token number">2181</span>dataDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>datadataLogDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>logs</code></pre></li><li><p>启动 ZooKeeper 服务</p></li></ol><p>可以使用如下命令来启动 ZooKeeper 服务</p><pre class="language-css" data-language="css"><code class="language-css">zkServer.sh start</code></pre><p>服务启动信息如下:</p><p><img src="https://static.oschina.net/uploads/img/201607/09230216_6V5D.png" alt="img"></p><ol><li>验证 ZooKeeper 服务</li></ol><p>服务启动完成后, 可以使用 telnet 和 stat 命令验证服务器启动是否正常:</p><p><img src="https://static.oschina.net/uploads/img/201607/09230628_Royv.png" alt="img"></p><p>在单机模式中, Mode 的值是 “standalone”。</p><ol><li>停止 ZooKeeper 服务</li></ol><p>想要停止 ZooKeeper 服务, 可以使用如下命令:</p><pre class="language-css" data-language="css"><code class="language-css">zkServer.sh stop</code></pre><p>服务停止信息如下:</p><p><img src="https://static.oschina.net/uploads/img/201607/09231902_N5Rw.png" alt="img"></p><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><hr><ol><li>zoo.cfg配置</li></ol><p>在 master 机器上, 在单机模式的配置文件下增加了最后 5 行配置:</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">ticketTime<span class="token operator">=</span><span class="token number">2000</span>clientPort<span class="token operator">=</span><span class="token number">2181</span>dataDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>datadataLogDir<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>zookeeper<span class="token operator">/</span>logsinitLimit<span class="token operator">=</span><span class="token number">10</span>syncLimit<span class="token operator">=</span><span class="token number">5</span>server<span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">=</span>master<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span>server<span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">=</span>slave01<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span>server<span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">=</span>slave02<span class="token operator">:</span><span class="token number">2888</span><span class="token operator">:</span><span class="token number">3888</span></code></pre><p>相关配置说明:</p><ul><li><p>集群模式中, 集群中的每台机器都需要感知其它机器, 在 zoo.cfg 配置文件中, 可以按照如下格式进行配置, 每一行代表一台服务器配置:</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">server.id&#x3D;host:port:port</code></pre><p>id 被称为 Server ID, 用来标识服务器在集群中的序号。同时每台 ZooKeeper 服务器上, 都需要在数据目录(即 dataDir 指定的目录) 下创建一个 myid 文件, 该文件只有一行内容, 即对应于每台服务器的Server ID。</p></li><li><p>ZooKeeper 集群中, 每台服务器上的 zoo.cfg 配置文件内容一致。</p></li><li><p>server.1 的 myid 文件内容就是 “1”。每个服务器的 myid 内容都不同, 且需要保证和自己的 zoo.cfg 配置文件中 “server.id=host:port:port” 的 id 值一致。</p></li><li><p>id 的范围是 1 ~ 255。</p></li></ul><ol><li>创建myid文件</li></ol><p>在 dataDir 指定的目录下 (即 /opt/zookeeper/data 目录) 创建名为 myid 的文件, 文件内容和 zoo.cfg 中当前机器的 id 一致。根据上述配置, master 的 myid 文件内容为 1。</p><ol><li>slave配置</li></ol><p>按照相同步骤, 为 slave01 和 slave02 配置 zoo.cfg 和 myid 文件。zoo.cfg文件内容相同, slave01 的 myid 文件内容为 2, slave02 的 myid 文件内容为 3。</p><ol><li>集群启动</li></ol><p>在集群中的每台机器上执行以下启动命令:</p><pre class="language-css" data-language="css"><code class="language-css">zkServer.sh start</code></pre><p>启动信息如下:</p><p><img src="https://static.oschina.net/uploads/img/201607/10003352_Cbks.png" alt="img"></p><p><img src="https://static.oschina.net/uploads/img/201607/10003628_6l47.png" alt="img"></p><p>master 和 slave01 两台服务器的 Mode 值均为 follower, 表明它们在集群中的角色为 Follower。</p><p><img src="https://static.oschina.net/uploads/img/201607/10003835_gyYt.png" alt="img"></p><p>slave02 服务器的 Mode 值为 leader, 表明它在集群中的角色为 Leader。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/de90172ea680">https://www.jianshu.com/p/de90172ea680</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VuePress搭建文档网站</title>
      <link href="posts/0.html"/>
      <url>posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="工程构建"><a href="#工程构建" class="headerlink" title="工程构建"></a>工程构建</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> stong-user-manual <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> stong-user-manual<span class="token function">yarn</span> init<span class="token function">yarn</span> <span class="token function">add</span> -D vuepress<span class="token comment">## 按照常用插件</span><span class="token function">yarn</span> <span class="token function">add</span> -D vuepress-bar boboidream/vuepress-plugin-rpurl vuepress-plugin-permalink-pinyin<span class="token function">mkdir</span> content</code></pre><h2 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a>配置package.json</h2><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vuepress dev content"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vuepress build content"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="创建工程结构"><a href="#创建工程结构" class="headerlink" title="创建工程结构"></a>创建工程结构</h1><p><img src="http://wumu.rescreate.cn/image20210301141728.png"></p><h1 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> getConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vuepress-bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> nav<span class="token punctuation">,</span> sidebar <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"permalink-pinyin"</span><span class="token punctuation">,</span> <span class="token string">"rpurl"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  title<span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>  description<span class="token operator">:</span> <span class="token string">"description"</span><span class="token punctuation">,</span>  themeConfig<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    logo<span class="token operator">:</span> <span class="token string">"/assets/img/logo.png"</span><span class="token punctuation">,</span>    nav<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> text<span class="token operator">:</span> <span class="token string">"官网"</span><span class="token punctuation">,</span> link<span class="token operator">:</span> <span class="token string">"http://www.sciento.cn/"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">...</span>nav<span class="token punctuation">]</span><span class="token punctuation">,</span>    sidebar<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 公司 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudSentinel学习2-Nacos储存规则</title>
      <link href="posts/88fae02d.html"/>
      <url>posts/88fae02d.html</url>
      
        <content type="html"><![CDATA[<p>要通过 Sentinel 控制台配置集群流控规则，需要对控制台进行改造。主要改造规则可以参考：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>Sentinel<span class="token operator">/</span>wiki<span class="token operator">/</span>Sentinel<span class="token operator">-</span>控制台（集群流控管理）#规则配置</code></pre><p>其控制台推送规则：</p><ul><li>将规则推送到Nacos或其他远程配置中心</li><li>Sentinel客户端链接Nacos，获取规则配置；并监听Nacos配置变化，如发生变化，就更新本地缓存。</li></ul><p>控制台监听Nacos配置变化，如发生变化就更新本地缓存。从而让控制台本地缓存总是和Nacos一致。</p><h1 id="改造Sentinel"><a href="#改造Sentinel" class="headerlink" title="改造Sentinel"></a>改造Sentinel</h1><p>下载Sentinel 源代码，然后对sentinel-dashboard模块进行改造</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>Sentinel<span class="token operator">/</span>archive<span class="token operator">/</span><span class="token number">1.7</span><span class="token number">.2</span><span class="token punctuation">.</span>zip</code></pre><ul><li>对pom.xml进行修改</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>将**<scope>test</scope>**注释掉</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><ul><li>修改java代码</li></ul><p>找到如下目录（位于test目录）</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">sentinel<span class="token operator">-</span>dashboard<span class="token operator">/</span>src<span class="token operator">/</span>test<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>csp<span class="token operator">/</span>sentinel<span class="token operator">/</span>dashboard<span class="token operator">/</span>rule<span class="token operator">/</span>nacos</code></pre><p>将整个目录拷贝到</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">sentinel<span class="token operator">-</span>dashboard<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>alibaba<span class="token operator">/</span>csp<span class="token operator">/</span>sentinel<span class="token operator">/</span>dashboard<span class="token operator">/</span>rule<span class="token operator">/</span>nacos</code></pre><ul><li>修改com.alibaba.csp.sentinel.dashboard.controller.v2.FlowControllerV2.java</li></ul><p><img src="http://wumu.rescreate.cn/image20210219164606.png">修改成</p><ul><li><p><img src="http://wumu.rescreate.cn/image20210219164634.png">修改HTML页面</p></li><li><p>修改配置文件</p><ul><li><p>NacosConfig.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ConfigService</span> <span class="token function">nacosConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Properties</span> properties<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>SERVER_ADDR<span class="token punctuation">,</span> <span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>SERVER_ADDR<span class="token punctuation">,</span><span class="token string">"localhost:8848"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>NAMESPACE<span class="token punctuation">,</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>USERNAME<span class="token punctuation">,</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span>PASSWORD<span class="token punctuation">,</span><span class="token class-name">DashboardConfig</span><span class="token punctuation">.</span><span class="token function">getConfigNacosPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">ConfigFactory</span><span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>DashBoardConfig.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DashboardConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_MACHINE_HEALTHY_TIMEOUT_MS <span class="token operator">=</span> <span class="token number">60_000</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Login username     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_AUTH_USERNAME <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.auth.username"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Login password     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_AUTH_PASSWORD <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.auth.password"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Hide application name in sidebar when it has no healthy machines after specific period in millisecond.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_HIDE_APP_NO_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.app.hideAppNoMachineMillis"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Remove application when it has no healthy machines after specific period in millisecond.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_REMOVE_APP_NO_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.removeAppNoMachineMillis"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Timeout     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_UNHEALTHY_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.unhealthyMachineMillis"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Auto remove unhealthy machine after specific period in millisecond.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_AUTO_REMOVE_MACHINE_MILLIS <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.autoRemoveMachineMillis"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_SERVER_URL  <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.server"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_SERVER_NAMESPACE <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.namespace"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_USERNAME <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.username"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CONFIG_NACOS_PASSWORD <span class="token operator">=</span> <span class="token string">"sentinel.dashboard.nacos.password"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// env</span>        <span class="token class-name">String</span> val <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// properties</span>        val <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> val <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> defaultVal<span class="token punctuation">,</span> <span class="token keyword">int</span> minVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token function">getConfig</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> defaultVal<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> minVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            val <span class="token operator">=</span> minVal<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAuthUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_AUTH_USERNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getAuthPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_AUTH_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getHideAppNoMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_HIDE_APP_NO_MACHINE_MILLIS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRemoveAppNoMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_REMOVE_APP_NO_MACHINE_MILLIS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getAutoRemoveMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_AUTO_REMOVE_MACHINE_MILLIS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getUnhealthyMachineMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigInt</span><span class="token punctuation">(</span>CONFIG_UNHEALTHY_MACHINE_MILLIS<span class="token punctuation">,</span> DEFAULT_MACHINE_HEALTHY_TIMEOUT_MS<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cacheMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosServerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_SERVER_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_SERVER_NAMESPACE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_USERNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getConfigNacosPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getConfigStr</span><span class="token punctuation">(</span>CONFIG_NACOS_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul></li><li><p>sidebar.html页面</p></li></ul><p><code>sentinel-dashboard/src/main/webapp/resources/app/scripts/directives/sidebar.html</code>并找到如下代码段后，并把注释放开</p><p><img src="https://bytetrick.com/upload/2020/10/image-7bc469b8c8854cc1a61b3bd7e90fff4e.png">经过以上步骤就已经把流控规则改造成推模式持久化了。</p><ul><li><p>修改请求接口</p><p>src/main/webapp/resources/app/scripts/controllers/identity.js</p><p><img src="http://wumu.rescreate.cn/image20210220152130.png"></p></li></ul><p><strong>0x02：编译生成jar包</strong></p><p>执行命令</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">mvn clean <span class="token keyword">package</span> <span class="token operator">-</span>DskipTests</code></pre><p>编译成功后，在项目的 target 目录可以找到sentinel-dashboard.jar ，执行以下命令可以启动控制台：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">java <span class="token operator">-</span>jar sentinel<span class="token operator">-</span>dashboard<span class="token punctuation">.</span>jar</code></pre><p><strong>0x03：改造微服务</strong></p><ul><li>新建项目olive-nacos-sentinel-datasource</li></ul><p>对应的pom.xml文件引入</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span> xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>    xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>sentinel<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>olive<span class="token operator">-</span>nacos<span class="token operator">-</span>sentinel<span class="token operator">-</span>datasource<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token number">.1</span><span class="token operator">-</span><span class="token constant">SNAPSHOT</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span>packaging<span class="token operator">></span>jar<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">></span>    <span class="token operator">&lt;</span>parent<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token number">.3</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lookup parent <span class="token keyword">from</span> repository <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>olive<span class="token operator">-</span>nacos<span class="token operator">-</span>sentinel<span class="token operator">-</span>datasource<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>    <span class="token operator">&lt;</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>java<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token punctuation">.</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>sentinel<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencyManagement<span class="token operator">></span>        <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>Greenwich<span class="token punctuation">.</span><span class="token constant">SR3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>alibaba<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token number">.0</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span> <span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencyManagement<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span></code></pre><ul><li>新建SpringBoot启动类</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">package</span> com<span class="token punctuation">.</span>olive<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token comment">/** * Hello world! * */</span>@SpringBootApplication<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">String<span class="token punctuation">[</span><span class="token punctuation">]</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>class<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>创建控制器</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">package</span> com<span class="token punctuation">.</span>olive<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>@RestController<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    @<span class="token function">GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token string">"000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>修改配置文件application.yml</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript">spring<span class="token operator">:</span>  application<span class="token operator">:</span>    name<span class="token operator">:</span> olive<span class="token operator">-</span>nacos<span class="token operator">-</span>sentinel<span class="token operator">-</span>datasource  cloud<span class="token operator">:</span>    sentinel<span class="token operator">:</span>      transport<span class="token operator">:</span>        dashboard<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">8080</span>      datasource<span class="token operator">:</span>        # 名称随意        flow<span class="token operator">:</span>          nacos<span class="token operator">:</span>            server<span class="token operator">-</span>addr<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">8848</span>            dataId<span class="token operator">:</span> $<span class="token punctuation">&#123;</span>spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">-</span>flow<span class="token operator">-</span>rules            groupId<span class="token operator">:</span> <span class="token constant">SENTINEL_GROUP</span>            # 规则类型，取值见：            # org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>RuleType            rule<span class="token operator">-</span>type<span class="token operator">:</span> flowserver<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">8866</span></code></pre><p><strong>0x04：验证</strong></p><p><strong>主要验证场景</strong></p><ul><li>场景1：用Sentinel控制台【菜单栏的 流控规则 V1 】推送流控规则，规则会存储到Nacos；</li><li>场景2：直接在Nacos上修改流控规则，然后刷新Sentinel控制台，控制台上的显示也会被修改；</li><li>场景3：重启Sentinel控制台，并重启微服务；刷新控制台，可以发现规则依然存在。</li></ul><p><strong>启动服务</strong></p><ul><li>Sentinel控制台</li><li>Nacos</li><li>olive-nacos-sentinel-datasource</li></ul><p><strong>Nacos中创建限流规则的配置</strong></p><p> <a href="http://127.0.0.1:8848/nacos/#/login">http://127.0.0.1:8848/nacos/#/login</a></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"resource"</span><span class="token operator">:</span> <span class="token string">"/getUser"</span><span class="token punctuation">,</span>        <span class="token string">"limitApp"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token string">"grade"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"count"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token string">"strategy"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"controlBehavior"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"clusterMode"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><p>如下图</p><p><img src="http://wumu.rescreate.cn/image20210219164855.png"><strong>访问接口（olive-nacos-sentinel-datasource服务提供的接口）</strong></p><p>​     <a href="http://localhost:8866/getUser">http://localhost:8866/getUser</a></p><p><strong>访问Sentinel控制台</strong></p><p>​     <a href="http://127.0.0.1:8080/#/login">http://127.0.0.1:8080/#/login</a></p><p><img src="http://wumu.rescreate.cn/image20210219164912.png">以上这条记录就是在Nacos中配置的限流规则。可以测试在<strong>Sentinel控制台</strong>修改规则是否同步到<strong>Nacos，</strong>或者在<strong>Nacos</strong>上修改规则是否同步到<strong>Sentinel控制台</strong>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://cloud.tencent.com/developer/article/1665816">https://cloud.tencent.com/developer/article/1665816</a></p><p><a href="https://blog.csdn.net/EnjoyEDU/article/details/109587953">https://blog.csdn.net/EnjoyEDU/article/details/109587953</a></p></blockquote><p>配置sentinel持久化nacos</p><blockquote><p><a href="https://bytetrick.com/archives/sentinel-dashboard%E6%8C%81%E4%B9%85%E5%8C%96nacos">https://bytetrick.com/archives/sentinel-dashboard%E6%8C%81%E4%B9%85%E5%8C%96nacos</a></p><p><a href="https://blog.csdn.net/u014386444/article/details/112064291">https://blog.csdn.net/u014386444/article/details/112064291</a></p><p><a href="https://www.cnblogs.com/jian0110/p/14139044.html">https://www.cnblogs.com/jian0110/p/14139044.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudSentinel学习1-安装</title>
      <link href="posts/4bd69169.html"/>
      <url>posts/4bd69169.html</url>
      
        <content type="html"><![CDATA[<h1 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h1><h2 id="获取-Sentinel-控制台"><a href="#获取-Sentinel-控制台" class="headerlink" title="获取 Sentinel 控制台"></a>获取 Sentinel 控制台</h2><p>您可以从 <a href="https://github.com/alibaba/Sentinel/releases">release 页面</a> 下载最新版本的控制台 jar 包。</p><p>您也可以从最新版本的源码自行构建 Sentinel 控制台：</p><ul><li>下载 <a href="https://github.com/alibaba/Sentinel/tree/master/sentinel-dashboard">控制台</a> 工程</li><li>使用以下命令将代码打包成一个 fat jar: <code>mvn clean package</code></li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p><strong>注意</strong>：启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本。</p></blockquote><p>使用如下命令启动控制台：</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -Dserver.port<span class="token operator">=</span><span class="token number">8080</span> -Dcsp.sentinel.dashboard.server<span class="token operator">=</span>localhost:8080 -Dproject.name<span class="token operator">=</span>sentinel-dashboard -jar sentinel-dashboard.jar</code></pre><p>其中 <code>-Dserver.port=8080</code> 用于指定 Sentinel 控制台端口为 <code>8080</code>。</p><p>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的<strong>登录</strong>功能，默认用户名和密码都是 <code>sentinel</code>。可以参考 <a href="https://sentinelguard.io/zh-cn/docs/dashboard.html#%E9%89%B4%E6%9D%83">鉴权模块文档</a> 配置用户名和密码。</p><blockquote><p>注：若您的应用为 Spring Boot 或 Spring Cloud 应用，您可以通过 Spring 配置文件来指定配置，详情请参考 <a href="https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Sentinel">Spring Cloud Alibaba Sentinel 文档</a>。</p></blockquote><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><ul><li><p>Clone project</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;zhoutaoo&#x2F;sentinel-dashboard-docker.git</code></pre></li><li><p>Build Image</p><pre class="language-none"><code class="language-none">cd builddocker build -t cike&#x2F;sentinel-dashboard-docker .</code></pre></li><li><p>Run With docker</p></li></ul><pre class="language-none"><code class="language-none">docker run -p 8021:8021 -it cike&#x2F;sentinel-dashboard-docker</code></pre><ul><li><p>Run With docker-compose</p><pre class="language-none"><code class="language-none">docker-compose up</code></pre></li><li><p>Open the Sentinel Dashboard console in your browser</p><p>link：<a href="http://127.0.0.1:8021/">http://127.0.0.1:8021/</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudFeign学习2-自定义负载均衡规则</title>
      <link href="posts/287249d4.html"/>
      <url>posts/287249d4.html</url>
      
        <content type="html"><![CDATA[<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrayMetadataRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NacosDiscoveryProperties</span> nacosDiscoveryProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NacosServiceManager</span> nacosServiceManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> iClientConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> clusterName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> group <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DynamicServerListLoadBalancer</span> loadBalancer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DynamicServerListLoadBalancer</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NamingService</span> namingService <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nacosServiceManager<span class="token punctuation">.</span><span class="token function">getNamingService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getNacosProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            instances <span class="token operator">=</span> namingService<span class="token punctuation">.</span><span class="token function">selectInstances</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instances <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"没有相关服务 &#123;&#125;"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到相关服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.cnblogs.com/ITPower/p/13353248.html">https://www.cnblogs.com/ITPower/p/13353248.html</a></p><p><a href="https://blog.csdn.net/forezp/article/details/74820899">https://blog.csdn.net/forezp/article/details/74820899</a></p><p><a href="https://blog.didispace.com/springcloud-sourcecode-ribbon/">https://blog.didispace.com/springcloud-sourcecode-ribbon/</a></p><p><a href="https://www.cnblogs.com/rickiyang/p/11802465.html">https://www.cnblogs.com/rickiyang/p/11802465.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign添加认证请求头</title>
      <link href="posts/6a05c2e6.html"/>
      <url>posts/6a05c2e6.html</url>
      
        <content type="html"><![CDATA[<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">feign<span class="token punctuation">.</span></span><span class="token class-name">RequestTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Authentication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignOauth2RequestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">RequestInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AUTHORIZATION_HEADER <span class="token operator">=</span> <span class="token string">"Authorization"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> BEARER_TOKEN_TYPE <span class="token operator">=</span> <span class="token string">"Bearer"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> requestTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SecurityContext</span> securityContext <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> securityContext<span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> authentication<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OAuth2AuthenticationDetails</span> details <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OAuth2AuthenticationDetails</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>AUTHORIZATION_HEADER<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> BEARER_TOKEN_TYPE<span class="token punctuation">,</span> details<span class="token punctuation">.</span><span class="token function">getTokenValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity3-Oauth2自定义返回</title>
      <link href="posts/2af70476.html"/>
      <url>posts/2af70476.html</url>
      
        <content type="html"><![CDATA[<h1 id="token返回"><a href="#token返回" class="headerlink" title="token返回"></a>token返回</h1><h2 id="扩展参数"><a href="#扩展参数" class="headerlink" title="扩展参数"></a>扩展参数</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CusTokenConverter</span> <span class="token keyword">implements</span> <span class="token class-name">TokenEnhancer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">OAuth2AccessToken</span> <span class="token function">enhance</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AccessToken</span> accessToken<span class="token punctuation">,</span> <span class="token class-name">OAuth2Authentication</span> authentication<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> additionalInformation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"wumu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        additionalInformation<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultOAuth2AccessToken</span><span class="token punctuation">)</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAdditionalInformation</span><span class="token punctuation">(</span>additionalInformation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> accessToken<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="重新格式化返回结果"><a href="#重新格式化返回结果" class="headerlink" title="重新格式化返回结果"></a>重新格式化返回结果</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/oauth"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OauthController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TokenEndpoint</span> tokenEndpoint<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/token"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">custom</span><span class="token punctuation">(</span>tokenEndpoint<span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/token"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">postAccessToken</span><span class="token punctuation">(</span><span class="token class-name">Principal</span> principal<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span><span class="token punctuation">,</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">custom</span><span class="token punctuation">(</span>tokenEndpoint<span class="token punctuation">.</span><span class="token function">postAccessToken</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//自定义返回格式</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">custom</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AccessToken</span> accessToken<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DefaultOAuth2AccessToken</span> token <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DefaultOAuth2AccessToken</span><span class="token punctuation">)</span> accessToken<span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getAdditionalInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"accessToken"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getRefreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"refreshToken"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getRefreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="认证错误"><a href="#认证错误" class="headerlink" title="认证错误"></a>认证错误</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionConfig</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@ResponseBody</span>        <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">OAuth2Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">handleOauth2</span><span class="token punctuation">(</span><span class="token class-name">OAuth2Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> map<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/u012702547/article/details/105804972">https://blog.csdn.net/u012702547/article/details/105804972</a></p><p><a href="https://juejin.cn/post/6857296054392471559">https://juejin.cn/post/6857296054392471559</a></p><p><a href="https://blog.csdn.net/u013905744/article/details/100637224">https://blog.csdn.net/u013905744/article/details/100637224</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity-利用jwt生成token</title>
      <link href="posts/46051755.html"/>
      <url>posts/46051755.html</url>
      
        <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>实现Token的方式有很多，本篇介绍的是利用Json Web Token(JWT)生成的Token.JWT生成的Token有什么好处呢？</p><ul><li>安全性比较高，加上密匙加密而且支持多种算法。</li><li>携带的信息是自定义的，而且可以做到验证token是否过期。</li><li>验证信息可以由前端保存，后端不需要为保存token消耗内存。</li></ul><p>本篇分3部分进行讲解。</p><ul><li><ol><li>什么是JWT</li></ol></li><li><ol><li>JWT的代码实现<ul><li>用HS256 对称算法加密</li><li>用RS256 非对称算法加密</li></ul></li></ol></li><li><ol><li>总结</li></ol></li></ul><blockquote><p>如果原理很难懂，没关系。可以直接看JWT的代码实现。代码已经上传<a href="https://links.jianshu.com/go?to=https://github.com/MyBaron/JAVA_JWT_Token">github</a>。已经对代码进行封装成工具类。可以直接使用。</p></blockquote><h2 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h2><p>JSON Web Token 简称JWT。<br> 一个JWT实际上就是一个字符串，它由三部分组成，<code>头部</code>、<code>载荷</code>与<code>签名</code>。<br> JWT生成的token是这样的</p><pre class="language-css" data-language="css"><code class="language-css">eyJpc3MiOiJKb2huI.eyJpc3MiOiJ.Kb2huIFd1IEp</code></pre><blockquote><p>生成的token，是3段，用<code>.</code>连接。下面有解释。</p></blockquote><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。<br> 例如：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>   <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">,</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">&#125;</span></code></pre><h3 id="载荷"><a href="#载荷" class="headerlink" title="载荷"></a>载荷</h3><p>其实就是自定义的数据，一般存储用户Id，过期时间等信息。也就是JWT的核心所在，因为这些数据就是使后端知道此token是哪个用户已经登录的凭证。而且这些数据是存在token里面的，由前端携带，所以后端几乎不需要保存任何数据。<br> 例如：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"uid"</span><span class="token operator">:</span> <span class="token string">"xxxxidid"</span><span class="token punctuation">,</span>  <span class="token comment">//用户id</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token string">"12121212"</span>  <span class="token comment">//过期时间</span><span class="token punctuation">&#125;</span></code></pre><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p>签名其实就是：<br> 1.头部和载荷<code>各自base64加密后用.连接起来</code>，然后就形成了xxx.xx的前两段token。<br> 2.最后一段token的形成是，前两段加入一个密匙用HS256算法或者其他算法加密形成。</p><ol><li>所以token3段的形成就是在签名处形成的。</li></ol><blockquote><p><a href="https://links.jianshu.com/go?to=http://blog.leapoahead.com/2015/09/06/understanding-jwt/">JWT的原理参考文章</a></p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>1.看代码前一定要知道JWT是由<code>头部</code>、<code>载荷</code>与<code>签名</code>组成。<br> 2.<a href="https://links.jianshu.com/go?to=https://github.com/MyBaron/JAVA_JWT_Token">代码已上传github</a>,希望点个赞</p><ol><li>代码将JWT封装成两个工具类，可以直接调用。</li></ol><h3 id="需要下载的jar包"><a href="#需要下载的jar包" class="headerlink" title="需要下载的jar包"></a>需要下载的jar包</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.nimbusds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nimbus-jose-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="HS256-对称加密"><a href="#HS256-对称加密" class="headerlink" title="HS256  对称加密"></a>HS256  对称加密</h3><h4 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 创建秘钥    */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> SECRET <span class="token operator">=</span> <span class="token string">"6MNSobBRCHGIO0fS6MNSobBRCHGIO0fS"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/**    * 过期时间5秒    */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_TIME <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">/**    * 生成Token    * @param account    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">buildJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">/**            * 1.创建一个32-byte的密匙            */</span>           <span class="token class-name">MACSigner</span> macSigner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MACSigner</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 2. 建立payload 载体            */</span>           <span class="token class-name">JWTClaimsSet</span> claimsSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JWTClaimsSet</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">subject</span><span class="token punctuation">(</span><span class="token string">"doi"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">issuer</span><span class="token punctuation">(</span><span class="token string">"http://www.doiduoyi.com"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">expirationTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRE_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">,</span>account<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 3. 建立签名            */</span>           <span class="token class-name">SignedJWT</span> signedJWT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWSHeader</span><span class="token punctuation">(</span><span class="token class-name">JWSAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">)</span><span class="token punctuation">,</span> claimsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>           signedJWT<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>macSigner<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 4. 生成token            */</span>           <span class="token class-name">String</span> token <span class="token operator">=</span> signedJWT<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> token<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeyLengthException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="验证token"><a href="#验证token" class="headerlink" title="验证token"></a>验证token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 校验token    * @param token    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">vaildToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">SignedJWT</span> jwt <span class="token operator">=</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">JWSVerifier</span> verifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MACVerifier</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//校验是否有效</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>verifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Token 无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//校验超时</span>           <span class="token class-name">Date</span> expirationTime <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpirationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>expirationTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Token 已过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//获取载体中的数据</span>           <span class="token class-name">Object</span> account <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//是否有openUid</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"账号为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> account<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="调用的业务逻辑"><a href="#调用的业务逻辑" class="headerlink" title="调用的业务逻辑"></a>调用的业务逻辑</h4><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHS256</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TestHS256</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestHS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">testHS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试HS256加密生成Token</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> JWTHS256<span class="token punctuation">.</span><span class="token function">buildJWT</span><span class="token punctuation">(</span><span class="token string">"account123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解密token</span>        <span class="token class-name">String</span> account <span class="token operator">=</span> JWTHS256<span class="token punctuation">.</span><span class="token function">vaildToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"校验token成功，token的账号："</span><span class="token operator">+</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试过期</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account <span class="token operator">=</span> JWTHS256<span class="token punctuation">.</span><span class="token function">vaildToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><pre class="language-java" data-language="java"><code class="language-java">校验token成功，token的账号：account123测试token过期<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token operator">:</span> <span class="token class-name">Token</span> 已过期    at token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">59</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>JWTHS256<span class="token punctuation">.</span><span class="token function">vaildToken</span><span class="token punctuation">(</span>JWTHS256<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">89</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span><span class="token function">testHS256</span><span class="token punctuation">(</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">TestHS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span></code></pre><h3 id="RS256-非对称加密"><a href="#RS256-非对称加密" class="headerlink" title="RS256 非对称加密"></a>RS256 非对称加密</h3><h4 id="生成加密密钥"><a href="#生成加密密钥" class="headerlink" title="生成加密密钥"></a>生成加密密钥</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 创建加密key     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RSAKey</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JOSEException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RSAKeyGenerator</span> rsaKeyGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSAKeyGenerator</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RSAKey</span> rsaJWK <span class="token operator">=</span> rsaKeyGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rsaJWK<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="生成token-1"><a href="#生成token-1" class="headerlink" title="生成token"></a>生成token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 过期时间5秒    */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE_TIME <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RSAKey</span> rsaKey<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RSAKey</span> publicRsaKey<span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**        * 生成公钥，公钥是提供出去，让使用者校验token的签名        */</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           rsaKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSAKeyGenerator</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           publicRsaKey <span class="token operator">=</span> rsaKey<span class="token punctuation">.</span><span class="token function">toPublicJWK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">buildToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token comment">/**            * 1. 生成秘钥,秘钥是token的签名方持有，不可对外泄漏            */</span>           <span class="token class-name">RSASSASigner</span> rsassaSigner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSASSASigner</span><span class="token punctuation">(</span>rsaKey<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 2. 建立payload 载体            */</span>           <span class="token class-name">JWTClaimsSet</span> claimsSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JWTClaimsSet</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">subject</span><span class="token punctuation">(</span><span class="token string">"doi"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">issuer</span><span class="token punctuation">(</span><span class="token string">"http://www.doiduoyi.com"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">expirationTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> EXPIRE_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">,</span>account<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 3. 建立签名            */</span>           <span class="token class-name">SignedJWT</span> signedJWT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWSHeader</span><span class="token punctuation">(</span><span class="token class-name">JWSAlgorithm</span><span class="token punctuation">.</span>RS256<span class="token punctuation">)</span><span class="token punctuation">,</span> claimsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>           signedJWT<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>rsassaSigner<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/**            * 4. 生成token            */</span>           <span class="token class-name">String</span> token <span class="token operator">=</span> signedJWT<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> token<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="验证token-1"><a href="#验证token-1" class="headerlink" title="验证token"></a>验证token</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">volidToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">SignedJWT</span> jwt <span class="token operator">=</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//添加私密钥匙 进行解密</span>           <span class="token class-name">RSASSAVerifier</span> rsassaVerifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RSASSAVerifier</span><span class="token punctuation">(</span>publicRsaKey<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//校验是否有效</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>rsassaVerifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Token 无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//校验超时</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpirationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Token 已过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//获取载体中的数据</span>           <span class="token class-name">Object</span> account <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"ACCOUNT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//是否有openUid</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"账号为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">return</span> account<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JOSEException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="业务逻辑调用"><a href="#业务逻辑调用" class="headerlink" title="业务逻辑调用"></a>业务逻辑调用</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRS256</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TestRS256</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestRS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">testRS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//测试RS256加密生成Token</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRS256</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> JWTRSA256<span class="token punctuation">.</span><span class="token function">buildToken</span><span class="token punctuation">(</span><span class="token string">"account123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解密token</span>        <span class="token class-name">String</span> account <span class="token operator">=</span> JWTRSA256<span class="token punctuation">.</span><span class="token function">volidToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"校验token成功，token的账号："</span><span class="token operator">+</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试过期</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account <span class="token operator">=</span> JWTRSA256<span class="token punctuation">.</span><span class="token function">volidToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><pre class="language-java" data-language="java"><code class="language-java">校验token成功，token的账号：account123测试token过期<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token operator">:</span> <span class="token class-name">Token</span> 已过期    at token<span class="token punctuation">.</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">ResultException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">59</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>JWTRSA256<span class="token punctuation">.</span><span class="token function">volidToken</span><span class="token punctuation">(</span>JWTRSA256<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">96</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span><span class="token function">testRS256</span><span class="token punctuation">(</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span>    at token<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">TestRS256</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JWT 的实践其实还是挺简单。安全性也是得到了保证，后端只需要保存着密匙，其他数据可以保存在token，由前端携带，这样可以减低后端的内存消耗。<br> 虽然token是加密的，但是携带的验证数据还是不要是敏感数据.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis持久化</title>
      <link href="posts/dcfaa904.html"/>
      <url>posts/dcfaa904.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://redis.io/">Redis</a>有两种持久化的方式：快照（<code>RDB</code>文件）和追加式文件（<code>AOF</code>文件）：</p><ul><li>RDB持久化方式会在一个特定的间隔保存那个时间点的一个数据快照。</li><li>AOF持久化方式则会记录每一个服务器收到的写操作。在服务启动时，这些记录的操作会逐条执行从而重建出原来的数据。写操作命令记录的格式跟Redis协议一致，以追加的方式进行保存。</li><li>Redis的持久化是可以禁用的，就是说你可以让数据的生命周期只存在于服务器的运行时间里。</li><li>两种方式的持久化是可以同时存在的，但是当Redis重启时，AOF文件会被优先用于重建数据。</li></ul><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>Redis调用fork()，产生一个子进程。</li><li>子进程把数据写到一个临时的RDB文件。</li><li>当子进程写完新的RDB文件后，把旧的RDB文件替换掉。</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>RDB文件是一个很简洁的单文件，它保存了某个时间点的Redis数据，很适合用于做备份。你可以设定一个时间点对RDB文件进行归档，这样就能在需要的时候很轻易的把数据恢复到不同的版本。</li><li>基于上面所描述的特性，RDB很适合用于灾备。单文件很方便就能传输到远程的服务器上。</li><li>RDB的性能很好，需要进行持久化时，主进程会fork一个子进程出来，然后把持久化的工作交给子进程，自己不会有相关的I/O操作。</li><li>比起AOF，在数据量比较大的情况下，RDB的启动速度更快。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>RDB容易造成数据的丢失。假设每5分钟保存一次快照，如果Redis因为某些原因不能正常工作，那么从上次产生快照到Redis出现问题这段时间的数据就会丢失了。</li><li>RDB使用<code>fork()</code>产生子进程进行数据的持久化，如果数据比较大的话可能就会花费点时间，造成Redis停止服务几毫秒。如果数据量很大且CPU性能不是很好的时候，停止服务的时间甚至会到1秒。</li></ul><h3 id="文件路径和名称"><a href="#文件路径和名称" class="headerlink" title="文件路径和名称"></a>文件路径和名称</h3><p>默认Redis会把快照文件存储为当前目录下一个名为<code>dump.rdb</code>的文件。要修改文件的存储路径和名称，可以通过修改配置文件<code>redis.conf</code>实现：</p><pre class="language-none"><code class="language-none"># RDB文件名，默认为dump.rdb。dbfilename dump.rdb# 文件存放的目录，AOF文件同样存放在此目录下。默认为当前工作目录。dir .&#x2F;</code></pre><h3 id="保存点（RDB的启用和禁用）"><a href="#保存点（RDB的启用和禁用）" class="headerlink" title="保存点（RDB的启用和禁用）"></a>保存点（RDB的启用和禁用）</h3><p>你可以配置保存点，使Redis如果在每N秒后数据发生了M次改变就保存快照文件。例如下面这个保存点配置表示每60秒，如果数据发生了1000次以上的变动，Redis就会自动保存快照文件：</p><pre class="language-none"><code class="language-none">save 60 1000</code></pre><p>保存点可以设置多个，Redis的配置文件就默认设置了3个保存点：</p><pre class="language-none"><code class="language-none"># 格式为：save &lt;seconds&gt; &lt;changes&gt;# 可以设置多个。save 900 1 #900秒后至少1个key有变动save 300 10 #300秒后至少10个key有变动save 60 10000 #60秒后至少10000个key有变动</code></pre><p>如果想禁用快照保存的功能，可以通过注释掉所有”save”配置达到，或者在最后一条”save”配置后添加如下的配置：</p><pre class="language-none"><code class="language-none">save &quot;&quot;</code></pre><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>默认情况下，如果Redis在后台生成快照的时候失败，那么就会停止接收数据，目的是让用户能知道数据没有持久化成功。但是如果你有其他的方式可以监控到Redis及其持久化的状态，那么可以把这个功能禁止掉。</p><pre class="language-none"><code class="language-none">stop-writes-on-bgsave-error yes</code></pre><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><p>默认Redis会采用<code>LZF</code>对数据进行压缩。如果你想节省点CPU的性能，你可以把压缩功能禁用掉，但是数据集就会比没压缩的时候要打。</p><pre class="language-none"><code class="language-none">rdbcompression yes</code></pre><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><p>从版本5的RDB的开始，一个<code>CRC64</code>的校验码会放在文件的末尾。这样更能保证文件的完整性，但是在保存或者加载文件时会损失一定的性能（大概10%）。如果想追求更高的性能，可以把它禁用掉，这样文件在写入校验码时会用<code>0</code>替代，加载的时候看到<code>0</code>就会直接跳过校验。</p><pre class="language-none"><code class="language-none">rdbchecksum yes</code></pre><h3 id="手动生成快照"><a href="#手动生成快照" class="headerlink" title="手动生成快照"></a>手动生成快照</h3><p>Redis提供了两个命令用于手动生成快照。</p><h4 id="SAVE"><a href="#SAVE" class="headerlink" title="SAVE"></a>SAVE</h4><p><a href="http://redis.io/commands/save">SAVE</a>命令会使用同步的方式生成RDB快照文件，这意味着在这个过程中会阻塞所有其他客户端的请求。因此不建议在生产环境使用这个命令，除非因为某种原因需要去阻止Redis使用子进程进行后台生成快照（例如调用<code>fork(2)</code>出错）。</p><h4 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h4><p><a href="http://redis.io/commands/bgsave">BGSAVE</a>命令使用后台的方式保存RDB文件，调用此命令后，会立刻返回<code>OK</code>返回码。Redis会产生一个子进程进行处理并立刻恢复对客户端的服务。在客户端我们可以使用<a href="http://redis.io/commands/lastsave">LASTSAVE</a>命令查看操作是否成功。</p><pre class="language-none"><code class="language-none">127.0.0.1:6379&gt; BGSAVEBackground saving started127.0.0.1:6379&gt; LASTSAVE(integer) 1433936394</code></pre><blockquote><p>配置文件里禁用了快照生成功能不影响<code>SAVE</code>和<code>BGSAVE</code>命令的效果。</p></blockquote><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>快照并不是很可靠。如果你的电脑突然宕机了，或者电源断了，又或者不小心杀掉了进程，那么最新的数据就会丢失。而AOF文件则提供了一种更为可靠的持久化方式。每当Redis接受到会修改数据集的命令时，就会把命令追加到AOF文件里，当你重启Redis时，AOF里的命令会被重新执行一次，重建数据。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>比RDB可靠。你可以制定不同的fsync策略：不进行fsync、每秒fsync一次和每次查询进行fsync。默认是每秒fsync一次。这意味着你最多丢失一秒钟的数据。</li><li>AOF日志文件是一个纯追加的文件。就算是遇到突然停电的情况，也不会出现日志的定位或者损坏问题。甚至如果因为某些原因（例如磁盘满了）命令只写了一半到日志文件里，我们也可以用<code>redis-check-aof</code>这个工具很简单的进行修复。</li><li>当AOF文件太大时，Redis会自动在后台进行重写。重写很安全，因为重写是在一个新的文件上进行，同时Redis会继续往旧的文件追加数据。新文件上会写入能重建当前数据集的最小操作命令的集合。当新文件重写完，Redis会把新旧文件进行切换，然后开始把数据写到新文件上。</li><li>AOF把操作命令以简单易懂的格式一条接一条的保存在文件里，很容易导出来用于恢复数据。例如我们不小心用<code>FLUSHALL</code>命令把所有数据刷掉了，只要文件没有被重写，我们可以把服务停掉，把最后那条命令删掉，然后重启服务，这样就能把被刷掉的数据恢复回来。</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>在相同的数据集下，AOF文件的大小一般会比RDB文件大。</li><li>在某些fsync策略下，AOF的速度会比RDB慢。通常fsync设置为每秒一次就能获得比较高的性能，而在禁止fsync的情况下速度可以达到RDB的水平。</li><li>在过去曾经发现一些很罕见的BUG导致使用AOF重建的数据跟原数据不一致的问题。</li></ul><h3 id="启用AOF"><a href="#启用AOF" class="headerlink" title="启用AOF"></a>启用AOF</h3><p>把配置项<code>appendonly</code>设为<code>yes</code>：</p><pre class="language-none"><code class="language-none">appendonly yes</code></pre><h3 id="文件路径和名称-1"><a href="#文件路径和名称-1" class="headerlink" title="文件路径和名称"></a>文件路径和名称</h3><pre class="language-none"><code class="language-none"># 文件存放目录，与RDB共用。默认为当前工作目录。dir .&#x2F;# 默认文件名为appendonly.aofappendfilename &quot;appendonly.aof&quot;</code></pre><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>你可以配置Redis调用fsync的频率，有三个选项：</p><ul><li>每当有新命令追加到AOF的时候调用fsync。速度最慢，但是最安全。</li><li>每秒fsync一次。速度快（2.4版本跟快照方式速度差不多），安全性不错（最多丢失1秒的数据）。</li><li>从不fsync，交由系统去处理。这个方式速度最快，但是安全性一般。</li></ul><p>推荐使用每秒fsync一次的方式（默认的方式），因为它速度快，安全性也不错。相关配置如下：</p><pre class="language-none"><code class="language-none"># appendfsync alwaysappendfsync everysec# appendfsync no</code></pre><h3 id="日志重写"><a href="#日志重写" class="headerlink" title="日志重写"></a>日志重写</h3><p>随着写操作的不断增加，AOF文件会越来越大。例如你递增一个计数器100次，那么最终结果就是数据集里的计数器的值为最终的递增结果，但是AOF文件里却会把这100次操作完整的记录下来。而事实上要恢复这个记录，只需要1个命令就行了，也就是说AOF文件里那100条命令其实可以精简为1条。所以Redis支持这样一个功能：在不中断服务的情况下在后台重建AOF文件。</p><p>工作原理如下：</p><ul><li>Redis调用fork()，产生一个子进程。</li><li>子进程把新的AOF写到一个临时文件里。</li><li>主进程持续把新的变动写到内存里的buffer，同时也会把这些新的变动写到旧的AOF里，这样即使重写失败也能保证数据的安全。</li><li>当子进程完成文件的重写后，主进程会获得一个信号，然后把内存里的buffer追加到子进程生成的那个新AOF里。</li><li>Redis</li></ul><p>我们可以通过配置设置日志重写的条件：</p><pre class="language-none"><code class="language-none"># Redis会记住自从上一次重写后AOF文件的大小（如果自Redis启动后还没重写过，则记住启动时使用的AOF文件的大小）。# 如果当前的文件大小比起记住的那个大小超过指定的百分比，则会触发重写。# 同时需要设置一个文件大小最小值，只有大于这个值文件才会重写，以防文件很小，但是已经达到百分比的情况。auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb</code></pre><p>要禁用自动的日志重写功能，我们可以把百分比设置为0：</p><pre class="language-none"><code class="language-none">auto-aof-rewrite-percentage 0</code></pre><blockquote><p>Redis 2.4以上才可以自动进行日志重写，之前的版本需要手动运行<a href="http://redis.io/commands/bgrewriteaof">BGREWRITEAOF</a>这个命令。</p></blockquote><h3 id="数据损坏修复"><a href="#数据损坏修复" class="headerlink" title="数据损坏修复"></a>数据损坏修复</h3><p>如果因为某些原因（例如服务器崩溃）AOF文件损坏了，导致Redis加载不了，可以通过以下方式进行修复：</p><ul><li><p>备份AOF文件。</p></li><li><p>使用<code>redis-check-aof</code>命令修复原始的AOF文件：</p><pre class="language-none"><code class="language-none">$ redis-check-aof --fix</code></pre></li><li><p>可以使用<code>diff -u</code>命令看下两个文件的差异。</p></li><li><p>使用修复过的文件重启Redis服务。</p></li></ul><h3 id="从RDB切换到AOF"><a href="#从RDB切换到AOF" class="headerlink" title="从RDB切换到AOF"></a>从RDB切换到AOF</h3><p>这里只说Redis &gt;= 2.2版本的方式：</p><ul><li><p>备份一个最新的<code>dump.rdb</code>的文件，并把备份文件放在一个安全的地方。</p></li><li><p>运行以下两条命令：</p><pre class="language-none"><code class="language-none">$ redis-cli config set appendonly yes$ redis-cli config set save &quot;&quot;</code></pre></li><li><p>确保数据跟切换前一致。</p></li><li><p>确保数据正确的写到AOF文件里。</p></li></ul><blockquote><p>第二条命令是用来禁用RDB的持久化方式，但是这不是必须的，因为你可以同时启用两种持久化方式。</p></blockquote><blockquote><p>记得对配置文件<code>redis.conf</code>进行编辑启用AOF，因为命令行方式修改配置在重启Redis后就会失效。</p></blockquote><h1 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h1><h2 id="持久化配置"><a href="#持久化配置" class="headerlink" title="持久化配置"></a>持久化配置</h2><ul><li>RBD和AOF建议同时打开（Redis4.0之后支持）</li><li>RDB做冷备，AOF做数据恢复（数据更可靠）</li><li>RDB采取默认配置即可，AOF推荐采取everysec每秒策略</li></ul><p>AOF和RDB还不懂的，请转移到如下几篇：</p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247492839&idx=1&sn=c205eb385b0b1255f1ef9c8b3e3b4b6d&chksm=ebd5dbcbdca252dd677f470e4f2df3578c952015c312246d0171b126e3b1fd007d277e96f602&scene=21#wechat_redirect">看完这篇还不懂Redis的RDB持久化，你们来打我！</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247492865&idx=1&sn=00904394aa074df14bb65a14a56e1ffe&chksm=ebd5da2ddca2533ba1e3d20fd82b8acee93fc75199e9c10e38b62387ca0579c80390f72e3bbd&scene=21#wechat_redirect">天天在用Redis，那你对Redis的AOF持久化到底了解多少呢？</a></p><h2 id="数据备份方案"><a href="#数据备份方案" class="headerlink" title="数据备份方案"></a>数据备份方案</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>我们需要定时备份rdb文件来做冷备，为什么？不是有aof和rbd了吗为什么还要单独写定时任务去备份？因为Redis的aof和rdb是仅仅有一个最新的，比如谁手贱再Redis宕机的时候执行<code>rm -rf aof/rdb</code>了，那不就GG了吗？或者rdb/aof文件损坏了等不可预期的情况。所以我们需要单独备份rdb文件以防万一。</p><p>为什么不定时备份aof而是rdb？定时备份aof没意义呀，<strong>定时</strong>本身就是冷备份，不是实时的，rdb文件又小恢复又快，她哪里不香？</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ul><li>写crontab定时调度脚本去做数据备份。</li><li>每小时都copy一份redis的rdb文件到一个其他目录中，这个目录里的rdb文件仅仅保留48小时内的。也就是每小时都做备份，保留2天内的rdb，只保留48个rdb。</li><li>每天0点0分copy一份redis的rdb文件到一个其他目录中，这个保留一个月的。也就是按天备份。</li><li>每天半夜找个时间将当前服务上的所有rdb备份都上传到云服务上。</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="按小时"><a href="#按小时" class="headerlink" title="按小时"></a>按小时</h4><blockquote><p>每小时copy一次备份，删除48小时前的数据。</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> -e<span class="token comment"># 每小时都执行/usr/local/redis/copy/redis_rdb_copy_hourly.sh脚本</span><span class="token number">0</span> * * * * <span class="token function">sh</span> /usr/local/redis/copy/redis_rdb_copy_hourly.sh<span class="token comment"># redis_rdb_copy_hourly.sh脚本的内容如下：</span><span class="token comment">#!/bin/sh </span><span class="token comment"># +%Y%m%d%k == 年月日时</span><span class="token assign-left variable">cur_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d%k<span class="token variable">`</span></span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token function">mkdir</span> /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># 拷贝rdb到目录</span><span class="token function">cp</span> /var/redis/6379/dump.rdb /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># date -d -48hour +%Y%m%d%k == 48小时前的日期，比如今天2020060214，这个结果就是2020053114</span><span class="token assign-left variable">del_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d -48hour +%Y%m%d%k<span class="token variable">`</span></span><span class="token comment"># 删除48小时之前的目录</span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$del_date</span></code></pre><h3 id="按天"><a href="#按天" class="headerlink" title="按天"></a>按天</h3><blockquote><p>每天copy一次备份，删除一个月前的数据。</p></blockquote><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> -e<span class="token comment"># 每天0点0分开始执行/usr/local/redis/copy/redis_rdb_copy_daily.sh脚本</span><span class="token number">0</span> <span class="token number">0</span> * * * <span class="token function">sh</span> /usr/local/redis/copy/redis_rdb_copy_daily.sh<span class="token comment"># redis_rdb_copy_daily.sh脚本的内容如下：</span><span class="token comment">#!/bin/sh </span><span class="token comment"># 年月日</span><span class="token assign-left variable">cur_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d<span class="token variable">`</span></span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token function">mkdir</span> /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># 拷贝rdb到目录</span><span class="token function">cp</span> /var/redis/6379/dump.rdb /usr/local/redis/rdb/<span class="token variable">$cur_date</span><span class="token comment"># 获取一个月前的时间，比如今天是20200602，那么del_date就是20200502</span><span class="token assign-left variable">del_date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> -d -1month +%Y%m%d<span class="token variable">`</span></span><span class="token comment"># 删除一个月前的数据</span><span class="token function">rm</span> -rf /usr/local/redis/rdb/<span class="token variable">$del_date</span></code></pre><h3 id="传到云"><a href="#传到云" class="headerlink" title="传到云"></a>传到云</h3><p>没法演示，最终目的就是磁盘备份完上传到云，云保留多少天等策略自己看需求。</p><h2 id="数据恢复方案"><a href="#数据恢复方案" class="headerlink" title="数据恢复方案"></a>数据恢复方案</h2><h3 id="redis挂了"><a href="#redis挂了" class="headerlink" title="redis挂了"></a>redis挂了</h3><p>如果仅仅是redis进程挂了，那么直接重启redis进程即可，Redis会按照持久化配置直接基于持久化文件进行恢复数据。</p><p>如果有AOF则按照AOF，AOF和RDB一起开的话也走AOF。</p><h3 id="持久化文件丢了"><a href="#持久化文件丢了" class="headerlink" title="持久化文件丢了"></a>持久化文件丢了</h3><p>如果持久化文件（rdb/aof）损坏了，或者直接丢失了。那么就要采取我们上面所做的rdb备份来进行恢复了。</p><blockquote><p>不要脑子一热想着很简单，就以为直接把rdb拖过来重启redis进程就完事了，这种想法有很多问题。慢慢道来。</p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>问题一：直接把备份的rdb扔到redis持久化目录下然后重启redis不行的原因在于：redis是按照先aof后rdb进行恢复的，所以都是开启aof的，redis启动后会重新生成新的aof文件，里面是空的。所以不会进行任何数据恢复，也就是说虽然你把rdb丢给redis了，但是redis会按照aof来恢复，而aof是redis启动的时候新生成的空文件，所以不会有任何数据进行恢复。</p><p>问题二：那么我们把rdb文件丢给redis后，先将redis的aof关闭再启动redis进程不就能按照rdb来进行恢复了吗？是这样的，没毛病！但是新的问题来了，我们aof肯定要开的，aof对数据保障更可靠。那什么我们按照rdb文件恢复完后再修改redis配置文件开启aof然后重启redis进程不就得了嘛？大哥…你打开aof然后重启redis，这时候redis又会生成一个空的aof文件，这时候恢复的时候又是啥数据都没了。</p><blockquote><p>因为数据是存到内存里，你重启后肯定没了，需要持久化文件来恢复。这时候aof是空的，我恢复个鸡毛啊。</p></blockquote><h3 id="具体方案-1"><a href="#具体方案-1" class="headerlink" title="具体方案"></a>具体方案</h3><blockquote><p>可能有人想到方案了，但是耐心看完，看看我的文采如何。</p></blockquote><p>我不管你是持久化文件丢了还是坏了，我都先<code>rm -rf *</code> 给他删了。</p><ul><li>停止redis进程</li><li>删除坏掉的rdb和aof持久化文件。</li><li>修改配置文件关闭redis的aof持久化。</li><li>找到最新备份的rdb文件扔到redis的持久化目录里。（这里最新的肯定是按照小时备份的最后一个）</li><li>启动Redis进程</li><li>执行<code>set appendonly yes</code>动态打开aof持久化。</li></ul><blockquote><p>也就是说打开aof的操作不是修改配置文件然后重启，而是先热修改让他生成aof，这次生成肯定是会带着内存中完整的数据的。然后再修改配置文件重启。</p></blockquote><ul><li>等aof文件生成后再修改redis配置文件打开aof。</li><li>重启redis进程。</li><li>完美收官。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis基本操作</title>
      <link href="posts/2a3c893b.html"/>
      <url>posts/2a3c893b.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t0">Redis 基本(basic)命令</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t1">Redis 键(key)命令</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t2">Redis 数据类型概述</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t3">Redis 字符串(String)</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t4">Redis 哈希（Hash）</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t5">Redis 列表(List)</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t6">Redis 集合(Set)</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/90339509#t7">Redis 有序集合(sorted set)</a></p><hr><h1 id="Redis-基本-basic-命令"><a href="#Redis-基本-basic-命令" class="headerlink" title="Redis 基本(basic)命令"></a>Redis 基本(basic)命令</h1><p>1、Redis 命令用于在 redis 服务上执行操作，要在 redis 服务上执行命令需要一个 redis 客户端。安装目录下的 redis-cli 就是自带的测试客户端。</p><p>命令行启动自带的 redis-cli 客户端连接到本地的 redis 服务：redis-cli连接远程 redis 服务器：redis-cli -h host -p port -a password</p><table><thead><tr><th><strong>PING</strong></th><th>用于检测 redis 服务是否启动,连接是否正常，连接成功时返回 PONG</th></tr></thead><tbody><tr><td>select index</td><td>Redis Select 命令用于切换到指定的数据库，数据库索引号 index 用数字值指定，以 0 作为起始索引值。</td></tr><tr><td>exit</td><td>退出 redis-cli</td></tr><tr><td>auth password</td><td>当 redis 服务器开启密码验证，客户端连接时没有指定密码时，连接后必须使用 “auth 密码” 先进行授权，否则其它命令会使用不了。</td></tr><tr><td>set key value</td><td>往 redis 数据库设置数据</td></tr><tr><td>get key</td><td>从 redis 数据库读取数据。key 不存在时，返回 nil</td></tr><tr><td>keys *</td><td>查询 redis 数据库中的所有 key 值</td></tr><tr><td>del key</td><td>删除指定的 key 的内容</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20190519102237597.gif" alt="img"></p><h1 id="Redis-键-key-命令"><a href="#Redis-键-key-命令" class="headerlink" title="Redis 键(key)命令"></a>Redis 键(key)命令</h1><p>1、Redis 键命令用于管理 redis 的键。</p><p>2、Redis 键命令的基本语法：command KEY_NAME</p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.redis.net.cn/order/3528.html">del key</a></td><td align="left">删除指定的 key。key 不存在时不影响。可以同时删除多个，如 del key1 key2 …。list、set、zset、hash 中的元素全部删除后，key 也会自动被删除。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/order/3529.html">dump key</a></td><td align="left">序列化给定 key ，并返回被序列化的值。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/order/3530.html">exists key</a></td><td align="left">检查给定 key 是否存在。返回 1 表示存在，返回 0 表示不存在。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/order/3531.html">expire key</a> seconds</td><td align="left">为给定 key 设置过期时间。单位 秒。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/order/3532.html">expireat key timestamp</a></td><td align="left">EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.redis.net.cn/order/3533.html">pexpire key milliseconds</a></td><td align="left">设置 key 的过期时间亿以毫秒计。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3533.html">pexpire</a>at<a href="https://www.redis.net.cn/order/3534.html"> key milliseconds-timestamp</a></td><td align="left">设置 key 过期时间的时间戳(unix timestamp) 以毫秒计。如果 key 后续被重新设置值，比如 set key value，则 key 过期时间失效。</td></tr><tr><td align="left">8</td><td align="left">keys<a href="https://www.redis.net.cn/order/3535.html"> pattern</a></td><td align="left">查找所有符合给定模式( pattern)的 key 。* 表示1个或多个，？ 表示一个任意字符。keys * ：查找所有key，keys user*：查找以 user 开头的 key，keys ag?：查找 ag 开头，且后面只有一个字符的 key。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/order/3536.html">move key db</a></td><td align="left">将当前数据库的 key 移动到给定的数据库 db 当中。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.redis.net.cn/order/3537.html">persist key</a></td><td align="left">移除 key 的过期时间，key 将持久保持。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.redis.net.cn/order/3538.html">pttl key</a></td><td align="left">以毫秒为单位返回 key 的剩余的过期时间。如果没有对 key 设置超时，则返回 -1；-1 表示超时不存在。正常情况返回大于0的正数。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.redis.net.cn/order/3539.html">ttl key</a></td><td align="left">以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td></tr><tr><td align="left">13</td><td align="left">randomkey</td><td align="left">从当前数据库中随机返回一个 key 。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.redis.net.cn/order/3541.html">rename key newkey</a></td><td align="left">修改 key 的名称。key 不存在时会报错：(error) ERR no such key。如果 newkey 已经存在时，则会删除旧值。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.redis.net.cn/order/3542.html">renamenx key newkey</a></td><td align="left">仅当 newkey 不存在时，将 key 改名为 newkey 。key 不存在时报错。</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.redis.net.cn/order/3543.html">type key</a></td><td align="left">返回 key 所储存的值的类型。有 string、list、set、zset、hash。如果 key 不存在，则返回 none</td></tr></tbody></table><p>在线命令演示源码：[Redis 基本命令、键（key）命令、数据类型概述.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 基本命令、键（key）命令、数据类型概述.sql)</p><h1 id="Redis-数据类型概述"><a href="#Redis-数据类型概述" class="headerlink" title="Redis 数据类型概述"></a>Redis 数据类型概述</h1><p>1、Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p><p>2、这里暂时先做个概述，后续会详细说明。</p><p>3、在线命令演示源码：[Redis 基本命令、键（key）命令、数据类型概述.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 基本命令、键（key）命令、数据类型概述.sql)</p><h1 id="Redis-字符串-String"><a href="#Redis-字符串-String" class="headerlink" title="Redis 字符串(String)"></a>Redis 字符串(String)</h1><p>1、string 是 redis最基本的类型，一个key对应一个value。一个键最大能存储512MB。</p><p>2、string 类型是二进制安全的，可以包含任何数据，比如 jpg 图片或者序列化的对象 。</p><p>3、Redis 字符串(String)官网文档：<a href="https://www.redis.net.cn/order/3544.html">https://www.redis.net.cn/order/3544.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">set <a href="https://www.redis.net.cn/tutorial/8669.html">key value</a></td><td align="left">设置指定 key 的值。key 存在时，覆盖其值。总是返回ok。设置的数字会自动转为字符串存储</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8670.html">get key</a></td><td align="left">获取指定 key 的值。如果 key 不存在，则返回 (nil) 相当于 null。如果 key 的类型不是 string ，则报错。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8671.html">getrange key start end</a></td><td align="left"><a href="https://www.redis.net.cn/tutorial/8671.html">range</a>：范围、界限。返回 key 中字符串值的子字符。索引 [start ,end] 从 0开始。可以为负数，如 -1表示倒数第一位，-2 表示倒数第二位。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8672.html">getset key value</a></td><td align="left">将给定 key 的值设为 value ，并返回 key 的旧值(old value)。key 不存在时返回为(nil)，同时创建新值。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8673.html">getbit key offset</a></td><td align="left">对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td></tr><tr><td align="left">6</td><td align="left">[mget key1 <a href="https://www.redis.net.cn/tutorial/8674.html">key2..]</a></td><td align="left">获取所有(一个或多个)给定 key 的值。不存在的 key 返回 (nil)</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8675.html">setbit key offset value</a></td><td align="left">对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8676.html">setex key seconds value</a></td><td align="left">将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8677.html">setnx key value</a></td><td align="left">只有在 key 不存在时设置 key 的值。</td></tr><tr><td align="left">10</td><td align="left">setrange<a href="https://www.redis.net.cn/tutorial/8678.html"> key offset value</a></td><td align="left">用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td align="left">11</td><td align="left">strlen<a href="https://www.redis.net.cn/tutorial/8679.html"> key</a></td><td align="left">返回 key 所储存的字符串值的长度。不存在的 key 返回 0</td></tr><tr><td align="left">12</td><td align="left">[mset key value <a href="https://www.redis.net.cn/tutorial/8680.html">key value …]</a></td><td align="left">同时设置一个或多个 key-value 对。key 存在时，覆盖其值。</td></tr><tr><td align="left">13</td><td align="left">[msetnx key value <a href="https://www.redis.net.cn/tutorial/8681.html">key value …]</a></td><td align="left">同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在才设置。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8682.html">psetex key milliseconds value</a></td><td align="left">这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8683.html">incr key</a></td><td align="left">将 key 中储存的数字值增一。increment：ˈɪŋkrəmənt 增量、增加。如果不是数值，则报错。如果 key 不存在，则新建，incr 后，值为1。</td></tr><tr><td align="left">16</td><td align="left">incrby <a href="https://www.redis.net.cn/tutorial/8684.html">key increment</a></td><td align="left">将 key 所储存的值加上给定的增量值（increment） 。如果不是数值，则报错。如果 key 不存在，则新建。</td></tr><tr><td align="left">17</td><td align="left">incrbyfloat<a href="https://www.redis.net.cn/tutorial/8685.html"> key increment</a></td><td align="left">将 key 所储存的值加上给定的浮点增量值（increment） 。如果不是数值，则报错。如果 key 不存在，则新建。<a href="https://www.redis.net.cn/tutorial/8685.html">increment</a> 不能是变量。</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8686.html">decr key</a></td><td align="left">将 key 中储存的数字值减一。如果不是数值，则报错。如果 key 不存在，则新建，decr 后，值为 -1。如果 key 不存在，则新建。</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8687.html">decrby key decrement</a></td><td align="left">key 所储存的值减去给定的减量值（decrement） 。如果 key 不存在，则新建。<a href="https://www.redis.net.cn/tutorial/8685.html">increment</a></td></tr><tr><td align="left">20</td><td align="left"><a href="https://www.redis.net.cn/tutorial/8688.html">append key value</a></td><td align="left">如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。如果 key 不存在，则新建。value 不能是变量。</td></tr></tbody></table><p>4、在线命令演示：[Redis 字符串(String)命令演示.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 字符串(String)命令演示.sql)</p><p><img src="https://img-blog.csdnimg.cn/20201010201027478.gif" alt="img"></p><h1 id="Redis-哈希（Hash）"><a href="#Redis-哈希（Hash）" class="headerlink" title="Redis 哈希（Hash）"></a><strong>Redis 哈希（Hash）</strong></h1><p>1、Redis hash 是一个键值对集合，值可以看成一个 Map。</p><p>2、Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>3、每个 hash 可以存储 40多亿键值对。</p><p>hmset key filed value [filed2 value2 filed3 value3 …]：同时为 key 指定多个 filed 与 valuehgetall key：获取 key 中的所有 filed-value</p><p>4、Redis 哈希(Hash)官网文档：<a href="https://www.redis.net.cn/order/3564.html">https://www.redis.net.cn/order/3564.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[hdel key field2 <a href="https://www.redis.net.cn/order/3564.html">field2]</a></td><td align="left">删除一个或多个哈希表字段。返回值成功删除的个数。key 或 field 不存在时会自动忽略。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/order/3565.html">hexists key field</a></td><td align="left">查看哈希表 key 中，指定的字段是否存在。返回1表示有，返回0表示没有。key 不存在时也返回0.</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/order/3566.html">hget key field</a></td><td align="left">获取存储在哈希表中指定字段的值。key 或 field 不存在时，返回 (nil)。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/order/3567.html">hgetall key</a></td><td align="left">获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/order/3568.html">hincrby key field increment</a></td><td align="left">为哈希表 key 中的指定字段的整数值加上增量 increment 。field 必须是数值，否则报错。key 不存在时会自动新建。field 不存在时也会自动新建。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.redis.net.cn/order/3569.html">hincrbyfloat key field increment</a></td><td align="left">为哈希表 key 中的指定字段的浮点数值加上增量 increment 。field 必须是数值，否则报错。key 不存在时会自动新建。field 不存在时也会自动新建。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3570.html">hkeys key</a></td><td align="left">获取所有哈希表中的字段</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.redis.net.cn/order/3571.html">hlen key</a></td><td align="left">获取哈希表中字段的数量。key 不存在时返回0.</td></tr><tr><td align="left">9</td><td align="left">[hmget key field1 <a href="https://www.redis.net.cn/order/3572.html">field2]</a></td><td align="left">获取所有给定字段的值。key 或 field 不存在时，返回 (nil)。</td></tr><tr><td align="left">10</td><td align="left">[hmset key field1 value1 <a href="https://www.redis.net.cn/order/3573.html">field2 value2 ]</a></td><td align="left">同时将多个 field-value (域-值)对设置到哈希表 key 中。field 存在时，覆盖 value。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.redis.net.cn/order/3574.html">hset key field value</a></td><td align="left">将哈希表 key 中的字段 field 的值设为 value 。field 存在时，覆盖 value。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.redis.net.cn/order/3575.html">hsetnx key field value</a></td><td align="left">只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.redis.net.cn/order/3576.html">hvals key</a></td><td align="left">获取哈希表中所有值</td></tr><tr><td align="left">14</td><td align="left">HSCAN key cursor [MATCH pattern] [COUNT count]</td><td align="left">迭代哈希表中的键值对。</td></tr></tbody></table><p>5、命令在线演示：[Redis 哈希（Hash）命令演示.sql](<a href="https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis">https://gitee.com/wangmx1993/my-document/blob/master/redis/Redis</a> 哈希（Hash）命令演示.sql)</p><p><img src="https://img-blog.csdnimg.cn/20201010201056850.gif" alt="img"></p><h1 id="Redis-列表-List"><a href="#Redis-列表-List" class="headerlink" title="Redis 列表(List)"></a>Redis 列表(List)</h1><p>1、Redis 列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素导列表的头部（左边）或者尾部（右边）。</p><p>2、每个列表最多可存储 4294967295 个元素（约40多亿)</p><p>lpush key value1 value2 value3 …：在指定的 key 关联的 lsit 的头部插入所有的 value，如果 key 不存在，则会先创建一个与该 key 关联的空链表，之后向链表的头部插入数据，插入成功，返回插入的个数。lrange key start end：获取链表中 [start,end] 之间的元素值，从0开始计数。可以为负数，如 -1 表示链表尾部的元素，-2 表示倒数第二个。</p><p>3、Redis 列表(List)官网文档：<a href="https://www.redis.net.cn/order/3577.html">https://www.redis.net.cn/order/3577.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[blpop key1 <a href="https://www.redis.net.cn/order/3577.html">key2 ] timeout</a></td><td align="left">移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">2</td><td align="left">[brpop key1 <a href="https://www.redis.net.cn/order/3578.html">key2 ] timeout</a></td><td align="left">移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/order/3579.html">brpoplpush source destination timeout</a></td><td align="left">从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.redis.net.cn/order/3580.html">lindex key index</a></td><td align="left">通过索引获取列表中的元素</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/order/3581.html">linsert key BEFORE|AFTER pivot value</a></td><td align="left">在 pivot 元素前/后插入 value 元素。成功时返回列表中元素的个数。key 不存在时返回0。pivot 不存在时返回-1。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.redis.net.cn/order/3582.html">llen key</a></td><td align="left">获取列表长度。key 不存在时返回0；</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3583.html">lpop key</a></td><td align="left">返回并弹出指定 key 关联的列表中的第一个元素（头部元素）。如果 key 不存在，则返回(nil)。弹出之后，列表中的此元素也就不存在了。</td></tr><tr><td align="left">8</td><td align="left">[lpush key value1 <a href="https://www.redis.net.cn/order/3584.html">value2]</a></td><td align="left">将一个或多个值插入到列表头部。如果 key 不存在，则先创建一个与该 key 关联的空列表，然后向列表的头部插入数据，返回插入成功的个数。因为有索引，所以可以插入重复的元素。返回 list 中的元素个数。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/order/3585.html">lpushx key value</a></td><td align="left">将一个或多个值插入到已存在的列表头部</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.redis.net.cn/order/3586.html">lrange key start stop</a></td><td align="left">获取链表中 [start,end] 之间的元素值。索引从0开始，可以为负数，如 -1 表示倒数第一个元素，-2 表示倒数第二个元素…。end 可以超出列表的整个大小，此时多余的会自动忽略。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.redis.net.cn/order/3587.html">lrem key count value</a></td><td align="left">删除 count 个值为 value 的元素。count &gt; 0，则从头向尾遍历并删除 count 个值为 value 的元素，count &lt; 0 ，则从尾向前遍历进行删除。count =0，则删除链表中所有的 value 元素。返回删除成功的个数。value 不存在时返回0。key 不存在时返回0。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.redis.net.cn/order/3588.html">lset key index value</a></td><td align="left">设置列表中索引为 index 的元素值，0 表示首元素，-1表示尾元素。如果 index 不存在，则抛出异常。如果 key 不存在，也抛出异常。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.redis.net.cn/order/3589.html">ltrim key start stop</a></td><td align="left">对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.redis.net.cn/order/3590.html">rpop key</a></td><td align="left">移除并获取列表最后一个元素</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.redis.net.cn/order/3591.html">rpoplpush source destination</a></td><td align="left">将 resource 链表的尾部元素弹出并添加到 destination 链表的头部。成功时返回操作的元素。如果resource不存在，则返回（nil）。如果 destination 不存在，则自动会新建。</td></tr><tr><td align="left">16</td><td align="left">[rpush key value1 <a href="https://www.redis.net.cn/order/3592.html">value2]</a></td><td align="left">在列表尾部添加一个或多个值</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.redis.net.cn/order/3593.html">rpushx key value</a></td><td align="left">为已存在的列表的尾部添加值</td></tr></tbody></table><p>rpoplpush 使用场景：</p><p>  Redis 链表经常会被用于消息队列的服务，已完成多程序之间的消息交互。   假设一个应用程序正在执行 lpush 操作向链表头部插入新的元素，通常将这样的程序称之为”生产者(Producer)”，   而另一个应用程序正在执行 rpop 操作从链表的尾部取出元素，通常称之为”消费者（Consumer）”。   如果此时消费者程序取出消息后突然崩溃了，由于该消息已经被取出且没有被正常处理，那么就认为此消息已经丢失，由此可能导致业务数据丢失。   然而通过 rpoplpush 命令，消费者程序在主消息队列中取出消息之后再将其插入到备份队列中，直到消费者程序完成正常的处理后，再将该消息从备份列表中删除。   同时还可以提供一个守护进程，当发现备份队列中的消息过期时，可以重新将其再放回到主消息队列中，以便其它消费者程序继续处理。</p><p> <img src="https://img-blog.csdnimg.cn/20201010200802602.gif" alt="img"></p><h1 id="Redis-集合-Set"><a href="#Redis-集合-Set" class="headerlink" title="Redis 集合(Set)"></a>Redis 集合(Set)</h1><p>1、Redis 的 Set 是 string 类型的无序集合。和 java 一样，集合中不会有重复的元素。</p><p>2、集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>3、每个集合中最大的成员数为 4294967295（40多亿个成员)。</p><p>sadd key value1 value2 …：向集合 key 中添加元素，key 不存在时会自动新建，value 存在时，后一次的会被忽略。smembers key：获取集合 key 中的所有元素。</p><p>4、Redis 集合(Set)官网文档：<a href="https://www.redis.net.cn/order/3594.html">https://www.redis.net.cn/order/3594.html</a></p><table><thead><tr><th align="left">序号</th><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[sadd key member1 <a href="https://www.redis.net.cn/order/3594.html">member2]</a></td><td align="left">向集合添加一个或多个成员。如果 value 已经存在，则不会再添加。返回插入成功的个数。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.redis.net.cn/order/3595.html">scard key</a></td><td align="left">获取集合的成员数。key 不存在时，返回0。</td></tr><tr><td align="left">3</td><td align="left">[sdiff key1 <a href="https://www.redis.net.cn/order/3596.html">key2]</a></td><td align="left">返回给定所有集合的差集。求 key1 与 key2 key3 …的差集，即 key1 中有，但 key2 key3 …都没有的元素。</td></tr><tr><td align="left">4</td><td align="left">[sdiffstore destination key1 <a href="https://www.redis.net.cn/order/3597.html">key2]</a></td><td align="left">将 key1 集合与其它集合的差集放入到 destination 集合中。如果 destination 已经存在且有值，则会被全部清除，不存在时会新建。</td></tr><tr><td align="left">5</td><td align="left">[sinter key1 <a href="https://www.redis.net.cn/order/3598.html">key2]</a></td><td align="left">返回给定所有集合的交集。求 key1 与 key2 key3 …集合的交集。</td></tr><tr><td align="left">6</td><td align="left">[sinterstore destination key1 <a href="https://www.redis.net.cn/order/3599.html">key2]</a></td><td align="left">将 key1 与其它集合的交集存放到 destination 集合中。如果 destination 集合已经有值，则会先被清理。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.redis.net.cn/order/3600.html">sismember key member</a></td><td align="left">判断 member 元素是否是集合 key 的成员。返回1表示存在，返回0表示不存在。key 不存在时也返回0。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.redis.net.cn/order/3601.html">smembers key</a></td><td align="left">返回集合中的所有成员</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.redis.net.cn/order/3602.html">smove source destination member</a></td><td align="left">将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.redis.net.cn/order/3603.html">spop key</a></td><td align="left">移除并返回集合中的一个随机元素</td></tr><tr><td align="left">11</td><td align="left">[srandmember key <a href="https://www.redis.net.cn/order/3604.html">count]</a></td><td align="left">返回集合中一个或多个随机数。key 不存在时返回（nil）</td></tr><tr><td align="left">12</td><td align="left">[srem key member1 <a href="https://www.redis.net.cn/order/3605.html">member2]</a></td><td align="left">移除集合中一个或多个成员。返回成功删除的个数。 当然也可以使用 del key 直接删除整个集合。</td></tr><tr><td align="left">13</td><td align="left">[sunion key1 <a href="https://www.redis.net.cn/order/3606.html">key2]</a> …</td><td align="left">返回所有给定集合的并集。求 key1 与集合 key2 key3 …的并集。</td></tr><tr><td align="left">14</td><td align="left">[sunionstore destination key1 <a href="https://www.redis.net.cn/order/3607.html">key2]</a> …</td><td align="left">所有给定集合的并集存储在 destination 集合中。将并集结果存放到 destination 集合中。如果 destination 已经有值，则会被清除。</td></tr><tr><td align="left">15</td><td align="left">[sscan key cursor <a href="https://www.redis.net.cn/order/3608.html">MATCH pattern] [COUNT count]</a></td><td align="left">迭代集合中的元素</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20201010200903246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdteDE5OTMzMjg=,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20201010200914979.gif" alt="img"></p><h1 id="Redis-有序集合-sorted-set"><a href="#Redis-有序集合-sorted-set" class="headerlink" title="Redis 有序集合(sorted set)"></a>Redis 有序集合(sorted set)</h1><p>1、Redis zset 和 set 一样也是 string 类型元素的集合，且不允许重复的成员。</p><p>2、不同的是每个元素都会关联一个 double 类型的分数，redis 正是通过分数来为集合中的成员进行从小到大的排序。</p><p>3、zset 的成员是唯一的，但分数(score)却可以重复。</p><p>zadd key score1 member1 score2 member2 …：添加元素到集合，元素在集合中存在则更新对应 score：zrangebyscore key min max ：返回分数在 [mix,max]之间的成员，并按照分数由低到高排序。</p><p>4、Redis 有序集合(sorted set)官网文档：<a href="https://www.redis.net.cn/order/3609.html">https://www.redis.net.cn/order/3609.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity自定义异常</title>
      <link href="posts/d6f2c8a8.html"/>
      <url>posts/d6f2c8a8.html</url>
      
        <content type="html"><![CDATA[<p><strong>Spring Security</strong> 中的异常主要分为两大类：一类是认证异常，另一类是授权相关的异常。</p><h1 id="AuthenticationException"><a href="#AuthenticationException" class="headerlink" title="AuthenticationException"></a>AuthenticationException</h1><p><code>AuthenticationException</code> 是在用户认证的时候出现错误时抛出的异常。主要的子类如图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/11/7/16e42fa6b14db7fe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="AuthenticationException.png"></p><p>根据该图的信息，系统用户不存在，被锁定，凭证失效，密码错误等认证过程中出现的异常都由 <code>AuthenticationException</code> 处理。</p><h1 id="AccessDeniedException"><a href="#AccessDeniedException" class="headerlink" title="AccessDeniedException"></a>AccessDeniedException</h1><p><code>AccessDeniedException</code> 主要是在用户在访问受保护资源时被拒绝而抛出的异常。同 <code>AuthenticationException</code> 一样它也提供了一些具体的子类。如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/11/7/16e42fa6d6e875bf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="AccessDeniedException.png"></p><p><code>AccessDeniedException</code> 的子类比较少，主要是 <code>CSRF</code> 相关的异常和授权服务异常。</p><h1 id="Http-状态对认证授权的规定"><a href="#Http-状态对认证授权的规定" class="headerlink" title="Http 状态对认证授权的规定"></a>Http 状态对认证授权的规定</h1><p><strong>Http</strong> 协议对认证授权的响应结果也有规定。</p><h2 id="401-未授权状态"><a href="#401-未授权状态" class="headerlink" title="401 未授权状态"></a>401 未授权状态</h2><p><strong>HTTP 401 错误 - 未授权(Unauthorized)</strong> 一般来说该错误消息表明您首先需要登录（输入有效的用户名和密码）。 如果你刚刚输入这些信息，立刻就看到一个 <code>401</code> 错误，就意味着，无论出于何种原因您的用户名和密码其中之一或两者都无效（输入有误，用户名暂时停用，账户被锁定，凭证失效等） 。总之就是认证失败了。其实正好对应我们上面的 <code>AuthenticationException</code> 。</p><h2 id="403-被拒绝状态"><a href="#403-被拒绝状态" class="headerlink" title="403 被拒绝状态"></a>403 被拒绝状态</h2><p><strong>HTTP 403 错误 - 被禁止(Forbidden)</strong>  出现该错误表明您在访问受限资源时没有得到许可。服务器理解了本次请求但是拒绝执行该任务，该请求不该重发给服务器。并且服务器想让客户端知道为什么没有权限访问特定的资源，服务器应该在返回的信息中描述拒绝的理由。一般实践中我们会比较模糊的表明原因。 该错误对应了我们上面的 <code>AccessDeniedException</code> 。</p><h1 id="Spring-Security-中的异常处理"><a href="#Spring-Security-中的异常处理" class="headerlink" title="Spring Security 中的异常处理"></a>Spring Security 中的异常处理</h1><p>我们在 <strong>Spring Security</strong> 实战干货系列文章中的 <a href="https://felord.cn/spring-security-httpsecurity.html">自定义配置类入口 WebSecurityConfigurerAdapter</a> 一文中提到 <code>HttpSecurity</code> 提供的 <code>exceptionHandling()</code> 方法用来提供异常处理。该方法构造出 <code>ExceptionHandlingConfigurer</code> 异常处理配置类。该配置类提供了两个实用接口：</p><ul><li><strong>AuthenticationEntryPoint</strong> 该类用来统一处理 <code>AuthenticationException</code> 异常</li><li><strong>AccessDeniedHandler</strong>  该类用来统一处理 <code>AccessDeniedException</code> 异常</li></ul><p>我们只要实现并配置这两个异常处理类即可实现对 <strong>Spring Security</strong> 认证授权相关的异常进行统一的自定义处理。</p><h3 id="4-1-实现-AuthenticationEntryPoint"><a href="#4-1-实现-AuthenticationEntryPoint" class="headerlink" title="4.1 实现 AuthenticationEntryPoint"></a>4.1 实现 AuthenticationEntryPoint</h3><p>以 <code>json</code> 信息响应。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationEntryPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token comment">/** * @author dax * @since 2019/11/6 22:11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAuthenticationEntryPoint</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> authException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//todo your business</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span>SC_UNAUTHORIZED<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> resBody <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> printWriter <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-2-实现-AccessDeniedHandler"><a href="#4-2-实现-AccessDeniedHandler" class="headerlink" title="4.2 实现 AccessDeniedHandler"></a>4.2 实现 AccessDeniedHandler</h3><p>同样以 <code>json</code> 信息响应。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token comment">/** * @author dax * @since 2019/11/6 22:19 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAccessDeniedHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedException</span> accessDeniedException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//todo your business</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span>SC_FORBIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> resBody <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> printWriter <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-3-个人实践建议"><a href="#4-3-个人实践建议" class="headerlink" title="4.3 个人实践建议"></a>4.3 个人实践建议</h3><p>其实我个人建议 <strong>Http</strong> 状态码 都返回 <code>200</code> 而将 401 状态在 元信息 <code>Map</code> 中返回。因为异常状态码在浏览器端会以 <strong>error</strong> 显示。我们只要能捕捉到 <code>401</code> 和 <code>403</code> 就能认定是认证问题还是授权问题。</p><h3 id="4-4-配置"><a href="#4-4-配置" class="headerlink" title="4.4 配置"></a>4.4 配置</h3><p>实现了上述两个接口后，我们只需要在 <code>WebSecurityConfigurerAdapter</code> 的 <code>configure(HttpSecurity http)</code> 方法中配置即可。相关的配置片段如下：</p><pre class="language-java" data-language="java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><a href="https://juejin.cn/post/6844903988895154184">https://juejin.cn/post/6844903988895154184</a></p><p><a href="https://ld246.com/article/1545318463746">https://ld246.com/article/1545318463746</a></p><p><a href="https://blog.csdn.net/qq_38225558/category_9395795.html">https://blog.csdn.net/qq_38225558/category_9395795.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud API聚合</title>
      <link href="posts/3cb9b8de.html"/>
      <url>posts/3cb9b8de.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用原本的Swagger"><a href="#使用原本的Swagger" class="headerlink" title="使用原本的Swagger"></a>使用原本的Swagger</h1><h2 id="重写接口"><a href="#重写接口" class="headerlink" title="重写接口"></a>重写接口</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SwaggerService</span> swaggerService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/swagger-resources/configuration/security"</span><span class="token punctuation">)</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityConfiguration</span><span class="token punctuation">></span></span> <span class="token function">securityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getSecurityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/swagger-resources/configuration/ui"</span><span class="token punctuation">)</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UiConfiguration</span><span class="token punctuation">></span></span> <span class="token function">uiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UiConfiguration</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getUiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取swagger服务列表，swagger页面自动请求     *     * @return list     */</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/swagger-resources"</span><span class="token punctuation">)</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">swaggerResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查询不包含跳过的服务的路由列表     */</span>    <span class="token annotation punctuation">@ApiIgnore</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/v1/swaggers/resources"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">resources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>swaggerService<span class="token punctuation">.</span><span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>查询可以提供的接口服务，可以从注册中心中去查找，这里直接写固定的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SwaggerService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span></span> <span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UiConfiguration</span> <span class="token function">getUiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SecurityConfiguration</span> <span class="token function">getSecurityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SwaggerService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span></span> <span class="token function">getSwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SwaggerResource</span><span class="token punctuation">></span></span> resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SwaggerResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SwaggerResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resource<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"demo-user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resource<span class="token punctuation">.</span><span class="token function">setSwaggerVersion</span><span class="token punctuation">(</span><span class="token string">"2.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里可以使用网关地址，获取自己手动请求，不然有跨域问题</span>        resource<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:9000/user/v2/api-docs"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        resources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resources<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UiConfiguration</span> <span class="token function">getUiConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UiConfiguration</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">SecurityConfiguration</span> <span class="token function">getSecurityConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecurityConfiguration</span><span class="token punctuation">(</span>                <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"unknown"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span>                <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">,</span>                <span class="token class-name">ApiKeyVehicle</span><span class="token punctuation">.</span>HEADER<span class="token punctuation">,</span> <span class="token string">"token"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h1 id="knife4j"><a href="#knife4j" class="headerlink" title="knife4j"></a>knife4j</h1><p><a href="https://doc.xiaominfo.com/knife4j/resources/aggregation-introduction.html">https://doc.xiaominfo.com/knife4j/resources/aggregation-introduction.html</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://juejin.cn/post/6854573219916201997">https://juejin.cn/post/6854573219916201997</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudGateway基本操作-限流（详细版）</title>
      <link href="posts/d858ee63.html"/>
      <url>posts/d858ee63.html</url>
      
        <content type="html"><![CDATA[<p>话说在 Spring Cloud Gateway 问世之前，Spring Cloud 的微服务世界里，网关一定非 Netflix Zuul 莫属。但是由于 Zuul 1.x 存在的一些问题，比如阻塞式的 API，不支持 WebSocket 等，一直被人所诟病，而且 Zuul 升级新版本依赖于 Netflix 公司，经过几次跳票之后，Spring 开源社区决定推出自己的网关组件，替代 Netflix Zuul。</p><p>从 18 年 6 月 Spring Cloud 发布的 Finchley 版本开始，Spring Cloud Gateway 逐渐崭露头角，它基于 Spring 5.0、Spring Boot 2.0 和 Project Reactor 等技术开发，不仅支持响应式和无阻塞式的 API，而且支持 WebSocket，和 Spring 框架紧密集成。尽管 Zuul 后来也推出了 2.x 版本，在底层使用了异步无阻塞式的 API，大大改善了其性能，但是目前看来 Spring 并没有打算继续集成它的计划。</p><p>根据官网的描述，Spring Cloud Gateway 的主要特性如下：</p><ul><li>Built on Spring Framework 5, Project Reactor and Spring Boot 2.0</li><li>Able to match routes on any request attribute</li><li>Predicates and filters are specific to routes</li><li>Hystrix Circuit Breaker integration</li><li>Spring Cloud DiscoveryClient integration</li><li>Easy to write Predicates and Filters</li><li>Request Rate Limiting</li><li>Path Rewriting</li></ul><p>可以看出 Spring Cloud Gateway 可以很方便的和 Spring Cloud 生态中的其他组件进行集成（比如：断路器和服务发现），而且提供了一套简单易写的 <strong>断言</strong>（<strong>Predicates</strong>，有的地方也翻译成 <strong>谓词</strong>）和 <strong>过滤器</strong>（<strong>Filters</strong>）机制，可以对每个 <strong>路由</strong>（<strong>Routes</strong>）进行特殊请求处理。</p><p>最近在项目中使用了 Spring Cloud Gateway，并在它的基础上实现了一些高级特性，如限流和留痕，在网关的使用过程中遇到了不少的挑战，于是趁着项目结束，抽点时间系统地学习并总结下。这篇文章主要学习限流技术，首先我会介绍一些常见的限流场景和限流算法，然后介绍一些关于限流的开源项目，学习别人是如何实现限流的，最后介绍我是如何在网关中实现限流的，并分享一些实现过程中的经验和遇到的坑。</p><h2 id="一、常见的限流场景"><a href="#一、常见的限流场景" class="headerlink" title="一、常见的限流场景"></a>一、常见的限流场景</h2><p><strong>缓存</strong>、<strong>降级</strong> 和 <strong>限流</strong> 被称为高并发、分布式系统的三驾马车，网关作为整个分布式系统中的第一道关卡，限流功能自然必不可少。通过限流，可以控制服务请求的速率，从而提高系统应对突发大流量的能力，让系统更具弹性。限流有着很多实际的应用场景，比如双十一的秒杀活动， 12306 的抢票等。</p><h3 id="1-1-限流的对象"><a href="#1-1-限流的对象" class="headerlink" title="1.1 限流的对象"></a>1.1 限流的对象</h3><p>通过上面的介绍，我们对限流的概念可能感觉还是比较模糊，到底限流限的是什么？顾名思义，限流就是限制流量，但这里的流量是一个比较笼统的概念。如果考虑各种不同的场景，限流是非常复杂的，而且和具体的业务规则密切相关，可以考虑如下几种常见的场景：</p><ul><li>限制某个接口一分钟内最多请求 100 次</li><li>限制某个用户的下载速度最多 100KB/S</li><li>限制某个用户同时只能对某个接口发起 5 路请求</li><li>限制某个 IP 来源禁止访问任何请求</li></ul><p>从上面的例子可以看出，根据不同的请求者和请求资源，可以组合出不同的限流规则。可以根据请求者的 IP 来进行限流，或者根据请求对应的用户来限流，又或者根据某个特定的请求参数来限流。而限流的对象可以是请求的频率，传输的速率，或者并发量等，其中最常见的两个限流对象是请求频率和并发量，他们对应的限流被称为 <strong>请求频率限流</strong>（Request rate limiting）和 <strong>并发量限流</strong>（Concurrent requests limiting）。<strong>传输速率限流</strong> 在下载场景下比较常用，比如一些资源下载站会限制普通用户的下载速度，只有购买会员才能提速，这种限流的做法实际上和请求频率限流类似，只不过一个限制的是请求量的多少，一个限制的是请求数据报文的大小。这篇文章主要介绍请求频率限流和并发量限流。</p><h3 id="1-2-限流的处理方式"><a href="#1-2-限流的处理方式" class="headerlink" title="1.2 限流的处理方式"></a>1.2 限流的处理方式</h3><p>在系统中设计限流方案时，有一个问题值得设计者去仔细考虑，当请求者被限流规则拦截之后，我们该如何返回结果。一般我们有下面三种限流的处理方式：</p><ul><li>拒绝服务</li><li>排队等待</li><li>服务降级</li></ul><p>最简单的做法是拒绝服务，直接抛出异常，返回错误信息（比如返回 HTTP 状态码 429 Too Many Requests），或者给前端返回 302 重定向到一个错误页面，提示用户资源没有了或稍后再试。但是对于一些比较重要的接口不能直接拒绝，比如秒杀、下单等接口，我们既不希望用户请求太快，也不希望请求失败，这种情况一般会将请求放到一个消息队列中排队等待，消息队列可以起到削峰和限流的作用。第三种处理方式是服务降级，当触发限流条件时，直接返回兜底数据，比如查询商品库存的接口，可以默认返回有货。</p><h3 id="1-3-限流的架构"><a href="#1-3-限流的架构" class="headerlink" title="1.3 限流的架构"></a>1.3 限流的架构</h3><p>针对不同的系统架构，需要使用不同的限流方案。如下图所示，服务部署的方式一般可以分为单机模式和集群模式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loUHVzVllCc2JnVWljU3RLS0VpYzZXRjRYT256cmpBRzZzSW96eWhUUVlKaEg3ZEJtN2JnMWczVncvNjQw?x-oss-process=image/format,png" alt="img"></p><p>单机模式的限流非常简单，可以直接基于内存就可以实现，而集群模式的限流必须依赖于某个“中心化”的组件，比如网关或 Redis，从而引出两种不同的限流架构：<strong>网关层限流</strong> 和 <strong>中间件限流</strong>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loNE80aWFtRWppY0kzM0U3U1RiaWNWS1p2SkxzNVlJZE1Uek9tZVhxcXhPa3oxSkNoSDUwc0RXdTNRLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>网关作为整个分布式系统的入口，承担了所有的用户请求，所以在网关中进行限流是最合适不过的。网关层限流有时也被称为 <strong>接入层限流</strong>。除了我们使用的 Spring Cloud Gateway，最常用的网关层组件还有 Nginx，可以通过它的 ngx_http_limit_req_module 模块，使用 limit_conn_zone、limit_req_zone、limit_rate 等指令很容易的实现并发量限流、请求频率限流和传输速率限流。这里不对 Nginx 作过多的说明，关于这几个指令的详细信息可以 参考 Nginx 的官方文档。</p><p>另一种限流架构是中间件限流，可以将限流的逻辑下沉到服务层。但是集群中的每个服务必须将自己的流量信息统一汇总到某个地方供其他服务读取，一般来说用 Redis 的比较多，Redis 提供的过期特性和 lua 脚本执行非常适合做限流。除了 Redis 这种中间件，还有很多类似的分布式缓存系统都可以使用，如 Hazelcast、Apache Ignite、Infinispan 等。</p><p>我们可以更进一步扩展上面的架构，将网关改为集群模式，虽然这还是网关层限流架构，但是由于网关变成了集群模式，所以网关必须依赖于中间件进行限流，这和上面讨论的中间件限流没有区别。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loM2VMS2ljTjVPamtQeTg1SnpreGNUREFjOWJ4SG1JZVlpY1VmalVJWkNyTVJtdEYydVlUSVBnaWFBLzY0MA?x-oss-process=image/format,png" alt="img"></p><h2 id="二、常见的限流算法"><a href="#二、常见的限流算法" class="headerlink" title="二、常见的限流算法"></a>二、常见的限流算法</h2><p>通过上面的学习，我们知道限流可以分为请求频率限流和并发量限流，根据系统架构的不同，又可以分为网关层限流和分布式限流。在不同的应用场景下，我们需要采用不同的限流算法。这一节将介绍一些主流的限流算法。</p><p>有一点要注意的是，利用池化技术也可以达到限流的目的，比如线程池或连接池，但这不是本文的重点。</p><h3 id="2-1-固定窗口算法（Fixed-Window）"><a href="#2-1-固定窗口算法（Fixed-Window）" class="headerlink" title="2.1 固定窗口算法（Fixed Window）"></a>2.1 固定窗口算法（Fixed Window）</h3><p>固定窗口算法是一种最简单的限流算法，它根据限流的条件，将请求时间映射到一个时间窗口，再使用计数器累加访问次数。譬如限流条件为每分钟 5 次，那么就按照分钟为单位映射时间窗口，假设一个请求时间为 11:00:45，时间窗口就是 11:00:00 ~ 11:00:59，在这个时间窗口内设定一个计数器，每来一个请求计数器加一，当这个时间窗口的计数器超过 5 时，就触发限流条件。当请求时间落在下一个时间窗口内时（11:01:00 ~ 11:01:59），上一个窗口的计数器失效，当前的计数器清零，重新开始计数。</p><p>计数器算法非常容易实现，在单机场景下可以使用 <code>AtomicLong</code>、<code>LongAdder</code> 或 <code>Semaphore</code> 来实现计数，而在分布式场景下可以通过 Redis 的 <code>INCR</code> 和 <code>EXPIRE</code> 等命令并结合 <code>EVAL</code> 或 lua 脚本来实现，Redis 官网提供了几种简单的实现方式。无论是请求频率限流还是并发量限流都可以使用这个算法。</p><p>不过这个算法的缺陷也比较明显，那就是存在严重的临界问题。由于每过一个时间窗口，计数器就会清零，这使得限流效果不够平滑，恶意用户可以利用这个特点绕过我们的限流规则。如下图所示，我们的限流条件本来是每分钟 5 次，但是恶意用户在 11:00:00 ~ 11:00:59 这个时间窗口的后半分钟发起 5 次请求，接下来又在 11:01:00 ~ 11:01:59 这个时间窗口的前半分钟发起 5 次请求，这样我们的系统就在 1 分钟内承受了 10 次请求。（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loamEzMURCRmJlU2s3a0hKc1VHejJyc0Y2ZzRUMWx4eURFS3ljaWFKMm5RUnNUNXpFN0ZTNjZlUS82NDA?x-oss-process=image/format,png" alt="img"></p><h3 id="2-2-滑动窗口算法（Rolling-Window-或-Sliding-Window）"><a href="#2-2-滑动窗口算法（Rolling-Window-或-Sliding-Window）" class="headerlink" title="2.2 滑动窗口算法（Rolling Window 或 Sliding Window）"></a>2.2 滑动窗口算法（Rolling Window 或 Sliding Window）</h3><p>为了解决固定窗口算法的临界问题，可以将时间窗口划分成更小的时间窗口，然后随着时间的滑动删除相应的小窗口，而不是直接滑过一个大窗口，这就是滑动窗口算法。我们为每个小时间窗口都设置一个计数器，大时间窗口的总请求次数就是每个小时间窗口的计数器的和。如下图所示，我们的时间窗口是 5 秒，可以按秒进行划分，将其划分成 5 个小窗口，时间每过一秒，时间窗口就滑过一秒：（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loY2M3YVEyZ0R5WERoeXcwdlFQTHF3UmI2TVZXMklCWDdvRUVpYk5IM0hJYUFoMWlhNHBDWnFmVVEvNjQw?x-oss-process=image/format,png" alt="img"></p><p>rolling-window.png</p><p>每次处理请求时，都需要计算所有小时间窗口的计数器的和，考虑到性能问题，划分的小时间窗口不宜过多，譬如限流条件是每小时 N 个，可以按分钟划分为 60 个窗口，而不是按秒划分成 3600 个。当然如果不考虑性能问题，划分粒度越细，限流效果就越平滑。相反，如果划分粒度越粗，限流效果就越不精确，出现临界问题的可能性也就越大，当划分粒度为 1 时，滑动窗口算法就退化成了固定窗口算法。由于这两种算法都使用了计数器，所以也被称为 <strong>计数器算法（Counters）</strong>。</p><p>进一步思考我们发现，如果划分粒度最粗，也就是只有一个时间窗口时，滑动窗口算法退化成了固定窗口算法；那如果我们把划分粒度调到最细，又会如何呢？那么怎样才能让划分的时间窗口最细呢？时间窗口细到一定地步时，意味着每个时间窗口中只能容纳一个请求，这样我们可以省略计数器，只记录每个请求的时间，然后统计一段时间内的请求数有多少个即可。具体的实现可以参考 这里的 Redis sorted set 技巧 和 这里的 Sliding window log 算法。</p><h3 id="2-3-漏桶算法（Leaky-Bucket）"><a href="#2-3-漏桶算法（Leaky-Bucket）" class="headerlink" title="2.3 漏桶算法（Leaky Bucket）"></a>2.3 漏桶算法（Leaky Bucket）</h3><p>除了计数器算法，另一个很自然的限流思路是将所有的请求缓存到一个队列中，然后按某个固定的速度慢慢处理，这其实就是漏桶算法（Leaky Bucket）。漏桶算法假设将请求装到一个桶中，桶的容量为 M，当桶满时，请求被丢弃。在桶的底部有一个洞，桶中的请求像水一样按固定的速度（每秒 r 个）漏出来。我们用下面这个形象的图来表示漏桶算法：（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loS1JnaWFpYTVSMkxweENBOFE5WDdRdGRTWWVKQUhiNnVrNnNLN2hNemtsTTVMdjVqMGR3SUxBWmcvNjQw?x-oss-process=image/format,png" alt="img"></p><p>桶的上面是个水龙头，我们的请求从水龙头流到桶中，水龙头流出的水速不定，有时快有时慢，这种忽快忽慢的流量叫做 <strong>Bursty flow</strong>。如果桶中的水满了，多余的水就会溢出去，相当于请求被丢弃。从桶底部漏出的水速是固定不变的，可以看出漏桶算法可以平滑请求的速率。</p><p>漏桶算法可以通过一个队列来实现，如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loeWRQTms4NjRnSXVZeGdBajRIdmc5NmF1aWJlRXdHUFlUd1VNczF0aWFRRGlieG42WEd4RExIU1RRLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>当请求到达时，不直接处理请求，而是将其放入一个队列，然后另一个线程以固定的速率从队列中读取请求并处理，从而达到限流的目的。注意的是这个队列可以有不同的实现方式，比如设置请求的存活时间，或将队列改造成 PriorityQueue，根据请求的优先级排序而不是先进先出。当然队列也有满的时候，如果队列已经满了，那么请求只能被丢弃了。漏桶算法有一个缺陷，在处理突发流量时效率很低，于是人们又想出了下面的令牌桶算法。</p><h3 id="2-4-令牌桶算法（Token-Bucket）"><a href="#2-4-令牌桶算法（Token-Bucket）" class="headerlink" title="2.4 令牌桶算法（Token Bucket）"></a>2.4 令牌桶算法（Token Bucket）</h3><p>令牌桶算法（Token Bucket）是目前应用最广泛的一种限流算法，它的基本思想由两部分组成：<strong>生成令牌</strong> 和 <strong>消费令牌</strong>。</p><ul><li>生成令牌：假设有一个装令牌的桶，最多能装 M 个，然后按某个固定的速度（每秒 r 个）往桶中放入令牌，桶满时不再放入；</li><li>消费令牌：我们的每次请求都需要从桶中拿一个令牌才能放行，当桶中没有令牌时即触发限流，这时可以将请求放入一个缓冲队列中排队等待，或者直接拒绝；</li></ul><p>令牌桶算法的图示如下：（图片来源）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loRjlkN29XemljV3RydWV1VTh4M01OV1NEbWdwbGljUXdJbW4zNTZyWk9zTDZxV2lhZFh2S29pYW9XZy82NDA?x-oss-process=image/format,png" alt="img"></p><p>在上面的图中，我们将请求放在一个缓冲队列中，可以看出这一部分的逻辑和漏桶算法几乎一模一样，只不过在处理请求上，一个是以固定速率处理，一个是从桶中获取令牌后才处理。</p><p>仔细思考就会发现，令牌桶算法有一个很关键的问题，就是桶大小的设置，正是这个参数可以让令牌桶算法具备处理突发流量的能力。譬如将桶大小设置为 100，生成令牌的速度设置为每秒 10 个，那么在系统空闲一段时间的之后（桶中令牌一直没有消费，慢慢的会被装满），突然来了 50 个请求，这时系统可以直接按每秒 50 个的速度处理，随着桶中的令牌很快用完，处理速度又会慢慢降下来，和生成令牌速度趋于一致。这是令牌桶算法和漏桶算法最大的区别，漏桶算法无论来了多少请求，只会一直以每秒 10 个的速度进行处理。当然，处理突发流量虽然提高了系统性能，但也给系统带来了一定的压力，如果桶大小设置不合理，突发的大流量可能会直接压垮系统。</p><p>通过上面对令牌桶的原理分析，一般会有两种不同的实现方式。第一种方式是启动一个内部线程，不断的往桶中添加令牌，处理请求时从桶中获取令牌，和上面图中的处理逻辑一样。第二种方式不依赖于内部线程，而是在每次处理请求之前先实时计算出要填充的令牌数并填充，然后再从桶中获取令牌。下面是第二种方式的一种经典实现，其中 <code>capacity</code> 表示令牌桶大小，<code>refillTokensPerOneMillis</code> 表示填充速度，每毫秒填充多少个，<code>availableTokens</code> 表示令牌桶中还剩多少个令牌，<code>lastRefillTimestamp</code> 表示上一次填充时间。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucket</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> refillTokensPerOneMillis<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> availableTokens<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastRefillTimestamp<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">TokenBucket</span><span class="token punctuation">(</span><span class="token keyword">long</span> capacity<span class="token punctuation">,</span> <span class="token keyword">long</span> refillTokens<span class="token punctuation">,</span> <span class="token keyword">long</span> refillPeriodMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>refillTokensPerOneMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> refillTokens <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> refillPeriodMillis<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>availableTokens <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastRefillTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryConsume</span><span class="token punctuation">(</span><span class="token keyword">int</span> numberTokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>availableTokens <span class="token operator">&lt;</span> numberTokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            availableTokens <span class="token operator">-=</span> numberTokens<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTimeMillis <span class="token operator">></span> lastRefillTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> millisSinceLastRefill <span class="token operator">=</span> currentTimeMillis <span class="token operator">-</span> lastRefillTimestamp<span class="token punctuation">;</span>            <span class="token keyword">double</span> refill <span class="token operator">=</span> millisSinceLastRefill <span class="token operator">*</span> refillTokensPerOneMillis<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>availableTokens <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> availableTokens <span class="token operator">+</span> refill<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastRefillTimestamp <span class="token operator">=</span> currentTimeMillis<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以像下面这样创建一个令牌桶（桶大小为 100，且每秒生成 100 个令牌）：</p><pre class="language-go" data-language="go"><code class="language-go">TokenBucket limiter <span class="token operator">=</span> <span class="token builtin">new</span> <span class="token function">TokenBucket</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从上面的代码片段可以看出，令牌桶算法的实现非常简单也非常高效，仅仅通过几个变量的运算就实现了完整的限流功能。核心逻辑在于 <code>refill()</code> 这个方法，在每次消费令牌时，计算当前时间和上一次填充的时间差，并根据填充速度计算出应该填充多少令牌。在重新填充令牌后，再判断请求的令牌数是否足够，如果不够，返回 false，如果足够，则减去令牌数，并返回 true。</p><p>在实际的应用中，往往不会直接使用这种原始的令牌桶算法，一般会在它的基础上作一些改进，比如，填充速率支持动态调整，令牌总数支持透支，基于 Redis 支持分布式限流等，不过总体来说还是符合令牌桶算法的整体框架，我们在后面学习一些开源项目时对此会有更深的体会。</p><h2 id="三、一些开源项目"><a href="#三、一些开源项目" class="headerlink" title="三、一些开源项目"></a>三、一些开源项目</h2><p>有很多开源项目中都实现了限流的功能，这一节通过一些开源项目的学习，了解限流是如何实现的。</p><h3 id="3-1-Guava-的-RateLimiter"><a href="#3-1-Guava-的-RateLimiter" class="headerlink" title="3.1 Guava 的 RateLimiter"></a>3.1 Guava 的 RateLimiter</h3><p>Google Guava 是一个强大的核心库，包含了很多有用的工具类，例如：集合、缓存、并发库、字符串处理、I/O 等等。其中在并发库中，Guava 提供了两个和限流相关的类：RateLimiter 和 SmoothRateLimiter。Guava 的 RateLimiter 基于令牌桶算法实现，不过在传统的令牌桶算法基础上做了点改进，支持两种不同的限流方式：<strong>平滑突发限流（SmoothBursty）</strong> 和 <strong>平滑预热限流（SmoothWarmingUp）</strong>。</p><p>下面的方法可以创建一个平滑突发限流器（SmoothBursty）：</p><pre class="language-go" data-language="go"><code class="language-go">RateLimiter limiter <span class="token operator">=</span> RateLimiter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>RateLimiter.create(5)</code> 表示这个限流器容量为 5，并且每秒生成 5 个令牌，也就是每隔 200 毫秒生成一个。我们可以使用 <code>limiter.acquire()</code> 消费令牌，如果桶中令牌足够，返回 0，如果令牌不足，则阻塞等待，并返回等待的时间。我们连续请求几次：</p><pre class="language-go" data-language="go"><code class="language-go">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">``</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">``</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">``</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">0.0</span><span class="token string">``</span><span class="token number">0.198239</span><span class="token string">``</span><span class="token number">0.196083</span><span class="token string">``</span><span class="token number">0.200609</span></code></pre><p>可以看出限流器创建之后，初始会有一个令牌，然后每隔 200 毫秒生成一个令牌，所以第一次请求直接返回 0，后面的请求都会阻塞大约 200 毫秒。另外，<code>SmoothBursty</code> 还具有应对突发的能力，而且 <strong>还允许消费未来的令牌</strong>，比如下面的例子：</p><pre class="language-go" data-language="go"><code class="language-go">RateLimiter limiter <span class="token operator">=</span> RateLimiter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>会得到类似下面的输出：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">0.01</span><span class="token number">.997428</span>  <span class="token number">0.192273</span>  <span class="token number">0.200616</span></code></pre><p>限流器创建之后，初始令牌只有一个，但是我们请求 10 个令牌竟然也通过了，只不过看后面请求发现，第二次请求花了 2 秒左右的时间把前面的透支的令牌给补上了。</p><p>Guava 支持的另一种限流方式是平滑预热限流器（SmoothWarmingUp），可以通过下面的方法创建：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">RateLimiter</span> limiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第一个参数还是每秒创建的令牌数量，这里是每秒 2 个，也就是每 500 毫秒生成一个，后面的参数表示从冷启动速率过渡到平均速率的时间间隔，也就是所谓的热身时间间隔（warm up period）。我们看下输出结果：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token number">0.0</span> <span class="token number">1.329289</span>  <span class="token number">0.994375</span>  <span class="token number">0.662888</span>  <span class="token number">0.501287</span></code></pre><p>第一个请求还是立即得到令牌，但是后面的请求和上面平滑突发限流就完全不一样了，按理来说 500 毫秒就会生成一个令牌，但是我们发现第二个请求却等了 1.3s，而不是 0.5s，后面第三个和第四个请求也等了一段时间。不过可以看出，等待时间在慢慢的接近 0.5s，直到第五个请求等待时间才开始变得正常。从第一个请求到第五个请求，这中间的时间间隔就是热身阶段，可以算出热身的时间就是我们设置的 3 秒。</p><p>关于热身的算法很有意思，也比较烧脑，有兴趣的同学可以参考 这里 和 这里 的过程分析。</p><h3 id="3-2-Bucket4j"><a href="#3-2-Bucket4j" class="headerlink" title="3.2 Bucket4j"></a>3.2 Bucket4j</h3><p>Bucket4j 是一个基于令牌桶算法实现的强大的限流库，它不仅支持单机限流，还支持通过诸如 Hazelcast、Ignite、Coherence、Infinispan 或其他兼容 JCache API (JSR 107) 规范的分布式缓存实现分布式限流。</p><p>在使用 Bucket4j 之前，我们有必要先了解 Bucket4j 中的几个核心概念：</p><ul><li>Bucket</li><li>Bandwidth</li><li>Refill</li></ul><p><code>Bucket</code> 接口代表了令牌桶的具体实现，也是我们操作的入口。它提供了诸如 <code>tryConsume</code> 和 <code>tryConsumeAndReturnRemaining</code> 这样的方法供我们消费令牌。可以通过下面的构造方法来创建 <code>Bucket</code>：</p><pre class="language-go" data-language="go"><code class="language-go">Bucket bucket <span class="token operator">=</span> Bucket4j<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLimit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>bucket<span class="token punctuation">.</span><span class="token function">tryConsume</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>Bandwidth</code> 的意思是带宽，可以理解为限流的规则。Bucket4j 提供了两种方法来创建 Bandwidth：<code>simple</code> 和 <code>classic</code>。下面是 simple 方式创建的 Bandwidth，表示桶大小为 10，填充速度为每分钟 10 个令牌：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>simple 方式桶大小和填充速度是一样的，classic 方式更灵活一点，可以自定义填充速度，下面的例子表示桶大小为 10，填充速度为每分钟 5 个令牌：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Refill</span> filler <span class="token operator">=</span> <span class="token class-name">Refill</span><span class="token punctuation">.</span><span class="token function">greedy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">classic</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> filler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中，<code>Refill</code> 用于填充令牌桶，可以通过它定义填充速度，Bucket4j 有两种填充令牌的策略：<strong>间隔策略（intervally）</strong> 和 <strong>贪婪策略（greedy）</strong>。在上面的例子中我们使用的是贪婪策略，如果使用间隔策略可以像下面这样创建 <code>Refill</code>：</p><pre class="language-go" data-language="go"><code class="language-go">Refill filler <span class="token operator">=</span> Refill<span class="token punctuation">.</span><span class="token function">intervally</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Duration<span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所谓间隔策略指的是每隔一段时间，一次性的填充所有令牌，比如上面的例子，会每隔一分钟，填充 5 个令牌，如下所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loMDVLV2xpYUs2UVhvOHdwTVlxTThZeFRYUFppYm9pYWFNb3NtRjNPNUhKNmxjVllWMlgyZDF1MVR3LzY0MA?x-oss-process=image/format,png" alt="img"></p><p>intervally.png</p><p>而贪婪策略会尽可能贪婪的填充令牌，同样是上面的例子，会将一分钟划分成 5 个更小的时间单元，每隔 12 秒，填充 1 个令牌，如下所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loaFpvM3VqbHBjWnI4YUtwNGlhVE15aWNRUWljWTRLZThtOWpCMXVaYVdTcVlvNzhUNDJDMzZRZUJnLzY0MA?x-oss-process=image/format,png" alt="img"></p><p>在了解了 Bucket4j 中的几个核心概念之后，我们再来看看官网介绍的一些特性：</p><ul><li>基于令牌桶算法</li><li>高性能，无锁实现</li><li>不存在精度问题，所有计算都是基于整型的</li><li>支持通过符合 JCache API 规范的分布式缓存系统实现分布式限流</li><li>支持为每个 Bucket 设置多个 Bandwidth</li><li>支持同步和异步 API</li><li>支持可插拔的监听 API，用于集成监控和日志</li><li>不仅可以用于限流，还可以用于简单的调度</li></ul><p>Bucket4j 提供了丰富的文档，推荐在使用 Bucket4j 之前，先把官方文档中的 基本用法 和 高级特性 仔细阅读一遍。另外，关于 Bucket4j 的使用，推荐这篇文章 Rate limiting Spring MVC endpoints with bucket4j，这篇文章详细的讲解了如何在 Spring MVC 中使用拦截器和 Bucket4j 打造业务无侵入的限流方案，另外还讲解了如何使用 Hazelcast 实现分布式限流；另外，Rate Limiting a Spring API Using Bucket4j 这篇文章也是一份很好的入门教程，介绍了 Bucket4j 的基础知识，在文章的最后还提供了 Spring Boot Starter 的集成方式，结合 Spring Boot Actuator 很容易将限流指标集成到监控系统中。</p><p>和 Guava 的限流器相比，Bucket4j 的功能显然要更胜一筹，毕竟 Guava 的目的只是用作通用工具类，而不是用于限流的。使用 Bucket4j 基本上可以满足我们的大多数要求，不仅支持单机限流和分布式限流，而且可以很好的集成监控，搭配 Prometheus 和 Grafana 简直完美。值得一提的是，有很多开源项目譬如 JHipster API Gateway 就是使用 Bucket4j 来实现限流的。</p><p>Bucket4j 唯一不足的地方是它只支持请求频率限流，不支持并发量限流，另外还有一点，虽然 Bucket4j 支持分布式限流，但它是基于 Hazelcast 这样的分布式缓存系统实现的，不能使用 Redis，这在很多使用 Redis 作缓存的项目中就很不爽，所以我们还需要在开源的世界里继续探索。</p><h3 id="3-3-Resilience4j"><a href="#3-3-Resilience4j" class="headerlink" title="3.3 Resilience4j"></a>3.3 Resilience4j</h3><p>Resilience4j 是一款轻量级、易使用的高可用框架。用过 Spring Cloud 早期版本的同学肯定都听过 Netflix Hystrix，Resilience4j 的设计灵感就来自于它。自从 Hystrix 停止维护之后，官方也推荐大家使用 Resilience4j 来代替 Hystrix。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loOFdsQjZVSjVQZFFsYnBFUE02c0RWOXByZktieUlMQlNCaWNWdjV6QXdxck40b0JpY1d5Y3huMHcvNjQw?x-oss-process=image/format,png" alt="img"></p><p>hystrix.png</p><p>Resilience4j 的底层采用 Vavr，这是一个非常轻量级的 Java 函数式库，使得 Resilience4j 非常适合函数式编程。Resilience4j 以装饰器模式提供对函数式接口或 lambda 表达式的封装，提供了一波高可用机制：<strong>重试（Retry）</strong>、<strong>熔断（Circuit Breaker）</strong>、<strong>限流（Rate Limiter）</strong>、<strong>限时（Timer Limiter）</strong>、<strong>隔离（Bulkhead）</strong>、<strong>缓存（Caceh）</strong> 和 <strong>降级（Fallback）</strong>。我们重点关注这里的两个功能：限流（Rate Limiter） 和 隔离（Bulkhead），Rate Limiter 是请求频率限流，Bulkhead 是并发量限流。</p><p>Resilience4j 提供了两种限流的实现：<strong>SemaphoreBasedRateLimiter</strong> 和 <strong>AtomicRateLimiter</strong>。<strong>SemaphoreBasedRateLimiter</strong> 基于信号量实现，用户的每次请求都会申请一个信号量，并记录申请的时间，申请通过则允许请求，申请失败则限流，另外有一个内部线程会定期扫描过期的信号量并释放，很显然这是令牌桶的算法。<strong>AtomicRateLimiter</strong> 和上面的经典实现类似，不需要额外的线程，在处理每次请求时，根据距离上次请求的时间和生成令牌的速度自动填充。关于这二者的区别可以参考这篇文章 Rate Limiter Internals in Resilience4j。</p><p>Resilience4j 也提供了两种隔离的实现：<strong>SemaphoreBulkhead</strong> 和 <strong>ThreadPoolBulkhead</strong>，通过信号量或线程池控制请求的并发数，具体的用法参考官方文档，这里不再赘述。</p><p>下面是一个同时使用限流和隔离的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个 Bulkhead，最大并发量为 150</span><span class="token class-name">BulkheadConfig</span> bulkheadConfig <span class="token operator">=</span> <span class="token class-name">BulkheadConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">maxConcurrentCalls</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">maxWaitTime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bulkhead</span> bulkhead <span class="token operator">=</span> <span class="token class-name">Bulkhead</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"backendName"</span><span class="token punctuation">,</span> bulkheadConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个 RateLimiter，每秒允许一次请求</span><span class="token class-name">RateLimiterConfig</span> rateLimiterConfig <span class="token operator">=</span> <span class="token class-name">RateLimiterConfig</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">timeoutDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">limitRefreshPeriod</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">limitForPeriod</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"backendName"</span><span class="token punctuation">,</span> rateLimiterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 Bulkhead 和 RateLimiter 装饰业务逻辑</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> backendService<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> decoratedSupplier <span class="token operator">=</span> <span class="token class-name">Decorators</span><span class="token punctuation">.</span><span class="token function">ofSupplier</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withBulkhead</span><span class="token punctuation">(</span>bulkhead<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withRateLimiter</span><span class="token punctuation">(</span>rateLimiter<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用业务逻辑</span><span class="token class-name">Try</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token keyword">try</span> <span class="token operator">=</span> <span class="token class-name">Try</span><span class="token punctuation">.</span><span class="token function">ofSupplier</span><span class="token punctuation">(</span>decoratedSupplier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token keyword">try</span><span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Resilience4j 在功能特性上比 Bucket4j 强大不少，而且还支持并发量限流。不过最大的遗憾是，Resilience4j 不支持分布式限流。</p><h3 id="3-4-其他"><a href="#3-4-其他" class="headerlink" title="3.4 其他"></a>3.4 其他</h3><p>网上还有很多限流相关的开源项目，不可能一一介绍，这里列出来的只是冰山之一角：</p><ul><li><a href="https://github.com/mokies/ratelimitj">https://github.com/mokies/ratelimitj</a></li><li><a href="https://github.com/wangzheng0822/ratelimiter4j">https://github.com/wangzheng0822/ratelimiter4j</a></li><li><a href="https://github.com/wukq/rate-limiter">https://github.com/wukq/rate-limiter</a></li><li><a href="https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit">https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit</a></li><li><a href="https://github.com/onblog/SnowJena">https://github.com/onblog/SnowJena</a></li><li><a href="https://gitee.com/zhanghaiyang/spring-boot-starter-current-limiting">https://gitee.com/zhanghaiyang/spring-boot-starter-current-limiting</a></li><li><a href="https://github.com/Netflix/concurrency-limits">https://github.com/Netflix/concurrency-limits</a></li></ul><p>可以看出，限流技术在实际项目中应用非常广泛，大家对实现自己的限流算法乐此不疲，新算法和新实现层出不穷。但是找来找去，目前还没有找到一款开源项目完全满足我的需求。</p><p>我的需求其实很简单，需要同时满足两种不同的限流场景：请求频率限流和并发量限流，并且能同时满足两种不同的限流架构：单机限流和分布式限流。下面我们就开始在 Spring Cloud Gateway 中实现这几种限流，通过前面介绍的那些项目，我们取长补短，基本上都能用比较成熟的技术实现，只不过对于最后一种情况，分布式并发量限流，网上没有搜到现成的解决方案，在和同事讨论了几个晚上之后，想出一种新型的基于双窗口滑动的限流算法，我在这里抛砖引玉，欢迎大家批评指正，如果大家有更好的方法，也欢迎讨论。</p><h2 id="四、在网关中实现限流"><a href="#四、在网关中实现限流" class="headerlink" title="四、在网关中实现限流"></a>四、在网关中实现限流</h2><p>在文章一开始介绍 Spring Cloud Gateway 的特性时，我们注意到其中有一条 <code>Request Rate Limiting</code>，说明网关自带了限流的功能，但是 Spring Cloud Gateway 自带的限流有很多限制，譬如不支持单机限流，不支持并发量限流，而且它的请求频率限流也是不尽人意，这些都需要我们自己动手来解决。</p><h3 id="4-1-实现单机请求频率限流"><a href="#4-1-实现单机请求频率限流" class="headerlink" title="4.1 实现单机请求频率限流"></a>4.1 实现单机请求频率限流</h3><p>Spring Cloud Gateway 中定义了关于限流的一个接口 <code>RateLimiter</code>，如下：</p><pre class="language-go" data-language="go"><code class="language-go">public <span class="token keyword">interface</span> RateLimiter<span class="token operator">&lt;</span>C<span class="token operator">></span> extends StatefulConfigurable<span class="token operator">&lt;</span>C<span class="token operator">></span> <span class="token punctuation">&#123;</span>    Mono<span class="token operator">&lt;</span>RateLimiter<span class="token punctuation">.</span>Response<span class="token operator">></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span>String routeId<span class="token punctuation">,</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个接口就一个方法 <code>isAllowed</code>，第一个参数 <code>routeId</code> 表示请求路由的 ID，根据 routeId 可以获取限流相关的配置，第二个参数 <code>id</code> 表示要限流的对象的唯一标识，可以是用户名，也可以是 IP，或者其他的可以从 <code>ServerWebExchange</code> 中得到的信息。我们看下 <code>RequestRateLimiterGatewayFilterFactory</code> 中对 <code>isAllowed</code> 的调用逻辑：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从配置中得到 KeyResolver</span>    <span class="token class-name">KeyResolver</span> resolver <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>keyResolver<span class="token punctuation">,</span> defaultKeyResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从配置中得到 RateLimiter</span>    <span class="token class-name">RateLimiter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> limiter <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>rateLimiter<span class="token punctuation">,</span>            defaultRateLimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> denyEmpty <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>denyEmptyKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>denyEmptyKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpStatusHolder</span> emptyKeyStatus <span class="token operator">=</span> <span class="token class-name">HttpStatusHolder</span>            <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>emptyKeyStatus<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emptyKeyStatusCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-></span> resolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defaultIfEmpty</span><span class="token punctuation">(</span>EMPTY_KEY<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>key <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 通过 KeyResolver 得到 key，作为唯一标识 id 传入 isAllowed() 方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>EMPTY_KEY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>denyEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> emptyKeyStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 获取当前路由 ID，作为 routeId 参数传入 isAllowed() 方法</span>                <span class="token class-name">String</span> routeId <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getRouteId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>routeId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Route</span> route <span class="token operator">=</span> exchange                            <span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchangeUtils</span><span class="token punctuation">.</span>GATEWAY_ROUTE_ATTR<span class="token punctuation">)</span><span class="token punctuation">;</span>                    routeId <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> limiter<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span>routeId<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>response <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 请求允许，直接走到下一个 filter</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 请求被限流，返回设置的 HTTP 状态码（默认是 429）</span>                    <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>从上面的逻辑可以看出，通过实现 <code>KeyResolver</code> 接口的 <code>resolve</code> 方法就可以自定义要限流的对象了。</p><pre class="language-go" data-language="go"><code class="language-go">public <span class="token keyword">interface</span> KeyResolver <span class="token punctuation">&#123;</span>    Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>比如下面的 <code>HostAddrKeyResolver</code> 可以根据 IP 来限流：</p><pre class="language-go" data-language="go"><code class="language-go">public class HostAddrKeyResolver implements KeyResolver <span class="token punctuation">&#123;</span>    @Override    public Mono<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们继续看 Spring Cloud Gateway 的代码发现，<code>RateLimiter</code> 接口只提供了一个实现类 <code>RedisRateLimiter</code>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loMGliN1FITnhkWXlWREZFNG9oQnVsd2lhR2IzUmljNmRPRk9QZmY3V1BiVm9MTjN4NlVIY3I1WDR3LzY0MA?x-oss-process=image/format,png" alt="img"></p><p>redis-rate-limiter.png</p><p>很显然是基于 Redis 实现的限流，虽说通过 Redis 也可以实现单机限流，但是总感觉有些大材小用，而且对于那些没有 Redis 的环境很不友好。所以，我们要实现真正的本地限流。</p><p>我们从 Spring Cloud Gateway 的 pull request 中发现了一个新特性 Feature/local-rate-limiter，而且看提交记录，这个新特性很有可能会合并到 3.0.0 版本中。我们不妨来看下这个 local-rate-limiter 的实现：LocalRateLimiter.java，可以看出它是基于 <code>Resilience4j</code> 实现的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Config</span> routeConfig <span class="token operator">=</span> <span class="token function">loadConfiguration</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many requests per second do you want a user to be allowed to do?</span>    <span class="token keyword">int</span> replenishRate <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getReplenishRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many seconds for a token refresh?</span>    <span class="token keyword">int</span> refreshPeriod <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getRefreshPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many tokens are requested per request?</span>    <span class="token keyword">int</span> requestedTokens <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getRequestedTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>resilience4j<span class="token punctuation">.</span>ratelimiter<span class="token punctuation">.</span><span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiterRegistry</span>            <span class="token punctuation">.</span><span class="token function">ofDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">rateLimiter</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token function">createRateLimiterConfig</span><span class="token punctuation">(</span>refreshPeriod<span class="token punctuation">,</span> replenishRate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> rateLimiter<span class="token punctuation">.</span><span class="token function">acquirePermission</span><span class="token punctuation">(</span>requestedTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Long</span> tokensLeft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> rateLimiter<span class="token punctuation">.</span><span class="token function">getMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAvailablePermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>allowed<span class="token punctuation">,</span> <span class="token function">getHeaders</span><span class="token punctuation">(</span>routeConfig<span class="token punctuation">,</span> tokensLeft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>有意思的是，这个类 还有一个早期版本，是基于 Bucket4j 实现的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Config</span> routeConfig <span class="token operator">=</span> <span class="token function">loadConfiguration</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many requests per second do you want a user to be allowed to do?</span>    <span class="token keyword">int</span> replenishRate <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getReplenishRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How much bursting do you want to allow?</span>    <span class="token keyword">int</span> burstCapacity <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getBurstCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// How many tokens are requested per request?</span>    <span class="token keyword">int</span> requestedTokens <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getRequestedTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> <span class="token class-name">Bucket</span> bucket <span class="token operator">=</span> bucketMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>            <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">createBucket</span><span class="token punctuation">(</span>replenishRate<span class="token punctuation">,</span> burstCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">tryConsume</span><span class="token punctuation">(</span>requestedTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>allowed<span class="token punctuation">,</span>            <span class="token function">getHeaders</span><span class="token punctuation">(</span>routeConfig<span class="token punctuation">,</span> bucket<span class="token punctuation">.</span><span class="token function">getAvailableTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>实现方式都是类似的，在上面对 Bucket4j 和 Resilience4j 已经作了比较详细的介绍，这里不再赘述。不过从这里也可以看出 Spring 生态圈对 Resilience4j 是比较看好的，我们也可以将其引入到我们的项目中。</p><h3 id="4-2-实现分布式请求频率限流"><a href="#4-2-实现分布式请求频率限流" class="headerlink" title="4.2 实现分布式请求频率限流"></a>4.2 实现分布式请求频率限流</h3><p>上面介绍了如何实现单机请求频率限流，接下来再看下分布式请求频率限流。这个就比较简单了，因为上面说了，Spring Cloud Gateway 自带了一个限流实现，就是 <code>RedisRateLimiter</code>，可以用于分布式限流。它的实现原理依然是基于令牌桶算法的，不过实现逻辑是放在一段 lua 脚本中的，我们可以在 <code>src/main/resources/META-INF/scripts</code> 目录下找到该脚本文件 <code>request_rate_limiter.lua</code>：</p><pre class="language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> tokens_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> timestamp_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> now <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> requested <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">local</span> fill_time <span class="token operator">=</span> capacity<span class="token operator">/</span>rate<span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fill_time<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">local</span> last_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_tokens <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_tokens <span class="token operator">=</span> capacity<span class="token keyword">end</span> <span class="token keyword">local</span> last_refreshed <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_refreshed <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_refreshed <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">end</span> <span class="token keyword">local</span> delta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> now<span class="token operator">-</span>last_refreshed<span class="token punctuation">)</span><span class="token keyword">local</span> filled_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> last_tokens<span class="token operator">+</span><span class="token punctuation">(</span>delta<span class="token operator">*</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">local</span> allowed <span class="token operator">=</span> filled_tokens <span class="token operator">>=</span> requested<span class="token keyword">local</span> new_tokens <span class="token operator">=</span> filled_tokens<span class="token keyword">local</span> allowed_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> allowed <span class="token keyword">then</span>  new_tokens <span class="token operator">=</span> filled_tokens <span class="token operator">-</span> requested  allowed_num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">end</span> <span class="token keyword">if</span> ttl <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">then</span>  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> new_tokens<span class="token punctuation">)</span>  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token keyword">end</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> allowed_num<span class="token punctuation">,</span> new_tokens <span class="token punctuation">&#125;</span></code></pre><p>这段代码和上面介绍令牌桶算法时用 Java 实现的那段经典代码几乎是一样的。这里使用 lua 脚本，主要是利用了 Redis 的单线程特性，以及执行 lua 脚本的原子性，避免了并发访问时可能出现请求量超出上限的现象。想象目前令牌桶中还剩 1 个令牌，此时有两个请求同时到来，判断令牌是否足够也是同时的，两个请求都认为还剩 1 个令牌，于是两个请求都被允许了。</p><p>有两种方式来配置 Spring Cloud Gateway 自带的限流。第一种方式是通过配置文件，比如下面所示的代码，可以对某个 route 进行限流：</p><pre class="language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  cloud<span class="token operator">:</span>    gateway<span class="token operator">:</span>      routes<span class="token operator">:</span>      <span class="token operator">-</span> id<span class="token operator">:</span> test        uri<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>httpbin<span class="token punctuation">.</span>org<span class="token operator">:</span><span class="token number">80</span><span class="token operator">/</span>get        filters<span class="token operator">:</span>        <span class="token operator">-</span> name<span class="token operator">:</span> <span class="token class-name">RequestRateLimiter</span>          args<span class="token operator">:</span>            key<span class="token operator">-</span>resolver<span class="token operator">:</span> <span class="token string">'#&#123;@hostAddrKeyResolver&#125;'</span>            redis<span class="token operator">-</span>rate<span class="token operator">-</span>limiter<span class="token punctuation">.</span>replenishRate<span class="token operator">:</span> <span class="token number">1</span></code></pre><p>其中，<code>key-resolver</code> 使用 SpEL 表达式 <code>#&#123;@beanName&#125;</code> 从 Spring 容器中获取 <code>hostAddrKeyResolver</code> 对象，<code>burstCapacity</code> 表示令牌桶的大小，<code>replenishRate</code> 表示每秒往桶中填充多少个令牌，也就是填充速度。</p><p>第二种方式是通过下面的代码来配置：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">myRoutes</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p      <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>filter <span class="token operator">-></span> filter<span class="token punctuation">.</span><span class="token function">requestRateLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">rateLimiter</span><span class="token punctuation">(</span><span class="token class-name">RedisRateLimiter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> rl <span class="token operator">-></span> rl<span class="token punctuation">.</span><span class="token function">setBurstCapacity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReplenishRate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org:80"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这样就可以对某个 route 进行限流了。但是这里有一点要注意，Spring Cloud Gateway 自带的限流器有一个很大的坑，replenishRate 不支持设置小数，也就是说往桶中填充的 token 的速度最少为每秒 1 个，所以，如果我的限流规则是每分钟 10 个请求（按理说应该每 6 秒填充一次，或每秒填充 1/6 个 token），这种情况 Spring Cloud Gateway 就没法正确的限流。网上也有人提了 issue，support greater than a second resolution for the rate limiter，但还没有得到解决。</p><h3 id="4-3-实现单机并发量限流"><a href="#4-3-实现单机并发量限流" class="headerlink" title="4.3 实现单机并发量限流"></a>4.3 实现单机并发量限流</h3><p>上面学习 Resilience4j 的时候，我们提到了 Resilience4j 的一个功能特性，叫 <strong>隔离（Bulkhead）</strong>。Bulkhead 这个单词的意思是船的舱壁，利用舱壁可以将不同的船舱隔离起来，这样如果一个船舱破损进水，那么只损失这一个船舱，其它船舱可以不受影响。借鉴造船行业的经验，这种模式也被引入到软件行业，我们把它叫做 舱壁模式（Bulkhead pattern）。舱壁模式一般用于服务隔离，对于一些比较重要的系统资源，如 CPU、内存、连接数等，可以为每个服务设置各自的资源限制，防止某个异常的服务把系统的所有资源都消耗掉。这种服务隔离的思想同样可以用来做并发量限流。</p><p>正如前文所述，Resilience4j 提供了两种 Bulkhead 的实现：<code>SemaphoreBulkhead</code> 和 <code>ThreadPoolBulkhead</code>，这也正是舱壁模式常见的两种实现方案：一种是带计数的信号量，一种是固定大小的线程池。考虑到多线程场景下的线程切换成本，默认推荐使用信号量。</p><p>在操作系统基础课程中，我们学习过两个名词：<strong>互斥量（Mutex）</strong> 和 <strong>信号量（Semaphores）</strong>。互斥量用于线程的互斥，它和临界区有点相似，只有拥有互斥对象的线程才有访问资源的权限，由于互斥对象只有一个，因此任何情况下只会有一个线程在访问此共享资源，从而保证了多线程可以安全的访问和操作共享资源。而信号量是用于线程的同步，这是由荷兰科学家 E.W.Dijkstra 提出的概念，它和互斥量不同，信号允许多个线程同时使用共享资源，但是它同时设定了访问共享资源的线程最大数目，从而可以进行并发量控制。</p><p>下面是使用信号量限制并发访问的一个简单例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreTest</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里我们创建了 100 个线程同时执行，但是由于信号量计数为 10，所以同时只能有 10 个线程在处理请求。说到计数，实际上，在 Java 里除了 <code>Semaphore</code> 还有很多类也可以用作计数，比如 <code>AtomicLong</code> 或 <code>LongAdder</code>，这在并发量限流中非常常见，只是无法提供像信号量那样的阻塞能力：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicLongTest</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicLong</span> atomic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request rejected ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        atomic<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-4-实现分布式并发量限流"><a href="#4-4-实现分布式并发量限流" class="headerlink" title="4.4 实现分布式并发量限流"></a>4.4 实现分布式并发量限流</h3><p>通过在单机实现并发量限流，我们掌握了几种常用的手段：信号量、线程池、计数器，这些都是单机上的概念。那么稍微拓展下，如果能实现分布式信号量、分布式线程池、分布式计数器，那么实现分布式并发量限流不就易如反掌了吗？</p><p>关于分布式线程池，是我自己杜撰的词，在网上并没有找到类似的概念，比较接近的概念是资源调度和分发，但是又感觉不像，这里直接忽略吧。</p><p>关于分布式信号量，还真有这样的东西，比如 Apache Ignite 就提供了 <code>IgniteSemaphore</code> 用于创建分布式信号量，它的使用方式和 <code>Semaphore</code> 非常类似，参考这里。使用 Redis 的 ZSet 也可以实现分布式信号量，比如 这篇博客介绍的方法，还有《Redis in Action》这本电子书中也提到了这样的例子，教你如何实现 Counting semaphores。另外，Redisson 也实现了基于 Redis 的分布式信号量 RSemaphore，用法也和 <code>Semaphore</code> 类似。使用分布式信号量可以很容易实现分布式并发量限流，实现方式和上面的单机并发量限流几乎是一样的。</p><p>最后，关于分布式计数器，实现方案也是多种多样。比如使用 Redis 的 <code>INCR</code> 就很容易实现，更有甚者，使用 MySQL 数据库也可以实现。只不过使用计数器要注意操作的原子性，每次请求时都要经过这三步操作：取计数器当前的值、判断是否超过阈值，超过则拒绝、将计数器的值自增。这其实和信号量的 P 操作是一样的，而释放就对应 V 操作。</p><p>所以，利用分布式信号量和计数器就可以实现并发量限流了吗？问题当然没有这么简单。实际上，上面通过信号量和计数器实现单机并发量限流的代码片段有一个严重 BUG：</p><pre class="language-go" data-language="go"><code class="language-go">semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>想象一下如果在处理请求时出现异常了会怎么样？很显然，信号量被该线程获取了，但是却永远不会释放，如果请求异常多了，这将导致信号量被占满，最后一个请求也进不来。在单机场景下，这个问题可以很容易解决，加一个 finally 就行了：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request processing ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>由于无论出现何种异常，finally 中的代码一定会执行，这样就保证了信号量一定会被释放。但是在分布式系统中，就不是加一个 finally 这么简单了。这是因为在分布式系统中可能存在的异常不一定是可被捕获的代码异常，还有可能是服务崩溃或者不可预知的系统宕机，就算是正常的服务重启也可能导致分布式信号量无法释放。</p><p>对于这个问题，我和几个同事连续讨论了几个晚上，想出了两种解决方法：第一种方法是使用带 TTL 的计数器，第二种方法是基于双窗口滑动的一种比较 tricky 的算法。</p><p>第一种方法比较容易理解，我们为每个请求赋予一个唯一 ID，并在 Redis 里写入一个键值对，key 为 <code>requests_xxx</code>（xxx 为请求 ID），value 为 1，并给这个 key 设置一个 TTL（如果你的应用中存在耗时非常长的请求，譬如对于一些 WebSockket 请求可能会持续几个小时，还需要开一个线程定期去刷新这个 key 的 TTL）。然后在判断并发量时，使用 <code>KEYS</code> 命令查询 <code>requests_*</code> 开头的 key 的个数，就可以知道当前一共有多少个请求，如果超过并发量上限则拒绝请求。这种方法可以很好的应对服务崩溃或重启的问题，由于每个 key 都设置了 TTL，所以经过一段时间后，这些 key 就会自动消失，就不会出现信号量占满不释放的情况了。但是这里使用 <code>KEYS</code> 命令查询请求个数是一个非常低效的做法，在请求量比较多的情况下，网关的性能会受到严重影响。我们可以把 <code>KEYS</code> 命令换成 <code>SCAN</code>，性能会得到些许提升，但总体来说效果还是很不理想的。</p><p>针对第一种方法，我们可以进一步优化，不用为每个请求写一个键值对，而是为每个分布式系统中的每个实例赋予一个唯一 ID，并在 Redis 里写一个键值对，key 为 <code>instances_xxx</code>（xxx 为实例 ID），value 为这个实例当前的并发量。同样的，我们为这个 key 设置一个 TTL，并且开启一个线程定期去刷新这个 TTL。每接受一个请求后，计数器加一，请求结束，计数器减一，这和单机场景下的处理方式一样，只不过在判断并发量时，还是需要使用 <code>KEYS</code> 或 <code>SCAN</code> 获取所有的实例，并计算出并发量的总和。不过由于实例个数是有限的，性能比之前的做法有了明显的提升。</p><p>第二种方法我称之为 <strong>双窗口滑动算法</strong>，结合了 TTL 计数器和滑动窗口算法。我们按分钟来设置一个时间窗口，在 Redis 里对应 <code>202009051130</code> 这样的一个 key，value 为计数器，表示请求的数量。当接受一个请求后，在当前的时间窗口中加一，当请求结束，在当前的时间窗口中减一，注意，接受请求和请求结束的时间窗口可能不是同一个。另外，我们还需要一个本地列表来记录当前实例正在处理的所有请求和请求对应的时间窗口，并通过一个小于时间窗口的定时线程（如 30 秒）来迁移过期的请求，所谓过期，指的是请求的时间窗口和当前时间窗口不一致。那么具体如何迁移呢？我们首先需要统计列表中一共有多少请求过期了，然后将列表中的过期请求时间更新为当前时间窗口，并从 Redis 中上一个时间窗口移动相应数量到当前时间窗口，也就是上一个时间窗口减 X，当前时间窗口加 X。由于迁移线程定期执行，所以过期的请求总是会被移动到当前窗口，最终 Redis 中只有当前时间窗口和上个时间窗口这两个时间窗口中有数据，再早一点的窗口时间中的数据会被往后迁移，所以可以给这个 key 设置一个 3 分钟或 5 分钟的 TTL。判断并发量时，由于只有两个 key，只需要使用 <code>MGET</code> 获取两个值相加即可。下面的流程图详细描述了算法的运行过程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy93YmlheDR4RUFsNXp5dUhQaWFlZTQweks4dXoxRVh0S0loYlVQUzRHYTFYem90aGF2VWhJTXo5ZnBxc2gwS1FZekRyNWczbm1hVGFESVZSaWJLN1FpYkRaSEEvNjQw?x-oss-process=image/format,png" alt="img"></p><p>其中有几个需要注意的细节：</p><ol><li>请求结束时，直接在 Redis 中当前时间窗口减一即可，就算是负数也没关系。请求列表中的该请求不用急着删除，可以打上结束标记，在迁移线程中统一删除（当然，如果请求的开始时间和结束时间在同一个窗口，可以直接删除）；</li><li>迁移的时间间隔要小于时间窗口，一般设置为 30s；</li><li>Redis 中的 key 一定要设置 TTL，时间至少为 2 个时间窗口，一般设置为 3 分钟；</li><li>迁移过程涉及到“从上一个时间窗口减”和“在当前时间窗口加”两个操作，要注意操作的原子性；</li><li>获取当前并发量可以通过 <code>MGET</code> 一次性读取两个时间窗口的值，不用 <code>GET</code> 两次；</li><li>获取并发量和判断并发量是否超限，这个过程也要注意操作的原子性。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网关作为微服务架构中的重要一环，充当着一夫当关万夫莫开的角色，所以对网关服务的稳定性要求和性能要求都非常高。为保证网关服务的稳定性，一代又一代的程序员们前仆后继，想出了十八般武艺：限流、熔断、隔离、缓存、降级、等等等等。这篇文章从限流入手，详细介绍了限流的场景和算法，以及源码实现和可能踩到的坑。尽管限流只是网关的一个非常小的功能，但却影响到网关的方方面面，在系统架构的设计中至关重要。虽然我试着从不同的角度希望把限流介绍的更完全，但终究是管中窥豹，只见一斑，还有很多的内容没有介绍到，比如阿里开源的 Sentinel 组件也可以用于限流，因为篇幅有限未能展开。另外前文提到的 Netflix 不再维护 Hystrix 项目，这是因为他们把精力放到另一个限流项目 concurrency-limits 上了，这个项目的目标是打造一款自适应的，极具弹性的限流组件，它借鉴了 <strong>TCP 拥塞控制的算法（TCP congestion control algorithm）</strong>，实现系统的自动限流，感兴趣的同学可以去它的项目主页了解更多内容。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/weixin_38405253/article/details/108891772">https://blog.csdn.net/weixin_38405253/article/details/108891772</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudGateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudGateway基础操作-熔断</title>
      <link href="posts/9ab7b27c.html"/>
      <url>posts/9ab7b27c.html</url>
      
        <content type="html"><![CDATA[<p>微服务系统中熔断限流环节，对保护系统的稳定性起到了很大的作用，作为网关，Spring Cloud Gateway也提供了很好的支持。先来理解下熔断限流概念：</p><blockquote><ul><li><code>熔断降级</code>：在分布式系统中，网关作为流量的入口，大量请求进入网关，向后端远程系统或服务发起调用，后端服务不可避免的会产生调用失败（超时或者异常），失败时不能让请求堆积在网关上，需要快速失败并返回回去，这就需要在网关上做熔断、降级操作。</li><li><code>限流</code>：网关上有大量请求，对指定服务进行限流，可以很大程度上提高服务的可用性与稳定性，限流的目的是通过对并发访问/请求进行限速，或对一个时间窗口内的请求进行限速来保护系统。一旦达到限制速率则可以拒绝服务、排队或等待、降级。</li></ul></blockquote><p>下文就网关如何进行超时熔断、异常熔断和访问限流进行示例说明。示例包含两个模块项目，一个为网关项目<code>gateway</code>，一个为下游业务项目<code>downstream</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/5056014-42c7c5a4b2b0a8b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/467/format/webp" alt="img"></p><h2 id="超时异常熔断"><a href="#超时异常熔断" class="headerlink" title="超时异常熔断"></a>超时异常熔断</h2><h3 id="构建网关目："><a href="#构建网关目：" class="headerlink" title="构建网关目："></a>构建网关目：</h3><p>pom.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.spring.platform<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>platform-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.platform.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>application.yml</p><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8089</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> service_customer          <span class="token comment">#下游服务地址</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8083/          <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">0</span>          <span class="token comment">#网关断言匹配</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/gateway/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token comment">#熔断过滤器</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hystrix              <span class="token key atrule">args</span><span class="token punctuation">:</span>                <span class="token key atrule">name</span><span class="token punctuation">:</span> fallbackcmd                <span class="token key atrule">fallbackUri</span><span class="token punctuation">:</span> forward<span class="token punctuation">:</span>/defaultfallback            <span class="token punctuation">-</span> StripPrefix=1<span class="token comment">#熔断器配置</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">strategy</span><span class="token punctuation">:</span> SEMAPHORE          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token key atrule">shareSecurityContext</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment">#网关日志输出</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">org.springframework.cloud.gateway</span><span class="token punctuation">:</span> TRACE    <span class="token key atrule">org.springframework.http.server.reactive</span><span class="token punctuation">:</span> DEBUG    <span class="token key atrule">org.springframework.web.reactive</span><span class="token punctuation">:</span> DEBUG    <span class="token key atrule">reactor.ipc.netty</span><span class="token punctuation">:</span> DEBUG</code></pre><p>以上配置的意思是：</p><ul><li>网关服务以端口8089暴露</li><li>访问<code>http://127.0.0.1:8089/gateway/</code>开头的请求，将都被路由到下游<code>http://127.0.0.1:8083/</code>下，且<code>gateway</code>部分将被移除（<code>StripPrefix=1</code>）。比如<a href="https://links.jianshu.com/go?to=http://127.0.0.1:8089/gateway/test">http://127.0.0.1:8089/gateway/test</a> —-&gt; <a href="https://links.jianshu.com/go?to=http://127.0.0.1:8083/test">http://127.0.0.1:8083/test</a></li><li>超时异常熔断采用hystrix的SEMAPHORE策略，超时时间为3秒，如果下游服务不可达（异常），将由fallbackcmd处理，路由到本地<a href="https://links.jianshu.com/go?to=http://127.0.0.1:8089/defaultfallback">http://127.0.0.1:8089/defaultfallback</a> 处理。</li></ul><h3 id="构建defaultfallback处理器"><a href="#构建defaultfallback处理器" class="headerlink" title="构建defaultfallback处理器"></a>构建defaultfallback处理器</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfHystrixController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/defaultfallback"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">defaultfallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求被熔断."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Code"</span><span class="token punctuation">,</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Message"</span><span class="token punctuation">,</span><span class="token string">"服务异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>先不构建下游服务，直接运行网关，访问地址<code>http://127.0.0.1:8089/gateway/test</code>，出现如下情况：</p><p><img src="https://upload-images.jianshu.io/upload_images/5056014-f2a77eedb84ae8bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/589/format/webp" alt="img"></p><p>构建下游服务项目，该项目为简单的spring boot web项目，具体配置不详述，添加服务类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/timeout"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"timeout params:"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/b58c13b227bf">https://www.jianshu.com/p/b58c13b227bf</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudGateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudGateway总结</title>
      <link href="posts/8ca623b6.html"/>
      <url>posts/8ca623b6.html</url>
      
        <content type="html"><![CDATA[<h1 id="过滤器的常用功能"><a href="#过滤器的常用功能" class="headerlink" title="过滤器的常用功能"></a>过滤器的常用功能</h1><ol><li>黑名单、白名单</li><li>数据转换（将请求头转换成请求参数）</li><li>数据统计</li><li>限流</li></ol><h1 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h1><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudGateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudGateway基本操作-限流</title>
      <link href="posts/384ef433.html"/>
      <url>posts/384ef433.html</url>
      
        <content type="html"><![CDATA[<p>在高并发的应用中，<strong>限流</strong>是一个绕不开的话题。限流可以保障我们的 API 服务对所有用户的可用性，也可以防止网络攻击。</p><p>一般开发高并发系统常见的限流有：限制总并发数（比如数据库连接池、线程池）、限制瞬时并发数（如 nginx 的 limit_conn 模块，用来限制瞬时并发连接数）、限制时间窗口内的平均速率（如 Guava 的 RateLimiter、nginx 的 limit_req 模块，限制每秒的平均速率）；其他还有如限制远程接口调用速率、限制 MQ 的消费速率。另外还可以根据网络连接数、网络流量、CPU 或内存负载等来限流。</p><p>本文详细探讨在 Spring Cloud Gateway 中如何实现限流。</p><h2 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h2><p>做限流 (Rate Limiting/Throttling) 的时候，除了简单的控制并发，如果要准确的控制 TPS，简单的做法是维护一个单位时间内的 Counter，如判断单位时间已经过去，则将 Counter 重置零。此做法被认为没有很好的处理单位时间的边界，比如在前一秒的最后一毫秒里和下一秒的第一毫秒都触发了最大的请求数，也就是在两毫秒内发生了两倍的 TPS。</p><p>常用的更平滑的限流算法有两种：漏桶算法和令牌桶算法。很多传统的服务提供商如华为中兴都有类似的专利，参考<a href="http://www.google.com/patents/CN1536815A?cl=zh">采用令牌漏桶进行报文限流的方法</a>。</p><h3 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h3><p>漏桶（<a href="https://en.wikipedia.org/wiki/Leaky_bucket">Leaky Bucket</a>）算法思路很简单，水（请求）先进入到漏桶里，漏桶以一定的速度出水（接口有响应速率），当水流入速度过大会直接溢出（访问频率超过接口响应速率），然后就拒绝请求，可以看出漏桶算法能强行限制数据的传输速率。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr6048q7rdj30bs086mxd.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr6048q7rdj30bs086mxd.jpg" alt="Leaky Bucket"></a></p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr6048q7rdj30bs086mxd.jpg">Leaky Bucket</a></p><p>可见这里有两个变量，一个是桶的大小，支持流量突发增多时可以存多少的水（burst），另一个是水桶漏洞的大小（rate）。因为漏桶的漏出速率是固定的参数，所以，即使网络中不存在资源冲突（没有发生拥塞），漏桶算法也不能使流突发（burst）到端口速率。因此，漏桶算法对于存在突发特性的流量来说缺乏效率。</p><h3 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h3><p>令牌桶算法（Token Bucket）和 Leaky Bucket 效果一样但方向相反的算法，更加容易理解。随着时间流逝，系统会按恒定 1/QPS 时间间隔（如果 QPS=100，则间隔是 10ms）往桶里加入 Token（想象和漏洞漏水相反，有个水龙头在不断的加水），如果桶已经满了就不再加了。新请求来临时，会各自拿走一个 Token，如果没有 Token 可拿了就阻塞或者拒绝服务。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr553720h0j30bp06pwek.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr553720h0j30bp06pwek.jpg" alt="Token Bucket"></a></p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr553720h0j30bp06pwek.jpg">Token Bucket</a></p><p>令牌桶的另外一个好处是可以方便的改变速度。一旦需要提高速率，则按需提高放入桶中的令牌的速率。一般会定时（比如 100 毫秒）往桶中增加一定数量的令牌，有些变种算法则实时的计算应该增加的令牌的数量。</p><blockquote><p>Guava 中的 RateLimiter 采用了令牌桶的算法，设计思路参见  <a href="https://github.com/google/guava/blob/v18.0/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java#L25:L144">How is the RateLimiter designed, and why?</a>，详细的算法实现参见<a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java">源码</a>。</p></blockquote><h3 id="Leakly-Bucket-vs-Token-Bucket"><a href="#Leakly-Bucket-vs-Token-Bucket" class="headerlink" title="Leakly Bucket vs Token Bucket"></a>Leakly Bucket vs Token Bucket</h3><table><thead><tr><th>对比项</th><th>Leakly bucket</th><th>Token bucket</th><th>Token bucket 的备注</th></tr></thead><tbody><tr><td>依赖 token</td><td>否</td><td>是</td><td></td></tr><tr><td>立即执行</td><td>是</td><td>否</td><td>有足够的 token 才能执行</td></tr><tr><td>堆积 token</td><td>否</td><td>是</td><td></td></tr><tr><td>速率恒定</td><td>是</td><td>否</td><td>可以大于设定的 QPS</td></tr></tbody></table><h2 id="限流实现"><a href="#限流实现" class="headerlink" title="限流实现"></a>限流实现</h2><p>在 Gateway 上实现限流是个不错的选择，只需要编写一个过滤器就可以了。有了前边过滤器的基础，写起来很轻松。（如果你对 Spring Cloud Gateway 的过滤器还不了解，请先看<a href="https://www.haoyizebo.com/posts/1e919f7d/">这里</a>）</p><p>我们这里采用令牌桶算法，Google Guava 的<code>RateLimiter</code>、<a href="https://github.com/vladimir-bukhtoyarov/bucket4j">Bucket4j</a>、<a href="https://github.com/mokies/ratelimitj">RateLimitJ</a> 都是一些基于此算法的实现，只是他们支持的 back-ends（JCache、Hazelcast、Redis 等）不同罢了，你可以根据自己的技术栈选择相应的实现。</p><p>这里我们使用 Bucket4j，引入它的依赖坐标，为了方便顺便引入 Lombok</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.vladimir-bukhtoyarov<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bucket4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我们来实现具体的过滤器</p><pre class="language-xml" data-language="xml"><code class="language-xml">@CommonsLog@Builder@Data@AllArgsConstructor@NoArgsConstructorpublic class RateLimitByIpGatewayFilter implements GatewayFilter，Ordered &#123;    int capacity;    int refillTokens;    Duration refillDuration;    private static final Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String，Bucket</span><span class="token punctuation">></span></span> CACHE = new ConcurrentHashMap&lt;>();    private Bucket createNewBucket() &#123;        Refill refill = Refill.of(refillTokens，refillDuration);        Bandwidth limit = Bandwidth.classic(capacity，refill);        return Bucket4j.builder().addLimit(limit).build();    &#125;    @Override    public Mono<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Void</span><span class="token punctuation">></span></span> filter(ServerWebExchange exchange，GatewayFilterChain chain) &#123;        // if (!enableRateLimit)&#123;        //     return chain.filter(exchange);        // &#125;        String ip = exchange.getRequest().getRemoteAddress().getAddress().getHostAddress();        Bucket bucket = CACHE.computeIfAbsent(ip，k -> createNewBucket());        log.debug("IP: " + ip + "，TokenBucket Available Tokens: " + bucket.getAvailableTokens());        if (bucket.tryConsume(1)) &#123;            return chain.filter(exchange);        &#125; else &#123;            exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);            return exchange.getResponse().setComplete();        &#125;    &#125;    @Override    public int getOrder() &#123;        return -1000;    &#125;&#125;</code></pre><p>通过对令牌桶算法的了解，我们知道需要定义三个变量：</p><ul><li><code>capacity</code>：桶的最大容量，即能装载 Token 的最大数量</li><li><code>refillTokens</code>：每次 Token 补充量</li><li><code>refillDuration</code>：补充 Token 的时间间隔</li></ul><p>在这个实现中，我们使用了 IP 来进行限制，当达到最大流量就返回<code>429</code>错误。这里我们简单使用一个 Map 来存储 bucket，所以也决定了它只能单点使用，如果是分布式的话，可以采用 Hazelcast 或 Redis 等解决方案。</p><p>在 Route 中我们添加这个过滤器，这里指定了 bucket 的容量为 10 且每一秒会补充 1 个 Token。</p><pre class="language-xml" data-language="xml"><code class="language-xml">.route(r -> r.path("/throttle/customer/**")             .filters(f -> f.stripPrefix(2)                            .filter(new RateLimitByIpGatewayFilter(10，1，Duration.ofSeconds(1))))             .uri("lb://CONSUMER")             .order(0)             .id("throttle_customer_service"))</code></pre><p>启动服务并多次快速刷新改接口，就会看到 Tokens 的数量在不断减小，等一会又会增加上来</p><pre class="language-none"><code class="language-none">2018-05-09 15:42:08.601 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 22018-05-09 15:42:08.958 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 12018-05-09 15:42:09.039 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 02018-05-09 15:42:10.201 DEBUG 96278 --- [ctor-http-nio-2] com.yibo.filter.RateLimitByIpGatewayFilter  : IP: 0:0:0:0:0:0:0:1，TokenBucket Available Tokens: 1</code></pre><h2 id="RequestRateLimiter"><a href="#RequestRateLimiter" class="headerlink" title="RequestRateLimiter"></a>RequestRateLimiter</h2><p>刚刚我们通过过滤器实现了限流的功能，你可能在想为什么不直接创建一个过滤器工厂呢，那样多方便。这是因为 Spring Cloud Gateway 已经内置了一个<code>RequestRateLimiterGatewayFilterFactory</code>，我们可以直接使用（这里有坑，后边详说）。</p><p>目前<code>RequestRateLimiterGatewayFilterFactory</code>的实现依赖于 Redis，所以我们还要引入<code>spring-boot-starter-data-redis-reactive</code></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis-reactive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>因为这里有坑，所以把 application.yml 的配置再全部贴一遍，新增的部分我已经用<code># ---</code>标出来了</p><pre class="language-xml" data-language="xml"><code class="language-xml">spring:  application:    name: cloud-gateway  cloud:    gateway:      discovery:        locator:          enabled: true      routes:        - id: service_customer          uri: lb://CONSUMER          order: 0          predicates:            - Path=/customer/**          filters:            - StripPrefix=1            # -------            - name: RequestRateLimiter              args:                key-resolver: '#&#123;@remoteAddrKeyResolver&#125;'                redis-rate-limiter.replenishRate: 1                redis-rate-limiter.burstCapacity: 5            # -------            - AddResponseHeader=X-Response-Default-Foo，Default-Bar      default-filters:        - Elapsed=true  # -------  redis:    host: localhost    port: 6379    database: 0  # -------server:  port: 10000eureka:  client:    service-url:      defaultZone: http://localhost:7000/eureka/logging:  level:    org.springframework.cloud.gateway: debug    com.yibo.filter: debug</code></pre><p>默认情况下，是基于<strong>令牌桶算法</strong>实现的限流，有个三个参数需要配置：</p><ul><li><code>burstCapacity</code>，令牌桶容量。</li><li><code>replenishRate</code>，令牌桶每秒填充平均速率。</li><li><code>key-resolver</code>，用于限流的键的解析器的 Bean 对象名字（有些绕，看代码吧）。它使用 SpEL 表达式根据<code>#&#123;@beanName&#125;</code>从 Spring 容器中获取 Bean 对象。默认情况下，使用<code>PrincipalNameKeyResolver</code>，以请求认证的<code>java.security.Principal</code>作为限流键。</li></ul><blockquote><p>关于<code>filters</code>的那段配置格式，参考<a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/167">这里</a></p></blockquote><p>我们实现一个使用请求 IP 作为限流键的<code>KeyResolver</code></p><pre class="language-xml" data-language="xml"><code class="language-xml">public class RemoteAddrKeyResolver implements KeyResolver &#123;    public static final String BEAN_NAME = "remoteAddrKeyResolver";    @Override    public Mono<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String</span><span class="token punctuation">></span></span> resolve(ServerWebExchange exchange) &#123;        return Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());    &#125;&#125;</code></pre><p>配置<code>RemoteAddrKeyResolver</code> Bean 对象</p><pre class="language-xml" data-language="xml"><code class="language-xml">@Bean(name = RemoteAddrKeyResolver.BEAN_NAME)public RemoteAddrKeyResolver remoteAddrKeyResolver() &#123;    return new RemoteAddrKeyResolver();&#125;</code></pre><p>以上就是代码部分，我们还差一个 Redis，我就本地用 docker 来快速启动了</p><pre class="language-none"><code class="language-none">docker run --name redis -p 6379:6379 -d redis</code></pre><p>万事俱备，只欠测试了。以上的代码的和配置都是 OK 的，可以自行测试。下面来说一下这里边的坑。</p><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><h4 id="配置不生效"><a href="#配置不生效" class="headerlink" title="配置不生效"></a>配置不生效</h4><p>参考这个 <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/167">issue</a></p><h4 id="No-Configuration-found-for-route"><a href="#No-Configuration-found-for-route" class="headerlink" title="No Configuration found for route"></a>No Configuration found for route</h4><p>这个异常信息如下：</p><pre class="language-none"><code class="language-none">java.lang.IllegalArgumentException: No Configuration found for route service_customer    at org.springframework.cloud.gateway.filter.ratelimit.RedisRateLimiter.isAllowed(RedisRateLimiter.java:93) ~[spring-cloud-gateway-core-2.0.0.RC1.jar:2.0.0.RC1]Copy</code></pre><p>出现在将 RequestRateLimiter 配置为 defaultFilters 的情况下，比如像这样</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">default-filters</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RequestRateLimiter    <span class="token key atrule">args</span><span class="token punctuation">:</span>      <span class="token key atrule">key-resolver</span><span class="token punctuation">:</span> <span class="token string">'#&#123;@remoteAddrKeyResolver&#125;'</span>      <span class="token key atrule">redis-rate-limiter.replenishRate</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">redis-rate-limiter.burstCapacity</span><span class="token punctuation">:</span> <span class="token number">5</span></code></pre><p>这时候就会导致这个异常。我通过分析源码，发现了一些端倪，感觉像是一个 bug，已经提交了 <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/310">issue</a></p><p>我们从异常入手来看， <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/ratelimit/RedisRateLimiter.java#L89">RedisRateLimiter#isAllowed</a> 这个方法要获取 routeId 对应的 routerConfig，如果获取不到就抛出刚才我们看到的那个异常。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId，<span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>initialized<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"RedisRateLimiter is not initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 只为 defaultFilters 配置 RequestRateLimiter 的时候</span>    <span class="token comment">// config map 里边的 key 只有 "defaultFilters"</span>    <span class="token comment">// 但是我们实际请求的 routeId 为 "customer_service"</span>    <span class="token class-name">Config</span> routeConfig <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>routeConfig <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultConfig <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No Configuration found for route "</span> <span class="token operator">+</span> routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        routeConfig <span class="token operator">=</span> defaultConfig<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 省略若干代码...</span><span class="token punctuation">&#125;</span></code></pre><p>既然这里要 get，那必然有个地方要 put。put 的相关代码在 <a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/master/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/ratelimit/AbstractRateLimiter.java#L55">AbstractRateLimiter#onApplicationEvent</a> 这个方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">FilterArgsEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span>，<span class="token class-name">Object</span><span class="token operator">></span> args <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// hasRelevantKey 检查 args 是否包含 configurationPropertyName</span>    <span class="token comment">// 只有 defaultFilters 包含</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">hasRelevantKey</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> routeId <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getRouteId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">C</span> routeConfig <span class="token operator">=</span> <span class="token function">newConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ConfigurationUtils</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>routeConfig，args<span class="token punctuation">,</span>                            configurationPropertyName，configurationPropertyName，validator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>routeId，routeConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasRelevantKey</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span>，<span class="token class-name">Object</span><span class="token operator">></span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>key <span class="token operator">-></span> key<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>configurationPropertyName <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上边的 args 里是是配置参数的键值对，比如我们之前自定义的过滤器工厂<code>Elapsed</code>，有个参数<code>withParams</code>，这里就是<code>withParams=true</code>。关键代码在第 7 行，<code>hasRelevantKey</code>方法用于检测 args 里边是否包含<code>configurationPropertyName.</code>，具体到本例就是是否包含<code>redis-rate-limiter.</code>。悲剧就发生在这里，因为我们只为 defaultFilters 配置了相关 args，注定其他的 route 到这里就直接 return 了。</p><p>现在不清楚这是 bug 还是设计者有意为之，等答复吧。</p><h2 id="基于系统负载的动态限流"><a href="#基于系统负载的动态限流" class="headerlink" title="基于系统负载的动态限流"></a>基于系统负载的动态限流</h2><p>在实际工作中，我们可能还需要根据网络连接数、网络流量、CPU 或内存负载等来进行动态限流。在这里我们以 CPU 为栗子。</p><p>我们需要借助 Spring Boot Actuator 提供的 Metrics 能力进行实现基于 CPU 的限流——当 CPU 使用率高于某个阈值就开启限流，否则不开启限流。</p><p>我们在项目中引入 Actuator 的依赖坐标</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>因为 Spring Boot 2.x 之后，Actuator 被重新设计了，和 1.x 的区别还是挺大的（参考<a href="http://www.baeldung.com/spring-boot-actuators">这里</a>）。我们先在配置中设置<code>management.endpoints.web.exposure.include=*</code>来观察一下新的 Metrics 的能力</p><p><a href="http://localhost:10000/actuator/metrics">http://localhost:10000/actuator/metrics</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"jvm.buffer.memory.used"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.memory.used"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.buffer.count"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.memory.allocated"</span><span class="token punctuation">,</span>    <span class="token string">"logback.events"</span><span class="token punctuation">,</span>    <span class="token string">"process.uptime"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.memory.committed"</span><span class="token punctuation">,</span>    <span class="token string">"system.load.average.1m"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.pause"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.max.data.size"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.buffer.total.capacity"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.memory.max"</span><span class="token punctuation">,</span>    <span class="token string">"system.cpu.count"</span><span class="token punctuation">,</span>    <span class="token string">"system.cpu.usage"</span><span class="token punctuation">,</span>    <span class="token string">"process.files.max"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.threads.daemon"</span><span class="token punctuation">,</span>    <span class="token string">"http.server.requests"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.threads.live"</span><span class="token punctuation">,</span>    <span class="token string">"process.start.time"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.classes.loaded"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.classes.unloaded"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.threads.peak"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.live.data.size"</span><span class="token punctuation">,</span>    <span class="token string">"jvm.gc.memory.promoted"</span><span class="token punctuation">,</span>    <span class="token string">"process.files.open"</span><span class="token punctuation">,</span>    <span class="token string">"process.cpu.usage"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>我们可以利用里边的系统 CPU 使用率<code>system.cpu.usage</code></p><p><a href="http://localhost:10000/actuator/metrics/system.cpu.usage">http://localhost:10000/actuator/metrics/system.cpu.usage</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"system.cpu.usage"</span><span class="token punctuation">,</span>  <span class="token property">"measurements"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"statistic"</span><span class="token operator">:</span> <span class="token string">"VALUE"</span><span class="token punctuation">,</span>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">0.5189003436426117</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"availableTags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>最近一分钟内的平均负载<code>system.load.average.1m</code>也是一样的</p><p><a href="http://localhost:10000/actuator/metrics/system.load.average.1m">http://localhost:10000/actuator/metrics/system.load.average.1m</a></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"system.load.average.1m"</span><span class="token punctuation">,</span>  <span class="token property">"measurements"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"statistic"</span><span class="token operator">:</span> <span class="token string">"VALUE"</span><span class="token punctuation">,</span>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">5.33203125</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"availableTags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>知道了 Metrics 提供的指标，我们就来看在代码里具体怎么实现吧。Actuator 2.x 里边已经没有了之前 1.x 里边提供的<code>SystemPublicMetrics</code>，但是经过阅读源码可以发现<code>MetricsEndpoint</code>这个类可以提供类似的功能。就用它来撸代码吧</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CommonsLog</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitByCpuGatewayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MetricsEndpoint</span> metricsEndpoint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> METRIC_NAME <span class="token operator">=</span> <span class="token string">"system.cpu.usage"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> MAX_USAGE <span class="token operator">=</span> <span class="token number">0.50D</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// if (!enableRateLimit)&#123;</span>        <span class="token comment">//     return chain.filter(exchange);</span>        <span class="token comment">// &#125;</span>        <span class="token class-name">Double</span> systemCpuUsage <span class="token operator">=</span> metricsEndpoint<span class="token punctuation">.</span><span class="token function">metric</span><span class="token punctuation">(</span>METRIC_NAME<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getMeasurements</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">nonNull</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">MetricsEndpoint</span><span class="token punctuation">.</span><span class="token class-name">Sample</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token operator">::</span><span class="token function">isFinite</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0.0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> ok <span class="token operator">=</span> systemCpuUsage <span class="token operator">&lt;</span> MAX_USAGE<span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"system.cpu.usage: "</span> <span class="token operator">+</span> systemCpuUsage <span class="token operator">+</span> <span class="token string">" ok: "</span> <span class="token operator">+</span> ok<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>TOO_MANY_REQUESTS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>配置 Route</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RateLimitByCpuGatewayFilter</span> rateLimitByCpuGatewayFilter<span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customerRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// @formatter:off</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/throttle/customer/**"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">stripPrefix</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>rateLimitByCpuGatewayFilter<span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"lb://CONSUMER"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"throttle_customer_service"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// @formatter:on</span><span class="token punctuation">&#125;</span></code></pre><p>至于效果嘛，自己试试吧。因为 CPU 的使用率一般波动较大，测试效果还是挺明显的，实际使用就得慎重了。</p><p>示例代码可以从 Github 获取：<a href="https://github.com/zhaoyibo/spring-cloud-study">https://github.com/zhaoyibo/spring-cloud-study</a></p><h2 id="改进与提升"><a href="#改进与提升" class="headerlink" title="改进与提升"></a>改进与提升</h2><p>实际项目中，除以上实现的限流方式，还可能会：一、在上文的基础上，增加配置项，控制每个路由的限流指标，并实现动态刷新，从而实现更加灵活的管理。二、实现不同维度的限流，例如：</p><ul><li>对请求的目标 URL 进行限流（例如：某个 URL 每分钟只允许调用多少次）</li><li>对客户端的访问 IP 进行限流（例如：某个 IP 每分钟只允许请求多少次）</li><li>对某些特定用户或者用户组进行限流（例如：非 VIP 用户限制每分钟只允许调用 100 次某个 API 等）</li><li>多维度混合的限流。此时，就需要实现一些限流规则的编排机制（与、或、非等关系）</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.haoyizebo.com/posts/ced8ea9/">https://www.haoyizebo.com/posts/ced8ea9/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudGateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudGateway基本操作-动态路由</title>
      <link href="posts/1322871c.html"/>
      <url>posts/1322871c.html</url>
      
        <content type="html"><![CDATA[<p>gateway配置路由主要有两种方式，一种是用yml配置文件，一种是写代码里，这两种方式都是不支持动态配置的。如：</p><p><img src="https://img-blog.csdnimg.cn/20181026112026523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"><img src="https://img-blog.csdnimg.cn/20181026112045783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>下面就来看看gateway是如何加载这些配置信息的。</p><h3 id="1-路由初始化"><a href="#1-路由初始化" class="headerlink" title="1 路由初始化"></a>1 路由初始化</h3><p>无论是yml还是代码，这些配置最终都是被封装到RouteDefinition对象中。</p><p><img src="https://img-blog.csdnimg.cn/20181026112443317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>一个RouteDefinition有个唯一的ID，如果不指定，就默认是UUID，多个RouteDefinition组成了gateway的路由系统。</p><p>所有路由信息在系统启动时就被加载装配好了，并存到了内存里。我们从源码来看看。<img src="https://img-blog.csdnimg.cn/20181026113033137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>圆圈里就是装配yml文件的，它返回的是PropertiesRouteDefinitionLocator，该类继承了RouteDefinitionLocator，RouteDefinitionLocator就是路由的装载器，里面只有一个方法，就是获取路由信息的。该接口有多个实现类，分别对应不同方式配置的路由方式。</p><p><img src="https://img-blog.csdnimg.cn/20181026113950773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20181026113753850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/2018102612081129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>通过这几个实现类，再结合上面的AutoConfiguration里面的Primary信息，就知道加载配置信息的顺序。</p><p>PropertiesRouteDefinitionLocator–&gt;|配置文件加载初始化| CompositeRouteDefinitionLocator<br>RouteDefinitionRepository–&gt;|存储器中加载初始化| CompositeRouteDefinitionLocator<br>DiscoveryClientRouteDefinitionLocator–&gt;|注册中心加载初始化| CompositeRouteDefinitionLocator</p><p>参考：<a href="https://www.jianshu.com/p/b02c7495eb5e">https://www.jianshu.com/p/b02c7495eb5e</a></p><p><a href="https://blog.csdn.net/X5fnncxzq4/article/details/80221488">https://blog.csdn.net/X5fnncxzq4/article/details/80221488</a></p><p><img src="https://img-blog.csdnimg.cn/20181026114644355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>这是第一顺序，就是从CachingRouteLocator中获取路由信息，我们可以打开该类进行验证。<img src="https://img-blog.csdnimg.cn/20181026114836900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>不管发起什么请求，必然会走上面的断点处。请求一次，走一次。这是将路由信息缓存到了Map中。配置信息一旦请求过一次，就会被缓存到上图的CachingRouteLocator类中，再次发起请求后，会直接从map中读取。</p><p>如果想动态刷新配置信息，就需要发起一个RefreshRoutesEvent的事件，上图的cache会监听该事件，并重新拉取路由配置信息。</p><p>通过下图，可以看到如果没有RouteDefinitionRepository的实例，则默认用InMemoryRouteDefinitionRepository。而做动态路由的关键就在这里。即通过自定义的RouteDefinitionRepository类，来提供路由配置信息。</p><p><img src="https://img-blog.csdnimg.cn/20181026120724858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>例如：</p><p><img src="https://img-blog.csdnimg.cn/2018102612162119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>在getRouteDefinitions方法返回你自定义的路由配置信息即可。这里可以用数据库、nosql等等任意你喜欢的方式来提供。而且配置信息修改后，发起一次RefreshRoutesEvent事件即可让配置生效。这就是动态配置路由的核心所在，下面来看具体代码实现。</p><h3 id="2-基于数据库、缓存的动态路由"><a href="#2-基于数据库、缓存的动态路由" class="headerlink" title="2 基于数据库、缓存的动态路由"></a>2 基于数据库、缓存的动态路由</h3><p>pom.xml如下</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.maimeng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>apigateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>apigateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Finchley.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.51<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--&lt;dependency>            &lt;groupId>mysql&lt;/groupId>            &lt;artifactId>mysql-connector-java&lt;/artifactId>            &lt;scope>runtime&lt;/scope>        &lt;/dependency>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20181026160616350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>注意这里是SR1，经测试SR2有bug，会出问题。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"redisTemplate"</span><span class="token punctuation">,</span> <span class="token string">"stringRedisTemplate"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringRedisTemplate</span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p>核心类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisRouteDefinitionRepository</span> <span class="token keyword">implements</span> <span class="token class-name">RouteDefinitionRepository</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> GATEWAY_ROUTES <span class="token operator">=</span> <span class="token string">"geteway_routes"</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">></span></span> <span class="token function">getRouteDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">></span></span> routeDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>GATEWAY_ROUTES<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>routeDefinition <span class="token operator">-></span> routeDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>routeDefinition<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RouteDefinition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>routeDefinitions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RouteDefinition</span><span class="token punctuation">></span></span> route<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> routeId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p>主要是在get方法里，此处从redis里获取配置好的Definition。</p><p>然后我们的工作就是将配置信息，放到redis里即可。</p><p>下面就是我模拟的一个配置，等同于在yml里</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> header        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8888/header        <span class="token key atrule">filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> AddRequestHeader=header<span class="token punctuation">,</span> addHeader        <span class="token punctuation">-</span> AddRequestParameter=param<span class="token punctuation">,</span> addParam        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> Path=/jd</code></pre><p>定义好后，将其放到redis里，之后启动项目访问/jd，再启动后台的localhost:8888项目。即可进行验证。</p><p>之后如果要动态修改配置，就可以通过类似于上面的方式，来获取json字符串，然后将字符串放到redis里进行替换。替换后，需要通知gateway主动刷新一下。</p><p><img src="https://img-blog.csdnimg.cn/20181026161549838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20181026161611891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW55YWxlaXhpYW93dQ==,size_27,color_FFFFFF,t_70" alt="img"></p><p>刷新时，可以定义一个controller，然后调用一下notifyChanged()方法，就能完成新配置的替换了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/tianyaleixiaowu/article/details/83412301">https://blog.csdn.net/tianyaleixiaowu/article/details/83412301</a></p><p><a href="https://www.haoyizebo.com/posts/1962f450/">https://www.haoyizebo.com/posts/1962f450/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudGateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudGateway基本操作-断言</title>
      <link href="posts/cbfc80cb.html"/>
      <url>posts/cbfc80cb.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev    <span class="token comment">################################################################spring cloud gateway##############################################################</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>              <span class="token comment">#当访问http://网关地址/服务名称（大写）/**地址会自动转发到http://服务名称（大写）/**地址，如果为false就不会自动转发</span>          <span class="token key atrule">lowerCaseServiceId</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#为true表示服务名称（小写）</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment  <span class="token comment">#路由id，需要全局统一，建议使用对应的spring.application.name</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>  <span class="token comment">#路由到对应服务的地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/service/<span class="token important">**/*</span>      <span class="token comment">#断言，匹配规则，ant匹配</span>        <span class="token comment">############################################################</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment2  <span class="token comment">#路由id，需要全局统一，建议使用对应的spring.application.name</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8002</span>  <span class="token comment">#路由到对应服务的地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/service/<span class="token important">**/*</span>      <span class="token comment">#断言，匹配规则，ant匹配</span></code></pre><h2 id="JavaBean配置"><a href="#JavaBean配置" class="headerlink" title="JavaBean配置"></a>JavaBean配置</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemogatewayApplication</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"path_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"host_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.myhost.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"rewrite_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.rewrite.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">rewritePath</span><span class="token punctuation">(</span><span class="token string">"/foo/(?&lt;segment>.*)"</span><span class="token punctuation">,</span> <span class="token string">"/$&#123;segment&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"hystrix_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.hystrix.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">hystrix</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"slowcmd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"hystrix_fallback_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.hystrixfallback.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">hystrix</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"slowcmd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFallbackUri</span><span class="token punctuation">(</span><span class="token string">"forward:/hystrixfallback"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"limit_route"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token string">"*.limited.org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/anything/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">requestRateLimiter</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setRateLimiter</span><span class="token punctuation">(</span><span class="token function">redisRateLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="自定义路由Predicate-断言"><a href="#自定义路由Predicate-断言" class="headerlink" title="自定义路由Predicate 断言"></a>自定义路由Predicate 断言</h4><p>在<code>spring-cloud-gateway</code>的官方文档中没有给出自定义Predicate ,只留下一句<code>TODO: document writing Custom Route Predicate Factories</code></p><h5 id="创建RoutePredicateFactory"><a href="#创建RoutePredicateFactory" class="headerlink" title="创建RoutePredicateFactory"></a>创建RoutePredicateFactory</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author WXY */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenRoutePredicateFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutePredicateFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">.</span><span class="token class-name">Config</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DATETIME_KEY <span class="token operator">=</span> <span class="token string">"headerName"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>DATETIME_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerWebExchange</span><span class="token punctuation">></span></span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"TokenRoutePredicateFactory Start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> exchange <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断header里有放token</span>            <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getHeaderName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Token Predicate headers:&#123;&#125;"</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> header<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 传输token header key         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> headerName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHeaderName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> headerName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeaderName</span><span class="token punctuation">(</span><span class="token class-name">String</span> headerName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>headerName <span class="token operator">=</span> headerName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>继承<code>AbstractRoutePredicateFactory&lt;C&gt;</code>主要实现其中的两个方法</p><p><code>shortcutFieldOrder()</code>-Config对应的字段</p><p><code>Predicate&lt;ServerWebExchange&gt; apply(Config config)</code>-具体的逻辑</p><p>还有就是构造方法传入用来装配置的类程序会自动把配置的<code>value</code>传入<code>apply</code>中的入参</p><h5 id="初始化RoutePredicateFactory为bean"><a href="#初始化RoutePredicateFactory为bean" class="headerlink" title="初始化RoutePredicateFactory为bean"></a>初始化RoutePredicateFactory为bean</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token comment">/** * @author WXY * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoutesConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenRoutePredicateFactory</span> <span class="token function">initTokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>或者直接在<code>TokenRoutePredicateFactory</code>类上加<code>@Component</code>也行</p><h4 id="配置自定义的Predicate"><a href="#配置自定义的Predicate" class="headerlink" title="配置自定义的Predicate"></a>配置自定义的Predicate</h4><h5 id="使用属性文件配置自定义Predicate"><a href="#使用属性文件配置自定义Predicate" class="headerlink" title="使用属性文件配置自定义Predicate"></a>使用属性文件配置自定义Predicate</h5><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.cloud.gateway.routes[1].predicates[1]</span><span class="token punctuation">=</span><span class="token attr-value">Token=Authorization</span></code></pre><p>其中<code>Toekn</code>为命名<code>RoutePredicateFactory</code>时的前面部分，所以在定义<code>RoutePredicateFactory</code>时类名必须后缀为<code>RoutePredicateFactory</code>,否则找不到自定义的<code>Predicate</code></p><h5 id="使用代码配置"><a href="#使用代码配置" class="headerlink" title="使用代码配置"></a>使用代码配置</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author WXY * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoutesConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 代码配置路由     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>predicateSpec <span class="token operator">-></span>                predicateSpec<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/order/**"</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncPredicate</span><span class="token punctuation">(</span><span class="token function">initTokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyAsync</span><span class="token punctuation">(</span>config <span class="token operator">-></span> config<span class="token punctuation">.</span><span class="token function">setHeaderName</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"lb://order-service"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"order-service"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenRoutePredicateFactory</span> <span class="token function">initTokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenRoutePredicateFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>使用代码配置自定义Predicate，主要使用<code>asyncPredicate</code>方法，把所需的自定义<code>RoutePredicateFactory</code>对象传进去配置<code>applyAsync</code>方法传入配置的属性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://my.oschina.net/zhousc1992/blog/3194740">https://my.oschina.net/zhousc1992/blog/3194740</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudGateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloudGateway基本操作-过滤器</title>
      <link href="posts/4db8feb0.html"/>
      <url>posts/4db8feb0.html</url>
      
        <content type="html"><![CDATA[<p>Spring Cloud Gateway 已经内置了很多实用的过滤器，但并不能完全满足我们的需求。本文我们就来实现自定义过滤器。虽然现在 Spring Cloud Gateway 的文档还不完善，但是我们依旧可以照猫画虎来定制自己的过滤器。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4wcu9jgkj30nk0bqabh.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4wcu9jgkj30nk0bqabh.jpg" alt="img"></a></p><h2 id="Filter-的作用"><a href="#Filter-的作用" class="headerlink" title="Filter 的作用"></a>Filter 的作用</h2><p>其实前边在介绍 Zuul 的的时候已经介绍过 Zuul 的 Filter 的作用了，同作为网关服务，Spring Cloud Gateway 的 Filter 作用也类似。</p><p>这里就简单用两张图来解释一下吧。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43eek154j316c0g4wgz.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43eek154j316c0g4wgz.jpg" alt="img"></a></p><p>当使用微服务构建整个 API 服务时，一般有许多不同的应用在运行，如上图所示的<code>mst-user-service</code>、<code>mst-good-service</code>和<code>mst-order-service</code>，这些服务都需要对客户端的请求的进行 Authentication。最简单粗暴的方法就是像上图一样，为每个微服务应用都实现一套用于校验的过滤器或拦截器。</p><p>对于这样的问题，更好的做法是通过前置的网关服务来完成这些非业务性质的校验，就像下图</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43dop520j31j60ni413.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr43dop520j31j60ni413.jpg" alt="img"></a></p><h2 id="Filter-的生命周期"><a href="#Filter-的生命周期" class="headerlink" title="Filter 的生命周期"></a>Filter 的生命周期</h2><p>Spring Cloud Gateway 的 Filter 的生命周期不像 Zuul 的那么丰富，它只有两个：“pre”和“post”。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr48yqx3ouj31kw17pn81.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr48yqx3ouj31kw17pn81.jpg" alt="image-20180508184542206"></a></p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tKfTcly1fr48yqx3ouj31kw17pn81.jpg">image-20180508184542206</a></p><p>“pre”和“post”分别会在请求被执行前调用和被执行后调用，和 Zuul Filter 或 Spring Interceptor 中相关生命周期类似，但在形式上有些不一样。</p><p>Zuul 的 Filter 是通过<code>filterType()</code>方法来指定，一个 Filter 只能对应一种类型，要么是“pre”要么是“post”。Spring Interceptor 是通过重写<code>HandlerInterceptor</code>中的三个方法来实现的。而 Spring Cloud Gateway 基于 Project Reactor 和 WebFlux，采用响应式编程风格，打开它的 Filter 的接口<code>GatewayFilter</code>你会发现它只有一个方法<code>filter</code>。</p><p>仅通过这一个方法，怎么来区分是“pre”还是“post”呢？我们下边就通过自定义过滤器来看看。</p><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>现在假设我们要统计某个服务的响应时间，我们可以在代码中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// do something...</span><span class="token keyword">long</span> elapsed <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"elapsed: &#123;&#125;ms"</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>每次都要这么写是不是很烦？Spring 告诉我们有个东西叫 AOP。但是我们是微服务啊，在每个服务里都写也很烦。这时候就该网关的过滤器登台表演了。</p><p>自定义过滤器需要实现<code>GatewayFilter</code>和<code>Ordered</code>。其中<code>GatewayFilter</code>中的这个方法就是用来实现你的自定义的逻辑的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Copy</span></code></pre><p>而<code>Ordered</code>中的<code>int getOrder()</code>方法是来给过滤器设定优先级别的，值越大则优先级越低。</p><p>好了，让我们来撸代码吧</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilterChain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Ordered</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElapsedFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">GatewayFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ELAPSED_TIME_BEGIN <span class="token operator">=</span> <span class="token string">"elapsedTimeBegin"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>                <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Long</span> startTime <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>startTime <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们在请求刚刚到达时，往<code>ServerWebExchange</code>中放入了一个属性<code>elapsedTimeBegin</code>，属性值为当时的毫秒级时间戳。然后在请求执行结束后，又从中取出我们之前放进去的那个时间戳，与当前时间的差值即为该请求的耗时。因为这是与业务无关的日志所以将<code>Ordered</code>设为<code>Integer.MAX_VALUE</code>以降低优先级。</p><p>现在再来看我们之前的问题：怎么来区分是“pre”还是“post”呢？其实就是<code>chain.filter(exchange)</code>之前的就是“pre”部分，之后的也就是<code>then</code>里边的是“post”部分。</p><p>创建好 Filter 之后我们将它添加到我们的 Filter Chain 里边</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customerRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// @formatter:off</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/fluent/customer/**"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">stripPrefix</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ElapsedFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">addResponseHeader</span><span class="token punctuation">(</span><span class="token string">"X-Response-Default-Foo"</span><span class="token punctuation">,</span> <span class="token string">"Default-Bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"lb://CONSUMER"</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                         <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"fluent_customer_service"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// @formatter:on</span><span class="token punctuation">&#125;</span></code></pre><p>现在再尝试访问 <a href="http://localhost:10000/customer/hello/yibo">http://localhost:10000/customer/hello/yibo</a> 即可在控制台里看到请求路径与对应的耗时</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">04.197</span>  INFO <span class="token number">83726</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ctor<span class="token operator">-</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">GatewayFilter</span>   <span class="token operator">:</span> <span class="token operator">/</span>hello<span class="token operator">/</span>yibo<span class="token operator">:</span> <span class="token number">40</span>ms</code></pre><blockquote><p>实际在使用 Spring Cloud 的过程中，我们会<a href="https://www.haoyizebo.com/posts/6d06094e/">使用 Sleuth+Zipkin 来进行耗时分析</a>。</p></blockquote><h2 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h2><p>前边讲了自定义的过滤器，那个过滤器只是局部的，如果我们有多个路由就需要一个一个来配置，<strong>并不能</strong>通过像下面这样来实现全局有效（也未在 Fluent Java API 中找到能设置 defaultFilters 的方法）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ElapsedFilter</span> <span class="token function">elapsedFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ElapsedFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这在我们要全局统一处理某些业务的时候就显得比较麻烦，比如像最开始我们说的要做身份校验，有没有简单的方法呢？这时候就该全局过滤器出场了。</p><p>有了前边的基础，我们创建全局过滤器就简单多了。只需要把实现的接口<code>GatewayFilter</code>换成<code>GlobalFilter</code>，就完事大吉了。比如下面的 Demo 就是从请求参数中获取<code>token</code>字段，如果能获取到就 pass，获取不到就直接返回<code>401</code>错误，虽然简单，但足以说明问题了。</p><pre class="language-none"><code class="language-none">import org.springframework.cloud.gateway.filter.GatewayFilterChain;import org.springframework.cloud.gateway.filter.GlobalFilter;import org.springframework.core.Ordered;import org.springframework.http.HttpStatus;import org.springframework.web.server.ServerWebExchange;import reactor.core.publisher.Mono;public class TokenFilter implements GlobalFilter, Ordered &#123;    @Override    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;        String token &#x3D; exchange.getRequest().getQueryParams().getFirst(&quot;token&quot;);        if (token &#x3D;&#x3D; null || token.isEmpty()) &#123;            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);            return exchange.getResponse().setComplete();        &#125;        return chain.filter(exchange);    &#125;    @Override    public int getOrder() &#123;        return -100;    &#125;&#125;</code></pre><p>然后在 Spring Config 中配置这个 Bean</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TokenFilter</span> <span class="token function">tokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TokenFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>重启应用就能看到效果了</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">2018</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">06.528</span> DEBUG <span class="token number">87751</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ctor<span class="token operator">-</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">.</span>g<span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token class-name">RoutePredicateHandlerMapping</span>   <span class="token operator">:</span> <span class="token class-name">Mapping</span> <span class="token punctuation">[</span><span class="token class-name">Exchange</span><span class="token operator">:</span> GET http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">10000</span><span class="token operator">/</span>customer<span class="token operator">/</span>hello<span class="token operator">/</span>yibo<span class="token operator">?</span>token<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">]</span> <span class="token keyword">to</span> <span class="token class-name">Route</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token string">'service_customer'</span><span class="token punctuation">,</span> uri<span class="token operator">=</span>lb<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>CONSUMER<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> predicate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>predicate<span class="token punctuation">.</span><span class="token class-name">PathRoutePredicateFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">334</span><span class="token operator">/</span><span class="token number">1871259950</span><span class="token annotation punctuation">@2aa090be</span><span class="token punctuation">,</span> gatewayFilters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">StripPrefixGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">337</span><span class="token operator">/</span><span class="token number">577037372</span><span class="token annotation punctuation">@22e84be7</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">AddResponseHeaderGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">339</span><span class="token operator">/</span><span class="token number">1061806694</span><span class="token annotation punctuation">@1715f608</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token number">2018</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">06.530</span> DEBUG <span class="token number">87751</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ctor<span class="token operator">-</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>c<span class="token punctuation">.</span>g<span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token class-name">FilteringWebHandler</span>      <span class="token operator">:</span> <span class="token class-name">Sorted</span> gatewayFilterFactories<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>com<span class="token punctuation">.</span>yibo<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">TokenFilter</span><span class="token annotation punctuation">@309028af</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">NettyWriteResponseFilter</span><span class="token annotation punctuation">@70e889e9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">StripPrefixGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">337</span><span class="token operator">/</span><span class="token number">577037372</span><span class="token annotation punctuation">@22e84be7</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token class-name">AddResponseHeaderGatewayFilterFactory</span>$$<span class="token class-name">Lambda</span>$<span class="token number">339</span><span class="token operator">/</span><span class="token number">1061806694</span><span class="token annotation punctuation">@1715f608</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">RouteToRequestUrlFilter</span><span class="token annotation punctuation">@51351f28</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">LoadBalancerClientFilter</span><span class="token annotation punctuation">@724c5cbe</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">10100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">AdaptCachedBodyGlobalFilter</span><span class="token annotation punctuation">@418c020b</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483637</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">WebsocketRoutingFilter</span><span class="token annotation punctuation">@15f2eda3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483646</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">NettyRoutingFilter</span><span class="token annotation punctuation">@70101687</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483647</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">OrderedGatewayFilter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span><span class="token class-name">GatewayFilterAdapter</span><span class="token punctuation">&#123;</span>delegate<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token class-name">ForwardRoutingFilter</span><span class="token annotation punctuation">@21618fa7</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2147483647</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token class-name">Copy</span></code></pre><blockquote><p>官方说，未来的版本将对这个接口作出一些调整：<br>This interface and usage are subject to change in future milestones.<br>from <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.0.0.RC1/single/spring-cloud-gateway.html#_global_filters">Spring Cloud Gateway - Global Filters</a></p></blockquote><h2 id="自定义过滤器工厂"><a href="#自定义过滤器工厂" class="headerlink" title="自定义过滤器工厂"></a>自定义过滤器工厂</h2><p>如果你还对上一篇关于路由的文章有印象，你应该还得我们在配置中有这么一段</p><pre class="language-none"><code class="language-none">filters:  - StripPrefix&#x3D;1  - AddResponseHeader&#x3D;X-Response-Default-Foo, Default-BarCopy</code></pre><p><code>StripPrefix</code>、<code>AddResponseHeader</code>这两个实际上是两个过滤器工厂（GatewayFilterFactory），用这种配置的方式更灵活方便。</p><p>我们就将之前的那个<code>ElapsedFilter</code>改造一下，让它能接收一个<code>boolean</code>类型的参数，来决定是否将请求参数也打印出来。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">AbstractGatewayFilterFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElapsedGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">.</span><span class="token class-name">Config</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">GatewayFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ELAPSED_TIME_BEGIN <span class="token operator">=</span> <span class="token string">"elapsedTimeBegin"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> KEY <span class="token operator">=</span> <span class="token string">"withParams"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>                    <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromRunnable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Long</span> startTime <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ELAPSED_TIME_BEGIN<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>startTime <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRawPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isWithParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" params:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> withParams<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isWithParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> withParams<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWithParams</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> withParams<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>withParams <span class="token operator">=</span> withParams<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>过滤器工厂的顶级接口是<code>GatewayFilterFactory</code>，我们可以直接继承它的两个抽象类来简化开发<code>AbstractGatewayFilterFactory</code>和<code>AbstractNameValueGatewayFilterFactory</code>，这两个抽象类的区别就是前者接收一个参数（像<code>StripPrefix</code>和我们创建的这种），后者接收两个参数（像<code>AddResponseHeader</code>）。</p><p><a href="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4w5hwis7j30kx09v3zj.jpg"><img src="https://cdn.jsdelivr.net/gh/zhaoyibo/resource@gh-pages/img/006tNc79ly1fr4w5hwis7j30kx09v3zj.jpg" alt="img"></a></p><p><code>GatewayFilter apply(Config config)</code>方法内部实际上是创建了一个<code>GatewayFilter</code>的匿名类，具体实现和之前的几乎一样，就不解释了。</p><p>静态内部类<code>Config</code>就是为了接收那个<code>boolean</code>类型的参数服务的，里边的变量名可以随意写，但是要重写<code>List&lt;String&gt; shortcutFieldOrder()</code>这个方法。</p><p>这里注意一下，一定要调用一下父类的构造器把<code>Config</code>类型传过去，否则会报<code>ClassCastException</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>工厂类我们有了，再把它注册到 Spring 当中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ElapsedGatewayFilterFactory</span> <span class="token function">elapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ElapsedGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>然后添加配置（主要改动在第 8 行）</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> Elapsed=true      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> service_customer          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//CONSUMER          <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">0</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/customer/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> StripPrefix=1            <span class="token punctuation">-</span> AddResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Default<span class="token punctuation">-</span>Foo<span class="token punctuation">,</span> Default<span class="token punctuation">-</span>Bar</code></pre><p>然后我们再次访问 <a href="http://localhost:10000/customer/hello/yibo?token=1000">http://localhost:10000/customer/hello/yibo?token=1000</a> 即可在控制台看到以下内容</p><pre class="language-none"><code class="language-none">2018-05-08 16:53:02.030  INFO 84423 --- [ctor-http-nio-1] o.s.cloud.gateway.filter.GatewayFilter   : &#x2F;hello&#x2F;yibo: 656ms params:&#123;token&#x3D;[1000]&#125;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了 Spring Cloud Gateway 的过滤器，我们实现了自定义局部过滤器、自定义全局过滤器和自定义过滤器工厂，相信大家对 Spring Cloud Gateway 的过滤器有了一定的了解。之后我们将继续在过滤器的基础上研究 如何使用 Spring Cloud Gateway 实现限流和 fallback。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.haoyizebo.com/posts/1e919f7d/">https://www.haoyizebo.com/posts/1e919f7d/</a></p><p><a href="https://blog.csdn.net/forezp/article/details/85057268">https://blog.csdn.net/forezp/article/details/85057268</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringCloudGateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven生成Manifest文件</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="maven-jar-plugin常用"><a href="#maven-jar-plugin常用" class="headerlink" title="maven-jar-plugin常用"></a>maven-jar-plugin常用</h1><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-jar-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestFile</span><span class="token punctuation">></span></span>$&#123;project.build.outputDirectory&#125;/META-INF/MANIFEST.MF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestFile</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        ...      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h1 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h1><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addMavenDescriptor</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compress</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forced</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>index</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pomPropertiesFile</span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestFile</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addClasspath</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultEntries</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultImplementationEntries</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultSpecificationEntries</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addBuildEnvironmentEntries</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addExtensions</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpathLayoutType</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpathPrefix</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>customClasspathLayout</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packageName</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>useUniqueVersions</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestSections</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestSection</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestEntries</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestEntries</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifestSection</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifestSections</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span></code></pre><h2 id="存档"><a href="#存档" class="headerlink" title="存档"></a>存档</h2><table><thead><tr><th>元素</th><th>描述</th><th>类型</th><th>自</th></tr></thead><tbody><tr><td>addMavenDescriptor</td><td>创建的归档文件是否包含这两个Maven文件: 1. pom 文件, 位于归档文件中 META-INF/maven/g r o u p I d / {groupId}/<em>g<strong>r</strong>o<strong>u</strong>p<strong>I</strong>d</em>/{artifactId}/pom.xml 2. pom.properties 文件, 位于归档文件中 META-INF/maven/g r o u p I d / {groupId}/<em>g<strong>r</strong>o<strong>u</strong>p<strong>I</strong>d</em>/{artifactId}/pom.properties 默认值为true。</td><td>boolean</td><td></td></tr><tr><td>compress</td><td>为存档激活压缩。默认值为true。</td><td>boolean</td><td></td></tr><tr><td>forced</td><td>是否强制重新创建存档(默认情况下)。将此选项设置为false，意味着归档程序应该将所包含文件的时间戳与目标归档的时间戳进行比较，并仅在后一个时间戳先于前一个时间戳的情况下重新构建归档。检查时间戳通常会提高性能(特别是，如果可以取消构建中的以下步骤，如果没有重新创建归档)，而不考虑您不时得到不准确结果的成本。特别是，不会检测到源文件的删除。 归档器不一定支持最新的检查。如果是，将该选项设置为true将被忽略。 默认值为true。</td><td>boolean</td><td>2.2</td></tr><tr><td>index</td><td>创建的存档是否包含 INDEX.LIST 文件。默认值为false。</td><td>boolean</td><td></td></tr><tr><td>pomPropertiesFile</td><td>使用它来覆盖自动创建的 <a href="https://maven.apache.org/shared/maven-archiver/#pom-properties-content">pom.properties</a> 文件(仅当addMavenDescriptor被设置为true时)</td><td>File</td><td>2.3</td></tr><tr><td>manifestFile</td><td>有了它，您可以提供自己的清单文件。</td><td>File</td><td></td></tr><tr><td><a href="https://maven.apache.org/shared/maven-archiver/#class_manifest">manifest</a></td><td></td><td></td><td></td></tr><tr><td>manifestEntries</td><td>要添加到清单中的键/值对列表。</td><td>Map</td><td></td></tr><tr><td><a href="https://maven.apache.org/shared/maven-archiver/#class_manifestSection">manifestSections</a></td><td></td><td></td><td></td></tr></tbody></table><h2 id="pom-properties-内容"><a href="#pom-properties-内容" class="headerlink" title="pom.properties 内容"></a>pom.properties 内容</h2><p>自动创建 pom.properties 文件将包含以下内容：</p><pre class="language-xml" data-language="xml"><code class="language-xml">artifactId=$&#123;project.artifactId&#125;groupId=$&#123;project.groupId&#125;version=$&#123;project.version&#125;</code></pre><h2 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h2><table><thead><tr><th>元素</th><th>描述</th><th>类型</th><th>自</th></tr></thead><tbody><tr><td>addClasspath</td><td>是否创建 Class-Path 清单项。默认值为false。</td><td>boolean</td><td></td></tr><tr><td>addDefaultEntries</td><td>如果清单将包含以下条目:</td><td>boolean</td><td>3.4.0</td></tr><tr><td>addDefaultImplementationEntries</td><td></td><td></td><td></td></tr><tr><td>addDefaultSpecificationEntries</td><td></td><td></td><td></td></tr><tr><td>addBuildEnvironmentEntries</td><td></td><td></td><td></td></tr><tr><td>addExtensions</td><td></td><td></td><td></td></tr><tr><td>classpathLayoutType</td><td>格式化创建的 Class-Path 中的条目时要使用的布局类型。有效值是:simple、repository(与Maven类路径布局相同)和custom。 注意:如果指定 custom 类型，还必须设置 customClasspathLayout。默认值很简单。</td><td></td><td></td></tr><tr><td>classpathPrefix</td><td>将作为所有Class-Path条目前缀的文本。默认值为“”</td><td></td><td></td></tr><tr><td>customClasspathLayout</td><td>。</td><td></td><td></td></tr><tr><td>mainClass</td><td>Main-Class清单条目</td><td>String</td><td></td></tr></tbody></table><h3 id="manifestSection"><a href="#manifestSection" class="headerlink" title="manifestSection"></a>manifestSection</h3><table><thead><tr><th align="left">Element</th><th align="left">Description</th><th align="left">Type</th><th align="left">Since</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">The name of the section.</td><td align="left">String</td><td align="left"></td></tr><tr><td align="left">manifestEntries</td><td align="left">A list of key/value pairs to add to the manifest.</td><td align="left">Map</td><td align="left"></td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://maven.apache.org/shared/maven-archiver/examples/classpath.html">https://maven.apache.org/shared/maven-archiver/examples/classpath.html</a></p><p><a href="https://maven.apache.org/shared/maven-archiver/">https://maven.apache.org/shared/maven-archiver/</a></p><p><a href="https://blog.csdn.net/ksdb0468473/article/details/110833520">https://blog.csdn.net/ksdb0468473/article/details/110833520</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java队列</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="队列的常用方法"><a href="#队列的常用方法" class="headerlink" title="队列的常用方法"></a>队列的常用方法</h1><ul><li><strong>add</strong>：增加一个元索 如果队列已满，则抛出一个IIIegaISlabEepeplian异常。</li><li><strong>element</strong>：返回队列头部的元素 如果队列为空，则抛出一个NoSuchElementException异常 。</li><li><strong>remove</strong>： 移除并返回队列头部的元素 如果队列为空，则抛出一个NoSuchElementException异常。</li><li><strong>offer</strong>：添加一个元素并返回true 如果队列已满，则返回false。</li><li><strong>poll</strong>：移除并返问队列头部的元素 如果队列为空，则返回null。</li><li><strong>peek</strong>：返回队列头部的元素 如果队列为空，则返回null。</li><li><strong>put</strong>：添加一个元素 如果队列满，则阻塞。</li><li><strong>take</strong>：移除并返回队列头部的元素 如果队列为空，则阻塞</li></ul><h1 id="常用的队列"><a href="#常用的队列" class="headerlink" title="常用的队列"></a>常用的队列</h1><h2 id="没有实现阻塞接口"><a href="#没有实现阻塞接口" class="headerlink" title="没有实现阻塞接口"></a>没有实现阻塞接口</h2><ol><li>LinkList</li><li>PriorityQueue</li><li>ConcurrentLinkedQueue</li></ol><h2 id="实现阻塞接口"><a href="#实现阻塞接口" class="headerlink" title="实现阻塞接口"></a>实现阻塞接口</h2><ol><li>ArrayBlockingQueue</li><li>LinkedBlockingQueue</li><li>PriorityBlockingQueue</li><li>DelayQueue</li></ol><h1 id="双向队列"><a href="#双向队列" class="headerlink" title="双向队列"></a>双向队列</h1><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td>AbstractDueue</td><td>此类提供某些 Queue 方法的骨干实现，为其它类集合的实现提供方便</td></tr><tr><td>PriorityQueue</td><td>一个基于优先级堆的无界优先级队列。优先级队列的元素按照其自然顺序进行排序，或者根据构造队列时提供的 Comparator 进行排序，具体取决于所使用的构造方法</td></tr><tr><td>ArrayDeque</td><td>双端队列的一个数组实现， 数组双端队列没有容量限制；它们可根据需要增加以支持使用</td></tr><tr><td>LinkedLis</td><td>通过继承 AbstractSequentialList 来实现链接列表</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java创建自定义名称线程工厂</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="ThreadFactoryBuilder"><a href="#ThreadFactoryBuilder" class="headerlink" title="ThreadFactoryBuilder"></a><code>ThreadFactoryBuilder</code></h3><p>Google guava 工具类 提供的 <code>ThreadFactoryBuilder</code> ,使用链式方法创建。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadFactory</span> guavaThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"retryClient-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">ExecutorService</span> exec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>         <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>guavaThreadFactory <span class="token punctuation">)</span><span class="token punctuation">;</span> exec<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>     logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"--记忆中的颜色是什么颜色---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="自定义ThreadFactory"><a href="#自定义ThreadFactory" class="headerlink" title="自定义ThreadFactory"></a>自定义<code>ThreadFactory</code></h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MssThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> threadNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> namePrefix<span class="token punctuation">;</span>    <span class="token class-name">MssThreadFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> namePrefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>namePrefix <span class="token operator">=</span> namePrefix<span class="token operator">+</span><span class="token string">"-"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> r<span class="token punctuation">,</span>namePrefix <span class="token operator">+</span> threadNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span>            t<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="BasicThreadFactory"><a href="#BasicThreadFactory" class="headerlink" title="BasicThreadFactory"></a><code>BasicThreadFactory</code></h1><p>Apache commons-lang3 提供的 <code>BasicThreadFactory</code>.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadFactory</span> basicThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicThreadFactory</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">namingPattern</span><span class="token punctuation">(</span><span class="token string">"basicThreadFactory-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ExecutorService</span> exec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>basicThreadFactory <span class="token punctuation">)</span><span class="token punctuation">;</span>exec<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"--记忆中的颜色是什么颜色---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mqtt5协议新特性</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>首先，协议上，增加了一个 <code>Property</code>字段，正是这个字段，使得 MQTT 5.0 可以支持众多的新特性。而在MQTT 3.1.1中，MQTT没有任何可以拓展的地方，限制了MQTT拓展功能的可能性。</p><h2 id="request-response-模式"><a href="#request-response-模式" class="headerlink" title="request/response 模式"></a>request/response 模式</h2><p>MQTT 本身是 订阅/推送 模式，不像HTTP那样 请求/响应 模式。那么MQTT是如何在 订阅/推送 模式下支持 request/response 模式呢？<br>这里简单翻译了 <code>http://docs.oasis-open.org/mqtt/mqtt/v5.0/cos01/mqtt-v5.0-cos01.html#_Request_/_Response</code> 中举例的场景：</p><p>（1）A publish 一个消息，消息topic假设是”topicA”，该消息 通过<code>Property</code>携带了<code>Response Topic</code>，假设该字段是”topicresponse”。<br>（2）订阅了”topicA”的接收端B（有可能有多个）收到了该消息。<br>（3）B处理完”topicA”后，会publish 一个 topic 名字是 “topicresponse” 的消息。该消息有可能是A订阅的，也有可能是其他人订阅的。<br>（4）A publish 的消息，可能还会携带<code>Correlation Data</code>属性，假设其值是”msgresponse”，这样B发publish的消息就是(“topicresponse”, “msgresponse”)。</p><h2 id="Server-redirection"><a href="#Server-redirection" class="headerlink" title="Server redirection"></a>Server redirection</h2><p>Server可以发送 <code>CONNACK</code> 或者 <code>DISCONNECT</code>，其 <code>Reason Codes</code> 可以是0x9c或者0x9d，表示Client需要往另一个Server发送请求。<br>0x9C 类似 HTTP 的 302, 0x9d 类似 HTTP的 301。<br><code>CONNACK</code> 或者 <code>DISCONNECT</code> 可以通过 <code>Property</code>携带<code>Server redirection</code>，其值可以告诉Client往哪个Server发送请求，类似HTTP的”Location”首部。</p><h2 id="AUTH控制报文"><a href="#AUTH控制报文" class="headerlink" title="AUTH控制报文"></a>AUTH控制报文</h2><p>MQTT 单纯通过 <code>CONNECT</code>可能无法提供足够的信息给Server进行身份认证，所以 Server 在收到 MQTT 的 <code>CONNECT</code> 后，回复 AUTH控制报文给Client，Client接着也用 <code>AUTH</code>包发送附加信息，Server直到 认证完成后，才会发送 <code>CONNACK</code>。</p><h2 id="Topic-Alias"><a href="#Topic-Alias" class="headerlink" title="Topic Alias"></a>Topic Alias</h2><p>类似<code>HTTP2</code>的头部压缩效果，当然，没有同<code>HPACK</code>那么复杂的东西。</p><p>我们知道，<code>PUBLISH</code>消息的时候，需要携带 topic和message，其中topic往往是固定的，那么我们只需要第一次发送完整的 topic，并且通过<code>Property</code>中携带<code>Topic Alias</code>告知对端下次这个PUBLISH的topic会使用<code>Topic Alias</code>中的值代替，<code>Topic Alias</code>的值是一个<code>整数</code>类型的值。</p><p>client 通过 <code>CONNECT</code> 中 <code>Topic Alias Maximum</code> 告知 Server自己能处理的最多的 <code>Topic Alias</code> 个数。<br>Server 通过 <code>CONNACK</code>中 <code>Topic Alias Maximum</code> 告知 Client自己能处理的最多的 <code>Topic Alias</code> 个数。</p><p>如果当前PUBLISH消息的topic长度不为0，那么接受方需要解析 <code>Topic Alias</code> 中的值，并且 将topic和该值进行映射。<br>如果当前PUBLISH消息的topic为0，那么接受方需要解析 <code>Topic Alias</code> 中的值，用该值去查找对应的topic。</p><h2 id="User-Property"><a href="#User-Property" class="headerlink" title="User Property"></a>User Property</h2><p>自定义属性，可以添加两端约定的数据。例如可以加入类似HTTP的 “Header:value”信息。MQTT本身没有类似HTTP的HOST信息，我们可以使用<code>User Property</code>特性让MQTT支持。</p><h2 id="Session-Expiry-Interval"><a href="#Session-Expiry-Interval" class="headerlink" title="Session Expiry Interval"></a>Session Expiry Interval</h2><p>之前的MQTT版本，当cleansession为0时，server和client会尝试保存session信息（sub信息、PUBLISH状态等），但是有个问题，server 不知道需要保存这个session多久。MQTT 5.0 就 在 <code>Property</code>字段中增加了<code>Session Expiry Interval</code>属性来告知server这个session希望被保存多久。</p><p>如果MQTT 5.0 不携带 <code>Session Expiry Interval</code>或者 <code>Session Expiry Interval</code>设置为0，server和client则不会保存session信息。<br>如果<code>Session Expiry Interval</code>设置为0xffffffff，则表示session永远不会老化。</p><p>当然，这个字段是需要配合<code>Clean Start</code>使用的，如果<code>Clean Start</code>为1，那么 <code>Session Expiry Interval</code>设置多大都无意义。</p><p>CONNECT、CONNACK、DISCONNECT都会发送 <code>Session Expiry Interval</code>字段。<code>DISCONNECT</code>中携带该字段可以告知Server更新老化时间。<br>CONNACK中的<code>Session Expiry Interval</code>只有当CONNECT不携带该字段时才有用，当client携带该字段，server发送该字段只是表明自己最大的老化时间，不会强制client必须按照这个值。</p><h2 id="Maximum-QoS"><a href="#Maximum-QoS" class="headerlink" title="Maximum QoS"></a>Maximum QoS</h2><p>Server 可以发送 <code>Maximum QoS</code>属性告知Client自己支持最大的Qos是多少，Client发送的PUBLISH的Qos必然不能大于该值。</p><h2 id="Receive-Maximum"><a href="#Receive-Maximum" class="headerlink" title="Receive Maximum"></a>Receive Maximum</h2><p>告知对方自己希望处理<code>未决</code>的最大的 Qos1 或者 Qos2 PUBLISH消息个数，如果不存在，则默认是65535。<br>作用：流控。<br>因为当处理 Qos &gt; 0 的PUBLISH的时候，需要回复对端PUBACK、PUBREC PUBCOMP等。<code>Receive Maximum</code>属性提供了告诉对端发送Qos&gt;0的PUBLISH的速率，对端发现未决PUBLISH个数等于<code>Receive Maximum</code>时，不能再发送Qos &gt; 0 的PUBLISH消息了。</p><h2 id="Maximum-Packet-Size"><a href="#Maximum-Packet-Size" class="headerlink" title="Maximum Packet Size"></a>Maximum Packet Size</h2><p>顾名思义，单个 MQTT控制报文 的大小，如果不携带，表示不限制。<br>这个大小指整个 MQTT控制报文 的大小。对端如果发现将发送的包大于该大小，就默默丢弃，不关闭连接。如果自己收到超过自己通告的<code>Maximum Packet Size</code>需要关闭连接。</p><h2 id="Topic-Alias-Maximum"><a href="#Topic-Alias-Maximum" class="headerlink" title="Topic Alias Maximum"></a>Topic Alias Maximum</h2><p>作用见上文<code>Topic Alias</code>。</p><h2 id="Reason-Code"><a href="#Reason-Code" class="headerlink" title="Reason Code"></a>Reason Code</h2><p>MQTT 3.1.1 只有CONNACK有是否成功还是失败的标志位，现在MQTT 5.0所有的ACK都有该标志位。具体各个ACK中code值得含义在规范中有定义，这里不再列举。<br>需要注意的是，SUBACK中，MQTT 3.1.1 的 <code>Granted Qos</code>被取代为<code>Reason Code</code>，<code>Reason Code</code>中有状态码表示了具体的<code>Granted Qos</code>。<br>如果PUBLISH是成功的，其ACK的的<code>Reason Code</code>可以不添加。</p><h2 id="Reason-String"><a href="#Reason-String" class="headerlink" title="Reason String"></a>Reason String</h2><p>所有的ACK以及DISCONNECT 都可以携带 <code>Reason String</code>属性告知对方一些特殊的信息，一般来说是ACK失败的情况下会使用该属性告知对端为什么失败，可用来弥补<code>Reason Code</code>信息不够。</p><h2 id="Clean-Start"><a href="#Clean-Start" class="headerlink" title="Clean Start"></a>Clean Start</h2><p><code>Clean Start</code>取代了 MQTT3.1.1 中 CleanSession，在协议格式上，直接占用了<code>CleanSession</code>原本的field，这也表示<code>Clean Start</code>语义上和 <code>CleanSession</code>是一样的。</p><h2 id="Payload-Format-Indicator"><a href="#Payload-Format-Indicator" class="headerlink" title="Payload Format Indicator"></a>Payload Format Indicator</h2><p>指定了PUBLISH 消息的message部分是utf8格式的还是二进制的，接收方必须验证payload是否是该属性定义的格式。<br><code>Payload Format Indicator</code> 为 0，表示 是二进制，和不携带该属性的语义是一样的。<br><code>Payload Format Indicator</code> 为 1，表示 是utf8编码数据。</p><h2 id="Message-Expiry-Interval"><a href="#Message-Expiry-Interval" class="headerlink" title="Message Expiry Interval"></a>Message Expiry Interval</h2><p>指定了PUBLISH数据在Server的最长等待时间。超过这个时间，这个数据不能被publish到匹配topic的subscriber</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.emqx.cn/mqtt/mqtt5">https://www.emqx.cn/mqtt/mqtt5</a></p><p><a href="https://blog.csdn.net/mrpre/article/details/87267400">https://blog.csdn.net/mrpre/article/details/87267400</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq延迟队列</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>在上一篇中，介绍了RabbitMQ中的死信队列是什么，何时使用以及如何使用RabbitMQ的死信队列。相信通过上一篇的学习，对于死信队列已经有了更多的了解，这一篇的内容也跟死信队列息息相关，如果你还不了解死信队列，那么建议你先进行上一篇文章的阅读。</p><p>这一篇里，我们将继续介绍RabbitMQ的高级特性，通过本篇的学习，你将收获：</p><ol><li>什么是延时队列</li><li>延时队列使用场景</li><li>RabbitMQ中的TTL</li><li>如何利用RabbitMQ来实现延时队列</li></ol><h2 id="二、本文大纲"><a href="#二、本文大纲" class="headerlink" title="二、本文大纲"></a>二、本文大纲</h2><p>以下是本文大纲：</p><p><img src="https://i.loli.net/2019/07/28/5d3d74d99699d43032.png" alt="1.png"></p><p>本文阅读前，需要对RabbitMQ以及死信队列有一个简单的了解。</p><h2 id="三、什么是延时队列"><a href="#三、什么是延时队列" class="headerlink" title="三、什么是延时队列"></a>三、什么是延时队列</h2><p><code>延时队列</code>，首先，它是一种队列，队列意味着内部的元素是<code>有序</code>的，元素出队和入队是有方向性的，元素从一端进入，从另一端取出。</p><p>其次，<code>延时队列</code>，最重要的特性就体现在它的<code>延时</code>属性上，跟普通的队列不一样的是，<code>普通队列中的元素总是等着希望被早点取出处理，而延时队列中的元素则是希望被在指定时间得到取出和处理</code>，所以延时队列中的元素是都是带时间属性的，通常来说是需要被处理的消息或者任务。</p><p>简单来说，延时队列就是用来存放需要在指定时间被处理的元素的队列。</p><h2 id="四、延时队列使用场景"><a href="#四、延时队列使用场景" class="headerlink" title="四、延时队列使用场景"></a>四、延时队列使用场景</h2><p>那么什么时候需要用延时队列呢？考虑一下以下场景：</p><ol><li>订单在十分钟之内未支付则自动取消。</li><li>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。</li><li>账单在一周内未支付，则自动结算。</li><li>用户注册成功后，如果三天内没有登陆则进行短信提醒。</li><li>用户发起退款，如果三天内没有得到处理则通知相关运营人员。</li><li>预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议。</li></ol><p>这些场景都有一个特点，需要在某个事件发生之后或者之前的指定时间点完成某一项任务，如：发生订单生成事件，在十分钟之后检查该订单支付状态，然后将未支付的订单进行关闭；发生店铺创建事件，十天后检查该店铺上新商品数，然后通知上新数为0的商户；发生账单生成事件，检查账单支付状态，然后自动结算未支付的账单；发生新用户注册事件，三天后检查新注册用户的活动数据，然后通知没有任何活动记录的用户；发生退款事件，在三天之后检查该订单是否已被处理，如仍未被处理，则发送消息给相关运营人员；发生预定会议事件，判断离会议开始是否只有十分钟了，如果是，则通知各个与会人员。</p><p>看起来似乎使用定时任务，一直轮询数据，每秒查一次，取出需要被处理的数据，然后处理不就完事了吗？如果数据量比较少，确实可以这样做，比如：对于“如果账单一周内未支付则进行自动结算”这样的需求，如果对于时间不是严格限制，而是宽松意义上的一周，那么每天晚上跑个定时任务检查一下所有未支付的账单，确实也是一个可行的方案。但对于数据量比较大，并且时效性较强的场景，如：“订单十分钟内未支付则关闭“，短期内未支付的订单数据可能会有很多，活动期间甚至会达到百万甚至千万级别，对这么庞大的数据量仍旧使用轮询的方式显然是不可取的，很可能在一秒内无法完成所有订单的检查，同时会给数据库带来很大压力，无法满足业务要求而且性能低下。</p><p>更重要的一点是，不！优！雅！</p><p>没错，作为一名有追求的程序员，始终应该追求更优雅的架构和更优雅的代码风格，写代码要像写诗一样优美。【滑稽】</p><p>这时候，延时队列就可以闪亮登场了，以上场景，正是延时队列的用武之地。</p><p>既然<code>延时队列</code>可以解决很多特定场景下，带时间属性的任务需求，那么如何构造一个延时队列呢？接下来，本文将介绍如何用RabbitMQ来实现延时队列。</p><h2 id="五、RabbitMQ中的TTL"><a href="#五、RabbitMQ中的TTL" class="headerlink" title="五、RabbitMQ中的TTL"></a>五、RabbitMQ中的TTL</h2><p>在介绍延时队列之前，还需要先介绍一下RabbitMQ中的一个高级特性——<code>TTL（Time To Live）</code>。</p><p><code>TTL</code>是什么呢？<code>TTL</code>是RabbitMQ中一个消息或者队列的属性，表明<code>一条消息或者该队列中的所有消息的最大存活时间</code>，单位是毫秒。换句话说，如果一条消息设置了TTL属性或者进入了设置TTL属性的队列，那么这条消息如果在TTL设置的时间内没有被消费，则会成为“死信”（至于什么是死信，请翻看上一篇）。如果同时配置了队列的TTL和消息的TTL，那么较小的那个值将会被使用。</p><p>那么，如何设置这个TTL值呢？有两种方式，第一种是在创建队列的时候设置队列的“x-message-ttl”属性，如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> durable<span class="token punctuation">,</span> exclusive<span class="token punctuation">,</span> autoDelete<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样所有被投递到该队列的消息都最多不会存活超过6s。</p><p>另一种方式便是针对每条消息设置TTL，代码如下：</p><pre class="language-java" data-language="java"><code class="language-java">AMQP<span class="token punctuation">.</span><span class="token class-name">BasicProperties</span><span class="token punctuation">.</span><span class="token class-name">Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> AMQP<span class="token punctuation">.</span><span class="token class-name">BasicProperties</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">"6000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AMQP<span class="token punctuation">.</span><span class="token class-name">BasicProperties</span> properties <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> mandatory<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> <span class="token string">"msg body"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样这条消息的过期时间也被设置成了6s。</p><p>但这两种方式是有区别的，<strong>如果设置了队列的TTL属性，那么一旦消息过期，就会被队列丢弃，而第二种方式，消息即使过期，也不一定会被马上丢弃，因为消息是否过期是在即将投递到消费者之前判定的，如果当前队列有严重的消息积压情况，则已过期的消息也许还能存活较长时间。</strong></p><p>另外，还需要注意的一点是，如果不设置TTL，表示消息永远不会过期，如果将TTL设置为0，则表示除非此时可以直接投递该消息到消费者，否则该消息将会被丢弃。</p><h2 id="六、如何利用RabbitMQ实现延时队列"><a href="#六、如何利用RabbitMQ实现延时队列" class="headerlink" title="六、如何利用RabbitMQ实现延时队列"></a>六、如何利用RabbitMQ实现延时队列</h2><p>前一篇里介绍了如果设置死信队列，前文中又介绍了TTL，至此，利用RabbitMQ实现延时队列的两大要素已经集齐，接下来只需要将它们进行调和，再加入一点点调味料，延时队列就可以新鲜出炉了。</p><p>想想看，<code>延时队列</code>，不就是想要消息延迟多久被处理吗，TTL则刚好能让消息在延迟多久之后成为死信，另一方面，成为死信的消息都会被投递到死信队列里，这样只需要消费者一直消费死信队列里的消息就万事大吉了，因为里面的消息都是希望被立即处理的消息。</p><p>从下图可以大致看出消息的流向：</p><p><img src="https://i.loli.net/2019/07/28/5d3d743143ecc85643.png" alt="23.png"></p><p>生产者生产一条延时消息，根据需要延时时间的不同，利用不同的routingkey将消息路由到不同的延时队列，每个队列都设置了不同的TTL属性，并绑定在同一个死信交换机中，消息过期后，根据routingkey的不同，又会被路由到不同的死信队列中，消费者只需要监听对应的死信队列进行处理即可。</p><p>下面来看代码：</p><p>先声明交换机、队列以及他们的绑定关系：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_QUEUEA_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuea"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_QUEUEA_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuea.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_QUEUEB_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queueb.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_EXCHANGE <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEA_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.delay_10s.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEB_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.delay_60s.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEA_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.queuea"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEB_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.queueb"</span><span class="token punctuation">;</span>    <span class="token comment">// 声明延时Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">delayExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明延时队列A 延时10s</span>    <span class="token comment">// 并绑定到对应的死信交换机</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayQueueA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">delayQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-message-ttl  声明队列的TTL</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明延时队列B 延时 60s</span>    <span class="token comment">// 并绑定到对应的死信交换机</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayQueueB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">delayQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-message-ttl  声明队列的TTL</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列A 用于接收延时10s处理的消息</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">deadLetterQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列B 用于接收延时60s处理的消息</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">deadLetterQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明延时队列A绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">delayBindingA</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayQueueA"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DELAY_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明业务队列B绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">delayBindingB</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayQueueB"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DELAY_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列A绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">deadLetterBindingA</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueA"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列B绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">deadLetterBindingB</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueB"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>接下来，创建两个消费者，分别对两个死信队列的消息进行消费：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLetterQueueConsumer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveA</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,死信队列A收到消息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveB</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,死信队列B收到消息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然后是消息的生产者：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayMessageSender</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">DelayTypeEnum</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">DELAY_10s</span><span class="token operator">:</span>                rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">,</span> DELAY_QUEUEA_ROUTING_KEY<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">DELAY_60s</span><span class="token operator">:</span>                rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">,</span> DELAY_QUEUEB_ROUTING_KEY<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>接下来，我们暴露一个web接口来生产消息：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"rabbitmq"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQMsgController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DelayMessageSender</span> sender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"sendmsg"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Integer</span> delayType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,收到请求，msg:&#123;&#125;,delayType:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> delayType<span class="token punctuation">)</span><span class="token punctuation">;</span>        sender<span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token class-name">DelayTypeEnum</span><span class="token punctuation">.</span><span class="token function">getDelayTypeEnumByValue</span><span class="token punctuation">(</span>delayType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>准备就绪，启动！</p><p>打开rabbitMQ的<a href="http://localhost:15672/">管理后台</a>，可以看到我们刚才创建的交换机和队列信息：</p><p><img src="https://i.loli.net/2019/07/28/5d3d54e15534398514.png" alt="2.png"></p><p><img src="https://i.loli.net/2019/07/28/5d3d54e17df8183993.png" alt="4.png"></p><p><img src="https://i.loli.net/2019/07/28/5d3d54e16952546955.png" alt="3.png"></p><p>接下来，我们来发送几条消息，<a href="http://localhost:8080/rabbitmq/sendmsg?msg=testMsg1&amp;delayType=1">http://localhost:8080/rabbitmq/sendmsg?msg=testMsg1&amp;delayType=1</a> <a href="http://localhost:8080/rabbitmq/sendmsg?msg=testMsg2&amp;delayType=2">http://localhost:8080/rabbitmq/sendmsg?msg=testMsg2&amp;delayType=2</a></p><p>日志如下：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">2019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:19<span class="token punctuation">.</span>813  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token namespace">[nio-8080-exec-9]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>RabbitMQMsgController   : 当前时间：Sun Jul 28 16:02:19 CST 2019<span class="token punctuation">,</span>收到请求，msg:testMsg1<span class="token punctuation">,</span>delayType:12019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:19<span class="token punctuation">.</span>815  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token namespace">[nio-8080-exec-9]</span> <span class="token punctuation">.</span>l<span class="token punctuation">.</span>DirectReplyToMessageListenerContainer : SimpleConsumer <span class="token namespace">[queue=amq.rabbitmq.reply-to, consumerTag=amq.ctag-o-qPpkWIkRm73DIrOIVhig identity=766339]</span> started2019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:25<span class="token punctuation">.</span>829  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer<span class="token comment">#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:02:25 CST 2019,死信队列A收到消息：testMsg1</span>2019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:41<span class="token punctuation">.</span>326  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token namespace">[nio-8080-exec-1]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>RabbitMQMsgController   : 当前时间：Sun Jul 28 16:02:41 CST 2019<span class="token punctuation">,</span>收到请求，msg:testMsg2<span class="token punctuation">,</span>delayType:22019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:03:41<span class="token punctuation">.</span>329  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer<span class="token comment">#0-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:03:41 CST 2019,死信队列B收到消息：testMsg2</span></code></pre><p>第一条消息在6s后变成了死信消息，然后被消费者消费掉，第二条消息在60s之后变成了死信消息，然后被消费掉，这样，一个还算ok的延时队列就打造完成了。</p><p>不过，等等，如果这样使用的话，岂不是每增加一个新的时间需求，就要新增一个队列，这里只有6s和60s两个时间选项，如果需要一个小时后处理，那么就需要增加TTL为一个小时的队列，如果是预定会议室然后提前通知这样的场景，岂不是要增加无数个队列才能满足需求？？</p><p>嗯，仔细想想，事情并不简单。</p><h2 id="七、RabbitMQ延时队列优化"><a href="#七、RabbitMQ延时队列优化" class="headerlink" title="七、RabbitMQ延时队列优化"></a>七、RabbitMQ延时队列优化</h2><p>显然，需要一种更通用的方案才能满足需求，那么就只能将TTL设置在消息属性里了。我们来试一试。</p><p>增加一个延时队列，用于接收设置为任意延时时长的消息，增加一个相应的死信队列和routingkey：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_QUEUEC_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuec"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAY_QUEUEC_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuec.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_EXCHANGE <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEC_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.delay_anytime.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEAD_LETTER_QUEUEC_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.queuec"</span><span class="token punctuation">;</span>    <span class="token comment">// 声明延时Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">delayExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明延时队列C 不设置TTL</span>    <span class="token comment">// 并绑定到对应的死信交换机</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayQueueC"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">delayQueueC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEC_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>DELAY_QUEUEC_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列C 用于接收延时任意时长处理的消息</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueC"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">deadLetterQueueC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEC_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明延时列C绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">delayBindingC</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayQueueC"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DELAY_QUEUEC_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明死信队列C绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">deadLetterBindingC</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueC"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> <span class="token class-name">DirectExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEC_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>增加一个死信队列C的消费者：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEC_NAME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveC</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,死信队列C收到消息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>再次启动！然后访问：<a href="http://localhost:8080/rabbitmq/delayMsg?msg=testMsg1delayTime=5000">http://localhost:8080/rabbitmq/delayMsg?msg=testMsg1delayTime=5000</a> 来生产消息，注意这里的单位是毫秒。</p><pre class="language-none"><code class="language-none">2019-07-28 16:45:07.033  INFO 31468 --- [nio-8080-exec-4] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:45:07 CST 2019,收到请求，msg:testMsg1,delayTime:50002019-07-28 16:45:11.694  INFO 31468 --- [nio-8080-exec-5] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:45:11 CST 2019,收到请求，msg:testMsg2,delayTime:50002019-07-28 16:45:12.048  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:45:12 CST 2019,死信队列C收到消息：testMsg12019-07-28 16:45:16.709  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:45:16 CST 2019,死信队列C收到消息：testMsg2</code></pre><p>看起来似乎没什么问题，但不要高兴的太早，在最开始的时候，就介绍过，如果使用在消息属性上设置TTL的方式，消息可能并不会按时“死亡“，因为RabbitMQ只会检查第一个消息是否过期，如果过期则丢到死信队列，索引如果第一个消息的延时时长很长，而第二个消息的延时时长很短，则第二个消息并不会优先得到执行。</p><p>实验一下：</p><pre class="language-none"><code class="language-none">2019-07-28 16:49:02.957  INFO 31468 --- [nio-8080-exec-8] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:49:02 CST 2019,收到请求，msg:longDelayedMsg,delayTime:200002019-07-28 16:49:10.671  INFO 31468 --- [nio-8080-exec-9] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:49:10 CST 2019,收到请求，msg:shortDelayedMsg,delayTime:20002019-07-28 16:49:22.969  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:49:22 CST 2019,死信队列C收到消息：longDelayedMsg2019-07-28 16:49:22.970  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:49:22 CST 2019,死信队列C收到消息：shortDelayedMsg</code></pre><p>我们先发了一个延时时长为20s的消息，然后发了一个延时时长为2s的消息，结果显示，第二个消息会在等第一个消息成为死信后才会“死亡“。</p><h2 id="八、利用RabbitMQ插件实现延迟队列"><a href="#八、利用RabbitMQ插件实现延迟队列" class="headerlink" title="八、利用RabbitMQ插件实现延迟队列"></a>八、利用RabbitMQ插件实现延迟队列</h2><p>上文中提到的问题，确实是一个硬伤，如果不能实现在消息粒度上添加TTL，并使其在设置的TTL时间及时死亡，就无法设计成一个通用的延时队列。</p><p>那如何解决这个问题呢？不要慌，安装一个插件即可：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a> ，下载rabbitmq_delayed_message_exchange插件，然后解压放置到RabbitMQ的插件目录。</p><p>接下来，进入RabbitMQ的安装目录下的sbin目录，执行下面命令让该插件生效，然后重启RabbitMQ。</p><pre class="language-shell" data-language="shell"><code class="language-shell">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code></pre><p>然后，我们再声明几个Bean：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedRabbitMQConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAYED_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.delay.queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAYED_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.delay.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DELAYED_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.delay.routingkey"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">immediateQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DELAYED_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CustomExchange</span> <span class="token function">customExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-delayed-type"</span><span class="token punctuation">,</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchange</span><span class="token punctuation">(</span>DELAYED_EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">"x-delayed-message"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingNotify</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"immediateQueue"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"customExchange"</span><span class="token punctuation">)</span> <span class="token class-name">CustomExchange</span> customExchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>customExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>DELAYED_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>controller层再添加一个入口：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"delayMsg2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delayMsg2</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Integer</span> delayTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,收到请求，msg:&#123;&#125;,delayTime:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    sender<span class="token punctuation">.</span><span class="token function">sendDelayMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>消息生产者的代码也需要修改：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDelayMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Integer</span> delayTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>DELAYED_EXCHANGE_NAME<span class="token punctuation">,</span> DELAYED_ROUTING_KEY<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> a <span class="token operator">-></span><span class="token punctuation">&#123;</span>        a<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDelay</span><span class="token punctuation">(</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>最后，再创建一个消费者：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DELAYED_QUEUE_NAME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveD</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：&#123;&#125;,延时队列收到消息：&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>一切准备就绪，启动！然后分别访问以下链接：</p><pre class="language-url" data-language="url"><code class="language-url">http:&#x2F;&#x2F;localhost:8080&#x2F;rabbitmq&#x2F;delayMsg2?msg&#x3D;msg1&amp;delayTime&#x3D;20000http:&#x2F;&#x2F;localhost:8080&#x2F;rabbitmq&#x2F;delayMsg2?msg&#x3D;msg2&amp;delayTime&#x3D;2000</code></pre><p>日志如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">13.729</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token class-name">RabbitMQMsgController</span>   <span class="token operator">:</span> 当前时间：<span class="token class-name">Sun</span> <span class="token class-name">Jul</span> <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">13</span> <span class="token class-name">CST</span> <span class="token number">2019</span><span class="token punctuation">,</span>收到请求，msg<span class="token operator">:</span>msg1<span class="token punctuation">,</span>delayTime<span class="token operator">:</span><span class="token number">20000</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">20.607</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token class-name">RabbitMQMsgController</span>   <span class="token operator">:</span> 当前时间：<span class="token class-name">Sun</span> <span class="token class-name">Jul</span> <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">20</span> <span class="token class-name">CST</span> <span class="token number">2019</span><span class="token punctuation">,</span>收到请求，msg<span class="token operator">:</span>msg2<span class="token punctuation">,</span>delayTime<span class="token operator">:</span><span class="token number">2000</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">22.624</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer#<span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>mq<span class="token punctuation">.</span><span class="token class-name">DeadLetterQueueConsumer</span>         <span class="token operator">:</span> 当前时间：<span class="token class-name">Sun</span> <span class="token class-name">Jul</span> <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">22</span> <span class="token class-name">CST</span> <span class="token number">2019</span><span class="token punctuation">,</span>延时队列收到消息：msg2<span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">33.751</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer#<span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>mq<span class="token punctuation">.</span><span class="token class-name">DeadLetterQueueConsumer</span>         <span class="token operator">:</span> 当前时间：<span class="token class-name">Sun</span> <span class="token class-name">Jul</span> <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">33</span> <span class="token class-name">CST</span> <span class="token number">2019</span><span class="token punctuation">,</span>延时队列收到消息：msg1</code></pre><p>第二个消息被先消费掉了，符合预期。至此，RabbitMQ实现延时队列的部分就完结了。</p><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><p>延时队列在需要延时处理的场景下非常有用，使用RabbitMQ来实现延时队列可以很好的利用RabbitMQ的特性，如：消息可靠发送、消息可靠投递、死信队列来保障消息至少被消费一次以及未被正确处理的消息不会被丢弃。另外，通过RabbitMQ集群的特性，可以很好的解决单点故障问题，不会因为单个节点挂掉导致延时队列不可用或者消息丢失。</p><p>当然，延时队列还有很多其它选择，比如利用Java的DelayQueu，利用Redis的zset，利用Quartz或者利用kafka的时间轮，这些方式各有特点，但就像炉石传说一般，这些知识就好比手里的卡牌，知道的越多，可以用的卡牌也就越多，遇到问题便能游刃有余，所以需要大量的知识储备和经验积累才能打造出更出色的卡牌组合，让自己解决问题的能力得到更好的提升。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq基本学习1</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p><a href="https://packagecloud.io/rabbitmq/">https://packagecloud.io/rabbitmq/</a></p></blockquote><h2 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>dnf <span class="token function">install</span> erlang</code></pre><h2 id="安装rabbitmq"><a href="#安装rabbitmq" class="headerlink" title="安装rabbitmq"></a>安装rabbitmq</h2><pre class="language-none"><code class="language-none">curl -s https:&#x2F;&#x2F;packagecloud.io&#x2F;install&#x2F;repositories&#x2F;rabbitmq&#x2F;rabbitmq-server&#x2F;script.rpm.sh | sudo bash</code></pre><h2 id="启动后台管理界面"><a href="#启动后台管理界面" class="headerlink" title="启动后台管理界面"></a>启动后台管理界面</h2><pre class="language-bash" data-language="bash"><code class="language-bash">rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management</code></pre><h2 id="相关端口"><a href="#相关端口" class="headerlink" title="相关端口"></a>相关端口</h2><p>Listening ports：3个端口（5672,25672,15672）;</p><p>　　5672对应的是amqp，25672对应的是clustering，15672对应的是http（也就是我们登录RabbitMQ后台管理时用的端口）。</p><p>　　25672对应的是集群，15672对应的是后台管理。因为RabbitMQ遵循Ampq协议，所以5672对应的就是RabbitMQ的通信了。</p><h1 id="rabbitMQ常用的命令"><a href="#rabbitMQ常用的命令" class="headerlink" title="rabbitMQ常用的命令"></a>rabbitMQ常用的命令</h1><p>启动监控管理器：rabbitmq-plugins enable rabbitmq_management<br> 关闭监控管理器：rabbitmq-plugins disable rabbitmq_management<br> 启动rabbitmq：rabbitmq-service start<br> 关闭rabbitmq：rabbitmq-service stop<br> 查看所有的队列：rabbitmqctl list_queues<br> 清除所有的队列：rabbitmqctl reset<br> 关闭应用：rabbitmqctl stop_app<br> 启动应用：rabbitmqctl start_app</p><p><strong>用户和权限设置</strong><br> 添加用户：rabbitmqctl add_user username password<br> 分配角色：rabbitmqctl set_user_tags username administrator<br> 新增虚拟主机：rabbitmqctl add_vhost  vhost_name<br> 将新虚拟主机授权给新用户：<code>rabbitmqctl set_permissions -p vhost_name username “.*” “.*” “.*”</code>(后面三个”*”代表用户拥有配置、写、读全部权限)</p><p><strong>角色说明</strong></p><ul><li>超级管理员(administrator)<br> 可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</li><li>监控者(monitoring)<br> 可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</li><li>策略制定者(policymaker)<br> 可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</li><li>普通管理者(management)<br> 仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</li><li>其他<br> 无法登陆管理控制台，通常就是普通的生产者和消费者。</li></ul><h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><p>guest默认不能远程登陆</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#RabbitMQ新增账号密码</span>rabbitmqctl add_user <span class="token builtin class-name">test</span> <span class="token number">123456</span><span class="token comment">#设置成管理员角色</span>rabbitmqctl  set_user_tags  <span class="token builtin class-name">test</span>  administrator<span class="token comment">#设置权限</span>rabbitmqctl set_permissions -p <span class="token string">"/"</span> <span class="token builtin class-name">test</span> <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span><span class="token comment">#查看用户列表</span>rabbitmqctl list_users</code></pre><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h3><ol><li>queue:声明的队列名称，同一个队列在声明之后不能修改属性。</li><li>durable：是否持久化，是否将队列持久化到mnesia数据库中，有专门的表保存我们的队列声明。</li><li> exclusive：排外，①当前定义的队列是connection的channel是共享的，其他的connection是访问不到的。②当connection关闭的时候，队列将被删除。</li><li>autoDelete：自动删除，当最后一个consumer（消费者）断开之后，队列将自动删除。</li></ol><hr><ol start="5"><li><em>arguments</em>：参数是rabbitmq的一个扩展，功能非常强大，基本是AMPQ中没有的。</li></ol><ul><li>x-message-ttl：Number ，发布的消息在队列中存在多长时间后被取消（单位毫秒） 可以对单个消息设置过期时间</li><li>x-expires：Number</li></ul><p>当Queue（队列）在指定的时间未被访问，则队列将被自动删除。</p><ul><li>x-max-length：Number</li></ul><p>队列所能容下消息的最大长度。当超出长度后，新消息将会覆盖最前面的消息，类似于Redis的LRU算法。</p><ul><li>x-max-length-bytes：Number</li></ul><p>限定队列的最大占用空间，当超出后也使用类似于Redis的LRU算法。</p><ul><li>x-overflow：String</li></ul><p>设置队列溢出行为。这决定了当达到队列的最大长度时，消息会发生什么。有效值为Drop Head或Reject Publish。</p><ul><li>x-dead-letter-exchange：String<br> 如果消息被拒绝或过期或者超出max，将向其重新发布邮件的交换的可选名称</li><li>x-dead-letter-routing-key：String</li></ul><p>如果不定义，则默认为溢出队列的routing-key，因此，一般和6一起定义。</p><ul><li>x-max-priority：Number</li></ul><p>如果将一个队列加上优先级参数，那么该队列为优先级队列。</p><p>1）、给队列加上优先级参数使其成为优先级队列</p><p>x-max-priority=10【值不要太大，本质是一个树结构】</p><p>2）、给消息加上优先级属性</p><ul><li>x-queue-mode：String</li></ul><p>队列类型　　x-queue-mode=lazy　　懒队列，在磁盘上尽可能多地保留消息以减少RAM使用；如果未设置，则队列将保留内存缓存以尽可能快地传递消息。</p><ul><li>x-queue-master-locator：String</li></ul><p>将队列设置为主位置模式，确定在节点集群上声明时队列主位置所依据的规则。</p><h3 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.100.11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfirmListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handleack "</span><span class="token operator">+</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handleNack "</span><span class="token operator">+</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                channel<span class="token punctuation">.</span><span class="token function">addReturnListener</span><span class="token punctuation">(</span>returnMessage <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回的消息 "</span><span class="token operator">+</span>returnMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomAlphanumeric</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" hello  !!"</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送的消息  "</span><span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span>QUEUE_NAME<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="消息发送确认机制"><a href="#消息发送确认机制" class="headerlink" title="消息发送确认机制"></a>消息发送确认机制</h2><h3 id="事务机制"><a href="#事务机制" class="headerlink" title="事务机制"></a><strong>事务机制</strong></h3><p>这里首先探讨下RabbitMQ事务机制。</p><p>RabbitMQ中与事务机制有关的方法有三个：txSelect(), txCommit()以及txRollback(), txSelect用于将当前channel设置成transaction模式，txCommit用于提交事务，txRollback用于回滚事务，在通过txSelect开启事务之后，我们便可以发布消息给broker代理服务器了，如果txCommit提交成功了，则消息一定到达了broker了，如果在txCommit执行之前broker异常崩溃或者由于其他原因抛出异常，这个时候我们便可以捕获异常通过txRollback回滚事务了。</p><p>关键代码：</p><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">txSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">txCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过wirkshark抓包（ip.addr==xxx.xxx.xxx.xxx &amp;&amp; amqp），可以看到：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMDM5NjY3?x-oss-process=image/format,png" alt="这里写图片描述"><br>（注意这里的Tx.Commit与Tx.Commit-Ok之间的时间间隔294ms，由此可见事务还是很耗时的。）</p><p>我们先来看看没有事务的通信过程是什么样的：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMDU4MjYx?x-oss-process=image/format,png" alt="这里写图片描述"><br>可以看到带事务的多了四个步骤：</p><ul><li>client发送Tx.Select</li><li>broker发送Tx.Select-Ok(之后publish)</li><li>client发送Tx.Commit</li><li>broker发送Tx.Commit-Ok</li></ul><p>下面我们来看下事务回滚是什么样子的。关键代码如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    channel<span class="token punctuation">.</span><span class="token function">txSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">txCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">txRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>同样通过wireshark抓包可以看到：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMTEwMDgz?x-oss-process=image/format,png" alt="这里写图片描述"><br>代码中先是发送了消息至broker中但是这时候发生了异常，之后在捕获异常的过程中进行事务回滚。</p><p>事务确实能够解决producer与broker之间消息确认的问题，只有消息成功被broker接受，事务提交才能成功，否则我们便可以在捕获异常进行事务回滚操作同时进行消息重发，但是使用事务机制的话会降低RabbitMQ的性能，那么有没有更好的方法既能保障producer知道消息已经正确送到，又能基本上不带来性能上的损失呢？从AMQP协议的层面看是没有更好的方法，但是RabbitMQ提供了一个更好的方案，即将channel信道设置成confirm模式。</p><h3 id="Confirm模式"><a href="#Confirm模式" class="headerlink" title="Confirm模式"></a><strong>Confirm模式</strong></h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h4><p>上面我们介绍了RabbitMQ可能会遇到的一个问题，即生成者不知道消息是否真正到达broker，随后通过AMQP协议层面为我们提供了事务机制解决了这个问题，但是采用事务机制实现会降低RabbitMQ的消息吞吐量，那么有没有更加高效的解决方式呢？答案是采用Confirm模式。</p><h4 id="producer端confirm模式的实现原理"><a href="#producer端confirm模式的实现原理" class="headerlink" title="producer端confirm模式的实现原理"></a><strong>producer端confirm模式的实现原理</strong></h4><p>生产者将信道设置成confirm模式，一旦信道进入confirm模式，所有在该信道上面发布的消息都会被指派一个唯一的ID(从1开始)，一旦消息被投递到所有匹配的队列之后，broker就会发送一个确认给生产者（包含消息的唯一ID）,这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会将消息写入磁盘之后发出，broker回传给生产者的确认消息中deliver-tag域包含了确认消息的序列号，此外broker也可以设置basic.ack的multiple域，表示到这个序列号之前的所有消息都已经得到了处理。</p><p>confirm模式最大的好处在于他是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ因为自身内部错误导致消息丢失，就会发送一条nack消息，生产者应用程序同样可以在回调方法中处理该nack消息。</p><p>在channel 被设置成 confirm 模式之后，所有被 publish 的后续消息都将被 confirm（即 ack） 或者被nack一次。但是没有对消息被 confirm 的快慢做任何保证，并且同一条消息不会既被 confirm又被nack 。</p><h4 id="开启confirm模式的方法"><a href="#开启confirm模式的方法" class="headerlink" title="开启confirm模式的方法"></a><strong>开启confirm模式的方法</strong></h4><p>生产者通过调用channel的confirmSelect方法将channel设置为confirm模式，如果没有设置no-wait标志的话，broker会返回confirm.select-ok表示同意发送者将当前channel信道设置为confirm模式(从目前RabbitMQ最新版本3.6来看，如果调用了channel.confirmSelect方法，默认情况下是直接将no-wait设置成false的，也就是默认情况下broker是必须回传confirm.select-ok的)。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMTMzMTgz?x-oss-process=image/format,png" alt="这里写图片描述"></p><blockquote><p>已经在transaction事务模式的channel是不能再设置成confirm模式的，即这两种模式是不能共存的。</p></blockquote><h4 id="编程模式"><a href="#编程模式" class="headerlink" title="编程模式"></a><strong>编程模式</strong></h4><p>对于固定消息体大小和线程数，如果消息持久化，生产者confirm(或者采用事务机制)，消费者ack那么对性能有很大的影响.</p><p>消息持久化的优化没有太好方法，用更好的物理存储（SAS, SSD, RAID卡）总会带来改善。生产者confirm这一环节的优化则主要在于客户端程序的优化之上。归纳起来，客户端实现生产者confirm有三种编程方式：</p><ol><li>普通confirm模式：每发送一条消息后，调用waitForConfirms()方法，等待服务器端confirm。实际上是一种串行confirm了。</li><li>批量confirm模式：每发送一批消息后，调用waitForConfirms()方法，等待服务器端confirm。</li><li>异步confirm模式：提供一个回调方法，服务端confirm了一条或者多条消息后Client端会回调这个方法。</li></ol><p>从编程实现的复杂度上来看：<br><strong>第1种</strong><br>普通confirm模式最简单，publish一条消息后，等待服务器端confirm,如果服务端返回false或者超时时间内未返回，客户端进行消息重传。<br>关键代码如下：</p><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"send message failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>wirkShark抓包可以看到如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMjA0Mjg4?x-oss-process=image/format,png" alt="这里写图片描述"><br>(注意这里的Publish与Ack的时间间隔：305ms 4ms 4ms 15ms 5ms… )</p><p><strong>第二种</strong><br>批量confirm模式稍微复杂一点，客户端程序需要定期（每隔多少秒）或者定量（达到多少条）或者两则结合起来publish消息，然后等待服务器端confirm, 相比普通confirm模式，批量极大提升confirm效率，但是问题在于一旦出现confirm返回false或者超时的情况时，客户端需要将这一批次的消息全部重发，这会带来明显的重复消息数量，并且，当消息经常丢失时，批量confirm性能应该是不升反降的。<br>关键代码：</p><pre class="language-java" data-language="java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>batchCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>channel<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"send message failed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>第三种</strong><br>异步confirm模式的编程实现最复杂，Channel对象提供的ConfirmListener()回调方法只包含deliveryTag（当前Chanel发出的消息序号），我们需要自己为每一个Channel维护一个unconfirm的消息序号集合，每publish一条数据，集合中元素加1，每回调一次handleAck方法，unconfirm集合删掉相应的一条（multiple=false）或多条（multiple=true）记录。从程序运行效率上看，这个unconfirm集合最好采用有序集合SortedSet存储结构。实际上，SDK中的waitForConfirms()方法也是通过SortedSet维护消息序号的。<br>关键代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> confirmSet <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSortedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">confirmSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfirmListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   confirmSet<span class="token punctuation">.</span><span class="token function">headSet</span><span class="token punctuation">(</span>deliveryTag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                   confirmSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Nack, SeqNo: "</span> <span class="token operator">+</span> deliveryTag <span class="token operator">+</span> <span class="token string">", multiple: "</span> <span class="token operator">+</span> multiple<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   confirmSet<span class="token punctuation">.</span><span class="token function">headSet</span><span class="token punctuation">(</span>deliveryTag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                   confirmSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">long</span> nextSeqNo <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">getNextPublishSeqNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>exchangeName<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>routingKey<span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span>PERSISTENT_TEXT_PLAIN<span class="token punctuation">,</span> <span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>msg_10B<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           confirmSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nextSeqNo<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span></code></pre><p>SDK中waitForConfirms方法实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** Set of currently unconfirmed messages (i.e. messages that have *  not been ack'd or nack'd by the server yet. */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> unconfirmedSet <span class="token operator">=</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSortedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPublishSeqNo <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Confirms not selected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>unconfirmedSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getCloseReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">fixStackTrace</span><span class="token punctuation">(</span><span class="token function">getCloseReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>unconfirmedSet<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">boolean</span> aux <span class="token operator">=</span> onlyAcksReceived<span class="token punctuation">;</span>                onlyAcksReceived <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> aux<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                unconfirmedSet<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> elapsed <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> elapsed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    unconfirmedSet<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>timeout <span class="token operator">-</span> elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a><strong>性能测试</strong></h4><p>Client端机器和RabbitMQ机器配置：CPU:24核，2600MHZ, 64G内存，1TB硬盘。<br>Client端发送消息体大小10B，线程数为1即单线程，消息都持久化处理（deliveryMode:2）。<br>分别采用事务模式、普通confirm模式，批量confirm模式和异步confirm模式进行producer实验，比对各个模式下的发送性能。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMjI4MDU5?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>发送平均速率：</p><ul><li>事务模式（tx）：1637.484</li><li>普通confirm模式(common)：1936.032</li><li>批量confirm模式(batch)：10432.45</li><li>异步confirm模式(async)：10542.06</li></ul><p>可以看到事务模式性能是最差的，普通confirm模式性能比事务模式稍微好点，但是和批量confirm模式还有异步confirm模式相比，还是小巫见大巫。批量confirm模式的问题在于confirm之后返回false之后进行重发这样会使性能降低，异步confirm模式(async)编程模型较为复杂，至于采用哪种方式，那是仁者见仁智者见智了。</p><h3 id="消息确认（Consumer端）"><a href="#消息确认（Consumer端）" class="headerlink" title="消息确认（Consumer端）"></a><strong>消息确认（Consumer端）</strong></h3><p>为了保证消息从队列可靠地到达消费者，RabbitMQ提供消息确认机制(message acknowledgment)。消费者在声明队列时，可以指定noAck参数，当noAck=false时，RabbitMQ会等待消费者显式发回ack信号后才从内存(和磁盘，如果是持久化消息的话)中移去消息。否则，RabbitMQ会在队列中消息被消费后立即删除它。</p><p>采用消息确认机制后，只要令noAck=false，消费者就有足够的时间处理消息(任务)，不用担心处理消息过程中消费者进程挂掉后消息丢失的问题，因为RabbitMQ会一直持有消息直到消费者显式调用basicAck为止。</p><p>当noAck=false时，对于RabbitMQ服务器端而言，队列中的消息分成了两部分：一部分是等待投递给消费者的消息；一部分是已经投递给消费者，但是还没有收到消费者ack信号的消息。如果服务器端一直没有收到消费者的ack信号，并且消费此消息的消费者已经断开连接，则服务器端会安排该消息重新进入队列，等待投递给下一个消费者（也可能还是原来的那个消费者）。</p><p>RabbitMQ不会为未ack的消息设置超时时间，它判断此消息是否需要重新投递给消费者的唯一依据是消费该消息的消费者连接是否已经断开。这么设计的原因是RabbitMQ允许消费者消费一条消息的时间可以很久很久。</p><p>RabbitMQ管理平台界面上可以看到当前队列中Ready状态和Unacknowledged状态的消息数，分别对应上文中的等待投递给消费者的消息数和已经投递给消费者但是未收到ack信号的消息数。也可以通过命令行来查看上述信息：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE3MTYzMjQ1ODQw?x-oss-process=image/format,png" alt="这里写图片描述"></p><p>代码示例（关闭自动消息确认，进行手动ack）：</p><pre class="language-java" data-language="java"><code class="language-java">   <span class="token class-name">QueueingConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueueingConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>   channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token class-name">ConfirmConfig</span><span class="token punctuation">.</span>queueName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">QueueingConsumer</span><span class="token punctuation">.</span><span class="token class-name">Delivery</span> delivery <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">nextDelivery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// do something with msg. </span>       channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><blockquote><p>broker将在下面的情况中对消息进行confirm：</p><blockquote><p>broker发现当前消息无法被路由到指定的queues中（如果设置了mandatory属性，则broker会发送basic.return）<br>非持久属性的消息到达了其所应该到达的所有queue中（和镜像queue中）<br>持久消息到达了其所应该到达的所有queue中（和镜像中），并被持久化到了磁盘（fsync）<br>持久消息从其所在的所有queue中被consume了（如果必要则会被ack）</p></blockquote></blockquote><p>basicRecover：是路由不成功的消息可以使用recovery重新发送到队列中。<br>basicReject：是接收端告诉服务器这个消息我拒绝接收,不处理,可以设置是否放回到队列中还是丢掉，而且只能一次拒绝一个消息,官网中有明确说明不能批量拒绝消息，为解决批量拒绝消息才有了basicNack。<br>basicNack：可以一次拒绝N条消息，客户端可以设置basicNack方法的multiple参数为true，服务器会拒绝指定了delivery_tag的所有未确认的消息(tag是一个64位的long值，最大值是9223372036854775807)。</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>有4种不同的交换机类型：</p><ul><li>直连交换机：Direct exchange</li><li>扇形交换机：Fanout exchange</li><li>主题交换机：Topic exchange</li><li>首部交换机：Headers exchange</li></ul><h1 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1><h2 id="死信队列是什么"><a href="#死信队列是什么" class="headerlink" title="死信队列是什么"></a>死信队列是什么</h2><p>死信，在官网中对应的单词为“Dead Letter”，可以看出翻译确实非常的简单粗暴。那么死信是个什么东西呢？</p><p>“死信”是RabbitMQ中的一种消息机制，当你在消费消息时，如果队列里的消息出现以下情况：</p><ol><li>消息被否定确认，使用 <code>channel.basicNack</code> 或 <code>channel.basicReject</code> ，并且此时<code>requeue</code> 属性被设置为<code>false</code>。</li><li>消息在队列的存活时间超过设置的TTL时间。</li><li>消息队列的消息数量已经超过最大队列长度。</li></ol><p>那么该消息将成为“死信”。</p><p>“死信”消息会被RabbitMQ进行特殊处理，如果配置了死信队列信息，那么该消息将会被丢进死信队列中，如果没有配置，则该消息将会被丢弃。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/469f4608ce5d">https://www.jianshu.com/p/469f4608ce5d</a></p><p><a href="https://blog.csdn.net/u013256816/article/details/55515234">https://blog.csdn.net/u013256816/article/details/55515234</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>type与interface区别</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<ul><li>interface VS type<ul><li>相同点<ul><li>都可以描述一个对象或者函数<ul><li><a href="https://github.com/SunshowerC/blog/issues/7#interface">interface</a></li><li><a href="https://github.com/SunshowerC/blog/issues/7#type">type</a></li></ul></li><li>都允许拓展（extends）<ul><li><a href="https://github.com/SunshowerC/blog/issues/7#interface-extends-interface">interface extends interface</a></li><li><a href="https://github.com/SunshowerC/blog/issues/7#type-extends-type">type 与 type 相交</a></li><li><a href="https://github.com/SunshowerC/blog/issues/7#interface-extends-type">interface extends type</a></li><li><a href="https://github.com/SunshowerC/blog/issues/7#type-extends-interface">type 与 interface 相交</a></li></ul></li></ul></li><li>不同点<ul><li><a href="https://github.com/SunshowerC/blog/issues/7#type-%E5%8F%AF%E4%BB%A5%E8%80%8C-interface-%E4%B8%8D%E8%A1%8C">type 可以而 interface 不行</a></li><li><a href="https://github.com/SunshowerC/blog/issues/7#interface-%E5%8F%AF%E4%BB%A5%E8%80%8C-type-%E4%B8%8D%E8%A1%8C">interface 可以而 type 不行</a></li></ul></li></ul></li><li><a href="https://github.com/SunshowerC/blog/issues/7#%E6%80%BB%E7%BB%93">总结</a></li></ul><h1 id="interface-VS-type"><a href="#interface-VS-type" class="headerlink" title="interface VS type"></a>interface VS type</h1><p>大家使用 typescript 总会使用到 interface 和 type，<a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md">官方规范</a> 稍微说了下两者的区别</p><blockquote><ul><li>An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot.</li><li>An interface can have multiple merged declarations, but a type alias for an object type literal cannot.<br>但是没有太具体的例子。</li></ul></blockquote><p>明人不说暗话，直接上区别。</p><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><h3 id="都可以描述一个对象或者函数"><a href="#都可以描述一个对象或者函数" class="headerlink" title="都可以描述一个对象或者函数"></a>都可以描述一个对象或者函数</h3><h4 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h4><pre class="language-none"><code class="language-none">interface User &#123;  name: string  age: number&#125;interface SetUser &#123;  (name: string, age: number): void;&#125;</code></pre><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><pre class="language-none"><code class="language-none">type User &#x3D; &#123;  name: string  age: number&#125;;type SetUser &#x3D; (name: string, age: number): void;</code></pre><h3 id="拓展（extends）与-交叉类型（Intersection-Types）"><a href="#拓展（extends）与-交叉类型（Intersection-Types）" class="headerlink" title="拓展（extends）与 交叉类型（Intersection Types）"></a>拓展（extends）与 交叉类型（Intersection Types）</h3><p>interface 可以 extends， 但 type 是不允许 extends 和 implement 的，<strong>但是 type 缺可以通过交叉类型 实现 interface 的 extend 行为</strong>，并且两者并不是相互独立的，也就是说 interface 可以 extends type, type 也可以 与 interface 类型 交叉 。</p><p><strong>虽然效果差不多，但是两者语法不同</strong>。</p><h4 id="interface-extends-interface"><a href="#interface-extends-interface" class="headerlink" title="interface extends interface"></a>interface extends interface</h4><pre class="language-none"><code class="language-none">interface Name &#123;   name: string; &#125;interface User extends Name &#123;   age: number; &#125;</code></pre><h4 id="type-与-type-交叉"><a href="#type-与-type-交叉" class="headerlink" title="type 与 type 交叉"></a>type 与 type 交叉</h4><pre class="language-none"><code class="language-none">type Name &#x3D; &#123;   name: string; &#125;type User &#x3D; Name &amp; &#123; age: number  &#125;;</code></pre><h4 id="interface-extends-type"><a href="#interface-extends-type" class="headerlink" title="interface extends type"></a>interface extends type</h4><pre class="language-none"><code class="language-none">type Name &#x3D; &#123;   name: string; &#125;interface User extends Name &#123;   age: number; &#125;</code></pre><h4 id="type-与-interface-交叉"><a href="#type-与-interface-交叉" class="headerlink" title="type 与 interface 交叉"></a>type 与 interface 交叉</h4><pre class="language-none"><code class="language-none">interface Name &#123;   name: string; &#125;type User &#x3D; Name &amp; &#123;   age: number; &#125;</code></pre><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="type-可以而-interface-不行"><a href="#type-可以而-interface-不行" class="headerlink" title="type 可以而 interface 不行"></a>type 可以而 interface 不行</h3><ul><li>type 可以声明基本类型别名，联合类型，元组等类型</li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 基本类型别名type Name &#x3D; string&#x2F;&#x2F; 联合类型interface Dog &#123;    wong();&#125;interface Cat &#123;    miao();&#125;type Pet &#x3D; Dog | Cat&#x2F;&#x2F; 具体定义数组每个位置的类型type PetList &#x3D; [Dog, Pet]</code></pre><ul><li>type 语句中还可以使用 typeof 获取实例的 类型进行赋值</li></ul><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 当你想获取一个变量的类型时，使用 typeoflet div &#x3D; document.createElement(&#39;div&#39;);type B &#x3D; typeof div</code></pre><ul><li>其他骚操作</li></ul><pre class="language-none"><code class="language-none">type StringOrNumber &#x3D; string | number;  type Text &#x3D; string | &#123; text: string &#125;;  type NameLookup &#x3D; Dictionary&lt;string, Person&gt;;  type Callback&lt;T&gt; &#x3D; (data: T) &#x3D;&gt; void;  type Pair&lt;T&gt; &#x3D; [T, T];  type Coordinates &#x3D; Pair&lt;number&gt;;  type Tree&lt;T&gt; &#x3D; T | &#123; left: Tree&lt;T&gt;, right: Tree&lt;T&gt; &#125;;</code></pre><h3 id="interface-可以而-type-不行"><a href="#interface-可以而-type-不行" class="headerlink" title="interface 可以而 type 不行"></a>interface 可以而 type 不行</h3><p>interface 能够声明合并</p><pre class="language-none"><code class="language-none">interface User &#123;  name: string  age: number&#125;interface User &#123;  sex: string&#125;&#x2F;*User 接口为 &#123;  name: string  age: number  sex: string &#125;*&#x2F;</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一般来说，如果不清楚什么时候用interface/type，能用 interface 实现，就用 interface , 如果不能就用 type 。其他更多详情参看 <a href="https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md">官方规范文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Object o = new Object()</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、请解释一下对象的创建过程？（半初始化）"><a href="#1、请解释一下对象的创建过程？（半初始化）" class="headerlink" title="1、请解释一下对象的创建过程？（半初始化）"></a>1、请解释一下对象的创建过程？（半初始化）</h2><p><img src="http://wumu.rescreate.cn/image20201222130815.png"></p><h2 id="2、加问DCL与volatile问题？（指令重排）"><a href="#2、加问DCL与volatile问题？（指令重排）" class="headerlink" title="2、加问DCL与volatile问题？（指令重排）"></a>2、加问DCL与volatile问题？（指令重排）</h2><p>volatile的作用：保持线程可见性，防止指令重排</p><p>DCL 是双重检查锁</p><p>3、对象在内存中的存储布局？（对象和数组的存储不同）</p><p>4、对象头具体包括什么？（markedword klasspointer）</p><p>synchronized锁信息</p><p>5、对象怎么定位？（直接  间接）</p><p>6、对象怎么分配？（栈上-线程本地-eden-old）</p><p>7、Object o = new Object()在内存中占用多少字节。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM垃圾回收模型</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-JVM垃圾回收模型"><a href="#一-JVM垃圾回收模型" class="headerlink" title="一 JVM垃圾回收模型"></a>一 JVM垃圾回收模型</h1><h2 id="一-GC算法"><a href="#一-GC算法" class="headerlink" title="一. GC算法"></a>一. GC算法</h2><h3 id="1-1-标记-清除算法（Mark-Sweep）"><a href="#1-1-标记-清除算法（Mark-Sweep）" class="headerlink" title="1.1 标记-清除算法（Mark-Sweep）"></a>1.1 标记-清除算法（Mark-Sweep）</h3><p>算法分为“标记”和“清除”两个阶段首先标记出所有需要回收的对象,然后回收所有需要回收的对象。</p><p>问题：效率不高，需要扫描所有的对象，堆越大，GC越慢，并且存在严重的内存碎片问题,空间碎片太多可能会导致后续使用中无法找到足够的连续内存而提前触发另一次的垃圾搜集动作，GC次数越多，碎片越严重。</p><p>示例如下，红色的就是未被标记要回收的，并且红色的区域被回收之后，绿色的还在“原地”，并不会对内存区域进行整理。</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164655-908837.png" alt="1582787561817"></p><h3 id="1-2-标记-整理算法（Mark-Compact）"><a href="#1-2-标记-整理算法（Mark-Compact）" class="headerlink" title="1.2 标记-整理算法（Mark-Compact）"></a>1.2 标记-整理算法（Mark-Compact）</h3><p>标记过程仍然一样，但后续步骤不是进行直接清理，而是令所有存活的对象一端移动，然后直接清理掉这端边界以外的内存。</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164628-260953.png" alt="1582786327947"></p><h3 id="1-3-复制搜集算法（Coping）"><a href="#1-3-复制搜集算法（Coping）" class="headerlink" title="1.3 复制搜集算法（Coping）"></a>1.3 复制搜集算法（Coping）</h3><h4 id="以前的复制收集算法"><a href="#以前的复制收集算法" class="headerlink" title="以前的复制收集算法"></a>以前的复制收集算法</h4><p>描述：将可用的内存分为两半， 每次只使用其中的一块，当半区内存用完了，仅将还存活的对象复制到另一块上，然后就把原来整块内存空间清理</p><p>问题：这样使每次内存回收都是对整个半区的回收，内存分配时就不用考虑内存碎片等复杂情况，<strong>只需要移动堆顶指针</strong>，按顺序分配内存就可以了，实现简单，运行高效，只是这种算法将堆空间内存缩为原来的一半。</p><h4 id="现在的复制搜集算法"><a href="#现在的复制搜集算法" class="headerlink" title="现在的复制搜集算法"></a>现在的复制搜集算法</h4><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200310215856-280171.png" alt="1583848735097"></p><p>描述：现在的商业虚拟机都是采用复制搜集算法来回收<strong>新生代</strong>，将内存分为一块较大的eden空间和两块较小的survivor空间，每次只是用eden和其中一块survivor空间，当回收时将eden和survivor空间中还存活的对象一次性拷贝到另一个survivor空间上，然后清理用过的eden和survivor空间，oracle hotspot虚拟机默认eden 和 survivor的比例是 8:1 ,也就是每次只有百分之十的内存被浪费。示例图如下（最开始A被引用，A引用了C，C引用了H，GC的最后清除了D和G），注意这里跟前面的标记整理和标记清除不一样哦，这里是不用标记的。</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164632-195319.png" alt="1582787476606"></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164635-766946.png" alt="1582787495319"></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164648-218229.png" alt="1582961769604"></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164650-924632.png" alt="1582961922126"></p><p>好处：1.只需要扫描存活的对象（跟前面的标记整理和标记清除不一样哦），效率更高；2.不会产生碎片 3.复制算法非常适合对象存活时间比较短的对象，因为每次GC总能回收大部分的对象，复制的开销比较小。根据IBM的专门研究,98%的Java对象只会存活1个GC周期,对这些对象很适合用复制算法。而且不用1:1的划分工作区和复制区的空间</p><p>问题：复制搜集算法在对象存活率高得时候效率有所下降，就需要有额外的空间进行分配担保用于应付内存中所有对象都百分之百存活的极端情况（在新生代中可以使用老年代进行空间分配担保），所以在老年代不能直接采用这种算法</p><h3 id="1-4-分代算法（Generational）"><a href="#1-4-分代算法（Generational）" class="headerlink" title="1.4 分代算法（Generational）"></a>1.4 分代算法（Generational）</h3><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164921-907201.png" alt="1582786672708"></p><p>描述：当前商业虚拟机的垃圾收集都是采用“分代收集”( Generational Collecting)算法根据对象不同的存活周期将内存划分为几块；一般是把Java堆分作新生代和老年代,这样就可以根据各个年代的特点采用最适当的收集算法,1. 譬如新生代每次GC都有大批对象死去,只有少量存活,那就选用复制算法只需要付出少量存活对象的复制成本就可以完成收集  2. 并且有老年代作为空间分配担保；老年代采用Mark- Sweep或者Mark- Compact算法</p><p>年轻代( Young Generation)新生成的对象都放在新生代。年轻代用复制算法进行GC(理论上年轻代对象的生命周期非常短,所以适合复制算法，因为大部分都是不存活的对象)，年轻代分三个区，一个Eden区，两个 Survivor区(可以通过参数设置 Survivor个数)。对象在Eden区中生成，在新生代垃圾回收时，Eden区和From Survivor区中还存活的对象将被复制到另一个 Survivor区(称为To Survivor区)，此次垃圾回收完成之后From Survivor和To Survivor区交换角色。下一次垃圾回收时重复上述过程，直到To Survivor 区被填满，然后一次性将To Survivor中的所有对象移动到老年代中。2个 Survivor是完全对称,轮流替换。Eden和2个 Survivor的缺省比例是8:1:1,也就是10%的空间会被浪费。可以根据 GC log的信息调整大小的比例</p><p>老年代( Old Generation)存放了经过一次或多次GC还存活的对象般采用Mark- Sweep或者Mark- Compact算法，进行GC有多种垃圾收集器可以选择。每种垃圾收集器可以看作一个GC算法的具体实现。可以根据具体应用的需求选用合适的垃圾收集器(追求吞吐量?追求最短的响应时间?)</p><h2 id="二-垃圾回收器"><a href="#二-垃圾回收器" class="headerlink" title="二 垃圾回收器"></a>二 垃圾回收器</h2><blockquote><p>GC的种类</p><ul><li>Scavenge GC (Minor GC）：对新生代，触发时机是在新对象生成时，Eden空间满了，理论上Eden区大多数对象会在 Scavenge GC回收，复制算法的执行效率会很高， Scavenge GC时间比较短。</li><li>Full GC：对整个JVM进行整理，包括 Young、Old和Perm（永久代，jdk8没有，jdk为元空间），主要的触发时机:1)Old满了2)Perm满了3) system.gc()   Full GC的执行效率很低，尽量减少 Full GC</li></ul></blockquote><p>分代模型是GC的宏观愿景，垃圾回收器是GC的具体实现，hotspot jvm提供多种垃圾回收器，我们需要根据具体的应用采用多种垃圾回收器</p><p>垃圾回收器的并行（Parallel）和并发（Concurrent），并行指的是多个收集器的线程同时工作，但是用户线程处于等待状态；并发指的是收集器在工作的同时，可以允许用户线程工作，但是并发并不代表解决了GC的停顿问题，在关键步骤该停顿的还是要停顿，比如在收集器标记垃圾的时候，但是在清除垃圾的时候用户线程可以和GC线程并发执行</p><h3 id="2-1-serial-收集器"><a href="#2-1-serial-收集器" class="headerlink" title="2.1 serial 收集器"></a>2.1 serial 收集器</h3><ul><li>是最早的收集器,单线程收集器,Hotspot Client模式缺省的收集器，收集时会暂停所有工作线程(Stop The World,简称STW)，因为是单线程GC,没有多线程切换的额外开销,简单实用</li><li>New和 Old Generation都可以使用在新生代,采用复制算法，在老年代,采用Mark-Compact算法;</li><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164918-434894.png" alt="1582791530489"></li></ul><h3 id="2-2-Serial-Old-收集器"><a href="#2-2-Serial-Old-收集器" class="headerlink" title="2.2 Serial Old 收集器"></a>2.2 Serial Old 收集器</h3><pre><code>Serial Old是单线程收集器,使用标记一整理算法, 是老年代的收集器</code></pre><h3 id="2-3-parnew收集器"><a href="#2-3-parnew收集器" class="headerlink" title="2.3 parnew收集器"></a>2.3 parnew收集器</h3><ul><li><p>Parnew收集器就是Serial收集器在<strong>新生代</strong>的多线程版本，是Server模式下新生代的缺省收集器，除了使用多个收集线程外,其余行为包括算法、STW、对象分配规则、回收策略等都与 Serial收集器一模一样。</p></li><li><p>使用复制算法(因为针对新生代，效率比较高);</p></li><li><p>只有在多CPU的环境下,效率才会比 Serial收集器高;</p></li><li><p>可以通过<code>-XX: Parallelg Cthreads</code>来控制GC线程数的多少，需要结合具体CPU的个数;</p></li></ul><h3 id="2-4-Parallel-Scavenge收集器"><a href="#2-4-Parallel-Scavenge收集器" class="headerlink" title="2.4 Parallel Scavenge收集器"></a>2.4 Parallel Scavenge收集器</h3><p>Parallel Scavenge 收集器也是一个多线程收集器（Parallel就是并行的意思）,也是使用复制算法，但它的对象分配规则与回收策略都与 Parnew收集器有所不同，它是以吞吐量最大化(即GC时间占总运行时间最小)为目标的收集器实现，它允许较长时间的STW换取总吞吐量最大化，jvm1.8默认在新生代使用Parallel Scavenge ，老年代使用Parallel Old收集</p><h3 id="2-5-Parallel-Old-收集器"><a href="#2-5-Parallel-Old-收集器" class="headerlink" title="2.5 Parallel Old 收集器"></a>2.5 Parallel Old 收集器</h3><p>JVM1.6提供，在此之前，新生代使用PS收集器的话，老年代除了使用Serial Old外别无选择，因为PS无法和CMS配合工作。jvm1.8默认在新生代使用Parallel Scavenge ，老年代使用Parallel Old收集</p><ul><li>Parallel Scavenge在<strong>老年代</strong>的实现；</li><li>采用多线程,Mark-Compact算法；</li><li>更注重吞吐量Parallel Scavenge+ Parallel Old = 高吞吐量,但GC停顿可能不理想</li><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164916-517287.png" alt="1582792519271"></li></ul><h3 id="2-6-CMS收集器"><a href="#2-6-CMS收集器" class="headerlink" title="2.6 CMS收集器"></a>2.6 CMS收集器</h3><p>CMS是一种以最短停顿时间为目标的<strong>老年代</strong>收集器，使用CMS并不能达到GC效率最高（总的GC时间最小），但是它能尽可能降低服务的停顿时间</p><ul><li>只针对老年区,一般在新生代结合Parnew使用</li><li>CMS收集器使用的是标记–清除算法</li><li>使用-XX:+ UseConcMarkSweepGC打开</li></ul><h4 id="收集步骤方法一"><a href="#收集步骤方法一" class="headerlink" title="收集步骤方法一"></a>收集步骤方法一</h4><p>CMS是基于“<strong>标记–清除</strong>”算法实现的，在老年代中的整个过程分为4个步骤：</p><ul><li>其中，初始标记，重新标记这两个步骤任然需要“stop the world”，其它两个步骤中用户线程是一起并发执行的</li><li>初始标记（CMS initial mark），初始标记只是标记一下GC ROOTS 能直接关联到的对象，速度很快</li><li>并发标记（CMS concurrent mark），并发标记阶段就是进行GC ROOTS Tracing 的过程，此时用户线程也是在同步执行的</li><li>重新标记（CMS remark），重新标记阶段则是为了修正并发标记期间因为用户程序继续运作而导致标记产生变动的那一部分对象的标记记录（ 这部分对象是指从 GC Roots 不可达的对象，因为用户程序的并发运行，又可达了），这个阶段的停顿时间一般会比初始标记阶段稍长一些，但是远比并发标记的时间短。</li><li>并发清除（CMS concurrent sweep），收集在标记阶段被标识为不可访问的对象。The collection of a dead object adds the space for the object to a free list for later allocation. Coalescing of dead objects may occur at this point. Note that live objects are not moved.死亡对象收集为空闲列表增加了更多的空间，以便以后分配。在这一点上可能会发生死物体空间的的合并。请注意，不会移动活动对象。</li><li>CMS收集器的运作步骤如下图所示，在整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以和用户线程一起工作，因此从整体上看，CMS收集器线程的内存回收过程是与用户线程一起并发执行的。<ul><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164913-9221.png" alt="1582892656658"></li></ul></li></ul><h4 id="CMS缺点"><a href="#CMS缺点" class="headerlink" title="CMS缺点"></a>CMS缺点</h4><ul><li>CMS以牺牲CPU资源的代价来减少用户线程的停顿。当CPU个数少于4的时候,有可能对吞吐量影响非常大；</li><li>CMS收集器无法处理浮动垃圾（Floating Garbage）,即第一次标记，认为某个对象不是垃圾，但是在CMS线程和用户线程在并发执行的过程中此对象可能变成了垃圾，那么CMS无法在这次的垃圾回收中将它回收掉。无法处理这些垃圾可能出现”concurrent mode failure“失败而导致另一次Full GC的产生。如果在应用中老年代的增长速度不是太快，可以适当调高<code>-XX:CMSInitiatingOccupancyFractio</code> 的值来提高出发的百分比，以便降低内存回收的次数从而获取更好的性能。要是CMS运行期预留的内存无法满足程序的需要时，虚拟机将启动后备预案，临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样一来停顿的时间就更久了。所以说参数<code>-XX:CMSInitiatingOccupancyFraction</code> 设置太高容易导致大量的”concurrent mode failure“失败，性能反而降低</li><li>由于基于MS算法即<code>Mark-Sweep,</code>收集结束时会带来碎片问题，空间碎片过多会给大对象分配带来很大麻烦，望往往出现老年代还有很大的空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前进行一次Full GC。CMS收集器提供了一个参数：<code>-XX:+UseCMSCompactAtFullConnection</code> 开关参数，默认是开启的，用于在CMS收集器顶不住要进行 Full GC时同时开启内存碎片的合并整理过程,内存整理的过程是无法并发的并且需要stw,空间碎片问题没有了,但停顿时间不得不变长。  </li></ul><h4 id="收集步骤方法二"><a href="#收集步骤方法二" class="headerlink" title="收集步骤方法二"></a>收集步骤方法二</h4><p>CMS收集器收集步骤，以下是将上面的四个步骤进一步细分为7个步骤，但是其中有stw的还是只有两个步骤，减少了stw的时间。</p><ul><li>Phase 1: Initial Mark，这个是CMS两次stop-the-world事件的其中一次,这个阶段的目标是:标记那些直接被GCroot引用或者被年轻代存活对象所引用的所有对象（CMS是针对老年代的）<ul><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200311203248-360957.png" alt="1583929967459"></li></ul></li><li>Phase 2：Concurrent Mark，在这个阶段 Garbage Collector会遍历老年代,然后标记所有存活的对象,它会根据上个阶段找到的 GC Roots遍历査找。并发标记阶段，它会与用户的应用程序并发运行并不是老年代所有的存活对象都会被标记，因为在标记期间用户的程序可能会改变一些引用。在下的图中,与阶段1的图进行对比,就会发现有一个对象的引用已经发生了变化<ul><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164910-509868.png" alt="1582896958721"></li></ul></li><li>Phase 3: Concurrent Preclean，这也是一个并发阶段,与应用的线程并发运行,并不会stop用户线程。在并发运行的过程中,一些对象的引用可能会发生变化,但是这种情况发生时,JVM会将包含这个对象的区域(Card)标记为Diy，这个动作称为Card Marking，在pre-clean阶段，那些能够从Dirty对象到达的对象也会被标记,这个标记做完之后, dirty card标记就会被清除了<ul><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164710-663159.png" alt="1582940994952"></li></ul></li><li>Phase 4: Concurrent Abortable Preclean，这也是一个并发阶段,但是同样不会影响用户的应用线程,这个阶段是为了尽量承担STW(stop-the-world)中最终标记阶段的工作。这个阶段持续时间依赖于很多的因素由于这个阶段是在重复做很多相同的工作(比如:重复迭代的次数、完成的工作量或者时钟时间等）</li><li>Phase 5: Final Remark，这是第二个STW阶段,也是CMS中的最后一个，这个阶段的目标是标记老年代所有的存活对象，由于之前的阶段是并发执行的，GC线程可能跟不上应用程序的变化为了完成标记老年代所有存活对象的目标，STW就非常有必要了，这个阶段会比前面的几个阶段更复杂一些</li><li>Phase 6: Concurrent Sweep，这里不需要STW,它是与用户的应用程序并发运行,这个阶段是:清除那些不再使用的对象,回收它们的占用空间为将来使用<ul><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164851-267408.png" alt="1582941954201"></li></ul></li><li>Phase 7: Concurrent Reset，这个阶段也是并发执行的,它会重设CMS内部的数据结构,为下次的GC做准备</li></ul><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>实验代码MyTest5.java</p><p>虚拟机参数</p><ul><li>-verbose:gc<br>-Xmx20M<br>-Xms20m<br>-Xmn10M<br>-XX:SurvivorRatio=8<br>-XX:+PrintGCDetails<br>-XX:+UseConcMarkSweepGC</li></ul><p>输出结果</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">[GC</span> <span class="token attr-value">(Allocation Failure) [ParNew: 6104K->742K(9216K), 0.0029166 secs] 6104K->4840K(19456K), 0.0029703 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span>2222222<span class="token attr-name">[GC</span> <span class="token attr-value">(Allocation Failure) [ParNew: 4995K->65K(9216K), 0.0034135 secs] 9093K->8973K(19456K), 0.0034413 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><span class="token attr-name">[GC</span> <span class="token attr-value">(CMS Initial Mark) [1 CMS-initial-mark: 8907K(10240K)] 13069K(19456K), 0.0001747 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><span class="token comment">#  CMS-initial-mark</span>[CMS-concurrent-mark-start]333333334444444<span class="token attr-name">[CMS-concurrent-mark</span><span class="token punctuation">:</span> <span class="token attr-value">0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span>[CMS-concurrent-preclean-start]<span class="token attr-name">[CMS-concurrent-preclean</span><span class="token punctuation">:</span> <span class="token attr-value">0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span>[CMS-concurrent-abortable-preclean-start]<span class="token attr-name">[CMS-concurrent-abortable-preclean</span><span class="token punctuation">:</span> <span class="token attr-value">0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><span class="token attr-name">[GC</span> <span class="token attr-value">(CMS Final Remark) [YG occupancy: 6531 K (9216 K)][Rescan (parallel) , 0.0001118 secs][weak refs processing, 0.0000169 secs][class unloading, 0.0003630 secs][scrub symbol table, 0.0006629 secs][scrub string table, 0.0001339 secs][1 CMS-remark: 8907K(10240K)] 15439K(19456K), 0.0013879 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span>Heap<span class="token attr-name"> par</span> <span class="token attr-value">new generation   total 9216K, used 6531K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><span class="token attr-name">  eden</span> <span class="token attr-value">space 8192K,  78% used [0x00000000fec00000, 0x00000000ff250980, 0x00000000ff400000)</span><span class="token comment">  # 新生代存了一个4m和一个2m的数组对象，大概是6m</span><span class="token attr-name">  from</span> <span class="token attr-value">space 1024K,   6% used [0x00000000ff400000, 0x00000000ff4104c8, 0x00000000ff500000)</span>[CMS-concurrent-sweep-start]<span class="token attr-name">  to</span> <span class="token attr-value">  space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><span class="token attr-name"> concurrent</span> <span class="token attr-value">mark-sweep generation total 10240K, used 8907K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><span class="token comment"> #  老年代里面是存了两个4m的数组对象，大概是8m</span><span class="token attr-name"> Metaspace</span> <span class="token attr-value">      used 3239K, capacity 4496K, committed 4864K, reserved 1056768K</span><span class="token attr-name">  class</span> <span class="token attr-value">space    used 352K, capacity 388K, committed 512K, reserved 1048576K</span></code></pre><h3 id="2-7-总结"><a href="#2-7-总结" class="headerlink" title="2.7 总结"></a>2.7 总结</h3><p>HotSpot虚拟机的组成成分</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164752-567723.png" alt="1582976665504"></p><h2 id="三-JVM内存分配与回收专题"><a href="#三-JVM内存分配与回收专题" class="headerlink" title="三 JVM内存分配与回收专题"></a>三 JVM内存分配与回收专题</h2><h3 id="3-1-内存分配"><a href="#3-1-内存分配" class="headerlink" title="3.1 内存分配"></a>3.1 内存分配</h3><h4 id="3-1-1-空间分配担保"><a href="#3-1-1-空间分配担保" class="headerlink" title="3.1.1 空间分配担保"></a>3.1.1 空间分配担保</h4><pre><code>在发生 Minor gc之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立,那么 Minor gc可以确保是安全的。当大量对象在 Minor GC后仍然存活，Survivor区中无法容纳那么多的对象，那么就需要老年代进行空间分配担保，把 Survivor无法容纳的对象提前直接进入老年代；但是如果老年代判断到剩余空间不足(根据以往每一次回收晋升到老年代对象容量的平均值作为经验值)，则进行一次Full GC。</code></pre><h4 id="3-1-2-大对象直接进入老年代"><a href="#3-1-2-大对象直接进入老年代" class="headerlink" title="3.1.2 大对象直接进入老年代"></a>3.1.2 大对象直接进入老年代</h4><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。</p><p><strong>为什么要这样呢？</strong></p><p>为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。</p><h4 id="3-1-3-长期存活的对象将进入老年代"><a href="#3-1-3-长期存活的对象将进入老年代" class="headerlink" title="3.1.3 长期存活的对象将进入老年代"></a>3.1.3 长期存活的对象将进入老年代</h4><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。</p><p>如果对象在  Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor  空间中，并将对象年龄设为 1.对象在 Survivor 中每熬过一次 MinorGC,年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15  岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><h4 id="3-1-4-动态对象年龄判定"><a href="#3-1-4-动态对象年龄判定" class="headerlink" title="3.1.4 动态对象年龄判定"></a>3.1.4 动态对象年龄判定</h4><p>“Hotspot遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了survivor区的一半时，取这个年龄和MaxTenuringThreshold中更小的一个值，作为新的晋升年龄阈值”。</p><h3 id="3-2-垃圾回收"><a href="#3-2-垃圾回收" class="headerlink" title="3.2 垃圾回收"></a>3.2 垃圾回收</h3><h4 id="3-2-1-垃圾判断算法"><a href="#3-2-1-垃圾判断算法" class="headerlink" title="3.2.1 垃圾判断算法"></a>3.2.1 垃圾判断算法</h4><h5 id="引用计数算法（Refesrence-Counting）"><a href="#引用计数算法（Refesrence-Counting）" class="headerlink" title="引用计数算法（Refesrence Counting）"></a>引用计数算法（Refesrence Counting）</h5><p>当对象添加一个引用计数器，当有一个地方以用它，计数器加1，当引用失效，计数器减一，任何时刻计数器为0的对象j就是不可能再被使用。弊端：引用计数器可能无法解决循环引用的问题</p><h5 id="根搜索算法-Root-Tracing"><a href="#根搜索算法-Root-Tracing" class="headerlink" title="根搜索算法( Root Tracing)"></a>根搜索算法( Root Tracing)</h5><p>在实际生产语言中（java，C#等）都使用跟搜索算法判断对象是否存活。算法的基本思路就是通过一系列被称作“GC ROOTS “ 的点作为起始进行向下搜索，当一个对象到GC ROOTS 没有任何引用链相连，则证明此对象是不可用的。</p><p>其中的GC ROOTS 包括：</p><ul><li>在VM栈中（帧中的本地变量）中的引用</li><li>方法区中的静态引用</li><li>JNI（即一般所说的Native方法）中的引用</li></ul><h4 id="3-2-2-垃圾回收期的选择和实现"><a href="#3-2-2-垃圾回收期的选择和实现" class="headerlink" title="3.2.2 垃圾回收期的选择和实现"></a>3.2.2 垃圾回收期的选择和实现</h4><h5 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h5><p>GC要做的是将那些dead对象所占的内存回收掉，hotsopt认为没有引用的对象就是dead。hotspot将引用分成四种，strong，soft，weak，phantom。strong引用是我们最常用到的引用，即默认通过Object o = new Object() 这种方式进行的引用；<strong>soft，weak，Phantom这三种都是继承reference</strong></p><p>在 Full GC时会对 Reference类型的引用进行特殊处理<br>Soft:内存不够时一定会被GC，长期不用也会被GC<br>Weak:一定会被GC<br>Phantom:本来就没引用,当从 jvm 堆中释放时会通知具体的对比参考<a href="https://juejin.im/post/5e65b8096fb9a07cbb6e4a43">大佬的文章</a></p><h5 id="GC的时机"><a href="#GC的时机" class="headerlink" title="GC的时机"></a>GC的时机</h5><p>在分代模型的基础上,GC从时机上分为两种: Scavenge GC和Full GC</p><ul><li>Scavenge GC (Minor GC）：对新生代，触发时机是在新对象生成时，Eden空间满了，理论上Eden区大多数对象会在 Scavenge GC回收，复制算法的执行效率会很高， Scavenge GC时间比较短。</li><li>Full GC：对整个JVM进行整理，包括 Young、Old和Perm（永久代，jdk8没有，jdk为元空间），主要的触发时机:1)Old满了2)Perm满了3) system.gc()   Full GC的执行效率很低，尽量减少 Full GC</li></ul><h4 id="3-2-3-GC时机-线程角度"><a href="#3-2-3-GC时机-线程角度" class="headerlink" title="3.2.3 GC时机-线程角度"></a>3.2.3 GC时机-线程角度</h4><h5 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h5><blockquote><p>枚举根节点：当执行系统停顿下来后,并不需要一个不漏地检查完所有执行上下文和全局的引用位置,虚拟机应当是有办法直接得知哪些地方存放着对象引用。在 HotSpot的实现中,是使用一组称为 OopMap的数据结构来达到这个目的的</p></blockquote><p>安全点在 OopMap的协助下, Hotspot可以快速且准确地完成GC Roots枚举,但一个很现实的问题随之而来:很多指令可能导致引用关系变化,或者说引起 OopMap内容变化的指令非常多,如果为每一条指令都生成对应的 OopMap,那将会要大量的额外空间,这样GC的空间成本将会变得更高实际上, Hotspot并没有为每条指令都生成 OopMap,只是在“特定的位置”记录了这些信息,这些位置称为安全点( Safepoint),即程序执行时并非在所有地方都能停顿下来开始GC,只有在达到安全点时才能暂停。</p><p>Safepoint的选定既不能太少以至于让GC等待时间太长,也不能过于频繁以至于过分增大运行时的负载。所以,安全点的选定基本上是以“是否具有让程序长时间执行的特征”为标准进行选定的因为每条指令执行的时间非常短暂,程序不太可能因为指令流长度太长这个原因而过长时间运行,“长时间执行”的最明显特征就是指令序列复用,例如方法调用、循环跳转、异常跳转等,所以具有这些功能的指令オ会产生 Safepoint</p><p>对于 Savepoint,另一个需要考虑的问题是如何在GC发生时让所有线程(这里不包括执行JNI调用的线程)都“跑”到最近的安全点再停顿下来:抢占式中断( Preemptive Suspension)和主动式中断(Voluntary Suspension)</p><h6 id="抢占式中断"><a href="#抢占式中断" class="headerlink" title="抢占式中断"></a>抢占式中断</h6><p>抢占式中断:它不需要线程的执行代码主动去配合,在GC发生时,首先把所有线程全部中断,如果有线程中断的地方不在安全点上,就恢复线程,让它“跑”到安全点上。</p><h6 id="主动式中断"><a href="#主动式中断" class="headerlink" title="主动式中断"></a>主动式中断</h6><p>主动式中断:当GC需要中断线程的时候,不直接对线程操作,仅仅简单地设置一个标志,各个线程执行时主动去轮询这个标志,发现中断标志为真时就自己中断挂起。注意：这个轮询也只是在轮询也只是在指定的地方才进行轮询，标志的地方和安全点是重合的。现在几乎没有虚拟机采用抢占式中断来暂停线程从而响应GC事件。</p><h5 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h5><p>在使用 SafePoint似乎已经完美地解决了如何进入GC的问题,但实际上情况却并不一定。 SafePoint机制保证了程序执行时,在不太长的时间内就会遇到可进入GC的Safepoint。但如果程序在“不执行”的时候呢?所谓程序不执行就是没有分配CPU时间,典型的例子就是处于Sleep状态或者 Blocked状态,这时候线程无法响应JVM的中断请求,JVM也显然不太可能等待线程重新分配CPU时间。对于这种情况,就需要安全区域(SafeRegion)来解决了。</p><p>在线程执行到 Safe Region中的代码时,首先标识自己已经进入了 Safe Region,那样,当在这段时间里JVM要发起GC时,就不用管标识自己为 Safe Region状态的线程了。在线程要离开 Safe Region时,它要检査系统是否已经完成了根节点枚举(或者是整个GC过程),如果完成了,那线程就继续执行,否则它就必须等待直到收到可以安全离开 Safe Region的信号为止。</p><h3 id="3-3-一些感悟"><a href="#3-3-一些感悟" class="headerlink" title="3.3 一些感悟"></a>3.3 一些感悟</h3><h4 id="3-3-1-内存泄露的经典原因"><a href="#3-3-1-内存泄露的经典原因" class="headerlink" title="3.3.1 内存泄露的经典原因"></a>3.3.1 内存泄露的经典原因</h4><h6 id="对象定义在错误的范围-Wrong-Scope-；"><a href="#对象定义在错误的范围-Wrong-Scope-；" class="headerlink" title="对象定义在错误的范围( Wrong Scope)；"></a>对象定义在错误的范围( Wrong Scope)；</h6><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164846-878102.png" alt="1582794952530"></p><h6 id="异常-Exception-处理不当"><a href="#异常-Exception-处理不当" class="headerlink" title="异常( Exception)处理不当"></a>异常( Exception)处理不当</h6><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164816-77853.png" alt="1582795049517"></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164833-867525.png" alt="1582795085858"></p><h6 id="集合数据管理不当"><a href="#集合数据管理不当" class="headerlink" title="集合数据管理不当"></a>集合数据管理不当</h6><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164712-132297.png" alt="1582795166640"></p><h2 id="四-参数与实验"><a href="#四-参数与实验" class="headerlink" title="四 参数与实验"></a>四 参数与实验</h2><ul><li><p>-verbose gc 打印出垃圾回收的详情</p></li><li><p>-XX:+PrintGCDetails</p></li><li><p>-XX:+PrintGCDateStamps   打印出gc的时间戳</p></li><li><p>-XX:+PrintCommandLineFlags  在命令行打印出虚拟机的参数、</p></li><li><p>堆空间调整</p></li><li><p>-XX:SurvivorRatio=8   eden 和survivor的所占空间大小比例为 8：1</p></li><li><p>-Xms5m -Xmx5m  初始和最大的堆内存，通常设置成一样的，防止垃圾回收之后有堆抖动的问题</p></li><li><p>-Xmn10m 新生代的容量</p></li><li><p>新生代晋升老年代相关</p></li><li><p>-XX:PretenureSizeThreshold=4194304  （Tenured是老年代的意思）当创建的对象的大小已经超过这个值，那么此对象不会被放到新生代中，而是直接在老年代中。 此参数需要和参数 -XX:+UseSerialGC一起使用(虚拟机运行在 Client模式下的默认值,打开此开关后,使用Serial old的收集器组合进行内存回收)</p></li><li><p>-XX:MaxTenuringThreshold=5  （Threshold是门槛的意思）设置对象晋升的到老年代对象年龄阈值的最大值，即虽然可以jvm一般是自动调节回收对象的回收年龄，但是也不能超过此值。此值的默认值是15，CMS中的默认值是6，G1中的默认值是15。</p><ul><li>经历过多次GC后，存活的对象会在From Survivor 与 To Survivor 之间来回存放，而这里面的一个前提是有足够的空间来存放这些数据，在GC算法中，会计算每个对象年龄的大小，如果某个年龄总的大小已经大于survivor空间的百分之五十，那么这时就需要调整阈值，取这个年龄和MaxTenuringThreshold中更小的一个值，作为新的晋升年龄阈值，不能再继续等到默认的15次才完成晋升，因为不调整会导致survivor的空间不足，所以需要调整阈值，让这些存活的对象尽快完成晋升。</li></ul></li><li><p>-XX:TargetSurvivorRatio=60 设置survivor空间的占比达到百分之六十时就进行一次对象晋升</p></li><li><p>-XX:+PrintTenuringDistribution  （Distribution是分配的意思）打印出各年龄阶段的对象的占有内存</p></li><li><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200304164720-262990.png" alt="1582814508681"></p></li></ul><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><p>输入虚拟机参数执行MyTest1.java</p><ul><li>-XX:SurvivorRatio=8 -Xms20m -Xmx20m -Xmn10m -verbose：gc -XX:+PrintGCDetails</li></ul><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">[GC</span> <span class="token attr-value">(Allocation Failure) [PSYoungGen: 8192K->1016K(9216K)] 8192K->5193K(19456K), 0.0066065 secs] [Times: user=0.08 sys=0.00, real=0.01 secs] </span><span class="token comment"># [GC (Allocation Failure)   GC 代表的是一次Minor GC </span><span class="token comment">#  [PSYoungGen: 8192K->1016K(9216K)] 代表新生代垃圾回收之前是8192k，回收之后是1016k，总的内存是9216k,即9m（这里是eden和from survivor区域相加的结果），PSYoungGen中的PS代表Parallel Scavenge,这是默认使用的收集器</span><span class="token comment"># 8192K->5193K(19456K) 代表的是在执行回收之前总的堆的大小为8192K，回收之后是5193K，而总的堆的可用容量是19456K（这里是去掉了一个to survivor 区域的大小）</span><span class="token comment"># 0.0066065 secs 代表执行这次垃圾回收的时间是0.0066065 秒</span><span class="token comment"># [Times: user=0.08 sys=0.00, real=0.01 secs]  表示在用户空间用了0.08秒，内核空间用了0.00秒，实际用了0.01秒</span><span class="token attr-name">[Full</span> <span class="token attr-value">GC (Ergonomics) [PSYoungGen: 9208K->0K(9216K)] [ParOldGen: 10232K->9951K(10240K)] 19440K->9951K(19456K), [Metaspace: 3235K->3235K(1056768K)], 0.2093485 secs] [Times: user=0.64 sys=0.00, real=0.21 secs] </span><span class="token comment"># [Full GC (Ergonomics)  代表这是一次Full GC </span><span class="token comment"># [PSYoungGen: 9208K->0K(9216K)] 同上，代表新生代回收后的内存为0k，PSYoungGen中的PS代表Parallel Scavenge,这是默认使用的收集器</span><span class="token comment">#  [ParOldGen: 10232K->9951K(10240K)] 表示老年代进行垃圾回收之后的空间，如果这里显示不仅没有变小，而且变大了，其中一个原因是因为部分从新生代晋升到老年代，ParOldGen 中的 ParOld代表Parallel Old,这是默认使用的收集器</span><span class="token comment"># [Metaspace: 3235K->3235K(1056768K)] 代表这次垃圾回收之后，元空间的大小没变</span><span class="token comment"># 以上分析可以说明，jvm1.8默认在新生代使用Parallel Scavenge ，老年代使用Parallel Old收集</span>Heap<span class="token attr-name"> PSYoungGen</span> <span class="token attr-value">     total 9216K, used 435K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><span class="token comment"> # PSYoungGen中的PS代表Parallel Scavenge,这是默认使用的收集器</span><span class="token attr-name">  eden</span> <span class="token attr-value">space 8192K, 5% used [0x00000000ff600000,0x00000000ff66cf70,0x00000000ffe00000)</span><span class="token attr-name">  from</span> <span class="token attr-value">space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)</span><span class="token attr-name">  to</span> <span class="token attr-value">  space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)</span><span class="token attr-name"> ParOldGen</span> <span class="token attr-value">      total 10240K, used 675K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><span class="token comment"> # 永久代的内存是10240K，ParOldGen 中的 ParOld代表Parallel Old,这是默认使用的收集器</span><span class="token attr-name">  object</span> <span class="token attr-value">space 10240K, 6% used [0x00000000fec00000,0x00000000feca8ce0,0x00000000ff600000)</span><span class="token attr-name"> Metaspace</span> <span class="token attr-value">      used 3268K, capacity 4496K, committed 4864K, reserved 1056768K</span><span class="token attr-name">  class</span> <span class="token attr-value">space    used 355K, capacity 388K, committed 512K, reserved 1048576K</span></code></pre><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><p>实验代码为MyTest2.java 虚拟机参数为</p><ul><li>-XX:SurvivorRatio=8<br>-Xms20m<br>-Xmx20m<br>-Xmn10m<br>-XX:+PrintGCDetails<br>-verbose：gc<br>-XX:PretenureSizeThreshold=4194304<br>-XX:+UseSerialGC<ul><li>-XX:PretenureSizeThreshold = 4194304  当创建的对象的大小已经超过这个值，那么此对象不会被放到新生代中，而是直接在老年代中 此参数需要和 参数 -XX:+UseSerialGC(虚拟机运行在 Client模式下的默认值,打开此开关后,使用SeSerial+ old的收集器组合进行内存回收)一起使用</li></ul></li></ul><p>实验代码为：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myAlloc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果</p><pre class="language-properties" data-language="properties"><code class="language-properties">Heap<span class="token attr-name"> def</span> <span class="token attr-value">new generation   total 9216K, used 2172K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><span class="token comment">  # 此处的新生代称为 def new generation，而不是使用使用Parallel收集器时的 PSYoungGen </span><span class="token attr-name">  eden</span> <span class="token attr-value">space 8192K,  26% used [0x00000000fec00000, 0x00000000fee1f1b0, 0x00000000ff400000)</span><span class="token attr-name">  from</span> <span class="token attr-value">space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)</span><span class="token attr-name">  to</span> <span class="token attr-value">  space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><span class="token attr-name"> tenured</span> <span class="token attr-value">generation   total 10240K, used 5120K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><span class="token comment"> #  此处的新生代称为  tenured generation，而不是使用使用Parallel收集器时的 ParOldGen  </span><span class="token comment"> # 由于在实验代码中new了一个5m的字节数组，可以看到，字节数组对象被保存到老年代中。</span><span class="token attr-name">   the</span> <span class="token attr-value">space 10240K,  50% used [0x00000000ff600000, 0x00000000ffb00010, 0x00000000ffb00200, 0x0000000100000000)</span><span class="token attr-name"> Metaspace</span> <span class="token attr-value">      used 3236K, capacity 4496K, committed 4864K, reserved 1056768K</span><span class="token attr-name">  class</span> <span class="token attr-value">space    used 352K, capacity 388K, committed 512K, reserved 1048576K</span></code></pre><h3 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h3><p>实验参数</p><ul><li>-XX:SurvivorRatio=8<br>-Xms20m<br>-Xmx20m<br>-Xmn10m<br>-XX:+PrintGCDetails<br>-verbose：gc<br>-XX:+PrintCommandLineFlags<br>-XX:MaxTenuringThreshold=5<br>-XX:+PrintTenuringDistribution</li></ul><p>实验代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myAlloc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myAlloc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myAlloc3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myAlloc4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">[GC</span> <span class="token attr-value">(Allocation Failure) </span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 1048576 bytes, new threshold 5 (max 5)</span><span class="token comment"># Desired survivor size 1048576 bytes 表示现在的survivor空间的大小，即1m；new threshold 5表示当前的jvm动态设置的对象回收的年龄，(max 5)表示回收的年龄阈值</span><span class="token attr-name">[PSYoungGen</span><span class="token punctuation">:</span> <span class="token attr-value">8152K->840K(9216K)] 8152K->6992K(19456K), 0.0055682 secs] [Times: user=0.03 sys=0.01, real=0.01 secs] </span><span class="token attr-name">[Full</span> <span class="token attr-value">GC (Ergonomics) [PSYoungGen: 840K->0K(9216K)] [ParOldGen: 6152K->6845K(10240K)] 6992K->6845K(19456K), [Metaspace: 3229K->3229K(1056768K)], 0.0142699 secs] [Times: user=0.03 sys=0.02, real=0.01 secs] </span>完成了Heap<span class="token attr-name"> PSYoungGen</span> <span class="token attr-value">     total 9216K, used 2289K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><span class="token attr-name">  eden</span> <span class="token attr-value">space 8192K, 27% used [0x00000000ff600000,0x00000000ff83c4a0,0x00000000ffe00000)</span><span class="token attr-name">  from</span> <span class="token attr-value">space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)</span><span class="token attr-name">  to</span> <span class="token attr-value">  space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)</span><span class="token attr-name"> ParOldGen</span> <span class="token attr-value">      total 10240K, used 6845K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><span class="token attr-name">  object</span> <span class="token attr-value">space 10240K, 66% used [0x00000000fec00000,0x00000000ff2af728,0x00000000ff600000)</span><span class="token attr-name"> Metaspace</span> <span class="token attr-value">      used 3237K, capacity 4496K, committed 4864K, reserved 1056768K</span><span class="token attr-name">  class</span> <span class="token attr-value">space    used 352K, capacity 388K, committed 512K, reserved 1048576K</span></code></pre><h3 id="实验四"><a href="#实验四" class="headerlink" title="实验四"></a>实验四</h3><p>虚拟机参数</p><ul><li>-verbose：gc<br>-Xmx200m<br>-Xmn50m<br>-XX:TargetSurvivorRatio=60<br>-XX:+PrintTenuringDistribution<br>-XX:+PrintGCDetails<br>-XX:+PrintGCDateStamps<br>-XX:+UseParNewGC<br>-XX:+UseConcMarkSweepGC<br>-XX:MaxTenuringThreshold=3</li></ul><p>实验代码 MyTest4.java</p><p>输出结果</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:31.886+0800: [GC (Allocation Failure) 2020-02-28T16:13:31.886+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 3 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:    2818384 bytes,    2818384 total</span><span class="token punctuation">:</span> 40349K->2785K(46080K), 0.0016338 secs] 40349K->2785K(109568K), 0.0017041 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 11111111<span class="token comment"># Desired survivor size 3145728 bytes ,其中3145728 bytes的值就是3m，是survivor乘于0.6算出来的（-XX:TargetSurvivorRatio=60），当survivor超过此大小时就会重新动态设置threshold的值，但是也不会超过3.</span><span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:32.891+0800: [GC (Allocation Failure) 2020-02-28T16:13:32.891+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 2 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:     342328 bytes,     342328 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   2:    2866552 bytes,    3208880 total</span><span class="token punctuation">:</span> 42918K->3328K(46080K), 0.0016638 secs] 42918K->3328K(109568K), 0.0017198 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 222222222<span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:33.896+0800: [GC (Allocation Failure) 2020-02-28T16:13:33.896+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 3 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:         64 bytes,         64 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   2:     341632 bytes,     341696 total</span><span class="token punctuation">:</span> 43843K->858K(46080K), 0.0034513 secs] 43843K->3621K(109568K), 0.0034982 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 3333333333<span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:34.905+0800: [GC (Allocation Failure) 2020-02-28T16:13:34.905+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 3 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:         64 bytes,         64 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   2:         64 bytes,        128 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   3:     341856 bytes,     341984 total</span><span class="token punctuation">:</span> 41579K->484K(46080K), 0.0006988 secs] 44342K->3247K(109568K), 0.0007548 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 4444444444<span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:35.908+0800: [GC (Allocation Failure) 2020-02-28T16:13:35.908+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 1 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:    3145840 bytes,    3145840 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   2:         64 bytes,    3145904 total</span><span class="token attr-name">-</span> <span class="token attr-value">age   3:         64 bytes,    3145968 total</span><span class="token punctuation">:</span> 41211K->3153K(46080K), 0.0016465 secs] 43974K->6250K(109568K), 0.0016891 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 5555555<span class="token attr-name">2020-02-28T16</span><span class="token punctuation">:</span><span class="token attr-value">13:36.912+0800: [GC (Allocation Failure) 2020-02-28T16:13:36.912+0800: [ParNew</span><span class="token attr-name">Desired</span> <span class="token attr-value">survivor size 3145728 bytes, new threshold 3 (max 3)</span><span class="token attr-name">-</span> <span class="token attr-value">age   1:         56 bytes,         56 total</span><span class="token punctuation">:</span> 43885K->20K(46080K), 0.0020702 secs] 46982K->6189K(109568K), 0.0021193 secs] [Times<span class="token punctuation">:</span> user<span class="token punctuation">=</span>0.00 sys<span class="token punctuation">=</span>0.00, real<span class="token punctuation">=</span>0.00 secs] 666666Heap<span class="token attr-name"> par</span> <span class="token attr-value">new generation   total 46080K, used 19046K [0x00000000f3800000, 0x00000000f6a00000, 0x00000000f6a00000)</span><span class="token attr-name">  eden</span> <span class="token attr-value">space 40960K,  46% used [0x00000000f3800000, 0x00000000f4a947a0, 0x00000000f6000000)</span><span class="token attr-name">  from</span> <span class="token attr-value">space 5120K,   0% used [0x00000000f6000000, 0x00000000f6005130, 0x00000000f6500000)</span><span class="token attr-name">  to</span> <span class="token attr-value">  space 5120K,   0% used [0x00000000f6500000, 0x00000000f6500000, 0x00000000f6a00000)</span><span class="token attr-name"> concurrent</span> <span class="token attr-value">mark-sweep generation total 63488K, used 6169K [0x00000000f6a00000, 0x00000000fa800000, 0x0000000100000000)</span><span class="token attr-name"> Metaspace</span> <span class="token attr-value">      used 3748K, capacity 4536K, committed 4864K, reserved 1056768K</span><span class="token attr-name">  class</span> <span class="token attr-value">space    used 412K, capacity 428K, committed 512K, reserved 1048576K</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm常用的命令</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="jvm基本命令"><a href="#jvm基本命令" class="headerlink" title="jvm基本命令"></a>jvm基本命令</h1><h2 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h2><blockquote><p>显示当前运行的java进程以及相关参数</p></blockquote><p>jps参数：</p><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin">jps <span class="token operator">-</span>l pid<span class="token operator">-</span>q 只显示pid，不显示<span class="token keyword">class</span>名称<span class="token punctuation">,</span>jar文件名和传递给main 方法的参数。<span class="token operator">-</span>l 输出应用程序main <span class="token keyword">class</span>的完整<span class="token keyword">package</span>名 或者 应用程序的jar文件完整路径名。<span class="token operator">-</span>m 输出传递给main方法的参数<span class="token operator">-</span>v 输出传递给JVM的参数</code></pre><p><strong>备注：</strong>也可以使用ps aux | grep 项目名 查看pid</p><h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h2><blockquote><p>用于生成java虚拟机当前时刻的线程快照。</p></blockquote><h3 id="分析CPU利用率100-问题"><a href="#分析CPU利用率100-问题" class="headerlink" title="分析CPU利用率100%问题"></a>分析CPU利用率100%问题</h3><ol><li>top 查看占CPU最多的进程</li><li>top -Hp pid 查询进程下所有线程的运行情况（shift+p 按cpu排序，shift+m 按内存排序）</li><li>用printf ‘%x’ pid 转换为16进制（加入查到的是a）</li><li>jstact查看线程快照，jstack 30316 | grep -A 20 a</li></ol><p>[推荐阅读]<a href="https://link.jianshu.com/?t=http://jameswxx.iteye.com/blog/1041173">http://jameswxx.iteye.com/blog/1041173</a></p><h2 id="死锁分析"><a href="#死锁分析" class="headerlink" title="死锁分析"></a>死锁分析</h2><p>java程序如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JvmLock</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Default Charset="</span> <span class="token operator">+</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.encoding="</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"file.encoding"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LockA</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LockB</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">LockA</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">JvmLock</span><span class="token punctuation">.</span>obj1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lockA 获取到obj1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">JvmLock</span><span class="token punctuation">.</span>obj2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lockA 获取obj2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">LockB</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">JvmLock</span><span class="token punctuation">.</span>obj2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lockb 获取到obj2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">JvmLock</span><span class="token punctuation">.</span>obj1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lockA 获取obj1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>获取到的堆栈信息，直接可以查看到死锁的存在</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">"DestroyJavaVM"</span> <span class="token comment">#15 prio=5 os_prio=0 cpu=453.13ms elapsed=6111.89s tid=0x000002873420d800 nid=0x49c waiting on condition  [0x0000000000000000]</span>   java.lang.Thread.State: RUNNABLE<span class="token string">"VM Thread"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">15</span>.63ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.33s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x00000287582ba800 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x2850 runnable<span class="token string">"GC Thread#0"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">125</span>.00ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.35s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x0000028734225800 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x1a3c runnable<span class="token string">"G1 Main Marker"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">15</span>.63ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.35s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x0000028734296000 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x4b0 runnable<span class="token string">"G1 Conc#0"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">15</span>.63ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.35s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x0000028734297000 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x32a4 runnable<span class="token string">"G1 Refine#0"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">0</span>.00ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.33s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x00000287572b2000 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x2ef8 runnable<span class="token string">"G1 Young RemSet Sampling"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">203</span>.13ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.33s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x00000287572b5000 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x2ddc runnable<span class="token string">"VM Periodic Task Thread"</span> <span class="token assign-left variable">os_prio</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token number">578</span>.13ms <span class="token assign-left variable">elapsed</span><span class="token operator">=</span><span class="token number">6112</span>.27s <span class="token assign-left variable">tid</span><span class="token operator">=</span>0x0000028758710800 <span class="token assign-left variable">nid</span><span class="token operator">=</span>0x192c waiting on conditionJNI global refs: <span class="token number">9</span>, weak refs: <span class="token number">0</span>Found one Java-level deadlock:<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token string">"Thread-0"</span><span class="token builtin class-name">:</span>  waiting to lock monitor 0x00000287582e6280 <span class="token punctuation">(</span>object 0x0000000711c39548, a java.lang.Object<span class="token punctuation">)</span>,  <span class="token function">which</span> is held by <span class="token string">"Thread-1"</span><span class="token string">"Thread-1"</span><span class="token builtin class-name">:</span>  waiting to lock monitor 0x00000287582e6080 <span class="token punctuation">(</span>object 0x0000000711c39538, a java.lang.Object<span class="token punctuation">)</span>,  <span class="token function">which</span> is held by <span class="token string">"Thread-0"</span>Java stack information <span class="token keyword">for</span> the threads listed above:<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token string">"Thread-0"</span><span class="token builtin class-name">:</span>        at top.sciento.wumu.jvm.LockA.run<span class="token punctuation">(</span>JvmLock.java:35<span class="token punctuation">)</span>        - waiting to lock <span class="token operator">&lt;</span>0x0000000711c3954<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a java.lang.Object<span class="token punctuation">)</span>        - locked <span class="token operator">&lt;</span>0x0000000711c3953<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a java.lang.Object<span class="token punctuation">)</span>        at java.lang.Thread.run<span class="token punctuation">(</span>java.base@11.0.2/Thread.java:834<span class="token punctuation">)</span><span class="token string">"Thread-1"</span><span class="token builtin class-name">:</span>        at top.sciento.wumu.jvm.LockB.run<span class="token punctuation">(</span>JvmLock.java:55<span class="token punctuation">)</span>        - waiting to lock <span class="token operator">&lt;</span>0x0000000711c3953<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a java.lang.Object<span class="token punctuation">)</span>        - locked <span class="token operator">&lt;</span>0x0000000711c3954<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a java.lang.Object<span class="token punctuation">)</span>        at java.lang.Thread.run<span class="token punctuation">(</span>java.base@11.0.2/Thread.java:834<span class="token punctuation">)</span>Found <span class="token number">1</span> deadlock.</code></pre><h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><blockquote><p>用于打印指定Java进程(或核心文件、远程调试服务器)的共享对象内存映射或堆内存细节。</p></blockquote><blockquote><p>堆Dump是反应Java堆使用情况的内存镜像，其中主要包括系统信息、虚拟机属性、完整的线程Dump、所有类和对象的状态等。 一般，在内存不足、GC异常等情况下，我们就会怀疑有内存泄露。这个时候我们就可以制作堆Dump来查看具体情况。分析原因。</p></blockquote><ol><li>查看java堆（heap）中的对象数量及大小：jmap -histo 31846</li><li>将内存使用的详细情况输出到文件： jmap -dump:format=b,file=heapDump pid然后使用jhat -port 5000 heapDump在浏览器中访问：<a href="https://link.jianshu.com/?t=http://localhost:5000/">http://localhost:5000/</a>查看详细信息</li></ol><h2 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h2><blockquote><p>jinfo可以输出java进程、core文件或远程debug服务器的配置信息。可以使用jps -v替换</p></blockquote><h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><blockquote><p>是用于监控虚拟机各种运行状态信息的命令行工具。他可以显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</p></blockquote><p>jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]<br> 参数解释：</p><p>Option — 选项，我们一般使用 -gcutil 查看gc情况</p><p>vmid — VM的进程号，即当前运行的java进程号</p><p>interval– 间隔时间，单位为秒或者毫秒</p><p>count — 打印次数，如果缺省则打印无数次</p><p>例子：jstat -gc 5828 250 5</p><p>如下所示为jstat的命令格式</p><pre class="language-none"><code class="language-none">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]1</code></pre><p>如下表示分析进程id为31736 的gc情况，每隔1000ms打印一次记录，打印10次停止，每3行后打印指标头部</p><pre class="language-none"><code class="language-none">jstat -gc -h3 31736 1000 101</code></pre><h3 id="jstat-gc"><a href="#jstat-gc" class="headerlink" title="jstat -gc"></a>jstat -gc</h3><pre class="language-none"><code class="language-none">jstat -gc xxxx1</code></pre><p>其对应的指标含义如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S0U</td><td>年轻代中第一个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>S1U</td><td>年轻代中第二个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>EU</td><td>年轻代中Eden（伊甸园）目前已使用空间 (字节)</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>OU</td><td>Old代目前已使用空间 (字节)</td></tr><tr><td>PC</td><td>Perm(持久代)的容量 (字节)</td></tr><tr><td>PU</td><td>Perm(持久代)目前已使用空间 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间(s)</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table><h3 id="jstat-gcutil"><a href="#jstat-gcutil" class="headerlink" title="jstat -gcutil"></a>jstat -gcutil</h3><p>查看gc的统计信息</p><pre class="language-none"><code class="language-none">jstat -gcutil xxxx1</code></pre><p>其对应的指标含义如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>S0</td><td>年轻代中第一个survivor（幸存区）已使用的占当前容量百分比</td></tr><tr><td>S1</td><td>年轻代中第二个survivor（幸存区）已使用的占当前容量百分比</td></tr><tr><td>E</td><td>年轻代中Eden（伊甸园）已使用的占当前容量百分比</td></tr><tr><td>O</td><td>old代已使用的占当前容量百分比</td></tr><tr><td>P</td><td>perm代已使用的占当前容量百分比</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间(s)</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table><h3 id="jstat-gccapacity"><a href="#jstat-gccapacity" class="headerlink" title="jstat -gccapacity"></a>jstat -gccapacity</h3><pre class="language-none"><code class="language-none">jstat -gccapacity xxxx1</code></pre><p>其对应的指标含义如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>NGCMN</td><td>年轻代(young)中初始化(最小)的大小 (字节)</td></tr><tr><td>NGCMX</td><td>年轻代(young)的最大容量 (字节)</td></tr><tr><td>NGC</td><td>年轻代(young)中当前的容量 (字节)</td></tr><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>OGCMN</td><td>old代中初始化(最小)的大小 (字节)</td></tr><tr><td>OGCMX</td><td>old代的最大容量 (字节)</td></tr><tr><td>OGC</td><td>old代当前新生成的容量 (字节)</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>PGCMN</td><td>perm代中初始化(最小)的大小 (字节)</td></tr><tr><td>PGCMX</td><td>perm代的最大容量 (字节)</td></tr><tr><td>PGC</td><td>perm代当前新生成的容量 (字节)</td></tr><tr><td>PC</td><td>Perm(持久代)的容量 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr></tbody></table><p><strong>4 其他命令</strong></p><ol><li>查看年轻代对象的信息及其占用量。</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">jstat -gcnewcapacity xxxx1</code></pre><ol start="2"><li>查看老年代对象的信息及其占用量。</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">jstat -gcoldcapacity xxxx1</code></pre><ol start="3"><li>查看年轻代对象的信息</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">jstat -gcnew xxxx1</code></pre><ol start="4"><li>查看老年代对象的信息</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">jstat -gcold xxxx</code></pre><h2 id="javap"><a href="#javap" class="headerlink" title="javap"></a>javap</h2><blockquote><p>可以对代码反编译，也可以查看java编译器生成的字节码。</p></blockquote><h2 id="jhsdb-java9以上"><a href="#jhsdb-java9以上" class="headerlink" title="jhsdb(java9以上)"></a>jhsdb(java9以上)</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jhsdb</span>   clhsdb       <span class="token builtin class-name">command</span> line debugger   debugd       debug server   hsdb         ui debugger   jstack --helpto get <span class="token function">more</span> information   jmap   --helpto get <span class="token function">more</span> information   jinfo  --helpto get <span class="token function">more</span> information   jsnap  --helpto get <span class="token function">more</span> information</code></pre><ul><li>jhsdb是java9引入的，可以在JAVA_HOME/bin目录下找到jhsdb；它取代了jdk9之前的JAVA_HOME/lib/sa-jdi.jar</li><li>jhsdb有clhsdb、debugd、hsdb、jstack、jmap、jinfo、jsnap这些mode可以使用</li><li>其中hsdb为ui debugger，就是jdk9之前的sun.jvm.hotspot.HSDB；而clhsdb即为jdk9之前的sun.jvm.hotspot.CLHSDB</li></ul><h3 id="jhsdb-jstack"><a href="#jhsdb-jstack" class="headerlink" title="jhsdb jstack"></a>jhsdb jstack</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jhsdb jstack --help</span>   --locksto print java.util.concurrent locks   --mixedto print both java and native frames <span class="token punctuation">(</span>mixed mode<span class="token punctuation">)</span>   --exeexecutable image name   --corepath to coredump   --pidpid of process to attach</code></pre><blockquote><p>–pid用于指定JVM的进程ID；–exe用于指定可执行文件；–core用于指定core dump文件</p></blockquote><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><pre class="language-bash" data-language="bash"><code class="language-bash">jhsdb jstack --mixed --pid <span class="token number">1</span>//<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Caused by: sun.jvm.hotspot.debugger.DebuggerException: get_thread_regs failed <span class="token keyword">for</span> a lwpat jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.getThreadIntegerRegisterSet0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal<span class="token variable">$1GetThreadIntegerRegisterSetTask</span>.doit<span class="token punctuation">(</span>LinuxDebuggerLocal.java:534<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal<span class="token variable">$LinuxDebuggerLocalWorkerThread</span>.run<span class="token punctuation">(</span>LinuxDebuggerLocal.java:151<span class="token punctuation">)</span>复制代码</code></pre><blockquote><p>如果出现这个异常表示是采用jdk版本的问题，可以尝试一下其他jdk编译版本</p></blockquote><h3 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jhsdb jstack --locks --pid 1</span>Attaching to process ID <span class="token number">1</span>, please wait<span class="token punctuation">..</span>.Debugger attached successfully.Server compiler detected.JVM version is <span class="token number">12</span>+33Deadlock Detection:No deadlocks found.<span class="token string">"DestroyJavaVM"</span> <span class="token comment">#32 prio=5 tid=0x000055c3b5be0800 nid=0x6 waiting on condition [0x0000000000000000]</span>   java.lang.Thread.State: RUNNABLE   JavaThread state: _thread_blockedLocked ownable synchronizers:    - None<span class="token string">"http-nio-8080-Acceptor-0"</span> <span class="token comment">#30 daemon prio=5 tid=0x000055c3b5d71800 nid=0x2f runnable [0x00007fa0d13de000]</span>   java.lang.Thread.State: RUNNABLE   JavaThread state: _thread_in_native - sun.nio.ch.ServerSocketChannelImpl.accept0<span class="token punctuation">(</span>java.io.FileDescriptor, java.io.FileDescriptor, java.net.InetSocketAddress<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - sun.nio.ch.ServerSocketChannelImpl.accept<span class="token punctuation">(</span>java.io.FileDescriptor, java.io.FileDescriptor, java.net.InetSocketAddress<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">525</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - sun.nio.ch.ServerSocketChannelImpl.accept<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">41</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">277</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.net.NioEndpoint.serverSocketAccept<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">448</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.net.NioEndpoint.serverSocketAccept<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">70</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.net.Acceptor.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">98</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">95</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.lang.Thread.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">11</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">835</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>Locked ownable synchronizers:    - <span class="token operator">&lt;</span>0x00000000e3aab6e<span class="token operator"><span class="token file-descriptor important">0</span>></span>, <span class="token punctuation">(</span>a java/util/concurrent/locks/ReentrantLock<span class="token variable">$NonfairSync</span><span class="token punctuation">)</span><span class="token string">"http-nio-8080-ClientPoller-0"</span> <span class="token comment">#29 daemon prio=5 tid=0x000055c3b5c20000 nid=0x2e runnable [0x00007fa0d14df000]</span>   java.lang.Thread.State: RUNNABLE   JavaThread state: _thread_in_native - sun.nio.ch.EPoll.wait<span class="token punctuation">(</span>int, long, int, int<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - sun.nio.ch.EPollSelectorImpl.doSelect<span class="token punctuation">(</span>java.util.function.Consumer, long<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">96</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">120</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - sun.nio.ch.SelectorImpl.lockAndDoSelect<span class="token punctuation">(</span>java.util.function.Consumer, long<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">42</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">124</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>- locked <span class="token operator">&lt;</span>0x00000000e392ece<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a sun.nio.ch.EPollSelectorImpl<span class="token punctuation">)</span>- locked <span class="token operator">&lt;</span>0x00000000e392ee3<span class="token operator"><span class="token file-descriptor important">8</span>></span> <span class="token punctuation">(</span>a sun.nio.ch.Util<span class="token variable">$2</span><span class="token punctuation">)</span> - sun.nio.ch.SelectorImpl.select<span class="token punctuation">(</span>long<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">31</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">136</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.net.NioEndpoint<span class="token variable">$Poller</span>.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">55</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">743</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.lang.Thread.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">11</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">835</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>Locked ownable synchronizers:    - None<span class="token string">"http-nio-8080-exec-10"</span> <span class="token comment">#28 daemon prio=5 tid=0x000055c3b48d6000 nid=0x2d waiting on condition [0x00007fa0d15e0000]</span>   java.lang.Thread.State: WAITING <span class="token punctuation">(</span>parking<span class="token punctuation">)</span>   JavaThread state: _thread_blocked - jdk.internal.misc.Unsafe.park<span class="token punctuation">(</span>boolean, long<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>- parking to <span class="token function">wait</span> <span class="token keyword">for</span> <span class="token operator">&lt;</span>0x00000000e390167<span class="token operator"><span class="token file-descriptor important">0</span>></span> <span class="token punctuation">(</span>a java/util/concurrent/locks/AbstractQueuedSynchronizer<span class="token variable">$ConditionObject</span><span class="token punctuation">)</span> - java.util.concurrent.locks.LockSupport.park<span class="token punctuation">(</span>java.lang.Object<span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">14</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">194</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="token variable">$ConditionObject</span>.await<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">42</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">2081</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.util.concurrent.LinkedBlockingQueue.take<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">27</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">433</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.threads.TaskQueue.take<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">36</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">107</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.threads.TaskQueue.take<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">33</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.util.concurrent.ThreadPoolExecutor.getTask<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">147</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">1054</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.util.concurrent.ThreadPoolExecutor.runWorker<span class="token punctuation">(</span>java.util.concurrent.ThreadPoolExecutor<span class="token variable">$Worker</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">26</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">1114</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.util.concurrent.ThreadPoolExecutor<span class="token variable">$Worker</span>.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">5</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">628</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - org.apache.tomcat.util.threads.TaskThread<span class="token variable">$WrappingRunnable</span>.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">61</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> - java.lang.Thread.run<span class="token punctuation">(</span><span class="token punctuation">)</span> @bci<span class="token operator">=</span><span class="token number">11</span>, <span class="token assign-left variable">line</span><span class="token operator">=</span><span class="token number">835</span> <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span> //<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>/ <span class="token comment"># jhsdb jstack --mixed --pid 1</span>Attaching to process ID <span class="token number">1</span>, please wait<span class="token punctuation">..</span>.Debugger attached successfully.Server compiler detected.JVM version is <span class="token number">12</span>+33Deadlock Detection:No deadlocks found.----------------- <span class="token number">47</span> -----------------<span class="token string">"http-nio-8080-Acceptor-0"</span> <span class="token comment">#30 daemon prio=5 tid=0x000055c3b5d71800 nid=0x2f runnable [0x00007fa0d13de000]</span>   java.lang.Thread.State: RUNNABLE   JavaThread state: _thread_in_native0x00007fa0ee0923ad????????----------------- <span class="token number">46</span> -----------------<span class="token string">"http-nio-8080-ClientPoller-0"</span> <span class="token comment">#29 daemon prio=5 tid=0x000055c3b5c20000 nid=0x2e runnable [0x00007fa0d14df000]</span>   java.lang.Thread.State: RUNNABLE   JavaThread state: _thread_in_native0x00007fa0ee05f3d0epoll_pwait + 0x1d0x00007fa0daa97810* sun.nio.ch.EPoll.wait<span class="token punctuation">(</span>int, long, int, int<span class="token punctuation">)</span> bci:0 <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>0x00007fa0daa91680* sun.nio.ch.EPollSelectorImpl.doSelect<span class="token punctuation">(</span>java.util.function.Consumer, long<span class="token punctuation">)</span> bci:96 line:120 <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>0x00007fa0db85f57c* sun.nio.ch.SelectorImpl.lockAndDoSelect<span class="token punctuation">(</span>java.util.function.Consumer, long<span class="token punctuation">)</span> bci:42 line:124 <span class="token punctuation">(</span>Compiled frame<span class="token punctuation">)</span>* sun.nio.ch.SelectorImpl.select<span class="token punctuation">(</span>long<span class="token punctuation">)</span> bci:31 line:136 <span class="token punctuation">(</span>Compiled frame<span class="token punctuation">)</span>* org.apache.tomcat.util.net.NioEndpoint<span class="token variable">$Poller</span>.run<span class="token punctuation">(</span><span class="token punctuation">)</span> bci:55 line:743 <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>0x00007fa0daa91c88* java.lang.Thread.run<span class="token punctuation">(</span><span class="token punctuation">)</span> bci:11 line:835 <span class="token punctuation">(</span>Interpreted frame<span class="token punctuation">)</span>0x00007fa0daa88849<span class="token operator">&lt;</span>StubRoutines<span class="token operator">></span>0x00007fa0ed122952_ZN9JavaCalls11call_helperEP9JavaValueRK12methodHandleP17JavaCallArgumentsP6Thread + 0x3c20x00007fa0ed1208d0_ZN9JavaCalls12call_virtualEP9JavaValue6HandleP5KlassP6SymbolS6_P6Thread + 0x2000x00007fa0ed1ccfc5_ZL12thread_entryP10JavaThreadP6Thread + 0x750x00007fa0ed74f3a3_ZN10JavaThread17thread_main_innerEv + 0x1030x00007fa0ed74c3f5_ZN6Thread8call_runEv + 0x750x00007fa0ed4a477e_ZL19thread_native_entryP6Thread + 0xee//<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><blockquote><p>–locks或者–mixed花费的时间可能比较长(<code>几分钟，可能要将近6分钟</code>)，因而进程暂停的时间也可能比较长，在使用这两个选项时要注意</p></blockquote><h3 id="jhsdb-jmap"><a href="#jhsdb-jmap" class="headerlink" title="jhsdb jmap"></a>jhsdb jmap</h3><h3 id="jmap-heap-pid"><a href="#jmap-heap-pid" class="headerlink" title="jmap -heap pid"></a>jmap -heap pid</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jmap -heap 1</span>Error: -heap option usedCannot connect to core dump or remote debug server. Use jhsdb jmap instead</code></pre><blockquote><p>jdk9及以上版本使用jmap -heap pid命令查看当前heap使用情况时，发现报错，提示需要使用jhsdb jmap来替代</p></blockquote><h3 id="jhsdb-jmap-pid"><a href="#jhsdb-jmap-pid" class="headerlink" title="jhsdb jmap pid"></a>jhsdb jmap pid</h3><pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># jhsdb jmap 1</span>sh: jhsdb: not found</code></pre><blockquote><p>发现jlink的时候没有添加jdk.hotspot.agent这个module，添加了这个module之后可以发现JAVA_HOME/bin目录下就有了jhsdb</p></blockquote><h3 id="PTRACE-ATTACH-failed"><a href="#PTRACE-ATTACH-failed" class="headerlink" title="PTRACE_ATTACH failed"></a>PTRACE_ATTACH failed</h3><pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># jhsdb jmap 1</span>You have to <span class="token builtin class-name">set</span> --pid or --exe.    <span class="token operator">&lt;</span>no option<span class="token operator">></span>to print same info as Solaris pmap    --heapto print java heap summary    --binaryheapto dump java heap <span class="token keyword">in</span> hprof binary <span class="token function">format</span>    --dumpfilename of the dump <span class="token function">file</span>    --histoto print histogram of java object heap    --clstatsto print class loader statistics    --finalizerinfoto print information on objects awaiting finalization    --exeexecutable image name    --corepath to coredump    --pidpid of process to attach/ <span class="token comment"># jhsdb jmap --heap --pid 1</span>Attaching to process ID <span class="token number">1</span>, please wait<span class="token punctuation">..</span>.ERROR: ptrace<span class="token punctuation">(</span>PTRACE_ATTACH, <span class="token punctuation">..</span><span class="token punctuation">)</span> failed <span class="token keyword">for</span> <span class="token number">1</span>: Operation not permittedError attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can<span class="token string">'t attach to the process: ptrace(PTRACE_ATTACH, ..) failed for 1: Operation not permittedsun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can'</span>t attach to the process: ptrace<span class="token punctuation">(</span>PTRACE_ATTACH, <span class="token punctuation">..</span><span class="token punctuation">)</span> failed <span class="token keyword">for</span> <span class="token number">1</span>: Operation not permittedat jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal<span class="token variable">$LinuxDebuggerLocalWorkerThread</span>.execute<span class="token punctuation">(</span>LinuxDebuggerLocal.java:176<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach<span class="token punctuation">(</span>LinuxDebuggerLocal.java:336<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.attachDebugger<span class="token punctuation">(</span>HotSpotAgent.java:672<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebuggerLinux<span class="token punctuation">(</span>HotSpotAgent.java:612<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.setupDebugger<span class="token punctuation">(</span>HotSpotAgent.java:338<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.go<span class="token punctuation">(</span>HotSpotAgent.java:305<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotAgent.attach<span class="token punctuation">(</span>HotSpotAgent.java:141<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start<span class="token punctuation">(</span>Tool.java:185<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute<span class="token punctuation">(</span>Tool.java:118<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.main<span class="token punctuation">(</span>JMap.java:176<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJMAP<span class="token punctuation">(</span>SALauncher.java:326<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main<span class="token punctuation">(</span>SALauncher.java:455<span class="token punctuation">)</span>Caused by: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process: ptrace<span class="token punctuation">(</span>PTRACE_ATTACH, <span class="token punctuation">..</span><span class="token punctuation">)</span> failed <span class="token keyword">for</span> <span class="token number">1</span>: Operation not permittedat jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal.attach0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal<span class="token variable">$1AttachTask</span>.doit<span class="token punctuation">(</span>LinuxDebuggerLocal.java:326<span class="token punctuation">)</span>at jdk.hotspot.agent/sun.jvm.hotspot.debugger.linux.LinuxDebuggerLocal<span class="token variable">$LinuxDebuggerLocalWorkerThread</span>.run<span class="token punctuation">(</span>LinuxDebuggerLocal.java:151<span class="token punctuation">)</span></code></pre><blockquote><p>发现PTRACE_ATTACH被docker禁用了，需要在运行容器时启用PTRACE_ATTACH</p></blockquote><h3 id="docker启用SYS-PTRACE"><a href="#docker启用SYS-PTRACE" class="headerlink" title="docker启用SYS_PTRACE"></a>docker启用SYS_PTRACE</h3><pre class="language-bash" data-language="bash"><code class="language-bash">docker run --cap-add<span class="token operator">=</span>SYS_PTRACE</code></pre><p>之后就可以正常使用jhsdb如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jhsdb jmap --heap --pid 1</span>Attaching to process ID <span class="token number">1</span>, please wait<span class="token punctuation">..</span>.Debugger attached successfully.Server compiler detected.JVM version is <span class="token number">12</span>+33using thread-local object allocation.Shenandoah GC with <span class="token number">4</span> thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Heap Configuration:   MinHeapFreeRatio         <span class="token operator">=</span> <span class="token number">40</span>   MaxHeapFreeRatio         <span class="token operator">=</span> <span class="token number">70</span>   MaxHeapSize              <span class="token operator">=</span> <span class="token number">523763712</span> <span class="token punctuation">(</span><span class="token number">499</span>.5MB<span class="token punctuation">)</span>   NewSize                  <span class="token operator">=</span> <span class="token number">1363144</span> <span class="token punctuation">(</span><span class="token number">1</span>.2999954223632812MB<span class="token punctuation">)</span>   MaxNewSize               <span class="token operator">=</span> <span class="token number">17592186044415</span> MB   OldSize                  <span class="token operator">=</span> <span class="token number">5452592</span> <span class="token punctuation">(</span><span class="token number">5</span>.1999969482421875MB<span class="token punctuation">)</span>   NewRatio                 <span class="token operator">=</span> <span class="token number">2</span>   SurvivorRatio            <span class="token operator">=</span> <span class="token number">8</span>   MetaspaceSize            <span class="token operator">=</span> <span class="token number">21807104</span> <span class="token punctuation">(</span><span class="token number">20</span>.796875MB<span class="token punctuation">)</span>   CompressedClassSpaceSize <span class="token operator">=</span> <span class="token number">1073741824</span> <span class="token punctuation">(</span><span class="token number">1024</span>.0MB<span class="token punctuation">)</span>   MaxMetaspaceSize         <span class="token operator">=</span> <span class="token number">17592186044415</span> MB   ShenandoahRegionSize     <span class="token operator">=</span> <span class="token number">262144</span> <span class="token punctuation">(</span><span class="token number">0</span>.25MB<span class="token punctuation">)</span>Heap Usage:Shenandoah Heap:   regions   <span class="token operator">=</span> <span class="token number">1997</span>   capacity  <span class="token operator">=</span> <span class="token number">523501568</span> <span class="token punctuation">(</span><span class="token number">499</span>.25MB<span class="token punctuation">)</span>   used      <span class="token operator">=</span> <span class="token number">70470552</span> <span class="token punctuation">(</span><span class="token number">67</span>.2059555053711MB<span class="token punctuation">)</span>   committed <span class="token operator">=</span> <span class="token number">144441344</span> <span class="token punctuation">(</span><span class="token number">137</span>.75MB<span class="token punctuation">)</span></code></pre><h3 id="jhsdb-jinfo"><a href="#jhsdb-jinfo" class="headerlink" title="jhsdb jinfo"></a>jhsdb jinfo</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jhsdb jinfo --help</span>   --flagsto print VM flags   --syspropsto print Java System properties   <span class="token operator">&lt;</span>no option<span class="token operator">></span>to print both of the above   --exeexecutable image name   --corepath to coredump   --pidpid of process to attach</code></pre><blockquote><p>使用jhsdb显示jinfo的sysprops如下：</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># jhsdb jinfo --sysprops --pid 1</span>Attaching to process ID <span class="token number">1</span>, please wait<span class="token punctuation">..</span>.Debugger attached successfully.Server compiler detected.JVM version is <span class="token number">12</span>+33awt.toolkit <span class="token operator">=</span> sun.awt.X11.XToolkitjava.specification.version <span class="token operator">=</span> <span class="token number">12</span>sun.jnu.encoding <span class="token operator">=</span> UTF-8//<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><blockquote><p>这个命令其实跟jinfo -sysprops 1是等价的</p></blockquote><h3 id="jhsdb-jsnap"><a href="#jhsdb-jsnap" class="headerlink" title="jhsdb jsnap"></a>jhsdb jsnap</h3><pre class="language-none"><code class="language-none"># jhsdb jsnap --pid 1Attaching to process ID 1, please wait...Debugger attached successfully.Server compiler detected.JVM version is 12+33java.threads.started&#x3D;27 event(s)java.threads.live&#x3D;24java.threads.livePeak&#x3D;24java.threads.daemon&#x3D;20java.cls.loadedClasses&#x3D;8250 event(s)java.cls.unloadedClasses&#x3D;1 event(s)java.cls.sharedLoadedClasses&#x3D;0 event(s)java.cls.sharedUnloadedClasses&#x3D;0 event(s)java.ci.totalTime&#x3D;18236958158 tick(s)java.property.java.vm.specification.version&#x3D;12java.property.java.vm.specification.name&#x3D;Java Virtual Machine Specificationjava.property.java.vm.specification.vendor&#x3D;Oracle Corporationjava.property.java.vm.version&#x3D;12+33java.property.java.vm.name&#x3D;OpenJDK 64-Bit Server VMjava.property.java.vm.vendor&#x3D;Azul Systems, Inc.java.property.java.vm.info&#x3D;mixed modejava.property.jdk.debug&#x3D;release&#x2F;&#x2F;......</code></pre><blockquote><p>jhsdb jsnap的功能主要是由jdk.hotspot.agent模块中的sun.jvm.hotspot.tools.JSnap.java来提供的，它可以用于查看threads及class loading/unloading相关的event、JVM属性参数等，其中–all可以显示更多的JVM属性参数</p></blockquote><h3 id="jhsdb与jcmd"><a href="#jhsdb与jcmd" class="headerlink" title="jhsdb与jcmd"></a>jhsdb与jcmd</h3><p><a href="https://dzone.com/articles/jhsdb-a-new-tool-for-jdk-9">jhsdb: A New Tool for JDK 9</a>这篇文章中列出了jhsdb与jcmd的等价命令，如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/27/169bdde54fd27641?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>在java9之前，JAVA_HOME/lib目录下有个sa-jdi.jar，可以通过如上命令启动HSDB(<code>图形界面</code>)及CLHSDB(<code>命令行</code>)；sa-jdi.jar中的sa的全称为Serviceability Agent，它之前是sun公司提供的一个用于协助调试HotSpot的组件，而HSDB便是使用Serviceability Agent来实现的；HSDB就是HotSpot Debugger的简称，由于Serviceability Agent在使用的时候会先attach进程，然后暂停进程进行snapshot，最后deattach进程(<code>进程恢复运行</code>)，所以在使用HSDB时要注意</li><li>jhsdb是java9引入的，可以在JAVA_HOME/bin目录下找到jhsdb；它取代了jdk9之前的JAVA_HOME/lib/sa-jdi.jar；jhsdb有clhsdb、debugd、hsdb、jstack、jmap、jinfo、jsnap这些mode可以使用；其中hsdb为ui debugger，就是jdk9之前的sun.jvm.hotspot.HSDB；而clhsdb即为jdk9之前的sun.jvm.hotspot.CLHSDB</li><li>jhsdb在jdk.hotspot.agent这个模块中；对于jhsdb jstack的–locks或者–mixed命令花费的时间可能比较长(<code>几分钟，可能要将近6分钟</code>)，因而进程暂停的时间也可能比较长，在使用这两个选项时要注意；对于jdk9及以后的版本不再使用jmap -heap命令来查询heap内存情况，需要用jhsdb jmap –heap –pid来替代；使用jhsdb jmap需要在运行容器时启用PTRACE_ATTACH才可以</li></ul><h3 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h3><ul><li><a href="https://segmentfault.com/a/1190000004621417">JVM信息查看</a></li><li><a href="https://docs.oracle.com/en/java/javase/12/tools/jhsdb.html">jhsdb</a></li><li><a href="https://docs.oracle.com/en/java/javase/12/docs/api/jdk.hotspot.agent/module-summary.html#jhsdb">jdk.hotspot.agent jhsdb</a></li><li><a href="https://dzone.com/articles/jhsdb-a-new-tool-for-jdk-9">jhsdb: A New Tool for JDK 9</a></li><li><a href="http://marxsoftware.blogspot.com/2016/02/jcmd-one-jdk-command-line-tool-to-rule.html">jcmd: One JDK Command-Line Tool to Rule Them All</a></li><li><a href="https://jarekprzygodzki.wordpress.com/2016/12/19/jvm-in-docker-and-ptrace_attach/">JVM in Docker and PTRACE_ATTACH</a></li><li><a href="http://openjdk.java.net/groups/hotspot/docs/Serviceability.html">Serviceability in HotSpot</a></li><li><a href="https://www.usenix.org/legacy/events/jvm01/full_papers/russell/russell_html/index.html">The HotSpot™ Serviceability Agent: An out-of-process high level debugger for a Java™ virtual machine</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/bacc64527894">https://www.jianshu.com/p/bacc64527894</a></p><p><a href="https://juejin.cn/post/6844903808057753613">https://juejin.cn/post/6844903808057753613</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<hr><hr><pre class="language-none"><code class="language-none">Description&#x3D;My Miscellaneous ServiceRequires&#x3D;network-online.targetAfter&#x3D;network-online.target[Service]Type&#x3D;simpleUser&#x3D;anonymousWorkingDirectory&#x3D;&#x2F;home&#x2F;anonymousExecStart&#x3D;some_can_execute --option&#x3D;123Restart&#x3D;on-failure[Install]WantedBy&#x3D;multi-user.target</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm回收算法</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="定位垃圾"><a href="#定位垃圾" class="headerlink" title="定位垃圾"></a>定位垃圾</h2><h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>每个对象有一个计数器，每次有一个引用就添加1，清除一个引用就删除1。</p><h2 id="根可达算法"><a href="#根可达算法" class="headerlink" title="根可达算法"></a>根可达算法</h2><p>局部变量</p><p>静态变量</p><p>常量池</p><p>JNI引用</p><h1 id="垃圾清除算法"><a href="#垃圾清除算法" class="headerlink" title="垃圾清除算法"></a>垃圾清除算法</h1><h2 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h2><p>位置不连续，垃圾碎片</p><h2 id="拷贝算法（复制算法）"><a href="#拷贝算法（复制算法）" class="headerlink" title="拷贝算法（复制算法）"></a>拷贝算法（复制算法）</h2><p>浪费空间</p><h2 id="标记压缩算法"><a href="#标记压缩算法" class="headerlink" title="标记压缩算法"></a>标记压缩算法</h2><p>效率偏低</p><h2 id="JVM分代回收"><a href="#JVM分代回收" class="headerlink" title="JVM分代回收"></a>JVM分代回收</h2><p>新的垃圾回收期不在分代了。</p><p>1、new、young:</p><ul><li>存活数量少</li><li>使用复制算法效率高</li></ul><ol><li><p>新生代=Eden+2个suvivor区 YGC回收之后大部分的对象会被回收。</p></li><li><p>YGC回收之后，先放到eden区，回收之后就放到s0区域。</p></li><li><p>再次YGC,活着的对象eden+s0 -&gt; s1</p></li><li><p>年龄足够进入old区</p></li><li><p>s区装不下直接进入老年代</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glnb9qrxeuj30p50btk14.jpg"></p><p>2、old:</p><ol><li>FGC :full gc</li><li>顽固分子</li><li>老年代满了FGC</li></ol><p>3、permanent(1.7 永久代)/Metaspace(1.8 元数据区)：</p><ul><li>永久代 元数据-class</li><li>永久代必须指定大小限制，元数据可以设置，也可以不设置，无上限（受限于物理内存）</li><li>字符串常量， 1.7-永久代，1.8- 堆</li></ul><p>4、GC Tuning(Generation)</p><ol><li>尽量减少FGC</li><li>MinorGC = YGC </li><li>MajorGC = FGC</li></ol><h1 id="常见的垃圾回收器"><a href="#常见的垃圾回收器" class="headerlink" title="常见的垃圾回收器"></a>常见的垃圾回收器</h1><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glog8gi2mij30oe0bx141.jpg"></p><p>1、Serial:串行回收，用于年轻代</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glogbm81npj30nb0bg12g.jpg"></p><p>2、Parallel Scavenage：并行回收，年轻代</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glogfjddfrj30lf0abth0.jpg"></p><p>3、ParNew:配合cms的并行回收，年轻代</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gloggmpg66j30k60b8n5w.jpg"></p><p>4、SerialOld：老年代</p><p>5、ParallelOld:老年代</p><p>6、ConcurrentMarkSweep:老年代，垃圾回收和应用同时运行，降低STW的时间</p><p>7、G1(10ms)</p><p>8、ZGC（1ms）</p><p>9、Shenandoah</p><p>10、Eplison</p><p>1.8默认的垃圾回收器：PS+ParallelOld</p><h2 id="JVM-调优"><a href="#JVM-调优" class="headerlink" title="JVM 调优"></a>JVM 调优</h2><p>1、了解生产环境下的垃圾回收器组合</p><p>JVM的命令行参数参考：</p><ul><li><p>JVM命令参数分类：</p><ul><li>标准命令：-开头，所有的HotSpoot都支持</li><li>非标准：-X开头，特定版本HotSpot支持的特定命令</li><li>不稳定：-XX开头，下一个版本取消，</li></ul></li></ul><p>​       <code> -XX:+PrintCommandLineFlags</code></p><p>​       <code>-XX:+PrintFlagsFinal</code>最终参数值</p><p>​        <code>-XX+PrintFlagsInitial</code>默认参数</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="http://wumu.rescreate.cn/image20201216232212.png"></p><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glog8gi2mij30oe0bx141.jpg"></p><ol><li><p>垃圾回收的发展路线，是随着内存越来越大的过程演进</p><p>从分代算法演变到不分代算法</p><p>Serial算法 几十兆</p><p>Parallel算法  几十G</p><p>CMS 几十G 承上启下 开始并发回收– </p><blockquote><p>三色标记 标错 increament update -remark   + 写屏障</p></blockquote></li></ol><p>   G1 上百G内存-逻辑分代，物理不分代</p><blockquote><p>三色标记+STAB  + 写屏障</p></blockquote><p>   ZGC-Shenandoah – 4T 逻辑物理都不分代</p><blockquote><p>ColoredPointers（颜色指针 着色指针）</p></blockquote><p>   Epsilon 什么都不干，调试，确认不用GC参与就能干完活</p><ol start="2"><li>JDK诞生Serial追随，提高效率，诞生了ps,为了配合CMS，诞生了PN,CMS是1.4后期引入，CMS是里程碑的GC,但是CMS的问题很多，没有哪一款JDK默认使用CMS,并发垃圾回收是因为无法忍受STW.</li></ol><h2 id="调优的基础概念"><a href="#调优的基础概念" class="headerlink" title="调优的基础概念"></a>调优的基础概念</h2><ol><li>吞吐量：用户代码时间（用户代码执行时间+垃圾回收时间）</li><li>响应时间：STW阅读，</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch教程</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch概述"><a href="#ElasticSearch概述" class="headerlink" title="ElasticSearch概述"></a>ElasticSearch概述</h1><p>es的基本操作</p><pre class="language-shell" data-language="shell"><code class="language-shell">GET _analyze<span class="token punctuation">&#123;</span>  <span class="token string">"analyzer"</span><span class="token builtin class-name">:</span> <span class="token string">"ik_max_word"</span>,  <span class="token string">"text"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"我叫做梧木"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>GET _analyze<span class="token punctuation">&#123;</span>  <span class="token string">"analyzer"</span><span class="token builtin class-name">:</span> <span class="token string">"ik_smart"</span>,  <span class="token string">"text"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"我叫做梧木"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>PUT /test3/_doc/2<span class="token punctuation">&#123;</span>  <span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"wumu"</span>,  <span class="token string">"age"</span>:24<span class="token punctuation">&#125;</span>PUT /test3/_doc/5<span class="token punctuation">&#123;</span>  <span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"wumu"</span>,  <span class="token string">"age"</span><span class="token builtin class-name">:</span><span class="token string">"123"</span><span class="token punctuation">&#125;</span>DELETE /test3/_doc/2PUT /test3/_doc/5<span class="token punctuation">&#123;</span>  <span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"wumu1"</span>,  <span class="token string">"age"</span>:122<span class="token punctuation">&#125;</span>POST /test3/_update/5<span class="token punctuation">&#123;</span>  <span class="token string">"doc"</span>:<span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"wumu1"</span>,  <span class="token string">"age"</span>:12<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>GET /test3/_doc/5GET /test3/_search?q<span class="token operator">=</span>name:wumuGET _cat/indicesPUT /test2<span class="token punctuation">&#123;</span>  <span class="token string">"mappings"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"properties"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"name"</span>:<span class="token punctuation">&#123;</span>        <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"text"</span>      <span class="token punctuation">&#125;</span>,      <span class="token string">"age"</span>:<span class="token punctuation">&#123;</span>        <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"long"</span>      <span class="token punctuation">&#125;</span>,      <span class="token string">"birthday"</span>:<span class="token punctuation">&#123;</span>        <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"date"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="es复杂查询"><a href="#es复杂查询" class="headerlink" title="es复杂查询"></a>es复杂查询</h1><pre class="language-none"><code class="language-none"></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-StatementHandler解析</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>  在上篇文章中，我们学习了Executor执行器相关的操作，而接下来，我们接着来看Executor的下一步进行操作的对象：StatementHandler。</p><p>StatementHandler负责处理Mybatis与JDBC之间Statement的交互，而JDBC中的Statement，我们在学习JDBC的时候就了解过，就是负责与数据库进行交互的对象。这其中会涉及到一些对象，我们用到的时候再学习。首先，我们来看下StatementHandler的体系结构。</p><h5 id="StatementHandler"><a href="#StatementHandler" class="headerlink" title="StatementHandler"></a>StatementHandler</h5><p>StatementHandler接口的实现大致有四个，其中三个实现类都是和JDBC中的Statement响对应的：</p><blockquote><ol><li>SimpleStatementHandler，这个很简单了，就是对应我们JDBC中常用的Statement接口，用于简单SQL的处理；</li><li>PreparedStatementHandler，这个对应JDBC中的PreparedStatement，预编译SQL的接口；</li><li>CallableStatementHandler，这个对应JDBC中CallableStatement，用于执行存储过程相关的接口；</li><li>RoutingStatementHandler，这个接口是以上三个接口的路由，没有实际操作，只是负责上面三个StatementHandler的创建及调用。</li></ol></blockquote><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>接下来，我们来看下对应的源码实现，我们还是拿查询方法query来学习。</p><ol><li>首先，我们从DefaultSqlSession中调用Executor的query方法：</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 注意下这里的方法</span>      <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 调用Executor的query方法</span>      <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span>NO_RESULT_HANDLER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error querying database.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然后，我们进入BaseExecutor的query方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CacheKey</span> key <span class="token operator">=</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里涉及到了一个BoundSql 对象。BoundSql对象是用于存储sql语句及对应的参数相关的对象。<br> 然后我们接着看下一步：</p><pre class="language-php" data-language="php"><code class="language-php">@Override  <span class="token keyword">public</span> <span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">></span> <span class="token keyword">List</span><span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> CacheKey key<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> throws SQLException <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">List</span><span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">></span> <span class="token keyword">list</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      queryStack<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">list</span> <span class="token operator">=</span> resultHandler <span class="token operator">==</span> <span class="token constant">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">List</span><span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">></span><span class="token punctuation">)</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token constant">null</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">list</span> <span class="token operator">!=</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handleLocallyCachedOutputParameters</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> key<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 从数据库里查询数据</span>        <span class="token keyword">list</span> <span class="token operator">=</span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      queryStack<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>这里涉及到了对缓存的处理，等到学习Mybatis缓存的时候再一并解释，然后接着看queryFromDatabase方法，这里面调用了doQuery方法，我们跳转到SimpleExecutor执行器进行查看对应的doQuery方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">doQuery</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 这里，从Configuration中获取StatementHandler</span>      <span class="token class-name">StatementHandler</span> handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>从这里我们可以终于看到了StatementHandler的来源了，来自于Configuration对象的方法newStatementHandler，我们查看下该方法：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">public</span> StatementHandler <span class="token function">newStatementHandler</span><span class="token punctuation">(</span>Executor executor<span class="token punctuation">,</span> MappedStatement mappedStatement<span class="token punctuation">,</span> Object parameterObject<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// RoutingStatementHandler对象出来了</span>    StatementHandler statementHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RoutingStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    statementHandler <span class="token operator">=</span> <span class="token punctuation">(</span>StatementHandler<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>statementHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> statementHandler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里，我们终于看到了是如何获取StatementHandler的了，通过RoutingStatementHandler的构造方法来进行获取，我们再来看下RoutingStatementHandler的构造方法：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">RoutingStatementHandler</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> STATEMENT<span class="token punctuation">:</span>        <span class="token keyword">delegate</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SimpleStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> PREPARED<span class="token punctuation">:</span>        <span class="token keyword">delegate</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PreparedStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> CALLABLE<span class="token punctuation">:</span>        <span class="token keyword">delegate</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CallableStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Unknown statement type: "</span> <span class="token operator">+</span> ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>到了这一步就很明显了，根据statementType的类型来判断是哪一种StatementHandler的实现，并且RoutingStatementHandler维护了一个delegate对象，通过delegate对象来实现对实际Handler对象的调用。这里涉及到了一个对象MappedStatement。</p><h6 id="MappedStatement"><a href="#MappedStatement" class="headerlink" title="MappedStatement"></a>MappedStatement</h6><p>而所谓的MappedStatement对象就是对mapper.xml中的某个方法<code>select|update|delete|insert</code>的封装，如对于下面的<code>getAll</code>方法，就对应一个MappedStatement：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"getAll"</span> resultType<span class="token operator">=</span><span class="token string">"Student2"</span><span class="token operator">></span>        SELECT <span class="token operator">*</span> FROM Student    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span></code></pre><p>MappedStatement对象的默认的statementType是PREPARED，所以默认情况下我们所生成的StatementHandler就是PreparedStatementHandler对象。那为什么默认是PREPARED呢，当然，我们也可以从代码中找到原因。<br> 还记得我们最开始的DefaultSqlSession中的selectList方法中的：</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">MappedStatement ms &#x3D; configuration.getMappedStatement(statement);</code></pre><p>这里，我们获取到了MappedStatement，我们来简单看下获取的过程：</p><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">public</span> MappedStatement <span class="token function">getMappedStatement</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> MappedStatement <span class="token function">getMappedStatement</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> boolean validateIncompleteStatements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>validateIncompleteStatements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">buildAllStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> mappedStatements<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里，方法进入了buildAllStatements方法，我们看到buildAllStatements方法的如下代码：</p><pre class="language-css" data-language="css"><code class="language-css">incompleteStatements.<span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>.<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>.<span class="token function">parseStatementNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同样，我们进入parseStatementNode方法，然后进入：</p><pre class="language-css" data-language="css"><code class="language-css">builderAssistant.addMappedStatement</code></pre><p>然后进入：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">MappedStatement<span class="token punctuation">.</span>Builder statementBuilder <span class="token operator">=</span> <span class="token keyword">new</span> MappedStatement<span class="token punctuation">.</span>Builder<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>最终，兜兜转转进入MappedStatement的内部类Builder的构造方法：</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">mappedStatement.statementType &#x3D; StatementType.PREPARED;</code></pre><p>最终，我们看到Builder构造方法中设置了默认的statementType类型是PREPARED。当然，如果我们不想使用PREPARED，也可以自己配置，当然配置的方式就是在mapper.xml中对应的某个方法上添加对应属性即可：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"getAll"</span> resultType<span class="token operator">=</span><span class="token string">"Student2"</span> statementType<span class="token operator">=</span><span class="token string">"CALLABLE"</span><span class="token operator">></span>    SELECT <span class="token operator">*</span> FROM Student<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span></code></pre><hr><p>大致了解了MappedStatement，我们接着上面的SimpleExecutor中的doQuery方法来学习。</p><ol><li>获取到StatementHandler之后，首先进入prepareStatement方法，该方法就是为了获取Statement对象，并设置Statement对象中的参数：</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Statement</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token class-name">StatementHandler</span> handler<span class="token punctuation">,</span> <span class="token class-name">Log</span> statementLog<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Statement</span> stmt<span class="token punctuation">;</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span>statementLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    stmt <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handler<span class="token punctuation">.</span><span class="token function">parameterize</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> stmt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol><li>我们来看下StatementHandler的prepare和parameterize方法，prepare方法负责生成Statement实例对象，而parameterize方法用于处理Statement实例多对应的参数。<br> 我们大致看下prepare方法，首先进入BaseStatementHandler，查看prepare方法：</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Statement</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">Integer</span> transactionTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      statement <span class="token operator">=</span> <span class="token function">instantiateStatement</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setStatementTimeout</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> transactionTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setFetchSize</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> statement<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Error preparing statement.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>获取实例的方法instantiateStatement，我们可以看下它在PreparedStatementHandler的实现：</p><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">protected</span> Statement <span class="token function">instantiateStatement</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> throws SQLException <span class="token punctuation">&#123;</span>    String sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getKeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> instanceof Jdbc3KeyGenerator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> keyColumnNames <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getKeyColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>keyColumnNames <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> PreparedStatement<span class="token punctuation">.</span>RETURN_GENERATED_KEYS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> keyColumnNames<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ResultSet<span class="token punctuation">.</span>CONCUR_READ_ONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里就不多说了，就是通过Connection的方法来获取Statement实例对象而已。<br> 而对于parameterize而言，设置参数也很简单的：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parameterize</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    parameterHandler<span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>当然，感兴趣的童鞋也可以去看下ParameterHandler的实现DefaultParameterHandler中的实现：setParameters方法。</p><hr><p>然后，我们接着doQuery方法来看，SimpleExector的doQuery方法会调用StatementHandler的query方法，然后我们来看下PreparedStatementHandler的query实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span> statement<span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里又涉及到了另一个对象：ResultSetHandler。这个对象就比较简单了，就是将Statement实例执行之后返回的ResultSet结果集转换成我们需要的List结果集。而这里的PreparedStatement接口的实现则对应于JDBC中PreparedStatement类，这样，最终的调用就到了JDBC这边。</p><p>链接：<a href="https://www.jianshu.com/p/19686af69b0d">https://www.jianshu.com/p/19686af69b0d</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis源码解析-BoundSql</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><blockquote><ol><li>针对mybatis的配置文件的节点解析，比如<code>where</code>/<code>if</code>/<code>trim</code>的节点解析可见文章<a href="http://www.cnblogs.com/question-sky/p/6642263.html">Spring mybatis源码篇章-NodeHandler实现类具体解析保存Dynamic sql节点信息</a></li><li>针对mybatis配置文件的解析帮助类SqlSource[一般为DynamicSqlSource]的使用可见文章<a href="http://www.cnblogs.com/question-sky/p/6629177.html">Spring mybatis源码篇章-XMLLanguageDriver解析sql包装为SqlSource</a></li><li>对BoundSql对象的调用获取可见文章<a href="http://www.cnblogs.com/question-sky/p/7353418.html">Mybatis源码分析-BaseExecutor</a></li></ol></blockquote><p>本文将在上述的知识前提下展开对Sql语句的解析</p><h3 id="BoundSql的引用"><a href="#BoundSql的引用" class="headerlink" title="BoundSql的引用"></a>BoundSql的引用</h3><p>主要是通过<code>MappedStatement#getBoundSql()</code>方法调用获取的。我们可以简单跟踪下其中的源码，如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 通过SqlSource获取BoundSql对象</span>  <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 校验当前的sql语句有无绑定parameterMapping属性</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">></span></span> parameterMappings <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterMappings <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> parameterMappings<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    boundSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoundSql</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterMap<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// check for nested result maps in parameter mappings (issue #30)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ParameterMapping</span> pm <span class="token operator">:</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> rmId <span class="token operator">=</span> pm<span class="token punctuation">.</span><span class="token function">getResultMapId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rmId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ResultMap</span> rm <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getResultMap</span><span class="token punctuation">(</span>rmId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hasNestedResultMaps <span class="token operator">|=</span> rm<span class="token punctuation">.</span><span class="token function">hasNestedResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> boundSql<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="RawSqlSource-常用的mybatis解析sql帮助类"><a href="#RawSqlSource-常用的mybatis解析sql帮助类" class="headerlink" title="RawSqlSource-常用的mybatis解析sql帮助类"></a>RawSqlSource-常用的mybatis解析sql帮助类</h4><p>我们观察下其getBoundSql()方法，源码如下</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//此处的sqlSource为RawSqlSource的内部属性</span>  <span class="token keyword">return</span> sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我们看下sqlSource是如何生成的，由此观察其构造函数</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">RawSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> parameterType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 通过SqlSourceBuilder来创建sqlSource</span>    <span class="token class-name">SqlSourceBuilder</span> sqlSourceParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSourceBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> parameterType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">:</span> parameterType<span class="token punctuation">;</span>    sqlSource <span class="token operator">=</span> sqlSourceParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><blockquote><p><code>#&#123;&#125;</code>的使用这里稍微提下，一般的写法都为<code>&#123;name,jdbcType=String，mode=out,javaType=java.lang.String...&#125;</code>，其中jdbcType也可以不指定，系统会自动识别。上述的代码其实主要就是针对<code>#&#123;&#125;</code>字符内容的处理</p><p><strong>注意：${}这样的字符是通过DynamicSqlSource来完成解析的，具体的解析读者可自行分析</strong></p></blockquote><p>我们可以继续看下SqlSourceBuilder类是如何解析获取sql语句的</p><h4 id="SqlSourceBuilder-parse"><a href="#SqlSourceBuilder-parse" class="headerlink" title="SqlSourceBuilder#parse()"></a>SqlSourceBuilder#parse()</h4><p>直接上源码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SqlSource</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> originalSql<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> parameterType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> additionalParameters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 对#&#123;&#125;这样的字符串内容的解析处理类</span>    <span class="token class-name">ParameterMappingTokenHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterMappingTokenHandler</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> parameterType<span class="token punctuation">,</span> additionalParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">GenericTokenParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericTokenParser</span><span class="token punctuation">(</span><span class="token string">"#&#123;"</span><span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取真实的可执行性的sql语句</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>originalSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 包装成StaticSqlSource返回</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StaticSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><p>简单的看下ParameterMappingTokenHandler是如何解析的，其是<code>TokenHandler</code>接口的实现类，我们就关注实现方法handleToken</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 此处的作用就是对`#&#123;&#125;`节点中的key值保存映射，比如javaType/jdbcType/mode等信息，限于篇幅过长，读者可自行分析          </span>      parameterMappings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">buildParameterMapping</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 将`#&#123;&#125;`替换为?，即一般包装成`select * form test where name=? and age=?`预表达式语句</span>      <span class="token keyword">return</span> <span class="token string">"?"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><blockquote><p>上述主要通过<code>ParameterMappingTokenHandler</code>类来完成对<code>#&#123;&#125;</code>字符串的解析，其中的映射信息则保存至BoundSql的parameterMappings属性中</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><ol><li><strong>BoundSql语句的解析主要是通过对#{}字符的解析，将其替换成?。最后均包装成预表达式供PrepareStatement调用执行</strong></li><li><strong>#{}中的key属性以及相应的参数映射，比如javaType、jdbcType等信息均保存至BoundSql的parameterMappings属性中供最后的预表达式对象PrepareStatement赋值使用</strong></li></ol></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis插件原理</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p><em>Mybatis插件又称拦截器，本篇文章中出现的拦截器都表示插件</em></p></blockquote><p>Mybatis采用责任链模式，通过动态代理组织多个插件（拦截器），通过这些插件可以改变Mybatis的默认行为（诸如SQL重写之类的），由于插件会深入到Mybatis的核心，因此在编写自己的插件前最好了解下它的原理，以便写出安全高效的插件。</p><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ul><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul><p>总体概括为：</p><ul><li>拦截执行器的方法</li><li>拦截参数的处理</li><li>拦截结果集的处理</li><li>拦截Sql语法构建的处理</li></ul><p><em>Mybatis是通过动态代理的方式实现拦截的，阅读此篇文章需要先对Java的动态代理机制有所了解。可以参考博客《彻底理解java动态代理》</em></p><h4 id="Mybatis四大接口"><a href="#Mybatis四大接口" class="headerlink" title="Mybatis四大接口"></a>Mybatis四大接口</h4><p>竟然Mybatis是对四大接口进行拦截的，那我们药先要知道Mybatis的四大接口对象 Executor, StatementHandler, ResultSetHandler, ParameterHandler。</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkq2ri7b9tj309g0cmwer.jpg"></p><p>上图Mybatis框架的整个执行过程。Mybatis插件能够对则四大对象进行拦截，可以包含到了Mybatis一次会议的所有操作。可见Mybatis的的插件很强大。</p><ol><li>Executor是 Mybatis的内部执行器，它负责调用StatementHandler操作数据库，并把结果集通过 ResultSetHandler进行自动映射，另外，他还处理了二级缓存的操作。从这里可以看出，我们也是可以通过插件来实现自定义的二级缓存的。</li><li>StatementHandler是Mybatis直接和数据库执行sql脚本的对象。另外它也实现了Mybatis的一级缓存。这里，我们可以使用插件来实现对一级缓存的操作(禁用等等)。</li><li>ParameterHandler是Mybatis实现Sql入参设置的对象。插件可以改变我们Sql的参数默认设置。</li><li>ResultSetHandler是Mybatis把ResultSet集合映射成POJO的接口对象。我们可以定义插件对Mybatis的结果集自动映射进行修改。</li></ol><h4 id="插件Interceptor"><a href="#插件Interceptor" class="headerlink" title="插件Interceptor"></a>插件Interceptor</h4><p>Mybatis的插件实现要实现Interceptor接口，我们看下这个接口定义的方法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>          <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个接口只声明了三个方法。</p><ul><li>setProperties方法是在Mybatis进行配置插件的时候可以配置自定义相关属性，即：接口实现对象的参数配置</li><li>plugin方法是插件用于封装目标对象的，通过该方法我们可以返回目标对象本身，也可以返回一个它的代理，可以决定是否要进行拦截进而决定要返回一个什么样的目标对象，官方提供了示例：<em>return Plugin.wrap(target, this);</em> </li><li>intercept方法就是要进行拦截的时候要执行的方法</li></ul><p>理解这个接口的定义，先要知道java动态代理机制。plugin接口即返回参数target对象(Executor/ParameterHandler/ResultSetHander/StatementHandler)的代理对象。在调用对应对象的接口的时候，可以进行拦截并处理。</p><h4 id="Mybatis四大接口对象创建方法"><a href="#Mybatis四大接口对象创建方法" class="headerlink" title="Mybatis四大接口对象创建方法"></a>Mybatis四大接口对象创建方法</h4><p>Mybatis的插件是采用对四大接口的对象生成动态代理对象的方法来实现的。那么现在我们看下Mybatis是怎么创建这四大接口对象的。</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">Executor</span> <span class="token function">newExecutor</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> transaction<span class="token punctuation">,</span> <span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//确保ExecutorType不为空(defaultExecutorType有可能为空)</span>   executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> defaultExecutorType <span class="token punctuation">:</span> executorType<span class="token punctuation">;</span>   executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> ExecutorType<span class="token punctuation">.</span>SIMPLE <span class="token punctuation">:</span> executorType<span class="token punctuation">;</span>   <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>BATCH <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>REUSE <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CachingExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   executor <span class="token operator">=</span> <span class="token punctuation">(</span>Executor<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> executor<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name">StatementHandler</span> <span class="token function">newStatementHandler</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">StatementHandler</span> statementHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RoutingStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>   statementHandler <span class="token operator">=</span> <span class="token punctuation">(</span>StatementHandler<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>statementHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> statementHandler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name">ParameterHandler</span> <span class="token function">newParameterHandler</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">ParameterHandler</span> parameterHandler <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createParameterHandler</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>   parameterHandler <span class="token operator">=</span> <span class="token punctuation">(</span>ParameterHandler<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>parameterHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> parameterHandler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name">ResultSetHandler</span> <span class="token function">newResultSetHandler</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ParameterHandler</span> parameterHandler<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">ResultSetHandler</span> resultSetHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DefaultResultSetHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> parameterHandler<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>   resultSetHandler <span class="token operator">=</span> <span class="token punctuation">(</span>ResultSetHandler<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>resultSetHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>查看源码可以发现， Mybatis框架在创建好这四大接口对象的实例后，都会调用<strong>InterceptorChain.pluginAll()**方法。InterceptorChain对象是插件执行链对象，看源码就知道里面维护了Mybatis配置的所有插件(**Interceptor</strong>)对象。</p><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// target  --> Executor/ParameterHandler/ResultSetHander/StatementHandler</span><span class="token keyword">public</span> Object <span class="token function">pluginAll</span><span class="token punctuation">(</span><span class="token parameter">Object target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Interceptor interceptor <span class="token operator">:</span> interceptors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      target <span class="token operator">=</span> interceptor<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>其实就是安顺序执行我们插件的plugin方法,一层一层返回我们原对象(Executor/ParameterHandler/ResultSetHander/StatementHandler)的代理对象。当我们调用四大接口对象的方法时候，实际上是调用代理对象的响应方法，代理对象又会调用十大接口对象的实例。</p><h4 id="Plugin对象"><a href="#Plugin对象" class="headerlink" title="Plugin对象"></a>Plugin对象</h4><p>我们知道，官方推荐插件实现plugin方法为：<strong>Plugin.wrap(target, this);</strong></p><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token parameter">Object target<span class="token punctuation">,</span> Interceptor interceptor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 获取插件的Intercepts注解</span>   Map<span class="token operator">&lt;</span>Class<span class="token prolog">&lt;?>, Set&lt;Method>> signatureMap = getSignatureMap(interceptor);   Class&lt;?></span> <span class="token keyword">type</span> <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token function">getAllInterfaces</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">,</span> signatureMap<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> interceptor<span class="token punctuation">,</span> signatureMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个方法其实是Mybatis简化我们插件实现的工具方法。其实就是根据当前拦截的对象创建了一个动态代理对象。代理对象的InvocationHandler处理器为新建的Plugin对象。</p><h4 id="插件配置注解-Intercepts"><a href="#插件配置注解-Intercepts" class="headerlink" title="插件配置注解@Intercepts"></a>插件配置注解@Intercepts</h4><p>Mybatis的插件都要有Intercepts注解来指定要拦截哪个对象的哪个方法。我们知道，Plugin.warp方法会返回四大接口对象的代理对象(通过new Plugin()创建的IvocationHandler处理器)，会拦截所有的执行方法。在代理对象执行对应方法的时候，会调用InvocationHandler处理器的invoke方法。Mybatis中利用了注解的方式配置指定拦截哪些方法。具体如下：</p><pre class="language-dart" data-language="dart"><code class="language-dart">public Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws Throwable <span class="token punctuation">&#123;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      Set<span class="token operator">&lt;</span>Method<span class="token operator">></span> methods <span class="token operator">=</span> signatureMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>methods <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> methods<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> interceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Invocation</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> ExceptionUtil<span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看到，只有通过Intercepts注解指定的方法才会执行我们自定义插件的intercept方法。未通过Intercepts注解指定的将不会执行我们的intercept方法。</p><h4 id="官方插件开发方式"><a href="#官方插件开发方式" class="headerlink" title="官方插件开发方式"></a>官方插件开发方式</h4><pre class="language-tsx" data-language="tsx"><code class="language-tsx">@<span class="token function">Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>@<span class="token function">Signature</span><span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">=</span> Executor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>        args <span class="token operator">=</span> <span class="token punctuation">&#123;</span>MappedStatement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> RowBounds<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ResultHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> throws Throwable <span class="token punctuation">&#123;</span>     Object target <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//被代理对象</span>     Method method <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//代理方法</span>     Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方法参数</span>     <span class="token comment">// do something ...... 方法拦截前执行代码块</span>     Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// do something .......方法拦截后执行代码块</span>     <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> Object <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token parameter">Object target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> Plugin<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上就是Mybatis官方推荐的插件实现的方法，通过Plugin对象创建被代理对象的动态代理对象。可以发现，Mybatis的插件开发还是很简单的。</p><h4 id="自定义开发方式"><a href="#自定义开发方式" class="headerlink" title="自定义开发方式"></a>自定义开发方式</h4><p>Mybatis的插件开发通过内部提供的Plugin对象可以很简单的开发。只有理解了插件实现原理，对应不采用Plugin对象我们一样可以自己实现插件的开发。下面是我个人理解之后的自己实现的一种方式。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> target <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//被代理对象</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//代理方法</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方法参数</span>        <span class="token comment">// do something ...... 方法拦截前执行代码块</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// do something .......方法拦截后执行代码块</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Interceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Invocation</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>当然，Mybatis插件的那这个时候Intercepts的注解起不到作用了。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>我们在MyBatis配置了一个插件，在运行发生了什么</p><ol><li>所有可能被拦截的处理类都会生成一个代理</li><li>处理类代理在执行对应方法时，判断要不要执行插件中的拦截方法</li><li>执行插接中的拦截方法后，推进目标的执行</li></ol><p>如果有N个插件，就有N个代理，每个代理都要执行上面的逻辑。这里面的层层代理要多次生成动态代理，是比较影响性能的。虽然能指定插件拦截的位置，但这个是在执行方法时动态判断，初始化的时候就是简单的把插件包装到了所有可以拦截的地方。</p><p>因此，在编写插件时需注意以下几个原则：</p><ul><li>不编写不必要的插件；</li><li>实现plugin方法时判断一下目标类型，是本插件要拦截的对象才执行Plugin.wrap方法，否者直接返回目标本省，这样可以减少目标被代理的次数。</li></ul><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 假如我们只要拦截Executor对象，那么我们应该这么做</span><span class="token keyword">public</span> Object <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>target instanceof Executor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Plugin<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> target<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>Mybatis插件很强大，可以对Mybatis框架进行很大的扩展。当然，如果你不理解Mybatis插件的原理，开发起来只能是模拟两可。在实际开发过程中，我们可以参考别人写的插件。下面是一个Mybatis分页的插件，可以为以后开发做参考。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Mybatis - 通用分页插件（如果开启二级缓存需要注意） */</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">StatementHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"prepare"</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Connection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">ResultSetHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"handleResultSets"</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Statement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Log4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageHelper</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span><span class="token punctuation">></span></span> localPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 开始分页     *     * @param pageNum     * @param pageSize     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNum<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        localPage<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 结束分页并返回结果，该方法必须被调用，否则localPage会一直保存下去，直到下一次startPage     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Page</span> <span class="token function">endPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Page</span> page <span class="token operator">=</span> localPage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localPage<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>localPage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">StatementHandler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StatementHandler</span> statementHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StatementHandler</span><span class="token punctuation">)</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MetaObject</span> metaStatementHandler <span class="token operator">=</span> <span class="token class-name">SystemMetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>statementHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 分离代理对象链(由于目标类可能被多个插件拦截，从而形成多次代理，通过下面的两次循环</span>            <span class="token comment">// 可以分离出最原始的的目标类)</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>metaStatementHandler<span class="token punctuation">.</span><span class="token function">hasGetter</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> object <span class="token operator">=</span> metaStatementHandler<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                metaStatementHandler <span class="token operator">=</span> <span class="token class-name">SystemMetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 分离最后一个代理对象的目标类</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>metaStatementHandler<span class="token punctuation">.</span><span class="token function">hasGetter</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> object <span class="token operator">=</span> metaStatementHandler<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                metaStatementHandler <span class="token operator">=</span> <span class="token class-name">SystemMetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">MappedStatement</span> mappedStatement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedStatement</span><span class="token punctuation">)</span> metaStatementHandler<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"delegate.mappedStatement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//分页信息if (localPage.get() != null) &#123;</span>            <span class="token class-name">Page</span> page <span class="token operator">=</span> localPage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BoundSql</span><span class="token punctuation">)</span> metaStatementHandler<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"delegate.boundSql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 分页参数作为参数对象parameterObject的一个属性</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 重写sql</span>            <span class="token class-name">String</span> pageSql <span class="token operator">=</span> <span class="token function">buildPageSql</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//重写分页sql</span>            metaStatementHandler<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"delegate.boundSql.sql"</span><span class="token punctuation">,</span> pageSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span><span class="token punctuation">)</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 重设分页参数里的总页数等</span>            <span class="token function">setPageParameter</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> connection<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> boundSql<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将执行权交给下一个插件</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ResultSetHandler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Page</span> page <span class="token operator">=</span> localPage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            page<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 只拦截这两种类型的     * &lt;br>StatementHandler     * &lt;br>ResultSetHandler     *     * @param target     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">StatementHandler</span> <span class="token operator">||</span> target <span class="token keyword">instanceof</span> <span class="token class-name">ResultSetHandler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> target<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 修改原SQL为分页SQL     *     * @param sql     * @param page     * @return     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildPageSql</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Page</span> page<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> pageSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pageSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"select * from ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pageSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        pageSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" ) temp limit "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getStartRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pageSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" , "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pageSql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取总记录数     *     * @param sql     * @param connection     * @param mappedStatement     * @param boundSql     * @param page     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setPageParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span>                                  <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">,</span> <span class="token class-name">Page</span> page<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 记录总记录数</span>        <span class="token class-name">String</span> countSql <span class="token operator">=</span> <span class="token string">"select count(0) from ("</span> <span class="token operator">+</span> sql <span class="token operator">+</span> <span class="token string">") temp"</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> countStmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            countStmt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>countSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BoundSql</span> countBS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoundSql</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> countSql<span class="token punctuation">,</span>                    boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setParameters</span><span class="token punctuation">(</span>countStmt<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> countBS<span class="token punctuation">,</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> countStmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> totalCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                totalCount <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            page<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>totalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> totalPage <span class="token operator">=</span> totalCount <span class="token operator">/</span> page<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>totalCount <span class="token operator">%</span> page<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            page<span class="token punctuation">.</span><span class="token function">setPages</span><span class="token punctuation">(</span>totalPage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Ignore this exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Ignore this exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                countStmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Ignore this exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 代入参数值     *     * @param ps     * @param mappedStatement     * @param boundSql     * @param parameterObject     * @throws SQLException     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">,</span>                               <span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ParameterHandler</span> parameterHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultParameterHandler</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        parameterHandler<span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Data</span> <span class="token comment">//采用lombok插件编译</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> pageNum<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> startRow<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> endRow<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> total<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> pages<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> result<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNum<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pageNum <span class="token operator">=</span> pageNum<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>startRow <span class="token operator">=</span> pageNum <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>pageNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>endRow <span class="token operator">=</span> pageNum <span class="token operator">*</span> pageSize<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react Hook之useMemo、useCallback及memo</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="react-Hook之useMemo、useCallback及memo"><a href="#react-Hook之useMemo、useCallback及memo" class="headerlink" title="react Hook之useMemo、useCallback及memo"></a>react Hook之useMemo、useCallback及memo</h1><p><strong>注意：hooks只能在函数(无状态组件)中使用</strong></p><p>useMome、useCallback用法都差不多，都会在第一次渲染的时候执行，之后会在其依赖的变量发生改变时再次执行，并且这两个hooks都返回缓存的值，useMemo返回缓存的变量，useCallback返回缓存的函数。</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>fnM<span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fnA <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>fnB<span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>复制代码</code></pre><h1 id="1、memo的应用"><a href="#1、memo的应用" class="headerlink" title="1、memo的应用"></a>1、memo的应用</h1><p>React.memo 为高阶组件。它与React.PureComponent非常相似，但它适用于函数组件，但不适用于 class 组件。</p><p>默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现。这与shouldComponentUpdate 方法的返回值相反。</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 使用 props 渲染 */</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">areEqual</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/*  如果把 nextProps 传入 render 方法的返回结果与  将 prevProps 传入 render 方法的返回结果一致则返回 true，  否则返回 false  */</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">,</span> areEqual<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当父组件引入子组件的情况下，往往会造成组件之间的一些不必要的浪费，下面我们通过例子来了解一下场景</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Child</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件?'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">我是一个子组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">Page</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">加1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count:</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>复制代码</code></pre><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkoj5993qlj30hs0e474x.jpg"></p><p>每次父组件更新count，子组件都会更新。如下版本使用memo，count变化子组件没有更新</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Child</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件?'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">我是一个子组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ChildMemo <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Page</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">加1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count:</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildMemo</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>复制代码</code></pre><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gkoj5i5mqlj30ru0iutap.jpg"></p><h1 id="2、使用useCallback"><a href="#2、使用useCallback" class="headerlink" title="2、使用useCallback"></a>2、使用useCallback</h1><p>当父组件传递状态给子组件的时候，memo好像没什么效果，子组件还是执行了，这时候我们就要引入hooks的useCallback、useMemo这两个钩子了。</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//子组件会有不必要渲染的例子</span><span class="token keyword">interface</span> <span class="token class-name">ChildProps</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> string<span class="token punctuation">;</span>    onClick<span class="token operator">:</span> Function<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> onClick<span class="token punctuation">&#125;</span><span class="token operator">:</span> ChildProps<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">JSX</span><span class="token punctuation">.</span><span class="token parameter">Element</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件?'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">我是一个子组件，父级传过来的数据：</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token function">onClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'新的子组件name'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">改变name</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ChildMemo <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Page</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Child组件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">加1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count:</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildMemo</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">newName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setName</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>复制代码</code></pre><p>在上面代码基础上，父级调用子级时，在onClick参数上加上useCallback，参数为[]，则第一次初始化结束后，不在改变。</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//子组件没有必要渲染的例子</span><span class="token keyword">interface</span> <span class="token class-name">ChildProps</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> string<span class="token punctuation">;</span>    onClick<span class="token operator">:</span> Function<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> onClick<span class="token punctuation">&#125;</span><span class="token operator">:</span> ChildProps<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">JSX</span><span class="token punctuation">.</span><span class="token parameter">Element</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件?'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">我是一个子组件，父级传过来的数据：</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token function">onClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'新的子组件name'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">改变name</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ChildMemo <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Page</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Child组件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">加1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count:</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildMemo</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setName</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span><span class="token comment">/* useCallback((newName: string) => setName(newName),[]) */</span><span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span><span class="token comment">/* 这里使用了useCallback优化了传递给子组件的函数，只初始化一次这个函数，下次不产生新的函数        &lt;/>    )&#125;复制代码</span></code></pre><h1 id="3、使用useMemo"><a href="#3、使用useMemo" class="headerlink" title="3、使用useMemo"></a>3、使用useMemo</h1><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//子组件会有不必要渲染的例子</span><span class="token keyword">interface</span> <span class="token class-name">ChildProps</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> string<span class="token punctuation">;</span> color<span class="token operator">:</span> string <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    onClick<span class="token operator">:</span> Function<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> onClick<span class="token punctuation">&#125;</span><span class="token operator">:</span> ChildProps<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">JSX</span><span class="token punctuation">.</span><span class="token parameter">Element</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件?'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> color<span class="token operator">:</span> name<span class="token punctuation">.</span>color <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">我是一个子组件，父级传过来的数据：</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token function">onClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'新的子组件name'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">改变name</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ChildMemo <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Page</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Child组件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">加1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count:</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildMemo</span></span>                 <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> color<span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'red'</span> <span class="token operator">:</span> <span class="token string">'green'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>                 <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setName</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></span>            <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>复制代码</code></pre><p>更新属性name为对象类型，这时子组件还是一样的执行了，在父组件更新其它状态的情况下，子组件的name对象属性会一直发生重新渲染改变，从而导致一直执行,这也是不必要的性能浪费。</p><p>解决这个问题，使用name参数使用useMemo，依赖于State.name数据的变化进行更新</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">interface</span> <span class="token class-name">ChildProps</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> string<span class="token punctuation">;</span> color<span class="token operator">:</span> string <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    onClick<span class="token operator">:</span> Function<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> onClick<span class="token punctuation">&#125;</span><span class="token operator">:</span> ChildProps<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">JSX</span><span class="token punctuation">.</span><span class="token parameter">Element</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子组件?'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> color<span class="token operator">:</span> name<span class="token punctuation">.</span>color <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">我是一个子组件，父级传过来的数据：</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token function">onClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'新的子组件name'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">改变name</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ChildMemo <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Page</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'Child组件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">加1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count:</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">            &lt;ChildMemo                 //使用useMemo，返回一个和原本一样的对象，第二个参数是依赖性，当name发生改变的时候，才产生一个新的对象                name=</span><span class="token punctuation">&#123;</span>                    <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                         name<span class="token punctuation">,</span>                         color<span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'red'</span> <span class="token operator">:</span> <span class="token string">'green'</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token plain-text">                 onClick=</span><span class="token punctuation">&#123;</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newName<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setName</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token plain-text">                </span><span class="token punctuation">&#123;</span><span class="token comment">/* useCallback((newName: string) => setName(newName),[]) */</span><span class="token punctuation">&#125;</span><span class="token plain-text">                </span><span class="token punctuation">&#123;</span><span class="token comment">/* 这里使用了useCallback优化了传递给子组件的函数，只初始化一次这个函数，下次不产生新的函数            />        &lt;/>    )&#125;复制代码</span></code></pre><h1 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h1><p>在子组件不需要父组件的值和函数的情况下，只需要使用memo函数包裹子组件即可。而在使用函数的情况，需要考虑有没有函数传递给子组件使用useCallback。而在值有所依赖的项，并且是对象和数组等值的时候而使用useMemo（当返回的是原始数据类型如字符串、数字、布尔值，就不要使用useMemo了）。不要盲目使用这些hooks。</p><h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><p><a href="https://zh-hans.reactjs.org/blog/2020/05/22/react-hooks.html">React Hook 最佳实践</a></p><p><a href="https://zh-hans.reactjs.org/docs/react-api.html#reactmemo">React.memo</a></p><p><a href="https://blog.csdn.net/weixin_43902189/article/details/99689963">React进阶用法和hooks的个人使用见解(Typescript版本) - 3.useCallback+useMemo+memo性能优化</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习React Hooks系列 - useMemo</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="学习React-Hooks系列-useMemo"><a href="#学习React-Hooks系列-useMemo" class="headerlink" title="学习React Hooks系列 - useMemo"></a>学习React Hooks系列 - useMemo</h1><p>一个场景：父组件改变自身数据，不涉及子组件数据变化，就会在父组件每次render时都渲染子组件。</p><h2 id="1、了解一下React-PureComponent组件"><a href="#1、了解一下React-PureComponent组件" class="headerlink" title="1、了解一下React.PureComponent组件"></a>1、了解一下React.PureComponent组件</h2><p>先说一下<code>shouldComponentUpdate</code>这个生命周期函数，这个函数是通过返回true或false来控制组件是否渲染的，可以有效的避免组件的一些无意义或者重复的渲染，和避免不必要的重复计算，减少资源浪费，提高性能。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value <span class="token operator">===</span> nextProps<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 判断props接收的参数value有无变化，无变化则返回false，组件不渲染</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>类组件由继承<code>Component</code>组件改为继承<code>PureComponent</code>组件，就不用再写<code>shouldComponentUpdate</code>生命周期函数判断参数有无变化来控制组件的渲染。</p><p>子组件继承<code>PureComponent</code>组件，会判断传进的参有没有变化，无变化则阻止子组件渲染。</p><p><code>PureComponent</code>组件的不足：</p><ul><li>只提供了简单的对比算法。</li><li>复杂的数据结构传值，<code>PureComponent</code>组件做不出正确的判断。</li><li>函数组件不能继承<code>PureComponent</code>组件。</li></ul><h2 id="2、了解一下React-memo"><a href="#2、了解一下React-memo" class="headerlink" title="2、了解一下React.memo()"></a>2、了解一下React.memo()</h2><p>React 16.6.0 正式发布React.memo()，React.memo()是一个高阶组件。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> memo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Child<span class="token punctuation">;</span>复制代码</code></pre><p><code>React.memo()</code>和<code>React.PureComponent</code>组件异同：</p><p>异：React.memo()是<code>函数组件</code>，React.PureComponent是<code>类组件</code>。</p><p>同：都是对接收的props参数进行浅比较，解决组件在运行时的效率问题，优化组件的重渲染行为。</p><h2 id="3、再说说useMemo"><a href="#3、再说说useMemo" class="headerlink" title="3、再说说useMemo"></a>3、再说说useMemo</h2><p>React 16.8.0中发布useMemo()。</p><p><code>React.memo()</code>是判断一个函数组件的渲染是否重复执行。</p><p><code>useMemo()</code>是定义一段函数逻辑是否重复执行。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> memo<span class="token punctuation">,</span> useState<span class="token punctuation">,</span> useMemo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> increase <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>Child value<span class="token operator">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button                type<span class="token operator">=</span><span class="token string">"button"</span>                onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token function">setValue</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>            <span class="token operator">></span>                value<span class="token operator">:</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>increase<span class="token operator">:</span><span class="token punctuation">&#123;</span>increase <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Child render'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>value<span class="token operator">:</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>复制代码</code></pre><h3 id="useMemo-依赖value值定义参数increase："><a href="#useMemo-依赖value值定义参数increase：" class="headerlink" title="useMemo()依赖value值定义参数increase："></a>useMemo()依赖value值定义参数increase：</h3><pre class="language-none"><code class="language-none">const increase &#x3D; useMemo(() &#x3D;&gt; &#123;    if(value &gt; 2) return value + 1;&#125;, [value]);复制代码</code></pre><p>value的初始值为0，当value的值递增到大于2时，increase才会开始被赋值，且被赋值后increase永远比value大1</p><h3 id="子组件Child："><a href="#子组件Child：" class="headerlink" title="子组件Child："></a>子组件Child：</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Child render'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>value<span class="token operator">:</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>复制代码</code></pre><ul><li>memo组件判断props传的值是否更新，若有更新则子组件显示的value值更新，且控制台会打印 Child render</li><li>为了能明显看到memo的作用，可以把传给Child组件的值改为increase，<code>&lt;Child value=&#123;increase&#125; /&gt;</code></li><li>increase为0时，Child组件不会渲染。</li><li>点击button递增value，当<code>value &gt; 2</code>时 ，increase参数更新，所以子组件Child会渲染，控制台会打印出 Child render</li></ul><h2 id="4、useMemo-的参数"><a href="#4、useMemo-的参数" class="headerlink" title="4、useMemo()的参数"></a>4、useMemo()的参数</h2><p>用过useEffect()大概会知道useEffect()的第二个参数的作用。useMemo()和useEffect()是一样的。</p><p>useEffect()第一个参数是执行函数，那……第二个参数：</p><ul><li><p>若第二个参数为空，则每次渲染组件该段逻辑都会被执行，就不会根据传入的属性值来判断逻辑是否重新执行，这样写useMemo()也就毫无意义。</p></li><li><p>若第二个参数为空数组，则只会在渲染组件时执行一次，传入的属性值的更新也不会有作用。</p></li><li><p>所以useMemo()的第二个参数，数组中需要传入依赖的参数。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// to do somthing...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>复制代码</code></pre></li></ul><h2 id="5、useMemo-的执行时间"><a href="#5、useMemo-的执行时间" class="headerlink" title="5、useMemo()的执行时间"></a>5、useMemo()的执行时间</h2><p><code>useMemo()</code>是需要有返回值的，并且返回值是直接参与渲染，因此useMemo()是在<code>渲染期间</code>完成的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习React Hooks系列-useRef</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="useRef使用总结"><a href="#useRef使用总结" class="headerlink" title="useRef使用总结"></a>useRef使用总结</h1><h2 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h2><h3 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h3><ol><li>useRef是一个方法，且useRef返回一个可变的ref对象（对象！！！）</li><li>initialValue被赋值给其返回值的.current对象</li><li>可以保存任何类型的值:dom、对象等任何可辨值</li><li>ref对象与自建一个{current：‘’}对象的区别是：useRef会在每次渲染时返回同一个ref对象，即返回的ref对象在组件的整个生命周期内保持不变。自建对象每次渲染时都建立一个新的。</li><li>ref对象的值发生改变之后，不会触发组件重新渲染。有一个窍门，把它的改边动作放到useState()之前。</li><li>本质上，useRef就是一个其.current属性保存着一个可变值“盒子”。目前我用到的是pageRef和sortRef分别用来保存分页信息和排序信息。</li></ol><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  useRef<span class="token punctuation">,</span>  useEffect<span class="token punctuation">,</span>  useImperativeHandle<span class="token punctuation">,</span>  forwardRef<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">RefDemo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> domRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> childRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ref:deom-init"</span><span class="token punctuation">,</span> domRef<span class="token punctuation">,</span> domRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ref:child-init"</span><span class="token punctuation">,</span> childRef<span class="token punctuation">,</span> childRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">showChild</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ref:child"</span><span class="token punctuation">,</span> childRef<span class="token punctuation">,</span> childRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    childRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> margin<span class="token operator">:</span> <span class="token string">"100px"</span><span class="token punctuation">,</span> border<span class="token operator">:</span> <span class="token string">"2px dashed"</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token string">"20px"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">这是外层组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ref:deom"</span><span class="token punctuation">,</span> domRef<span class="token punctuation">,</span> domRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>          domRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          domRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'hh'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">></span></span><span class="token plain-text">       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token plain-text">这是一个dom节点</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>domRef<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>showChild<span class="token punctuation">&#125;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> marginTop<span class="token operator">:</span> <span class="token string">"20px"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        这是子组件      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> border<span class="token operator">:</span> <span class="token string">"1px solid"</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token string">"10px"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>childRef<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> RefDemo<span class="token punctuation">;</span></code></pre><h2 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h2><h3 id="知识点总结-1"><a href="#知识点总结-1" class="headerlink" title="知识点总结"></a>知识点总结</h3><ol><li>useImperativeHandle(ref,createHandle,[deps])可以自定义暴露给父组件的实例值。如果不使用，父组件的ref(chidlRef)访问不到任何值（childRef.current==null）</li><li>useImperativeHandle应该与forwradRef搭配使用</li><li>React.forwardRef会创建一个React组件，这个组件能够将其接受的ref属性转发到其组件树下的另一个组件中。</li><li>React.forward接受渲染函数作为参数，React将使用prop和ref作为参数来调用此函数。</li></ol><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    say<span class="token operator">:</span> sayHello<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello,我是子组件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">子组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token parameter">等同于</span> <span class="token operator">=></span><span class="token keyword">const</span> <span class="token function-variable function">ChildComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    say<span class="token operator">:</span> sayHello<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello,我是子组件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">子组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>ChildComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>优雅管理代码提交</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、优雅的提交"><a href="#一、优雅的提交" class="headerlink" title="一、优雅的提交"></a>一、优雅的提交</h3><p><strong>1.commitizen &amp;&amp; cz-lerna-changelog</strong></p><p>commitizen 是用来格式化 git commit message 的工具，它提供了一种问询式的方式去获取所需的提交信息。</p><p>cz-lerna-changelog 是专门为 Lerna 项目量身定制的提交规范，在问询的过程，会有类似影响哪些 package 的选择。如下：</p><p><img src="https://oscimg.oschina.net/oscnet/9d015c71c471f45cd19787caf1874251764.jpg" alt="img"></p><p>我们使用 commitizen 和 cz-lerna-changelog 来规范提交，为后面自动生成日志作好准备。</p><p>因为这是整个工程的开发依赖，所以在根目录安装：</p><pre class="language-none"><code class="language-none">npm i -D commitizennpm i -D cz-lerna-changelog</code></pre><p>安装完成后，在 package.json 中增加 config 字段，把 cz-lerna-changelog 配置给 commitizen。同时因为commitizen不是全局安全的，所以需要添加 scripts 脚本来执行 git-cz</p><pre class="language-none"><code class="language-none">&#123;  &quot;name&quot;: &quot;root&quot;,  &quot;private&quot;: true,  &quot;scripts&quot;: &#123;    &quot;c&quot;: &quot;git-cz&quot;  &#125;,  &quot;config&quot;: &#123;    &quot;commitizen&quot;: &#123;      &quot;path&quot;: &quot;.&#x2F;node_modules&#x2F;cz-lerna-changelog&quot;    &#125;  &#125;,  &quot;devDependencies&quot;: &#123;    &quot;commitizen&quot;: &quot;^3.1.1&quot;,    &quot;cz-lerna-changelog&quot;: &quot;^2.0.2&quot;,    &quot;lerna&quot;: &quot;^3.15.0&quot;  &#125;&#125;</code></pre><p>之后在常规的开发中就可以使用 npm run c 来根据提示一步一步输入，来完成代码的提交。</p><p><img src="https://oscimg.oschina.net/oscnet/f9f887ebf3afd9be0cea80d5213d31d066d.jpg" alt="img"></p><p><strong>2.commitlint &amp;&amp; husky</strong></p><p>上面我们使用了 commitizen 来规范提交，但这个要靠开发自觉使用 npm run c 。万一忘记了，或者直接使用 git commit 提交怎么办？答案就是在提交时对提交信息进行校验，如果不符合要求就不让提交，并提示。校验的工作由 commitlint 来完成，校验的时机则由 husky 来指定。husky 继承了 Git 下所有的钩子，在触发钩子的时候，husky 可以阻止不合法的 commit,push 等等。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 安装 commitlint 以及要遵守的规范npm i -D @commitlint&#x2F;cli @commitlint&#x2F;config-conventional&#x2F;&#x2F; 在工程根目录为 commitlint 增加配置文件 &#x2F;&#x2F; commitlint.config.js 为commitlint 指定相应的规范module.exports &#x3D; &#123; extends: [&#39;@commitlint&#x2F;config-conventional&#39;] &#125;&#x2F;&#x2F; 安装 huskynpm i -D husky&#x2F;&#x2F; 在 package.json 中增加如下配置&quot;husky&quot;: &#123;  &quot;hooks&quot;: &#123;    &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;  &#125;&#125;</code></pre><p>“commit-msg”是git提交时校验提交信息的钩子，当触发时便会使用 commitlit 来校验。安装配置完成后，想通过 git commit 或者其它第三方工具提交时，只要提交信息不符合规范就无法提交。从而约束开发者使用 npm run c 来提交。</p><p><strong>3.standardjs &amp;&amp; lint-staged</strong></p><p>除了规范提交信息，代码本身肯定也少了靠规范来统一风格。</p><p>standardjs就是完整的一套 JavaScript 代码规范，自带 linter &amp; 代码自动修正。它无需配置，自动格式化代码并修正，提前发现风格以及程序问题。</p><p>lint-staged staged 是 Git 里的概念，表示暂存区，lint-staged 表示只检查并矫正暂存区中的文件。一来提高校验效率，二来可以为老的项目带去巨大的方便。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 安装npm i -D standard lint-staged&#x2F;&#x2F; package.json&#123;  &quot;name&quot;: &quot;root&quot;,  &quot;private&quot;: true,  &quot;scripts&quot;: &#123;    &quot;c&quot;: &quot;git-cz&quot;  &#125;,  &quot;config&quot;: &#123;    &quot;commitizen&quot;: &#123;      &quot;path&quot;: &quot;.&#x2F;node_modules&#x2F;cz-lerna-changelog&quot;    &#125;  &#125;,  &quot;husky&quot;: &#123;    &quot;hooks&quot;: &#123;      &quot;pre-commit&quot;: &quot;lint-staged&quot;,      &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;    &#125;  &#125;,  &quot;lint-staged&quot;: &#123;    &quot;*.js&quot;: [      &quot;standard --fix&quot;,      &quot;git add&quot;    ]  &#125;,  &quot;devDependencies&quot;: &#123;    &quot;@commitlint&#x2F;cli&quot;: &quot;^8.1.0&quot;,    &quot;@commitlint&#x2F;config-conventional&quot;: &quot;^8.1.0&quot;,    &quot;commitizen&quot;: &quot;^3.1.1&quot;,    &quot;cz-lerna-changelog&quot;: &quot;^2.0.2&quot;,    &quot;husky&quot;: &quot;^3.0.0&quot;,    &quot;lerna&quot;: &quot;^3.15.0&quot;,    &quot;lint-staged&quot;: &quot;^9.2.0&quot;,    &quot;standard&quot;: &quot;^13.0.2&quot;  &#125;&#125;</code></pre><p>安装完成后，在 package.json 增加 lint-staged 配置，如上所示表示对暂存区中的 js 文件执行 standard –fix 校验并自动修复。那什么时候去校验呢，就又用到了上面安装的 husky ，husky的配置中增加’pre-commit’的钩子用来执行 lint-staged 的校验操作，如上所示。</p><p>此时提交 js 文件时，便会自动修正并校验错误。即保证了代码风格统一，又能提高代码质量。</p><h3 id="二、自动生成日志"><a href="#二、自动生成日志" class="headerlink" title="二、自动生成日志"></a>二、自动生成日志</h3><p>有了之前的规范提交，自动生成日志便水到渠成了。再详细看下 lerna publish 时做了哪些事情：</p><p>1.调用 lerna version</p><ul><li><p>找出从上一个版本发布以来有过变更的 package</p></li><li><p>提示开发者确定要发布的版本号</p><p><img src="https://oscimg.oschina.net/oscnet/4d541d60a73c9e716bbb5d16f98d860d544.jpg" alt="img"></p></li><li><p>将所有更新过的的 package 中的package.json的version字段更新</p></li><li><p>将依赖更新过的 package 的 包中的依赖版本号更新</p></li><li><p>更新 lerna.json 中的 version 字段</p></li><li><p>提交上述修改，并打一个 tag</p></li><li><p>推送到 git 仓库</p></li></ul><p><img src="https://oscimg.oschina.net/oscnet/55d7d926ce5001478ba65cbd971cf79a43d.jpg" alt="img"></p><p>2.使用 npm publish 将新版本推送到 npm</p><p>CHANGELOG 很明显是和 version 一一对应的，所以需要在 lerna version 中想办法，查看 lerna version 命令的详细说明后，会看到一个配置参数 –conventional-commits。没错，只要我们按规范提交后，在 lerna version 的过程中会便会自动生成当前这个版本的 CHANGELOG。为了方便，不用每次输入参数，可以配置在 lerna.json中，如下：</p><pre class="language-none"><code class="language-none">&#123;  &quot;packages&quot;: [    &quot;packages&#x2F;*&quot;  ],  &quot;command&quot;: &#123;    &quot;bootstrap&quot;: &#123;      &quot;hoist&quot;: true    &#125;,    &quot;version&quot;: &#123;      &quot;conventionalCommits&quot;: true    &#125;  &#125;,  &quot;ignoreChanges&quot;: [    &quot;**&#x2F;*.md&quot;  ],  &quot;version&quot;: &quot;0.0.1-alpha.1&quot;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react优秀组件库</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p><a href="https://github.com/Caldis/react-zmage">react-zmage</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lerna教程</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://juejin.im/entry/586f00bc128fe100580a6f78">monorepo 新浪潮</a><ul><li><a href="https://github.com/lerna/lerna-changelog">用lerna-changelog 来梳理 changelog</a></li><li><a href="https://github.com/galaxybing/lerna-repos-init.git">使用 monorepo 结构，管理多个 repo(示例)</a></li></ul></li><li><a href="https://juejin.im/post/5a989fb451882555731b88c2">lerna管理前端packages的最佳实践</a></li><li><a href="https://github.com/chinanf-boy/lerna-zh">lerna 中文文档</a><ul><li><a href="https://github.com/chinanf-boy/lerna-zh/blob/master/FAQ.zh.md">常见问题</a></li></ul></li><li><a href="https://lernajs.io/">https://lernajs.io/</a><ul><li><a href="https://github.com/szarouski/lerna-wizard">lerna-wizard lerna的命令行向导</a></li><li><a href="https://www.jianshu.com/p/2f9c05b119c9">使用lerna管理大型前端项目</a></li></ul></li><li><a href="https://github.com/Quramy/lerna-yarn-workspaces-example">lerna-yarn-workspaces-example</a></li><li>独立模式 <a href="https://github.com/atlassian/lerna-semantic-release/blob/caribou/package.json">lerna-semantic-release</a></li></ul><p><strong>管理多个 repo ：</strong></p><ul><li>单个 lint、build、test 和 release 流程</li><li>统一的地方处理 issue</li><li>不用到处去找自己项目的 repo</li><li>方便管理版本和 dependencies</li><li>跨项目的操作和修改变得容易</li><li>方便生成总的 changelog</li></ul><p>useWorkspaces 应该是只针对 yarn 的</p><h2 id="Workspaces"><a href="#Workspaces" class="headerlink" title="Workspaces"></a>Workspaces</h2><p>Using <a href="https://yarnpkg.com/en/docs/workspaces">yarn workspace feature</a>, configure the following files:</p><ul><li>/package.json</li></ul><p>Append the <code>workspaces</code> key.</p><p>​<code>json &#123;   &quot;private&quot;: true,   &quot;workspaces&quot;: [ ​    &quot;packages/*&quot;   ] &#125; ​</code></p><ul><li>lerna.json</li></ul><p>Set <code>npmClient</code> <code>&quot;yarn&quot;</code> and turn <code>useWorkspaces</code> on.</p><p>​<code>json &#123;   &quot;lerna&quot;: &quot;2.2.0&quot;,   &quot;packages&quot;: [ ​    &quot;packages/*&quot;   ],   &quot;npmClient&quot;: &quot;yarn&quot;,   &quot;useWorkspaces&quot;: true,   &quot;version&quot;: &quot;1.0.0&quot; &#125; ​</code></p><p>Exec <code>yarn install</code>(or <code>lerna bootstrap</code>). After successful running, all dependency packages are downloaded under the repository root <code>node_modules</code> directory.</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>建议使用 <code>npx</code>, 如 <code>npx lerna init</code></p><p>​```bash</p><h1 id="全局安装工具，除了-Lerna-Builder，还可以像Andre-Staltz-一样自己用脚本（通过Bash-s）来实现-monorepo"><a href="#全局安装工具，除了-Lerna-Builder，还可以像Andre-Staltz-一样自己用脚本（通过Bash-s）来实现-monorepo" class="headerlink" title="全局安装工具，除了 Lerna,Builder，还可以像Andre Staltz 一样自己用脚本（通过Bash s）来实现 monorepo"></a>全局安装工具，除了 Lerna,Builder，还可以像Andre Staltz 一样自己用脚本（通过Bash s）来实现 monorepo</h1><p>npm install -g lerna</p><h1 id="创建-初始化-git仓库"><a href="#创建-初始化-git仓库" class="headerlink" title="创建\初始化.git仓库"></a>创建\初始化.git仓库</h1><p>git init lerna-repo</p><p>cd lerna-repo</p><p>或<br>mkdir lerna-repo &amp;&amp; cd $_</p><p>初始化管理目录，同时之后手动配置子 package 间的调用关系：dependencies</p><p>lerna init</p><p>会为各个 package 执行 npm install 所有的外部依赖；</p><p>并为内部依赖的 package 建立 symlink，对所有的 package 执行 npm prepublish</p><h1 id="bootstrap-将把repo中的依赖关系链接在一起"><a href="#bootstrap-将把repo中的依赖关系链接在一起" class="headerlink" title="bootstrap 将把repo中的依赖关系链接在一起."></a>bootstrap 将把repo中的依赖关系链接在一起.</h1><p>lerna bootstrap</p><p>lerna bootstrap –hoist ? 这个是什么</p><p>更新版本(不用主动去更新，直接执行发布，根据提示选择操作即可)</p><h1 id="使用与-npm-version-相同的语法，更新版本号，如"><a href="#使用与-npm-version-相同的语法，更新版本号，如" class="headerlink" title="使用与 npm version 相同的语法，更新版本号，如"></a>使用与 npm version 相同的语法，更新版本号，如</h1><pre class="language-none"><code class="language-none">lerna version patch</code></pre><h1 id="Changes"><a href="#Changes" class="headerlink" title="Changes:"></a>Changes:</h1><ul><li><p>@xmini/package-1: 0.0.1 =&gt; 0.0.2</p></li><li><p>@xmini/package-2: 0.0.1 =&gt; 0.0.2</p></li></ul><h1 id="可以为指定包添加依赖"><a href="#可以为指定包添加依赖" class="headerlink" title="可以为指定包添加依赖"></a>可以为指定包添加依赖</h1><pre class="language-none"><code class="language-none">lerna add @types&#x2F;node --scope&#x3D;@xmini&#x2F;package-1lerna add --dev typescript --scope&#x3D;@xmini&#x2F;package-1npm install jest --only&#x3D;dev</code></pre><h1 id="updated-可以查看哪些包发生了改变"><a href="#updated-可以查看哪些包发生了改变" class="headerlink" title="updated 可以查看哪些包发生了改变"></a>updated 可以查看哪些包发生了改变</h1><p>lerna updated</p><h1 id="发布到-npm"><a href="#发布到-npm" class="headerlink" title="发布到 npm"></a>发布到 npm</h1><h1 id="publish将帮助发布任何更新的包（如果包未更新，会忽略）"><a href="#publish将帮助发布任何更新的包（如果包未更新，会忽略）" class="headerlink" title="publish将帮助发布任何更新的包（如果包未更新，会忽略）"></a>publish将帮助发布任何更新的包（如果包未更新，会忽略）</h1><p>lerna publish<br>​```</p><p>Set up yarn的workspaces模式</p><p><a href="https://juejin.im/post/5ced1609e51d455d850d3a6c">https://juejin.im/post/5ced1609e51d455d850d3a6c</a></p><ul><li><code>lerna init</code> 初始化项目</li><li><code>lerna bootstrap</code> 安装依赖<ul><li>默认是npm, 而且每个子package都有自己的node_modules</li><li>配置 <code>yarn+workspaces</code> 后，只有顶层有一个node_modules</li></ul></li><li><code>lerna list</code> 列出所有的包</li><li><code>lerna create &lt;name&gt; [loc]</code> 创建一个包 默认放在 <code>workspaces[0]</code>所指位置</li><li><code>lerna run &lt;script&gt;</code> 运行所有包里面的有这个script的命令</li><li><code>lerna exec</code> 运行任意命令在每个包</li><li><code>lerna clean</code> 删除所有包的node_modules目录</li><li><code>lerna changed</code> 列出下次发版lerna publish 要更新的包。</li><li><code>lerna publish</code> 会打tag，上传git,上传npm。<ul><li>需要在packages.json添加 “publishConfig”: { “access”: “public” },</li></ul></li></ul><p>配置 yarn + workspaces</p><p>​```bash</p><h1 id="package-json-文件加入"><a href="#package-json-文件加入" class="headerlink" title="package.json 文件加入"></a>package.json 文件加入</h1><pre class="language-"private":" data-language=""private":"><div class="caption"><span>true,</span></div><code class="language-"private":">&quot;workspaces&quot;: [  &quot;packages&#x2F;*&quot;],</code></pre><h1 id="lerna-json-文件加入"><a href="#lerna-json-文件加入" class="headerlink" title="lerna.json 文件加入"></a>lerna.json 文件加入</h1><pre class="language-none"><code class="language-none">&quot;useWorkspaces&quot;: true,&quot;npmClient&quot;: &quot;yarn&quot;,</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos8安装minio</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<pre class="language-bash" data-language="bash"><code class="language-bash">docker run -p <span class="token number">9228</span>:9000 --name miniostorage -di -e <span class="token string">"MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE"</span> -e <span class="token string">"MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"</span>   -v /opt/minio/storage/data:/data -v /opt/minio/storage/config:/root/.minio --restart<span class="token operator">=</span>always minio/minio server /data</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SkyWalking安装使用</title>
      <link href="posts/36626760.html"/>
      <url>posts/36626760.html</url>
      
        <content type="html"><![CDATA[<h4 id="1、SkyWalking"><a href="#1、SkyWalking" class="headerlink" title="1、SkyWalking"></a>1、SkyWalking</h4><p>SkyWalking是国内开源的基于字节码注入的调用链分析以及应用监控分析工具。特点是支持多种插件，UI功能较强，接入端无代码侵入。目前使用厂商最多，版本更新较快，已成为 Apache 基金会顶级项目。<br> 官网：<a href="https://skywalking.apache.org/downloads/">https://skywalking.apache.org/downloads/</a><br> GitHub: <a href="https://links.jianshu.com/go?to=https://github.com/apache/skywalking">https://github.com/apache/skywalking</a></p><h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><h6 id="1、下载SkyWalking"><a href="#1、下载SkyWalking" class="headerlink" title="1、下载SkyWalking"></a>1、下载SkyWalking</h6><p>注意版本的不同，有些是用es6当作数据库，有些使用es7当作数据库，他们的功能不一样。</p><p><img src="https://upload-images.jianshu.io/upload_images/11997591-49ade3bef0b63d56.png" alt="img"></p><p>image.png</p><h6 id="2、安装-1"><a href="#2、安装-1" class="headerlink" title="2、安装"></a>2、安装</h6><p>下载加压后目录如下</p><p><img src="https://upload-images.jianshu.io/upload_images/11997591-f59aedf9f82cdf77.png" alt="img"></p><p>image.png</p><h6 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h6><p>在bin目录下执行startup.bat即可启动服务</p><p><img src="https://upload-images.jianshu.io/upload_images/11997591-82facb797138f2b8.png" alt="img"></p><p>说明：执行startup.bat之后会启动如下两个服务：<br> （1）Skywalking-Collector：追踪信息收集器，通过 gRPC/Http 收集客户端的采集信息 ，Http默认端口 12800，gRPC默认端口 11800。<br> （2）Skywalking-Webapp：管理平台页面 默认端口 8080</p><h6 id="4、配置信息"><a href="#4、配置信息" class="headerlink" title="4、配置信息"></a>4、配置信息</h6><p>a、application.yml<br> 主要配置SkyWakling集群方式、数据存储，配置文件内容如下</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">core<span class="token punctuation">:</span>  default<span class="token punctuation">:</span>  restHost<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_REST_HOST</span><span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">&#125;</span>  restPort<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_REST_PORT</span><span class="token punctuation">:</span><span class="token number">12800</span><span class="token punctuation">&#125;</span>  restContextPath<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_REST_CONTEXT_PATH</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token punctuation">&#125;</span>  gRPCHost<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_GRPC_HOST</span><span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">&#125;</span>  gRPCPort<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_GRPC_PORT</span><span class="token punctuation">:</span><span class="token number">11800</span><span class="token punctuation">&#125;</span>  downsampling<span class="token punctuation">:</span>    <span class="token operator">-</span> <span class="token constant">Hour</span>    <span class="token operator">-</span> <span class="token constant">Day</span>    <span class="token operator">-</span> <span class="token constant">Month</span>  <span class="token comment"># Set a timeout on metric data. After the timeout has expired, the metric data will automatically be deleted.</span>  recordDataTTL<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_RECORD_DATA_TTL</span><span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">&#125;</span> <span class="token comment"># Unit is minute</span>  minuteMetricsDataTTL<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_MINUTE_METRIC_DATA_TTL</span><span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">&#125;</span> <span class="token comment"># Unit is minute</span>  hourMetricsDataTTL<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_HOUR_METRIC_DATA_TTL</span><span class="token punctuation">:</span><span class="token number">36</span><span class="token punctuation">&#125;</span> <span class="token comment"># Unit is hour</span>  dayMetricsDataTTL<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_DAY_METRIC_DATA_TTL</span><span class="token punctuation">:</span><span class="token number">45</span><span class="token punctuation">&#125;</span> <span class="token comment"># Unit is day</span>  monthMetricsDataTTL<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_MONTH_METRIC_DATA_TTL</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span> <span class="token comment"># Unit is month</span>storage<span class="token punctuation">:</span>  h2<span class="token punctuation">:</span>    driver<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_STORAGE_H2_DRIVER</span><span class="token symbol">:org</span><span class="token punctuation">.</span>h2<span class="token punctuation">.</span>jdbcx<span class="token punctuation">.</span><span class="token constant">JdbcDataSource</span><span class="token punctuation">&#125;</span>    url<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_STORAGE_H2_URL</span><span class="token symbol">:jdbc</span><span class="token symbol">:h2</span><span class="token symbol">:mem</span><span class="token symbol">:skywalking</span><span class="token operator">-</span>oap<span class="token operator">-</span>db<span class="token punctuation">&#125;</span>    user<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_STORAGE_H2_USER</span><span class="token symbol">:sa</span><span class="token punctuation">&#125;</span>    <span class="token comment">#  elasticsearch:</span>    <span class="token comment">#    # nameSpace: $&#123;SW_NAMESPACE:""&#125;</span>    <span class="token comment">#    clusterNodes:     $&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125;</span>    <span class="token comment">#    indexShardsNumber: $&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125;</span>    <span class="token comment">#    indexReplicasNumber: $&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125;</span>    <span class="token comment">#    # Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html</span>    <span class="token comment">#    bulkActions: $&#123;SW_STORAGE_ES_BULK_ACTIONS:2000&#125; # Execute the bulk every 2000 requests</span>    <span class="token comment">#    bulkSize: $&#123;SW_STORAGE_ES_BULK_SIZE:20&#125; # flush the bulk every 20mb</span>    <span class="token comment">#    flushInterval: $&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125; # flush the bulk every 10 seconds whatever the number of requests</span>    <span class="token comment">#    concurrentRequests: $&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125; # the number of concurrent requests</span>receiver<span class="token operator">-</span>register<span class="token punctuation">:</span>    default<span class="token punctuation">:</span>receiver<span class="token operator">-</span>trace<span class="token punctuation">:</span>    default<span class="token punctuation">:</span>bufferPath<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_RECEIVER_BUFFER_PATH</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token regex">/trace-buffer/</span><span class="token punctuation">&#125;</span>  <span class="token comment"># Path to trace buffer files, suggest to use absolute path</span>bufferOffsetMaxFileSize<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_RECEIVER_BUFFER_OFFSET_MAX_FILE_SIZE</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span> <span class="token comment"># Unit is MB</span>bufferDataMaxFileSize<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_RECEIVER_BUFFER_DATA_MAX_FILE_SIZE</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">&#125;</span> <span class="token comment"># Unit is MB</span>bufferFileCleanWhenRestart<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_RECEIVER_BUFFER_FILE_CLEAN_WHEN_RESTART</span><span class="token symbol">:false</span><span class="token punctuation">&#125;</span>sampleRate<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_TRACE_SAMPLE_RATE</span><span class="token punctuation">:</span><span class="token number">10000</span><span class="token punctuation">&#125;</span> <span class="token comment"># The sample rate precision is 1/10000. 10000 means 100% sample in default.</span>receiver<span class="token operator">-</span>jvm<span class="token punctuation">:</span>    default<span class="token punctuation">:</span><span class="token comment">#service-mesh:</span>    <span class="token comment">#  default:</span><span class="token comment">#    bufferPath: $&#123;SW_SERVICE_MESH_BUFFER_PATH:../mesh-buffer/&#125;  # Path to trace buffer files, suggest to use absolute path</span><span class="token comment">#    bufferOffsetMaxFileSize: $&#123;SW_SERVICE_MESH_OFFSET_MAX_FILE_SIZE:100&#125; # Unit is MB</span><span class="token comment">#    bufferDataMaxFileSize: $&#123;SW_SERVICE_MESH_BUFFER_DATA_MAX_FILE_SIZE:500&#125; # Unit is MB</span><span class="token comment">#    bufferFileCleanWhenRestart: $&#123;SW_SERVICE_MESH_BUFFER_FILE_CLEAN_WHEN_RESTART:false&#125;</span><span class="token comment">#istio-telemetry:</span>  <span class="token comment">#  default:</span><span class="token comment">#receiver_zipkin:</span>  <span class="token comment">#  default:</span>  <span class="token comment">#    host: $&#123;SW_RECEIVER_ZIPKIN_HOST:0.0.0.0&#125;</span>  <span class="token comment">#    port: $&#123;SW_RECEIVER_ZIPKIN_PORT:9411&#125;</span>  <span class="token comment">#    contextPath: $&#123;SW_RECEIVER_ZIPKIN_CONTEXT_PATH:/&#125;</span></code></pre><h4 id="3、IDEA-部署探针"><a href="#3、IDEA-部署探针" class="headerlink" title="3、IDEA 部署探针"></a>3、IDEA 部署探针</h4><p>修改项目启动的 VM 运行参数</p><h6 id="1、点击菜单栏中的-Run-gt-EditConfigurations…"><a href="#1、点击菜单栏中的-Run-gt-EditConfigurations…" class="headerlink" title="1、点击菜单栏中的 Run -&gt; EditConfigurations…"></a>1、点击菜单栏中的 Run -&gt; EditConfigurations…</h6><p><img src="https://upload-images.jianshu.io/upload_images/11997591-8eca2d4c662aa27a.png" alt="img"></p><p>image.png</p><h6 id="2、增加如下参数到VM-options中："><a href="#2、增加如下参数到VM-options中：" class="headerlink" title="2、增加如下参数到VM options中："></a>2、增加如下参数到VM options中：</h6><pre class="language-undefined" data-language="undefined"><code class="language-undefined">-javaagent:C:\Users\ke\Desktop\apache-skywalking-apm-6.6.0\apache-  skywalking-apm-bin\agent\skywalking-agent.jar -Dskywalking.agent.service_name&#x3D;service-eureka -Dskywalking.collector.backend_service&#x3D;localhost:8761</code></pre><p>-javaagent：用于指定探针路径<br> -Dskywalking.agent.service_name：用于重写 agent/config/agent.config 配置文件中的服务名<br> -Dskywalking.collector.backend_service：用于重写 agent/config/agent.config 配置文件中的服务地址</p><p>启动后看到如下启动日志：</p><pre class="language-css" data-language="css"><code class="language-css">INFO 2020-02-13 14<span class="token punctuation">:</span>57<span class="token punctuation">:</span>36<span class="token punctuation">:</span>310 main <span class="token property">SnifferConfigInitializer</span> <span class="token punctuation">:</span> Config file found in <span class="token property">C</span><span class="token punctuation">:</span>\Users\ke\Desktop\apache-skywalking-apm-6.6.0\apache-skywalking-apm-bin\agent\config\agent.config.</code></pre><h4 id="4、Java-命令行启动方式"><a href="#4、Java-命令行启动方式" class="headerlink" title="4、Java 命令行启动方式"></a>4、Java 命令行启动方式</h4><pre class="language-undefined" data-language="undefined"><code class="language-undefined">java -javaagent:C:\Users\ke\Desktop\apache-skywalking-apm-6.6.0\apache-skywalking-apm-bin\agent&#x2F;skywalking-agent.jar&#x3D;-Dskywalking.agent.service_name&#x3D;ijep-eureka-provider,-Dskywalking.collector.backend_service&#x3D;localhost:11800 -jar ijep-registry-eureka.jar</code></pre><p>注：-javaagent配置参数一定要在 -jar 之前。</p><h5 id="附-配置文件详解"><a href="#附-配置文件详解" class="headerlink" title="附: 配置文件详解"></a>附: 配置文件详解</h5><pre class="language-objectivec" data-language="objectivec"><code class="language-objectivec"># 当前的应用编码，最终会显示在webui上。# 建议一个应用的多个实例，使用有相同的application_code。请使用英文  agent<span class="token punctuation">.</span>application_code<span class="token operator">=</span>Your_ApplicationName # 每三秒采样的Trace数量# 默认为负数，代表在保证不超过内存Buffer区的前提下，采集所有的Trace<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">agent</span><span class="token expression"><span class="token punctuation">.</span>sample_n_per_3_secs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span></span></span># 设置需要忽略的请求地址# 默认配置如下<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">agent</span><span class="token expression"><span class="token punctuation">.</span>ignore_suffix<span class="token operator">=</span><span class="token punctuation">.</span>jpg<span class="token punctuation">,</span><span class="token punctuation">.</span>jpeg<span class="token punctuation">,</span><span class="token punctuation">.</span>js<span class="token punctuation">,</span><span class="token punctuation">.</span>css<span class="token punctuation">,</span><span class="token punctuation">.</span>png<span class="token punctuation">,</span><span class="token punctuation">.</span>bmp<span class="token punctuation">,</span><span class="token punctuation">.</span>gif<span class="token punctuation">,</span><span class="token punctuation">.</span>ico<span class="token punctuation">,</span><span class="token punctuation">.</span>mp3<span class="token punctuation">,</span><span class="token punctuation">.</span>mp4<span class="token punctuation">,</span><span class="token punctuation">.</span>html<span class="token punctuation">,</span><span class="token punctuation">.</span>svg</span></span># 探针调试开关，如果设置为true，探针会将所有操作字节码的类输出  到<span class="token operator">/</span>debugging目录下<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">skywalking</span><span class="token expression">团队可能在调试，需要此文件</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">agent</span><span class="token expression"><span class="token punctuation">.</span>is_open_debugging_class <span class="token operator">=</span> true</span></span># 对应Collector的config<span class="token operator">/</span>application<span class="token punctuation">.</span>yml配置文件中 agent_server<span class="token operator">/</span>jetty<span class="token operator">/</span>port 配置内容# 例如：# 单节点配置：SERVERS<span class="token operator">=</span><span class="token string">"127.0.0.1:8080"</span> # 集群配置：SERVERS<span class="token operator">=</span><span class="token string">"10.2.45.126:8080,10.2.45.127:7600"</span> collector<span class="token punctuation">.</span>servers<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">10800</span># 日志文件名称前缀logging<span class="token punctuation">.</span>file_name<span class="token operator">=</span>skywalking<span class="token operator">-</span>agent<span class="token punctuation">.</span>log# 日志文件最大大小# 如果超过此大小，则会生成新文件。# 默认为<span class="token number">300</span>Mlogging<span class="token punctuation">.</span>max_file_size<span class="token operator">=</span><span class="token number">314572800</span># 日志级别，默认为DEBUG。logging<span class="token punctuation">.</span>level<span class="token operator">=</span>DEBUG</code></pre><h4 id="3、Centos-7使用教程"><a href="#3、Centos-7使用教程" class="headerlink" title="3、Centos 7使用教程"></a>3、Centos 7使用教程</h4><h6 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h6><p>● 系统版本：Centos 7<br> ● 内存配置：2G<br> ● JDK版本：1.8.0_51<br> ● IP为：192.168.1.180</p><h6 id="2、下载解压"><a href="#2、下载解压" class="headerlink" title="2、下载解压"></a>2、下载解压</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载SkyWalking</span><span class="token function">wget</span> http://mirrors.tuna.tsinghua.edu.cn/apache/skywalking/6.5.0/apache-skywalking-apm-6.5.0.tar.gz<span class="token comment"># 解压</span><span class="token function">tar</span> -zxf apache-skywalking-apm-6.5.0.tar.gz<span class="token function">mkdir</span> /usr/local/skywalking<span class="token function">mv</span> apache-skywalking-apm-bin /usr/local/skywalking</code></pre><h6 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h6><p>SkyWakling共有三个配置文件，分别为：</p><p>● agent/config/agent.config<br> ● conf/application.yml<br> ● webapp/webapp.yml</p><p>其中application.yml和webapp.yml配置是服务器运行相关，agent.config是在代理节点上进行配置的。</p><h6 id="a、application-yml"><a href="#a、application-yml" class="headerlink" title="a、application.yml"></a>a、application.yml</h6><p>主要配置SkyWakling集群方式、数据存储，配置文件内容如下；</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby"> <span class="token comment"># 配置skywalking集群</span>cluster<span class="token punctuation">:</span><span class="token comment"># 这里采用zk，需要注意的是，在skywalking6.5版本中要求zk版本也必须大于3.5</span>zookeeper<span class="token punctuation">:</span>  namespace<span class="token punctuation">:</span> skywalking_brief  <span class="token comment"># zk集群以","进行分割</span>  hostPort<span class="token punctuation">:</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.180</span><span class="token punctuation">:</span><span class="token number">2283</span>  <span class="token comment"># 配置重试次数以及重试间隔</span>  baseSleepTimeMs<span class="token punctuation">:</span> <span class="token number">3000</span>  maxRetries<span class="token punctuation">:</span> <span class="token number">5</span><span class="token comment"># 核心配置</span>core<span class="token punctuation">:</span>  default<span class="token punctuation">:</span>    role<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_ROLE</span><span class="token symbol">:Mixed</span><span class="token punctuation">&#125;</span>    <span class="token comment"># backend配置，如果是Mixed或者Receiver类型，那么下面的配置将会生效，服务启动之后将会作为collector收集agent发送过来的链路数据</span>    restHost<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_REST_HOST</span><span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">&#125;</span>    restPort<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_REST_PORT</span><span class="token punctuation">:</span><span class="token number">12800</span><span class="token punctuation">&#125;</span>    restContextPath<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_CONTEXT_PATH</span><span class="token punctuation">:</span> <span class="token operator">/</span><span class="token punctuation">&#125;</span>    <span class="token comment"># gRPC配置</span>    gRPCHost<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_GRPC_HOST</span><span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">&#125;</span>    gRPCPort<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_GRPC_PORT</span><span class="token punctuation">:</span><span class="token number">11800</span><span class="token punctuation">&#125;</span>    downsampling<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token constant">Hour</span>      <span class="token operator">-</span> <span class="token constant">Day</span>      <span class="token operator">-</span> <span class="token constant">Month</span>    <span class="token comment"># 是否允许删除度量数据</span>    enableDataKeeperExecutor<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_ENABLE_DATA_KEEPER_EXECUTOR</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span>    <span class="token comment"># datakeeper删除数据执行间隔，单位为分钟</span>    dataKeeperExecutePeriod<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_DATA_KEEPER_EXECUTE_PERIOD</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 单位是分钟</span>    recordDataTTL<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_RECORD_DATA_TTL</span><span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">&#125;</span>    minuteMetricsDataTTL<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_MINUTE_METRIC_DATA_TTL</span><span class="token punctuation">:</span><span class="token number">90</span><span class="token punctuation">&#125;</span>    hourMetricsDataTTL<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_HOUR_METRIC_DATA_TTL</span><span class="token punctuation">:</span><span class="token number">36</span><span class="token punctuation">&#125;</span>    dayMetricsDataTTL<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_DAY_METRIC_DATA_TTL</span><span class="token punctuation">:</span><span class="token number">45</span><span class="token punctuation">&#125;</span>    monthMetricsDataTTL<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_MONTH_METRIC_DATA_TTL</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span>    enableDatabaseSession<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_CORE_ENABLE_DATABASE_SESSION</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 配置数据存储方式，默认为H2，这里修改为宿主机上的ES</span>storage<span class="token punctuation">:</span>  elasticsearch<span class="token punctuation">:</span>     namespace<span class="token punctuation">:</span> elasticsearch     <span class="token comment">#es地址，多master之间以","分割</span>     clusterNodes<span class="token punctuation">:</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.151</span><span class="token punctuation">:</span><span class="token number">9800</span>     protocol<span class="token punctuation">:</span> http     <span class="token comment"># 配置index</span>     <span class="token comment"># index分片，es中默认为5，在skywalking中默认为2</span>     indexShardsNumber<span class="token punctuation">:</span> <span class="token number">2</span>     <span class="token comment"># 分片备份数量，默认为0</span>     indexReplicasNumber<span class="token punctuation">:</span> <span class="token number">0</span>     recordDataTTL<span class="token punctuation">:</span> <span class="token number">7</span>     otherMetricsDataTTL<span class="token punctuation">:</span> <span class="token number">45</span>     monthMetricsDataTTL<span class="token punctuation">:</span> <span class="token number">18</span>     <span class="token comment"># 批量操作配置</span>     bulkActions<span class="token punctuation">:</span> <span class="token number">2000</span>          <span class="token comment"># 每2000个请求执行一次bulk操作</span>     flushsInterval<span class="token punctuation">:</span> <span class="token number">5</span>          <span class="token comment"># 每5s执行一次bulk操作，skywalking将会在至少一个条件满足的时候执行bulk操作</span>     concurrentRequests<span class="token punctuation">:</span> <span class="token number">2</span>     resultWindowMaxSize<span class="token punctuation">:</span> <span class="token number">10000</span>     metadataQueryMaxSize<span class="token punctuation">:</span> <span class="token number">5000</span>     segmentQueryMaxSize<span class="token punctuation">:</span> <span class="token number">200</span>receiver<span class="token operator">-</span>sharing<span class="token operator">-</span>server<span class="token punctuation">:</span>  default<span class="token punctuation">:</span>receiver<span class="token operator">-</span>register<span class="token punctuation">:</span>  default<span class="token punctuation">:</span> receiver<span class="token operator">-</span>trace<span class="token punctuation">:</span>  default<span class="token punctuation">:</span>    bufferPath<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_RECEIVER_BUFFER_PATH</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token regex">/trace-buffer/</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 单位为MB</span>    bufferOffsetMaxFileSize<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_RECEIVER_BUFFER_OFFSET_MAX_FILE_SIZE</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span>bufferDataMaxFileSize<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_RECEIVER_BUFFER_DATA_MAX_FILE_SIZE</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">&#125;</span>   bufferFileCleanWhenRestart<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_RECEIVER_BUFFER_FILE_CLEAN_WHEN_RESTART</span><span class="token symbol">:false</span><span class="token punctuation">&#125;</span>   <span class="token comment"># 实际采样率=1/10000 * sampleRate，默认为全采样</span>   sampleRate<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_TRACE_SAMPLE_RATE</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span>receiver<span class="token operator">-</span>jvm<span class="token punctuation">:</span>  default<span class="token punctuation">:</span> receiver<span class="token operator">-</span>clr<span class="token punctuation">:</span>  default<span class="token punctuation">:</span> <span class="token comment"># service-mesh是6.0.0之后添加的新功能</span>service<span class="token operator">-</span>mesh<span class="token punctuation">:</span>  default<span class="token punctuation">:</span>    bufferPath<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_SERVICE_MESH_BUFFER_PATH</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token regex">/mesh-buffer/</span><span class="token punctuation">&#125;</span>    bufferOffsetMaxFileSize<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_SERVICE_MESH_OFFSET_MAX_FILE_SIZE</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span>    bufferDataMaxFileSize<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_SERVICE_MESH_BUFFER_DATA_MAX_FILE_SIZE</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">&#125;</span>    bufferFileCleanWhenRestart<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_SERVICE_MESH_BUFFER_FILE_CLEAN_WHEN_RESTART</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>istio<span class="token operator">-</span>telemetry<span class="token punctuation">:</span>  default<span class="token punctuation">:</span>envoy<span class="token operator">-</span>metric<span class="token punctuation">:</span>  default<span class="token punctuation">:</span>query<span class="token punctuation">:</span>  graphql<span class="token punctuation">:</span>  path<span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token constant">SW_QUERY_GRAPHQL_PATH</span><span class="token punctuation">:</span><span class="token operator">/</span>graphql<span class="token punctuation">&#125;</span><span class="token comment"># 告警配置的具体配置在同级目录下的alarm-settings.xml中</span>alarm<span class="token punctuation">:</span>  default<span class="token punctuation">:</span>telemetry<span class="token punctuation">:</span>  none<span class="token punctuation">:</span><span class="token comment"># 配置webapp服务的注册中心</span>configuration<span class="token punctuation">:</span>  none<span class="token punctuation">:</span></code></pre><p>注：一般情况下，只需要配置cluster和storage部分，其它部分保持默认即可。</p><h6 id="b、webapp-yml"><a href="#b、webapp-yml" class="headerlink" title="b、webapp.yml"></a>b、webapp.yml</h6><p>主要是配置SkyWalking Webapp的。</p><pre class="language-objectivec" data-language="objectivec"><code class="language-objectivec"># 配置服务端口server<span class="token punctuation">:</span>  port<span class="token punctuation">:</span> <span class="token number">8888</span># 配置collector地址以及路径collector<span class="token punctuation">:</span>   # 和前面的config<span class="token operator">/</span>application<span class="token punctuation">.</span>yml中的query<span class="token punctuation">.</span>path相对应  path<span class="token punctuation">:</span> <span class="token operator">/</span>graphql  ribbon<span class="token punctuation">:</span>     ReadTimeout<span class="token punctuation">:</span> <span class="token number">10000</span>    # 配置collector服务集群地址，以<span class="token string">","</span>进行分割    listOfServers<span class="token punctuation">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">12800</span></code></pre><p>注：服务运行后，SkyWalking UI监控端口为 8888，访问地址: <a href="https://links.jianshu.com/go?to=http://localhost:8888">http://localhost:8888</a></p><h6 id="c、agent-conf"><a href="#c、agent-conf" class="headerlink" title="c、agent.conf"></a>c、agent.conf</h6><p>agent需要从SkyWalking 的安装包中拷贝出来，拷贝至需要监控的服务所在的服务器中(例如：我的服务启动在宿主机上，就需要将agent目录拷贝F:\tools\skywalking-agent中，最好一个服务一个目录一个配置)。</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property"># 代理的命名空间，默认为default-namespace</span>agent<span class="token punctuation">.</span><span class="token keyword">namespace</span><span class="token operator">=</span>skywalking_brief<span class="token preprocessor property"># 服务名，推荐一个服务一个名称，这个将会在界面的拓补图中显示</span>agent<span class="token punctuation">.</span>service_name<span class="token operator">=</span>ijep<span class="token operator">-</span>service<span class="token operator">-</span>sys<span class="token preprocessor property"># 每三秒追踪链采样数量，负数表示尽可能的多采集，默认为-1</span>agent<span class="token punctuation">.</span>sample_n_per_3_secs<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token preprocessor property"># 配置认证，需要和backend服务中的认证配置相符</span><span class="token preprocessor property"># agent.authentication=$&#123;SW_AGENT_AUTHENTICATION:XXX&#125;</span><span class="token preprocessor property"># 配置在单个segment中出现的span的最大数量，skywalking将用这个配置来估计应用的内存开销</span><span class="token preprocessor property"># agent.span_limit_per_segment=$&#123;SW_AGENT_SPAN_LIMIT:300&#125;</span><span class="token preprocessor property"># 配置哪些资源不会被skywalking所捕获</span><span class="token preprocessor property"># agent.ignore_suffix=$&#123;SW_AGENT_IGNORE_SUFFIX:.jpg,.jpeg,.js,.css,.png,.bmp,.gif,.ico,.mp3,.mp4,.html,.svg&#125;</span><span class="token preprocessor property"># 操作名称最大长度</span><span class="token preprocessor property"># agent.operation_name_threshold=$&#123;SW_AGENT_OPERATION_NAME_THRESHOLD:500&#125;</span><span class="token preprocessor property"># 配置collector的地址，多个地址之间以“,”隔开</span>collector<span class="token punctuation">.</span>backend_service<span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.180</span><span class="token punctuation">:</span><span class="token number">11800</span><span class="token preprocessor property">### agent相关配置</span>logging<span class="token punctuation">.</span>file_name<span class="token operator">=</span>skywalking_luke<span class="token punctuation">.</span>log<span class="token preprocessor property"># 日志级别，默认为DEBUG</span>logging<span class="token punctuation">.</span>level<span class="token operator">=</span>INFOlogging<span class="token punctuation">.</span>dir<span class="token operator">=</span>F<span class="token punctuation">:</span>\\logs\\skywalking<span class="token preprocessor property"># 日志文件最大为300M一个</span>logging<span class="token punctuation">.</span>max_file_size<span class="token operator">=</span>$<span class="token punctuation">&#123;</span>SW_LOGGING_MAX_FILE_SIZE<span class="token punctuation">:</span><span class="token number">314572800</span><span class="token punctuation">&#125;</span><span class="token preprocessor property"># 历史日志文件的最大数量，当数量超过配置上限的时候，旧的日志文件将会被删除。负数或者0意味着该功能将关闭，默认为-1</span><span class="token preprocessor property"># logging.max_history_files=$&#123;SW_LOGGING_MAX_HISTORY_FILES:-1&#125;</span><span class="token preprocessor property"># mysql插件配置</span><span class="token preprocessor property"># 配置追踪sql参数，这样可以在sql错误的时候查看是否是参数所引起的</span>plugin<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>trace_sql_parameters<span class="token operator">=</span><span class="token boolean">true</span></code></pre><h5 id="4、运行SkyWalking服务端"><a href="#4、运行SkyWalking服务端" class="headerlink" title="4、运行SkyWalking服务端"></a>4、运行SkyWalking服务端</h5><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property"># 首先打开collector的监听端口</span>sudo firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>zone<span class="token operator">=</span><span class="token keyword">public</span> <span class="token operator">--</span><span class="token keyword">add</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">11800</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanent<span class="token preprocessor property"># 然后打开webapp的服务端口</span>sudo firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>zone<span class="token operator">=</span><span class="token keyword">public</span> <span class="token operator">--</span><span class="token keyword">add</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">8888</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanent<span class="token preprocessor property"># 然后重启防火墙</span>sudo systemctl restart firewalld<span class="token preprocessor property"># 运行服务</span>sh <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>skywalking<span class="token operator">/</span>bin<span class="token operator">/</span>startup<span class="token punctuation">.</span>sh<span class="token preprocessor property"># 查看日志</span>tail <span class="token operator">-</span>f <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>skywalking<span class="token operator">/</span>logs<span class="token operator">/</span>webapp<span class="token punctuation">.</span>log</code></pre><h5 id="5、运行SkyWalking代理端"><a href="#5、运行SkyWalking代理端" class="headerlink" title="5、运行SkyWalking代理端"></a>5、运行SkyWalking代理端</h5><pre class="language-css" data-language="css"><code class="language-css">java <span class="token property">-javaagent</span><span class="token punctuation">:</span><span class="token property">F</span><span class="token punctuation">:</span>\\skywalking-agent\\agent-sys\\skywalking-agent.jar -jar <span class="token property">F</span><span class="token punctuation">:</span>\\services\\ijep-service-sys.jar</code></pre><p>注：-javaagent配置参数一定要在 -jar 之前。</p><h4 id="4、访问SkyWalking"><a href="#4、访问SkyWalking" class="headerlink" title="4、访问SkyWalking"></a>4、访问SkyWalking</h4><p>● 地址：<a href="http://192.168.1.180:8888/">http://192.168.1.180:8888/</a><br> ● 功能：仪表盘、拓扑图、追踪、告警以及指标对比</p><p><img src="https://upload-images.jianshu.io/upload_images/11997591-849d325f14ca0fbe.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>skywalking基本使用</title>
      <link href="posts/3c53c85c.html"/>
      <url>posts/3c53c85c.html</url>
      
        <content type="html"><![CDATA[<p>目录：</p><ul><li><a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">1. 概述</a></li><li><a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">2. 搭建 SkyWalking 单机环境</a></li><li><a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">3. 搭建 SkyWalking 集群环境</a></li><li><a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">4. 告警</a></li><li><a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">5. 注意事项</a></li><li><a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">6. Spring Boot 使用示例</a></li><li><a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">6. Spring Cloud 使用示例</a></li></ul><blockquote><ul><li>作者：<a href="https://github.com/YunaiV">芋道源码</a></li><li><a href="http://www.iocoder.cn/SkyWalking/install/?skywalkinng">原文地址</a></li></ul></blockquote><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>SkyWalking 是什么？</p><blockquote><p>FROM <a href="http://skywalking.apache.org/">http://skywalking.apache.org/</a></p><p>分布式系统的应用程序性能监视工具，专为微服务、云原生架构和基于容器（Docker、K8s、Mesos）架构而设计。</p><p>提供分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。</p></blockquote><h2 id="1-2-功能列表"><a href="#1-2-功能列表" class="headerlink" title="1.2 功能列表"></a>1.2 功能列表</h2><p>SkyWalking 有哪些功能？</p><blockquote><p>FROM <a href="http://skywalking.apache.org/">http://skywalking.apache.org/</a></p><ul><li>多种监控手段。可以通过语言探针和 service mesh 获得监控是数据。</li><li>多个语言自动探针。包括 Java，.NET Core 和 Node.JS。</li><li>轻量高效。无需大数据平台，和大量的服务器资源。</li><li>模块化。UI、存储、集群管理都有多种机制可选。</li><li>支持告警。</li><li>优秀的可视化解决方案。</li></ul></blockquote><h2 id="1-3-整体架构"><a href="#1-3-整体架构" class="headerlink" title="1.3 整体架构"></a>1.3 整体架构</h2><p>SkyWalking 整体架构如何？</p><blockquote><p>FROM <a href="http://skywalking.apache.org/">http://skywalking.apache.org/</a></p><p><img src="http://static.iocoder.cn/2d559e500ea828b2922ea75768d576a7" alt="架构图"></p></blockquote><p>整个架构，分成上、下、左、右四部分：</p><blockquote><p>考虑到让描述更简单，我们舍弃掉 Metric 指标相关，而着重在 Tracing 链路相关功能。</p></blockquote><ul><li>上部分 <strong>Agent</strong> ：负责从应用中，收集链路信息，发送给 SkyWalking OAP 服务器。目前支持 SkyWalking、Zikpin、Jaeger 等提供的 Tracing 数据信息。而我们目前采用的是，SkyWalking Agent 收集 SkyWalking Tracing 数据，传递给服务器。</li><li>下部分 <strong>SkyWalking OAP</strong> ：负责接收 Agent 发送的 Tracing 数据信息，然后进行分析(Analysis Core) ，存储到外部存储器( Storage )，最终提供查询( Query )功能。</li><li>右部分 <strong>Storage</strong> ：Tracing 数据存储。目前支持 ES、MySQL、Sharding Sphere、TiDB、H2 多种存储器。而我们目前采用的是 ES ，主要考虑是 SkyWalking 开发团队自己的生产环境采用 ES 为主。</li><li>左部分 <strong>SkyWalking UI</strong> ：负责提供控台，查看链路等等。</li></ul><h2 id="1-4-官方文档"><a href="#1-4-官方文档" class="headerlink" title="1.4 官方文档"></a>1.4 官方文档</h2><p>在 <a href="https://github.com/apache/skywalking/tree/master/docs">https://github.com/apache/skywalking/tree/master/docs</a> 地址下，提供了 SkyWalking 的<strong>英文</strong>文档。</p><p>考虑到大多数胖友的英语水平和艿艿不相伯仲，再加上胖友一开始对 SkyWalking 比较陌生，所以比较推荐先阅读 <a href="https://github.com/SkyAPM/document-cn-translation-of-skywalking">https://github.com/SkyAPM/document-cn-translation-of-skywalking</a> 地址，提供了 SkyWalking 的<strong>中文</strong>文档。</p><p>考虑到胖友使用 SkyWalking 的目的，是实现<strong>分布式链路追踪</strong>的功能，所以最好去了解下相关的知识。这里推荐阅读两篇文章：</p><ul><li><a href="https://github.com/opentracing-contrib/opentracing-specification-zh">《OpenTracing 官方标准 —— 中文版》</a></li><li>Google 论文 <a href="http://www.iocoder.cn/Fight/Dapper-translation/?self">《Dapper，大规模分布式系统的跟踪系统》</a></li></ul><h1 id="2-搭建-SkyWalking-单机环境"><a href="#2-搭建-SkyWalking-单机环境" class="headerlink" title="2. 搭建 SkyWalking 单机环境"></a>2. 搭建 SkyWalking 单机环境</h1><p>考虑到让胖友更快的入门，我们来搭建一个 SkyWalking <strong>单机</strong>环境，步骤如下：</p><p><img src="http://www.iocoder.cn/images/SkyWalking/2017-01-01/07.png" alt="SkyWalking 单机环境"></p><ul><li>第一步，搭建一个 Elasticsearch 服务。</li><li>第二步，下载 SkyWalking 软件包。</li><li>第三步，搭建一个 SkyWalking OAP 服务。</li><li>第四步，启动一个 Spring Boot 应用，并配置 SkyWalking Agent。</li><li>第五步，搭建一个 SkyWalking UI 服务。</li></ul><p>仅仅五步，按照艿艿标题党的性格，应该给本文取个《10 分钟快速搭建 SkyWalking 服务》标题才对，哈哈哈。</p><h2 id="2-1-Elasticsearch-搭建"><a href="#2-1-Elasticsearch-搭建" class="headerlink" title="2.1 Elasticsearch 搭建"></a>2.1 Elasticsearch 搭建</h2><blockquote><p>FROM <a href="https://www.elastic.co/cn/products/elasticsearch">https://www.elastic.co/cn/products/elasticsearch</a></p><p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p></blockquote><p>参考<a href="http://www.iocoder.cn/Elasticsearch/install/?self">《Elasticsearch 极简入门》</a>的<a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">「1. 单机部署」</a>小节，搭建一个 Elasticsearch 单机服务。</p><p>不过要<strong>注意</strong>，本文使用的是 Elasticsearch <code>7.5.1</code> 版本。因为 SkyWalking <a href="https://github.com/apache/skywalking/releases/tag/v6.6.0"><code>6.6.0</code></a> 版本，增加了对 Elasticsearch 7.X 版本的支持。当然，如果胖友使用 Elasticsearch 6.X 版本也是可以的。</p><h2 id="2-2-下载-SkyWalking-软件包"><a href="#2-2-下载-SkyWalking-软件包" class="headerlink" title="2.2 下载 SkyWalking 软件包"></a>2.2 下载 SkyWalking 软件包</h2><p>对于 SkyWalking 的软件包，有两种方式获取：</p><ul><li>手动编译</li><li>官方包</li></ul><p>一般情况下，我们建议使用<strong>官方包</strong>。手动编译，更多是尝鲜或者等着急修复的 BUG 的版本。</p><h3 id="2-2-1-官方包"><a href="#2-2-1-官方包" class="headerlink" title="2.2.1 官方包"></a>2.2.1 官方包</h3><p>在 <a href="http://skywalking.apache.org/downloads/">http://skywalking.apache.org/downloads/</a> 下，我们下载<strong>操作系统</strong>对应的发布版。</p><p>这里，我们选择 <a href="https://www.apache.org/dyn/closer.cgi/skywalking/6.6.0/apache-skywalking-apm-es7-6.6.0.tar.gz">Binary Distribution for ElasticSearch 7 (Linux)</a> 版本，因为艿艿是 Mac 环境，再加上想使用 Elasticsearch 7.X 版本作为存储。如果胖友想用 Elasticsearch 6.X 版本作为存储，记得下载 <a href="https://www.apache.org/dyn/closer.cgi/skywalking/6.6.0/apache-skywalking-apm-6.6.0.tar.gz">Binary Distribution (Linux)</a> 版本。</p><p><strong>① 下载</strong>：</p><pre class="language-text" data-language="text"><code class="language-text"># 创建目录$ mkdir -p &#x2F;Users&#x2F;yunai&#x2F;skywalking$ cd &#x2F;Users&#x2F;yunai&#x2F;skywalking# 下载$ wget http:&#x2F;&#x2F;mirror.bit.edu.cn&#x2F;apache&#x2F;skywalking&#x2F;6.6.0&#x2F;apache-skywalking-apm-es7-6.6.0.tar.gz</code></pre><p><strong>② 解压</strong>：</p><pre class="language-text" data-language="text"><code class="language-text"># 解压$ tar -zxvf apache-skywalking-apm-es7-6.6.0.tar.gz$ cd  apache-skywalking-apm-bin-es7$ ls -ls 4 drwxr-xr-x 8 root root  4096 Sep  9 15:09 agent # SkyWalking Agent 4 drwxr-xr-x 2 root root  4096 Sep  9 15:44 bin # 执行脚本 4 drwxr-xr-x 2 root root  4096 Sep  9 15:44 config # SkyWalking OAP Server 配置文件32 -rwxr-xr-x 1 root root 28903 Sep  9 14:32 LICENSE 4 drwxr-xr-x 3 root root  4096 Sep  9 15:44 licenses32 -rwxr-xr-x 1 root root 31850 Sep  9 14:32 NOTICE16 drwxr-xr-x 2 root root 16384 Sep  9 15:22 oap-libs # SkyWalking OAP Server 4 -rw-r--r-- 1 root root  1978 Sep  9 14:32 README.txt 4 drwxr-xr-x 2 root root  4096 Sep  9 15:44 webapp # SkyWalking UI</code></pre><h3 id="2-2-2-手动编译"><a href="#2-2-2-手动编译" class="headerlink" title="2.2.2 手动编译"></a>2.2.2 手动编译</h3><blockquote><p>友情提示：如果胖友没有编译 SkyWalking 源码的诉求，可以跳过本小节。</p></blockquote><p>参考 <a href="https://github.com/apache/skywalking/blob/v6.3.0/docs/en/guides/How-to-build.md">How to build project</a> 文章。</p><p>需要前置安装如下：</p><ul><li>GIT</li><li>JDK 8+</li><li>Maven</li></ul><p><strong>① 克隆代码</strong>：</p><pre class="language-text" data-language="text"><code class="language-text">$ git clone https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;skywalking.git</code></pre><ul><li>因为网络问题，可能克隆会有点久。</li></ul><p><strong>② 初始化子模块</strong>：</p><pre class="language-text" data-language="text"><code class="language-text">$ cd skywalking$ git submodule init$ git submodule update</code></pre><p><strong>③ 编译</strong></p><pre class="language-text" data-language="text"><code class="language-text">$ .&#x2F;mvnw clean package -DskipTests</code></pre><ul><li>编译过程，如果机子比较差，花费时间会比较久。</li></ul><p><strong>④ 查看编译结果</strong></p><pre class="language-text" data-language="text"><code class="language-text">$ cd apm-dist # 编译结果目录$ cd target$ tar -zxvf apache-skywalking-apm-bin.tar.gz # 解压 Linux 包$ cd apache-skywalking-apm-bin$ ls -ls 4 drwxr-xr-x 8 root root  4096 Sep  9 15:09 agent # SkyWalking Agent 4 drwxr-xr-x 2 root root  4096 Sep  9 15:44 bin # 执行脚本 4 drwxr-xr-x 2 root root  4096 Sep  9 15:44 config # SkyWalking OAP Server 配置文件32 -rwxr-xr-x 1 root root 28903 Sep  9 14:32 LICENSE 4 drwxr-xr-x 3 root root  4096 Sep  9 15:44 licenses32 -rwxr-xr-x 1 root root 31850 Sep  9 14:32 NOTICE16 drwxr-xr-x 2 root root 16384 Sep  9 15:22 oap-libs # SkyWalking OAP Server 4 -rw-r--r-- 1 root root  1978 Sep  9 14:32 README.txt 4 drwxr-xr-x 2 root root  4096 Sep  9 15:44 webapp # SkyWalking UI</code></pre><h2 id="2-3-SkyWalking-OAP-搭建"><a href="#2-3-SkyWalking-OAP-搭建" class="headerlink" title="2.3 SkyWalking OAP 搭建"></a>2.3 SkyWalking OAP 搭建</h2><p><strong>① 修改 OAP 配置文件</strong></p><blockquote><p>友情提示：如果配置文件，适合 SkyWalking 6.X 版本。</p></blockquote><pre class="language-yaml" data-language="yaml"><code class="language-yaml">$ vi config/application.yml<span class="token key atrule">storage</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch7</span><span class="token punctuation">:</span>    <span class="token key atrule">nameSpace</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_NAMESPACE<span class="token punctuation">:</span><span class="token string">"elasticsearch"</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">clusterNodes</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_CLUSTER_NODES<span class="token punctuation">:</span>localhost<span class="token punctuation">:</span><span class="token number">9200</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_HTTP_PROTOCOL<span class="token punctuation">:</span><span class="token string">"http"</span><span class="token punctuation">&#125;</span><span class="token comment">#    trustStorePath: $&#123;SW_SW_STORAGE_ES_SSL_JKS_PATH:"../es_keystore.jks"&#125;</span><span class="token comment">#    trustStorePass: $&#123;SW_SW_STORAGE_ES_SSL_JKS_PASS:""&#125;</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_ES_USER<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_ES_PASSWORD<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">indexShardsNumber</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_INDEX_SHARDS_NUMBER<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">indexReplicasNumber</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_INDEX_REPLICAS_NUMBER<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span>    <span class="token comment"># Those data TTL settings will override the same settings in core module.</span>    <span class="token key atrule">recordDataTTL</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_RECORD_DATA_TTL<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">&#125;</span> <span class="token comment"># Unit is day</span>    <span class="token key atrule">otherMetricsDataTTL</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_OTHER_METRIC_DATA_TTL<span class="token punctuation">:</span><span class="token number">45</span><span class="token punctuation">&#125;</span> <span class="token comment"># Unit is day</span>    <span class="token key atrule">monthMetricsDataTTL</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_MONTH_METRIC_DATA_TTL<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span> <span class="token comment"># Unit is month</span>    <span class="token comment"># Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html</span>    <span class="token key atrule">bulkActions</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_BULK_ACTIONS<span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">&#125;</span> <span class="token comment"># Execute the bulk every 1000 requests</span>    <span class="token key atrule">flushInterval</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_FLUSH_INTERVAL<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span> <span class="token comment"># flush the bulk every 10 seconds whatever the number of requests</span>    <span class="token key atrule">concurrentRequests</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_CONCURRENT_REQUESTS<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token comment"># the number of concurrent requests</span>    <span class="token key atrule">resultWindowMaxSize</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_QUERY_MAX_WINDOW_SIZE<span class="token punctuation">:</span><span class="token number">10000</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">metadataQueryMaxSize</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_QUERY_MAX_SIZE<span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">&#125;</span>    <span class="token key atrule">segmentQueryMaxSize</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>SW_STORAGE_ES_QUERY_SEGMENT_SIZE<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token comment">#  h2:</span><span class="token comment">#    driver: $&#123;SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource&#125;</span><span class="token comment">#    url: $&#123;SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db&#125;</span><span class="token comment">#    user: $&#123;SW_STORAGE_H2_USER:sa&#125;</span><span class="token comment">#    metadataQueryMaxSize: $&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:5000&#125;</span></code></pre><ul><li><pre><code>storage.elasticsearch7<pre class="language-none"><code class="language-none">     配置项，设置使用 Elasticsearch 7.X 版本作为存储器。  - 这里，我们打开注释，并记得通过 &#96;nameSpace&#96; 设置 Elasticsearch 集群名。- &#96;&#96;&#96;  storage.elasticsearch</code></pre></code></pre></li></ul><p>  配置项，设置使用 Elasticsearch 6.X 版本作为存储器。</p><ul><li><p>这里，我们无需做任何改动。</p></li><li><p>如果胖友使用 Elasticsearch 6.X 版本作为存储器，记得设置这个配置项，而不是 <code>storage.elasticsearch7</code> 配置项。</p></li><li><pre><code>storage.h2<pre class="language-none"><code class="language-none">     配置项，设置使用 H2 作为存储器。  - 这里，我们需要手动注释掉，因为 H2 是默认配置的存储器。&gt; 友情提示：如果配置文件，适合 SkyWalking 7.X 版本。![配置文件](http:&#x2F;&#x2F;www.iocoder.cn&#x2F;images&#x2F;SkyWalking&#x2F;2017-01-01&#x2F;08.png)- 重点修改 &#96;storage&#96; 配置项，通过 &#96;storage.selector&#96; 配置项来设置具体使用的存储器。- &#96;storage.elasticsearch&#96; 配置项，设置使用 Elasticsearch 6.X 版本作为存储器。胖友可以主要修改 &#96;nameSpace&#96;、&#96;clusterNodes&#96; 两个配置项即可，设置使用的 Elasticsearch 的集群和命名空间。- &#96;storage.elasticsearch7&#96; 配置项，设置使用 Elasticsearch 7.X 版本作为存储器。- 还有 MySQL、H2、InfluxDB 等等存储器的配置可以选择，胖友自己根据需要去选择哈~**② 启动 SkyWalking OAP 服务**&#96;&#96;&#96;bash$ bin&#x2F;oapService.shSkyWalking OAP started successfully!</code></pre></code></pre></li></ul><p>是否<strong>真正</strong>启动成功，胖友打开 <code>logs/skywalking-oap-server.log</code> 日志文件，查看是否有错误日志。首次启动时，因为 SkyWalking OAP 会创建 Elasticsearch 的索引，所以会“疯狂”的打印日志。最终，我们看到如下日志，基本可以代表 SkyWalking OAP 服务启动成功：</p><blockquote><p>友情提示：因为首次启动会创建 Elasticsearch 索引，所以可能会比较慢。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">635</span> <span class="token operator">-</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>jetty<span class="token punctuation">.</span>server<span class="token punctuation">.</span><span class="token class-name">Server</span> <span class="token operator">-</span> <span class="token number">444</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO  <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">Started</span> <span class="token annotation punctuation">@35249ms</span></code></pre><h2 id="2-4-SkyWalking-UI-搭建"><a href="#2-4-SkyWalking-UI-搭建" class="headerlink" title="2.4 SkyWalking UI 搭建"></a>2.4 SkyWalking UI 搭建</h2><p><strong>① 启动 SkyWalking UI 服务</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">bin/webappService.shSkyWalking Web Application started successfully<span class="token operator">!</span></code></pre><p>是否<strong>真正</strong>启动成功，胖友打开 <code>logs/logs/webapp.log</code> 日志文件，查看是否有错误日志。最终，我们看到如下日志，基本可以代表 SkyWalking UI 服务启动成功：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">02.824</span>  INFO <span class="token number">48250</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>s<span class="token punctuation">.</span>apm<span class="token punctuation">.</span>webapp<span class="token punctuation">.</span><span class="token class-name">ApplicationStartUp</span>      <span class="token operator">:</span> <span class="token class-name">Started</span> <span class="token class-name">ApplicationStartUp</span> in <span class="token number">7.774</span> seconds <span class="token punctuation">(</span>JVM running <span class="token keyword">for</span> <span class="token number">8.316</span><span class="token punctuation">)</span></code></pre><p>如果想要修改 SkyWalking UI 服务的参数，可以编辑 <code>webapp/webapp.yml</code> 配置文件。例如说：</p><ul><li><code>server.port</code> ：SkyWalking UI 服务端口。</li><li><code>collector.ribbon.listOfServers</code> ：SkyWalking OAP 服务地址数组。因为 SkyWalking UI 界面的数据，是通过请求 SkyWalking OAP 服务来获得的。</li></ul><p><strong>② 访问 UI 界面：</strong></p><p>浏览器打开 <code>http://127.0.0.1:8080</code> 。界面如下图：<img src="http://www.iocoder.cn/images/SkyWalking/2017-01-01/01.png" alt="SkyWalking UI"></p><h2 id="2-5-SkyWalking-Agent"><a href="#2-5-SkyWalking-Agent" class="headerlink" title="2.5 SkyWalking Agent"></a>2.5 SkyWalking Agent</h2><p>大多数情况下，我们在启动项目的 Shell 脚本上，通过 <code>-javaagent</code> 参数进行配置 SkyWalking Agent 。我们在 <a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">「2.3.1 Shell」</a> 小节来看。</p><p>考虑到偶尔我们需要在 IDE 中，也希望使用 SkyWalking Agent ，所以我们在 <a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">「2.3.2 IDEA」</a> 小节来看。</p><h3 id="2-3-1-Shell"><a href="#2-3-1-Shell" class="headerlink" title="2.3.1 Shell"></a>2.3.1 Shell</h3><p><strong>① Agent 软件包</strong></p><p>我们需要将 <code>apache-skywalking-apm-bin/agent</code> 目录，拷贝到 Java 应用所在的服务器上。这样，Java 应用才可以配置使用该 SkyWalking Agent。我们来看看 Agent 目录下有哪些：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> -lstotal <span class="token number">35176</span>    <span class="token number">0</span> drwxr-xr-x@  <span class="token number">7</span> yunai  staff       <span class="token number">224</span> Dec <span class="token number">24</span> <span class="token number">14</span>:20 activations    <span class="token number">0</span> drwxr-xr-x@  <span class="token number">4</span> yunai  staff       <span class="token number">128</span> Dec <span class="token number">24</span> <span class="token number">14</span>:21 bootstrap-plugins    <span class="token number">0</span> drwxr-xr-x@  <span class="token number">3</span> yunai  staff        <span class="token number">96</span> Dec <span class="token number">24</span> <span class="token number">14</span>:12 config <span class="token comment"># SkyWalking Agent 配置</span>    <span class="token number">0</span> drwxr-xr-x@  <span class="token number">3</span> yunai  staff        <span class="token number">96</span> Jan  <span class="token number">2</span> <span class="token number">19</span>:29 logs <span class="token comment"># SkyWalking Agent 日志</span>    <span class="token number">0</span> drwxr-xr-x@ <span class="token number">13</span> yunai  staff       <span class="token number">416</span> Dec <span class="token number">24</span> <span class="token number">14</span>:22 optional-plugins <span class="token comment"># 可选插件</span>    <span class="token number">0</span> drwxr-xr-x@ <span class="token number">68</span> yunai  staff      <span class="token number">2176</span> Dec <span class="token number">24</span> <span class="token number">14</span>:20 plugins <span class="token comment"># 插件</span><span class="token number">35176</span> -rw-r--r--@  <span class="token number">1</span> yunai  staff  <span class="token number">18006420</span> Dec <span class="token number">24</span> <span class="token number">14</span>:12 skywalking-agent.jar <span class="token comment"># SkyWalking Agent</span></code></pre><ul><li>关于 SkyWalking Agent 提供的插件列表，可以看看<a href="https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/service-agent/java-agent/Supported-list.md">《SkyWalking 文档 —— 插件支持列表》</a>。</li></ul><p>因为艿艿是在本机测试，所以无需拷贝，SkyWalking Agent 目录是 <code>/Users/yunai/skywalking/apache-skywalking-apm-bin-es7/agent/</code>。</p><p>考虑到方便胖友，艿艿这里提供了一个最简的 Spring Boot 应用 <a href="http://static.iocoder.cn/lab-39-demo-2.2.2.RELEASE.jar">lab-39-demo-2.2.2.RELEASE.jar</a>。对应 Github 仓库是 <a href="https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-39/lab-39-demo">lab-39-demo</a>。</p><p><strong>② 配置 Java 启动脚本</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># SkyWalking Agent 配置</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SW_AGENT_NAME</span><span class="token operator">=</span>demo-application <span class="token comment"># 配置 Agent 名字。一般来说，我们直接使用 Spring Boot 项目的 `spring.application.name` 。</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SW_AGENT_COLLECTOR_BACKEND_SERVICES</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:11800 <span class="token comment"># 配置 Collector 地址。</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SW_AGENT_SPAN_LIMIT</span><span class="token operator">=</span><span class="token number">2000</span> <span class="token comment"># 配置链路的最大 Span 数量。一般情况下，不需要配置，默认为 300 。主要考虑，有些新上 SkyWalking Agent 的项目，代码可能比较糟糕。</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_AGENT</span><span class="token operator">=</span>-javaagent:/Users/yunai/skywalking/apache-skywalking-apm-bin-es7/agent/skywalking-agent.jar <span class="token comment"># SkyWalking Agent jar 地址。</span><span class="token comment"># Jar 启动</span>java -jar <span class="token variable">$JAVA_AGENT</span> -jar lab-39-demo-2.2.2.RELEASE.jar</code></pre><ul><li>通过环境变量，进行配置。</li><li>更多的变量，可以在 <a href="https://github.com/apache/skywalking/blob/master/apm-sniffer/config/agent.config"><code>/work/programs/skywalking/apache-skywalking-apm-bin/agent/config/agent.config</code></a> 查看。要注意，可能有些变量是被注释掉的，例如说 <code>SW_AGENT_SPAN_LIMIT</code> 对应的 <code>agent.span_limit_per_segment</code> 。</li></ul><p><strong>③ 执行脚本：</strong></p><p>直接执行上述的 Shell 脚本，启动 Java 项目。在启动日志中，我们可以看到 SkyWalking Agent 被加载的日志。日志示例如下：</p><pre class="language-java" data-language="java"><code class="language-java">DEBUG <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">400</span> main <span class="token class-name">AgentPackagePath</span> <span class="token operator">:</span> <span class="token class-name">The</span> beacon <span class="token keyword">class</span> location is jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>yunai<span class="token operator">/</span>skywalking<span class="token operator">/</span>apache<span class="token operator">-</span>skywalking<span class="token operator">-</span>apm<span class="token operator">-</span>bin<span class="token operator">-</span>es7<span class="token operator">/</span>agent<span class="token operator">/</span>skywalking<span class="token operator">-</span>agent<span class="token punctuation">.</span>jar<span class="token operator">!</span><span class="token operator">/</span>org<span class="token operator">/</span>apache<span class="token operator">/</span>skywalking<span class="token operator">/</span>apm<span class="token operator">/</span>agent<span class="token operator">/</span>core<span class="token operator">/</span>boot<span class="token operator">/</span><span class="token class-name">AgentPackagePath</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>INFO <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">402</span> main <span class="token class-name">SnifferConfigInitializer</span> <span class="token operator">:</span> <span class="token class-name">Config</span> file found in <span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>yunai<span class="token operator">/</span>skywalking<span class="token operator">/</span>apache<span class="token operator">-</span>skywalking<span class="token operator">-</span>apm<span class="token operator">-</span>bin<span class="token operator">-</span>es7<span class="token operator">/</span>agent<span class="token operator">/</span>config<span class="token operator">/</span>agent<span class="token punctuation">.</span>config<span class="token punctuation">.</span></code></pre><p>同时，也可以在 <code>/Users/yunai/skywalking/apache-skywalking-apm-bin-es7/agent/agent/logs/skywalking-api.log</code> 查看对应的 SkyWalking Agent 日志。日志示例如下：</p><pre class="language-java" data-language="java"><code class="language-java">DEBUG <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">539</span> <span class="token class-name">SkywalkingAgent</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span><span class="token class-name">ServiceAndEndpointRegisterClient</span><span class="token operator">-</span><span class="token number">0</span> <span class="token class-name">ServiceAndEndpointRegisterClient</span> <span class="token operator">:</span> <span class="token class-name">ServiceAndEndpointRegisterClient</span> running<span class="token punctuation">,</span> status<span class="token operator">:</span>CONNECTED<span class="token punctuation">.</span></code></pre><ul><li>这里，我们看到 <code>status:CONNECTED</code> ，表示 SkyWalking Agent 连接 SkyWalking OAP 服务成功。</li></ul><p><strong>④ 简单测试</strong></p><p>完事，可以去 SkyWalking UI 查看是否链路收集成功。</p><p>1、首先，使用浏览器，访问下 <a href="http://127.0.0.1:8079/demo/echo">http://127.0.0.1:8079/demo/echo</a> 地址，请求下 Spring Boot 应用提供的 API。因为，我们要追踪下该链路。</p><p>2、然后，继续使用浏览器，打开 <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a> 地址，进入 SkyWalking UI 界面。如下图所示：<img src="http://www.iocoder.cn/images/SkyWalking/2017-01-01/02.png" alt="SkyWalking UI 界面 —— 仪表盘"></p><p>这里，我们会看到 SkyWalking 中非常重要的三个概念：</p><ul><li><p><strong>服务(Service)</strong> ：表示对请求提供相同行为的一系列或一组工作负载。在使用 Agent 或 SDK 的时候，你可以定义服务的名字。如果不定义的话，SkyWalking 将会使用你在平台（例如说 Istio）上定义的名字。</p><blockquote><p>这里，我们可以看到 Spring Boot 应用的<strong>服务</strong>为 <code>&quot;demo-application&quot;</code>，就是我们在环境变量 <code>SW_AGENT_NAME</code> 中所定义的。</p></blockquote></li><li><p><strong>服务实例(Service Instance)</strong> ：上述的一组工作负载中的每一个工作负载称为一个实例。就像 Kubernetes 中的 pods 一样, 服务实例未必就是操作系统上的一个进程。但当你在使用 Agent 的时候, 一个服务实例实际就是操作系统上的一个真实进程。</p><blockquote><p>这里，我们可以看到 Spring Boot 应用的<strong>服务</strong>为 <code>&#123;agent_name&#125;-pid:&#123;pid&#125;@&#123;hostname&#125;</code>，由 Agent 自动生成。关于它，我们在<a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">「5.1 hostname」</a>小节中，有进一步的讲解，胖友可以瞅瞅。</p></blockquote></li><li><p><strong>端点(Endpoint)</strong> ：对于特定服务所接收的请求路径, 如 HTTP 的 URI 路径和 gRPC 服务的类名 + 方法签名。</p><blockquote><p>这里，我们可以看到 Spring Boot 应用的一个<strong>端点</strong>，为 API 接口 <code>/demo/echo</code>。</p></blockquote></li></ul><p>3、之后，点击「拓扑图」菜单，进入查看拓扑图的界面。如下图所示：<img src="http://www.iocoder.cn/images/SkyWalking/2017-01-01/03.png" alt="SkyWalking UI 界面 —— 拓扑图"></p><p>4、再之后，点击「追踪」菜单，进入查看链路数据的界面。如下图所示：<img src="http://www.iocoder.cn/images/SkyWalking/2017-01-01/04.png" alt="SkyWalking UI 界面 —— 追踪"></p><h3 id="2-3-2-IDEA"><a href="#2-3-2-IDEA" class="headerlink" title="2.3.2 IDEA"></a>2.3.2 IDEA</h3><p>我们统一使用 IDEA 作为开发 IDE ，所以忽略 Eclipse 的配置方式。</p><p>具体参考下图，比较简单：<img src="http://www.iocoder.cn/images/SkyWalking/2017-01-01/05.png" alt="IDEA 界面"></p><h1 id="3-搭建-SkyWalking-集群环境"><a href="#3-搭建-SkyWalking-集群环境" class="headerlink" title="3. 搭建 SkyWalking 集群环境"></a>3. 搭建 SkyWalking 集群环境</h1><p>在生产环境下，我们一般推荐搭建 SkyWalking 集群环境。😈 当然，如果公司比较抠门，也可以在生产环境下使用 SkyWalking 单机环境，毕竟 SkyWalking 挂了之后，不影响业务的正常运行。</p><p>搭建一个 SkyWalking <strong>集群</strong>环境，步骤如下：</p><ul><li>第一步，搭建一个 Elasticsearch 服务的<strong>集群</strong>。</li><li>第二步，搭建一个注册中心的<strong>集群</strong>。目前 SkyWalking 支持 Zookeeper、Kubernetes、Consul、Nacos 作为注册中心。</li><li>第三步，搭建一个 SkyWalking OAP 服务的<strong>集群</strong>，同时参考<a href="https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/backend/backend-cluster.md">《SkyWalking 文档 —— 集群管理》</a>，将 SkyWalking OAP 服务注册到注册中心上。</li><li>第四步，启动一个 Spring Boot 应用，并配置 SkyWalking Agent。另外，在设置 SkyWaling Agent 的 <code>SW_AGENT_COLLECTOR_BACKEND_SERVICES</code> 地址时，需要设置多个 SkyWalking OAP 服务的地址数组。</li><li>第五步，搭建一个 SkyWalking UI 服务的<strong>集群</strong>，同时使用 Nginx 进行负载均衡。另外，在设置 SkyWalking UI 的 <code>collector.ribbon.listOfServers</code> 地址时，也需要设置多个 SkyWalking OAP 服务的地址数组。</li></ul><p>😈 具体的搭建过程，并不复杂，胖友自己去尝试下。</p><h1 id="4-告警"><a href="#4-告警" class="headerlink" title="4. 告警"></a>4. 告警</h1><p>在 SkyWaling 中，已经提供了告警功能，具体可见<a href="https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/backend/backend-alarm.md">《SkyWalking 文档 —— 告警》</a>。</p><p>默认情况下，SkyWalking 已经<a href="https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/backend/backend-alarm.md#%E9%BB%98%E8%AE%A4%E5%91%8A%E8%AD%A6%E8%A7%84%E5%88%99">内置告警规则</a>。同时，我们可以参考<a href="https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/backend/backend-alarm.md#%E8%A7%84%E5%88%99">告警规则</a>，进行自定义。</p><p>在满足 SkyWalking 告警规则的触发规则时，我们在 SkyWaling UI 的告警界面，可以看到告警内容。如下图所示：<img src="http://www.iocoder.cn/images/SkyWalking/2017-01-01/06.png" alt="SkyWaling UI 界面 —— 告警"></p><p>同时，我们自定义 <a href="https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/backend/backend-alarm.md#webhook">Webhook</a> ，对接 SkyWalking 的告警请求。而具体的邮箱、钉钉等告警方式，需要自己进行开发。至于自定义 WebHook 如何实现，可以参考：</p><ul><li>Java 语言：<ul><li><a href="http://www.iocoder.cn/Fight/Distributed-tracking-system-based-on-SkyWalking-abnormal-alert/?self">《基于 SkyWalking 的分布式跟踪系统 - 异常告警》</a></li></ul></li><li>Go 语言：<ul><li><a href="https://github.com/yanmaipian/dingding-notify-for-skywalking">dingding-notify-for-skywalking</a></li><li><a href="https://github.com/weiqiang333/infra-skywalking-webhook">infra-skywalking-webhook</a></li></ul></li></ul><h1 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h1><h2 id="5-1-hostname-配置"><a href="#5-1-hostname-配置" class="headerlink" title="5.1 hostname 配置"></a>5.1 hostname 配置</h2><p>在 SkyWalking 中，每个被监控的实例的名字，会包含 hostname 。格式为：<code>&#123;agent_name&#125;-pid:&#123;pid&#125;@&#123;hostname&#125;</code> ，例如说：<code>&quot;scrm-scheduler-pid:27629@iZbp1e2xlyvr7fh67qi59oZ&quot;</code> 。</p><p>因为有些服务器未正确设置 <code>hostname</code> ，所以我们一定要去修改，不然都不知道是哪个服务器上的实例（😈 鬼知道 <code>&quot;iZbp1e2xlyvr7fh67qi59oZ&quot;</code> 一串是哪个服务器啊）。</p><p>修改方式如下：</p><p><strong>1、修改 /etc/hosts 的 hostname</strong> ：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1 localhost::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">10.80</span>.62.151 pre-app-01 <span class="token comment"># 就是这个，其中 10.80.62.151 是本机内网 IP ，pre-app-01 是 hostname 。</span></code></pre><p><strong>2、修改本机 hostname</strong> ：</p><p>参考 <a href="https://yq.aliyun.com/articles/427296">《CentOS7 修改主机名（hostname）》</a></p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">hostname</span> pre-app-01 <span class="token comment"># 其中 pre-app-01 就是你希望的 hostname 。</span>$ hostnamectl set-hostname pre-app-01 <span class="token comment"># 其中 pre-app-01 就是你希望的 hostname 。</span></code></pre><h1 id="6-Spring-Boot-使用示例"><a href="#6-Spring-Boot-使用示例" class="headerlink" title="6. Spring Boot 使用示例"></a>6. Spring Boot 使用示例</h1><p>在 <a href="http://www.iocoder.cn/Spring-Boot/SkyWalking/?self">《芋道 Spring Boot 链路追踪 SkyWalking 入门》</a> 中，我们来详细学习如何在 Spring Boot 中，整合并使用 SkyWalking 收集链路数据。😈 相比<a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">「2.5 SkyWaling Agent」</a>来说，我们会提供更加丰富的示例哟。</p><h1 id="7-Spring-Cloud-使用示例"><a href="#7-Spring-Cloud-使用示例" class="headerlink" title="7. Spring Cloud 使用示例"></a>7. Spring Cloud 使用示例</h1><p>在 <a href="http://www.iocoder.cn/Spring-Cloud/SkyWalking/?self">《芋道 Spring Cloud 链路追踪 SkyWalking 入门》</a> 中，我们来详细学习如何在 Spring Cloud 中，整合并使用 SkyWalking 收集链路数据。😈 相比<a href="https://skywalking.apache.org/zh/blog/2020-04-19-skywalking-quick-start.html#">「2.5 SkyWaling Agent」</a>来说，我们会提供更加丰富的示例哟。</p><h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>本文仅仅是简单的 SkyWalking 入门文章，如果胖友想要更好的使用 SkyWalking，推荐通读下<a href="https://github.com/SkyAPM/document-cn-translation-of-skywalking">《SkyWalking 文档》</a>。</p><p>想要进一步深入的胖友，也可以阅读如下资料：</p><ul><li><a href="http://www.iocoder.cn/categories/SkyWalking/?self">《SkyWalking 源码解析》</a></li><li><a href="http://www.iocoder.cn/Fight/APM-Apache-Skywalking-and-Pinpoint/?self">《APM 巅峰对决：Apache Skywalking P.K. Pinpoint》</a></li><li><a href="http://skywalking.apache.org/zh/blog/">《SkyWalking 官方 —— 博客合集》</a></li></ul><p>😈 最后弱弱的问一句，上完 SkyWaling 之后，有没发现自己系统各种地方慢慢慢！嘻嘻。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker安装portainer</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<pre class="language-none"><code class="language-none">$ docker volume create portainer_data$ docker run -d -p 9220:8000 -p 9221:9000 --name&#x3D;portainer --restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data portainer&#x2F;portainer-ce</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker或Podman容器内无法解析DNS问题多种解决方案</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker或Podman容器内无法解析DNS问题多种解决方案"><a href="#Docker或Podman容器内无法解析DNS问题多种解决方案" class="headerlink" title="Docker或Podman容器内无法解析DNS问题多种解决方案"></a>Docker或Podman容器内无法解析DNS问题多种解决方案</h2><h2 id="开机防火墙IP地址伪装（IP地址转发）功能"><a href="#开机防火墙IP地址伪装（IP地址转发）功能" class="headerlink" title="开机防火墙IP地址伪装（IP地址转发）功能"></a>开机防火墙IP地址伪装（IP地址转发）功能</h2><p>如果使用的是Centos(RHEL)，并且没有关闭<code>Firewalld</code>防火墙，你需要留意是否开启了IP转发功能。</p><p><code>sudo firewall-cmd --query-masquerade</code>返回的结果为no，则没有开启。yes则为已经开启了IP地址转发，如果问题没有解决，请继续往下看。</p><p><code>sudo firewall-cmd --add-masquerade --permanent &amp;&amp; sudo firewall-cmd --reload</code>开启IP地址转发并生效。开启后请再次尝试容器内是否可以正常解析域名。</p><p>如果你想了解更多关于<code>firewalld</code>，请看我的另一篇博文<a href="https://blog.yeefire.com/2020_02/Linux_Firewalld.html">这可能是最全的firewalld防火墙常用指令教程</a></p><h2 id="开启内核IP地址转发"><a href="#开启内核IP地址转发" class="headerlink" title="开启内核IP地址转发"></a>开启内核IP地址转发</h2><p><code>cat /proc/sys/net/ipv4/ip_forward</code>查看是否已经开启，0为关闭状态，1为开启状态。如果已经开启请尝试其他解决方案。</p><p>如果返回值为0，则为关闭状态。切换到root用户执行<code>echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf</code>，继续执行<code>sysctl -p /etc/sysctl.conf</code>使之永久生效。</p><p>之后需要重新启动网络服务来使IP地址转发功能生效：</p><p>如果你是Centos(RHEL)系，需要重新启动<code>network</code>服务。执行<code>systemctl restart network</code>重启服务后生效。</p><p>如果是Debian/Ubuntu系列的发行版，执行<code>/etc/init.d/procps restart</code>或<code>/etc/init.d/procps.sh restart</code>生效。</p><h2 id="配置一个正确的DNS"><a href="#配置一个正确的DNS" class="headerlink" title="配置一个正确的DNS"></a>配置一个正确的DNS</h2><p>正常情况下，运行的容器会与主机使用相同的<code>resolv.conf</code>文件来进行DNS解析，也就是说如果在本机上可以正常解析域名，那么只要开启了IP地址转发的情况下，容器中也可以正常解析。</p><p>你可以先查看你的<code>resolv.conf</code>文件文件配置的是否正确。</p><pre class="language-none"><code class="language-none">cat &#x2F;etc&#x2F;resolv.conf</code></pre><p>如果发现DNS服务器地址有误，你可以手动编辑此文件，但是NetworkManager会在下次启动时网卡时对该文件还原为它的配置。所以，我们直接使用<code>NetworkManager</code>来更改我们的DNS比较妥当些。如果你的网络不是由<code>NetworkManager</code>管理。你可以试试看直接修改<code>/etc/resolv.conf</code>文件。</p><p>执行<code>sudo nmcli connection</code>来查看当前所有网络连接。</p><pre class="language-none"><code class="language-none">sudo nmcli connection modify ethernet-eth0(你的网卡连接名) ipv4.dns&#x3D;114.114.114.114</code></pre><p><code>sudo nmcli connection up ethernet-eth0(你的网卡连接名)</code>重启网卡，使手动配置的DNS生效。</p><h2 id="强制Docker使用自定义的DNS地址"><a href="#强制Docker使用自定义的DNS地址" class="headerlink" title="强制Docker使用自定义的DNS地址"></a>强制Docker使用自定义的DNS地址</h2><p><code>vim /etc/docker/daemon.json</code>修改该文件，如果没有该文件的话直接新建即可。</p><pre class="language-none"><code class="language-none"># 修改该文件内容为如下全部文本，注意花括号也包括在内。DNS服务器我使用的是114DNS，你也可以进行更换。&#123;  &quot;dns&quot;: [&quot;114.114.114.114&quot;]&#125;</code></pre><p>希望这篇文章能解决你的问题！如果还是不行，请在评论区留言，将你的大致情况说说看，我们一起研究研究看。</p><blockquote><p><a href="https://blog.yeefire.com/2020_03/docker_DNS_resolve.html">https://blog.yeefire.com/2020_03/docker_DNS_resolve.html</a></p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 不知道有没有用</span><span class="token punctuation">[</span>root@RicenOS ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection modify docker0 connection.zone trusted</span><span class="token punctuation">[</span>root@RicenOS ~<span class="token punctuation">]</span><span class="token comment"># systemctl stop NetworkManager.service</span><span class="token punctuation">[</span>root@RicenOS ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --permanent --zone=trusted --change-interface=docker0</span><span class="token punctuation">[</span>root@RicenOS ~<span class="token punctuation">]</span><span class="token comment"># systemctl start NetworkManager.service</span><span class="token punctuation">[</span>root@RicenOS ~<span class="token punctuation">]</span><span class="token comment"># nmcli connection modify docker0 connection.zone trusted</span><span class="token punctuation">[</span>root@RicenOS ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker.service</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>事务隔离级别</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="事务隔离级别-图文详解"><a href="#事务隔离级别-图文详解" class="headerlink" title="事务隔离级别(图文详解)"></a>事务隔离级别(图文详解)</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务?"></a>什么是事务?</h3><p>事务是逻辑上的一组操作，要么都执行，要么都不执行。</p><p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p><h3 id="事务的特性-ACID"><a href="#事务的特性-ACID" class="headerlink" title="事务的特性(ACID)"></a>事务的特性(ACID)</h3><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E4%BA%8B%E5%8A%A1%E7%89%B9%E6%80%A7.png" alt="事务的特性"></p><ol><li> <strong>原子性：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li> <strong>一致性：</strong> 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</li><li> <strong>隔离性：</strong> 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li><li> <strong>持久性：</strong> 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol><h3 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h3><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。</p><ul><li><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</li><li><strong>丢失修改（Lost to modify）:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。    例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</li><li><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</li><li><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li></ul><p><strong>不可重复度和幻读区别：</strong></p><p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p><p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。</p><p> 例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p><strong>SQL 标准定义了四个隔离级别：</strong></p><ul><li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li><li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li><li><strong>REPEATABLE-READ(可重复读)：</strong>  对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li><li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li></ul><hr><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻影读</th></tr></thead><tbody><tr><td align="center">READ-UNCOMMITTED</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">READ-COMMITTED</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">REPEATABLE-READ</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">SERIALIZABLE</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<code>SELECT @@tx_isolation;</code>命令来查看,MySQL 8.0 该命令改为<code>SELECT @@transaction_isolation;</code></p><p>​<code>sql mysql&gt; SELECT @@tx_isolation; +-----------------+ | @@tx_isolation  | +-----------------+ | REPEATABLE-READ | +-----------------+ ​</code></p><p>这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 <strong>REPEATABLE-READ（可重读）</strong> 事务隔离级别下，允许应用使用 Next-Key Lock 锁算法来避免幻读的产生。这与其他数据库系统(如 SQL Server)是不同的。所以说虽然 InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>，但是可以通过应用加锁读（例如 <code>select * from table for update</code> 语句）来保证不会产生幻读，而这个加锁度使用到的机制就是 Next-Key Lock 锁算法。从而达到了 SQL 标准的 <strong>SERIALIZABLE(可串行化)</strong> 隔离级别。</p><p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是<strong>READ-COMMITTED(读取提交内容):**，但是你要知道的是InnoDB 存储引擎默认使用 **REPEATABLE-READ（可重读）</strong>并不会有任何性能损失。</p><p>InnoDB 存储引擎在 <strong>分布式事务</strong> 的情况下一般会用到**SERIALIZABLE(可串行化)**隔离级别。</p><h3 id="实际情况演示"><a href="#实际情况演示" class="headerlink" title="实际情况演示"></a>实际情况演示</h3><p>在下面我会使用 2 个命令行mysql ，模拟多线程（多事务）对同一份数据的脏读问题。</p><p>MySQL 命令行的默认配置中事务都是自动提交的，即执行SQL语句后就会马上执行 COMMIT 操作。如果要显式地开启一个事务需要使用命令：<code>START TARNSACTION</code>。</p><p>我们可以通过下面的命令来设置隔离级别。</p><p>​<code>sql SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL [READ UNCOMMITTED|READ COMMITTED|REPEATABLE READ|SERIALIZABLE] ​</code></p><p>我们再来看一下我们在下面实际操作中使用到的一些并发控制语句:</p><ul><li><code>START TARNSACTION</code> |<code>BEGIN</code>：显式地开启一个事务。</li><li><code>COMMIT</code>：提交事务，使得对数据库做的所有修改成为永久性。</li><li><code>ROLLBACK</code>：回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。</li></ul><h4 id="脏读-读未提交"><a href="#脏读-读未提交" class="headerlink" title="脏读(读未提交)"></a>脏读(读未提交)</h4><div align="center">  <img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-31-1脏读(读未提交)实例.jpg" width="800px"/></div><h4 id="避免脏读-读已提交"><a href="#避免脏读-读已提交" class="headerlink" title="避免脏读(读已提交)"></a>避免脏读(读已提交)</h4><div align="center">  <img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-31-2读已提交实例.jpg" width="800px"/></div><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>还是刚才上面的读已提交的图，虽然避免了读未提交，但是却出现了，一个事务还没有结束，就发生了 不可重复读问题。</p><div align="center">  <img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-32-1不可重复读实例.jpg"/></div><h4 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h4><div align="center">  <img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-33-2可重复读.jpg"/></div><h4 id="防止幻读-可重复读"><a href="#防止幻读-可重复读" class="headerlink" title="防止幻读(可重复读)"></a>防止幻读(可重复读)</h4><div align="center">  <img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-33防止幻读(使用可重复读).jpg"/></div><p>一个事务对数据库进行操作，这种操作的范围是数据库的全部行，然后第二个事务也在对这个数据库操作，这种操作可以是插入一行记录或删除一行记录，那么第一个是事务就会觉得自己出现了幻觉，怎么还有没有处理的记录呢? 或者 怎么多处理了一行记录呢?</p><p>幻读和不可重复读有些相似之处 ，但是不可重复读的重点是修改，幻读的重点在于新增或者删除。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>《MySQL技术内幕：InnoDB存储引擎》</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/">https://dev.mysql.com/doc/refman/5.7/en/</a></li><li><a href="https://tech.youzan.com/seven-questions-about-the-lock-of-mysql/">Mysql 锁：灵魂七拷问</a></li><li><a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">Innodb 中的事务隔离级别和锁的关系</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud zipkin链路追踪</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载zipkin"><a href="#下载zipkin" class="headerlink" title="下载zipkin"></a>下载zipkin</h1><pre class="language-bash" data-language="bash"><code class="language-bash">docker run -d -p <span class="token number">9411</span>:9411 openzipkin/zipkin<span class="token function">curl</span> -sSL https://zipkin.io/quickstart.sh <span class="token operator">|</span> <span class="token function">bash</span> -sjava -jar zipkin.jar</code></pre><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><pre class="language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;</code></pre><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>spring.zipkin.base-url指定了Zipkin服务器的地址</li><li>spring.sleuth.sampler.percentage将采样比例设置为1.0，说明全部都需要。</li></ul><pre class="language-none"><code class="language-none">spring:  zipkin:    base-url: http:&#x2F;&#x2F;localhost:9000  sleuth:    sampler:      percentage: 1.0</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Seata TCC模式</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>单机的事务我们一般使用事务，其中就包括ACID特性。</p><p>A:atomic 原子性</p><p>C:Consistency 一致性</p><p>I: Isolation 隔离性</p><p>D:Durability 持久性</p><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p><strong>SQL 标准定义了四个隔离级别：</strong></p><ul><li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li><li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li><li><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li><li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li></ul><hr><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr><td>READ-UNCOMMITTED</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ-COMMITTED</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE-READ</td><td>×</td><td>×</td><td>√</td></tr><tr><td>SERIALIZABLE</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h1 id="AT模式"><a href="#AT模式" class="headerlink" title="AT模式"></a>AT模式</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring优秀工具类Resource</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.blogjava.net/coolingverse/articles/149364.html">http://www.blogjava.net/coolingverse/articles/149364.html</a></p><p>文件资源的操作是应用程序中常见的功能，如当上传一个文件后将其保存在特定目录下，从指定地址加载一个配置文件等等。我们一般使用 JDK 的 I/O 处理类完成这些操作，但对于一般的应用程序来说，JDK 的这些操作类所提供的方法过于底层，直接使用它们进行文件操作不但程序编写复杂而且容易产生错误。相比于 JDK 的 File，Spring 的 Resource 接口（资源概念的描述接口）抽象层面更高且涵盖面更广，Spring 提供了许多方便易用的资源操作工具类，它们大大降低资源操作的复杂度，同时具有更强的普适性。这些工具类不依赖于 Spring 容器，这意味着您可以在程序中象一般普通类一样使用它们。</p><p>加载文件资源</p><p>Spring 定义了一个 org.springframework.core.io.Resource 接口，Resource 接口是为了统一各种类型不同的资源而定义的，Spring 提供了若干 Resource 接口的实现类，这些实现类可以轻松地加载不同类型的底层资源，并提供了获取文件名、URL 地址以及资源内容的操作方法。</p><p><strong>访问文件资源</strong></p><p>假设有一个文件地位于 Web 应用的类路径下，您可以通过以下方式对这个文件资源进行访问：</p><ul><li>通过 FileSystemResource 以文件系统绝对路径的方式进行访问；</li><li>通过 ClassPathResource 以类路径的方式进行访问；</li><li>通过 ServletContextResource 以相对于Web应用根目录的方式进行访问。</li></ul><p>相比于通过 JDK 的 File 类访问文件资源的方式，Spring 的 Resource 实现类无疑提供了更加灵活的操作方式，您可以根据情况选择适合的 Resource 实现类访问资源。下面，我们分别通过 FileSystemResource 和 ClassPathResource 访问同一个文件资源：</p><p><strong>清单 1. FileSourceExample</strong></p><pre class="language-none"><code class="language-none">&#96;package com.baobaotao.io; import java.io.IOException; import java.io.InputStream; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.FileSystemResource; import org.springframework.core.io.Resource; public class FileSourceExample &#123;     public static void main(String[] args) &#123;         try &#123;             String filePath &#x3D;              &quot;D:&#x2F;masterSpring&#x2F;chapter23&#x2F;webapp&#x2F;WEB-INF&#x2F;classes&#x2F;conf&#x2F;file1.txt&quot;;             &#x2F;&#x2F; ① 使用系统文件路径方式加载文件             Resource res1 &#x3D; new FileSystemResource(filePath);              &#x2F;&#x2F; ② 使用类路径方式加载文件             Resource res2 &#x3D; new ClassPathResource(&quot;conf&#x2F;file1.txt&quot;);             InputStream ins1 &#x3D; res1.getInputStream();             InputStream ins2 &#x3D; res2.getInputStream();             System.out.println(&quot;res1:&quot;+res1.getFilename());             System.out.println(&quot;res2:&quot;+res2.getFilename());         &#125; catch (IOException e) &#123;             e.printStackTrace();         &#125;     &#125; &#125; &#96;</code></pre><p>在获取资源后，您就可以通过 Resource 接口定义的多个方法访问文件的数据和其它的信息：如您可以通过 getFileName() 获取文件名，通过 getFile() 获取资源对应的 File 对象，通过 getInputStream() 直接获取文件的输入流。此外，您还可以通过 createRelative(String relativePath) 在资源相对地址上创建新的资源。</p><p>在 Web 应用中，您还可以通过 ServletContextResource 以相对于 Web 应用根目录的方式访问文件资源，如下所示：</p><pre class="language-none"><code class="language-none">&#96;&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; pageEncoding&#x3D;&quot;utf-8&quot;%&gt; &lt;jsp:directive.page import&#x3D;&quot;     org.springframework.web.context.support.ServletContextResource&quot;&#x2F;&gt; &lt;jsp:directive.page import&#x3D;&quot;org.springframework.core.io.Resource&quot;&#x2F;&gt; &lt;%     &#x2F;&#x2F; ① 注意文件资源地址以相对于 Web 应用根路径的方式表示     Resource res3 &#x3D; new ServletContextResource(application,          &quot;&#x2F;WEB-INF&#x2F;classes&#x2F;conf&#x2F;file1.txt&quot;);     out.print(res3.getFilename()); %&gt; &#96;</code></pre><p>对于位于远程服务器（Web 服务器或 FTP 服务器）的文件资源，您则可以方便地通过 UrlResource 进行访问。</p><p>为了方便访问不同类型的资源，您必须使用相应的 Resource 实现类，是否可以在不显式使用 Resource 实现类的情况下，仅根据带特殊前缀的资源地址直接加载文件资源呢？Spring 提供了一个 ResourceUtils 工具类，它支持”classpath:”和”file:”的地址前缀，它能够从指定的地址加载文件资源，请看下面的例子：</p><p><strong>清单 2. ResourceUtilsExample</strong></p><pre class="language-none"><code class="language-none">&#96;package com.baobaotao.io; import java.io.File; import org.springframework.util.ResourceUtils; public class ResourceUtilsExample &#123;     public static void main(String[] args) throws Throwable&#123;         File clsFile &#x3D; ResourceUtils.getFile(&quot;classpath:conf&#x2F;file1.txt&quot;);         System.out.println(clsFile.isFile());          String httpFilePath &#x3D; &quot;file:D:&#x2F;masterSpring&#x2F;chapter23&#x2F;src&#x2F;conf&#x2F;file1.txt&quot;;         File httpFile &#x3D; ResourceUtils.getFile(httpFilePath);         System.out.println(httpFile.isFile());             &#125; &#125; &#96;</code></pre><p>ResourceUtils 的 getFile(String resourceLocation) 方法支持带特殊前缀的资源地址，这样，我们就可以在不和 Resource 实现类打交道的情况下使用 Spring 文件资源加载的功能了。</p><p><strong>本地化文件资源</strong></p><p>本地化文件资源是一组通过本地化标识名进行特殊命名的文件，Spring 提供的 LocalizedResourceHelper 允许通过文件资源基名和本地化实体获取匹配的本地化文件资源并以 Resource 对象返回。假设在类路径的 i18n 目录下，拥有一组基名为 message 的本地化文件资源，我们通过以下实例演示获取对应中国大陆和美国的本地化文件资源：</p><p><strong>清单 3. LocaleResourceTest</strong></p><pre class="language-none"><code class="language-none">&#96;package com.baobaotao.io; import java.util.Locale; import org.springframework.core.io.Resource; import org.springframework.core.io.support.LocalizedResourceHelper; public class LocaleResourceTest &#123;     public static void main(String[] args) &#123;         LocalizedResourceHelper lrHalper &#x3D; new LocalizedResourceHelper();         &#x2F;&#x2F; ① 获取对应美国的本地化文件资源         Resource msg_us &#x3D; lrHalper.findLocalizedResource(&quot;i18n&#x2F;message&quot;, &quot;.properties&quot;,          Locale.US);         &#x2F;&#x2F; ② 获取对应中国大陆的本地化文件资源         Resource msg_cn &#x3D; lrHalper.findLocalizedResource(&quot;i18n&#x2F;message&quot;, &quot;.properties&quot;,          Locale.CHINA);         System.out.println(&quot;fileName(us):&quot;+msg_us.getFilename());          System.out.println(&quot;fileName(cn):&quot;+msg_cn.getFilename());     &#125; &#125; &#96;</code></pre><p>虽然 JDK 的 java.util.ResourceBundle 类也可以通过相似的方式获取本地化文件资源，但是其返回的是 ResourceBundle 类型的对象。如果您决定统一使用 Spring 的 Resource 接表征文件资源，那么 LocalizedResourceHelper 就是获取文件资源的非常适合的帮助类了。</p><p>文件操作</p><p>在使用各种 Resource 接口的实现类加载文件资源后，经常需要对文件资源进行读取、拷贝、转存等不同类型的操作。您可以通过 Resource 接口所提供了方法完成这些功能，不过在大多数情况下，通过 Spring 为 Resource 所配备的工具类完成文件资源的操作将更加方便。</p><p><strong>文件内容拷贝</strong></p><p>第一个我们要认识的是 FileCopyUtils，它提供了许多一步式的静态操作方法，能够将文件内容拷贝到一个目标 byte[]、String 甚至一个输出流或输出文件中。下面的实例展示了 FileCopyUtils 具体使用方法：</p><p><strong>清单 4. FileCopyUtilsExample</strong></p><p>往往我们都通过直接操作 InputStream 读取文件的内容，但是流操作的代码是比较底层的，代码的面向对象性并不强。通过 FileCopyUtils 读取和拷贝文件内容易于操作且相当直观。如在 ① 处，我们通过 FileCopyUtils 的 copyToByteArray(File in) 方法就可以直接将文件内容读到一个 byte[] 中；另一个可用的方法是 copyToByteArray(InputStream in)，它将输入流读取到一个 byte[] 中。</p><p>如果是文本文件，您可能希望将文件内容读取到 String 中，此时您可以使用 copyToString(Reader in) 方法，如 ② 所示。使用 FileReader 对 File 进行封装，或使用 InputStreamReader 对 InputStream 进行封装就可以了。</p><p>FileCopyUtils 还提供了多个将文件内容拷贝到各种目标对象中的方法，这些方法包括：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>static void copy(byte[] in, File out)</code></td><td>将 byte[] 拷贝到一个文件中</td></tr><tr><td><code>static void copy(byte[] in, OutputStream out)</code></td><td>将 byte[] 拷贝到一个输出流中</td></tr><tr><td><code>static int copy(File in, File out)</code></td><td>将文件拷贝到另一个文件中</td></tr><tr><td><code>static int copy(InputStream in, OutputStream out)</code></td><td>将输入流拷贝到输出流中</td></tr><tr><td><code>static int copy(Reader in, Writer out)</code></td><td>将 Reader 读取的内容拷贝到 Writer 指向目标输出中</td></tr><tr><td><code>static void copy(String in, Writer out)</code></td><td>将字符串拷贝到一个 Writer 指向的目标中</td></tr></tbody></table><p>在实例中，我们虽然使用 Resource 加载文件资源，但 FileCopyUtils 本身和 Resource 没有任何关系，您完全可以在基于 JDK I/O API 的程序中使用这个工具类。</p><p><strong>属性文件操作</strong></p><p>我们知道可以通过 java.util.Properties的load(InputStream inStream) 方法从一个输入流中加载属性资源。Spring 提供的 PropertiesLoaderUtils 允许您直接通过基于类路径的文件地址加载属性资源，请看下面的例子：</p><pre class="language-none"><code class="language-none">&#96;package com.baobaotao.io; import java.util.Properties; import org.springframework.core.io.support.PropertiesLoaderUtils; public class PropertiesLoaderUtilsExample &#123;     public static void main(String[] args) throws Throwable &#123;             &#x2F;&#x2F; ① jdbc.properties 是位于类路径下的文件         Properties props &#x3D; PropertiesLoaderUtils.loadAllProperties(&quot;jdbc.properties&quot;);         System.out.println(props.getProperty(&quot;jdbc.driverClassName&quot;));     &#125; &#125; &#96;</code></pre><p>一般情况下，应用程序的属性文件都放置在类路径下，所以 PropertiesLoaderUtils 比之于 Properties#load(InputStream inStream) 方法显然具有更强的实用性。此外，PropertiesLoaderUtils 还可以直接从 Resource 对象中加载属性资源：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>static Properties loadProperties(Resource resource)</code></td><td>从 Resource 中加载属性</td></tr><tr><td><code>static void fillProperties(Properties props, Resource resource)</code></td><td>将 Resource 中的属性数据添加到一个已经存在的 Properties 对象中</td></tr></tbody></table><p><strong>特殊编码的资源</strong></p><p>当您使用 Resource 实现类加载文件资源时，它默认采用操作系统的编码格式。如果文件资源采用了特殊的编码格式（如 UTF-8），则在读取资源内容时必须事先通过 EncodedResource 指定编码格式，否则将会产生中文乱码的问题。</p><p><strong>清单 5. EncodedResourceExample</strong></p><pre class="language-none"><code class="language-none">&#96;package com.baobaotao.io; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.Resource; import org.springframework.core.io.support.EncodedResource; import org.springframework.util.FileCopyUtils; public class EncodedResourceExample &#123;         public static void main(String[] args) throws Throwable  &#123;             Resource res &#x3D; new ClassPathResource(&quot;conf&#x2F;file1.txt&quot;);             &#x2F;&#x2F; ① 指定文件资源对应的编码格式（UTF-8）             EncodedResource encRes &#x3D; new EncodedResource(res,&quot;UTF-8&quot;);             &#x2F;&#x2F; ② 这样才能正确读取文件的内容，而不会出现乱码             String content  &#x3D; FileCopyUtils.copyToString(encRes.getReader());             System.out.println(content);       &#125; &#125; &#96;</code></pre><p>EncodedResource 拥有一个 getResource() 方法获取 Resource，但该方法返回的是通过构造函数传入的原 Resource 对象，所以必须通过 EncodedResource#getReader() 获取应用编码后的 Reader 对象，然后再通过该 Reader 读取文件的内容。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot启动执行sql文件</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>init<span class="token punctuation">.</span></span><span class="token class-name">DataSourceInitializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>init<span class="token punctuation">.</span></span><span class="token class-name">DatabasePopulator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>init<span class="token punctuation">.</span></span><span class="token class-name">ResourceDatabasePopulator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token comment">/** * 自定义初始化数据源 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomizeDataSourceInitializer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"classpath:sql/mail_comment.sql"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Resource</span> functionScriptFarms<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceInitializer</span> <span class="token function">dataSourceInitializer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">DataSourceInitializer</span> initializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置数据源</span>        initializer<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        initializer<span class="token punctuation">.</span><span class="token function">setDatabasePopulator</span><span class="token punctuation">(</span><span class="token function">databasePopulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> initializer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">DatabasePopulator</span> <span class="token function">databasePopulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">ResourceDatabasePopulator</span> populator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceDatabasePopulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        populator<span class="token punctuation">.</span><span class="token function">addScripts</span><span class="token punctuation">(</span>functionScriptFarms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> populator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven修改默认的jdk版本</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>当系统中装有多个 JDK 版本时，如果控制 Maven 能够指定到正确的版本</p></blockquote><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><ol><li>在使用 <code>mvn clean package -Dmaven.test.skip=true</code> 对项目进行打包时</li><li>发现进度一直卡在编译无法继续执行</li><li>待编译项目 <strong>pom.xml</strong> 中指定的 JDK 版本是 1.8</li><li>通过 <code>mvn -version</code> 发现 Maven 获取的 JDK 版本是 11</li><li>这就是导致 Maven 无法顺利编译项目的根本原因</li></ol><h2 id="查看当前-Maven-版本"><a href="#查看当前-Maven-版本" class="headerlink" title="查看当前 Maven 版本"></a>查看当前 Maven 版本</h2><ol><li>下图中可以看到，Maven 当前指定的是 JDK 11</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj22t62pjj30hx02vaaq.jpg"></p><h2 id="查看当前-JDK-版本"><a href="#查看当前-JDK-版本" class="headerlink" title="查看当前 JDK 版本"></a>查看当前 JDK 版本</h2><ol><li>下图中可以看到，当前 JDK 版本是 1.8 ，很明显和上图 Maven 获取到的版本不一致<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj23j7g3yj30cy020zkg.jpg"></li></ol><h2 id="查看当前系统配置的所有-JDK-版本"><a href="#查看当前系统配置的所有-JDK-版本" class="headerlink" title="查看当前系统配置的所有 JDK 版本"></a>查看当前系统配置的所有 JDK 版本</h2><ol><li>下图中可以看到，当前系统配置了三个版本的 JDK ，而系统默认的是 JDK 11 ，与 Maven 获取到的一致</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj23v44u8j30e003fdgd.jpg"></p><h2 id="查看通过-JENV-管理的-JDK-版本"><a href="#查看通过-JENV-管理的-JDK-版本" class="headerlink" title="查看通过 JENV 管理的 JDK 版本"></a>查看通过 JENV 管理的 JDK 版本</h2><ol><li><p>下图中可以看到，通过 JENV 切换到的 JDK 版本是 1.8 ，与 <code>java -version</code> 获取到的一致</p></li><li><p>这就说明 JENV </p><p>虽然可以管理当前 JDK 版本，但是无法切换当前系统的默认 JDK</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj244e81dj30cm02g74e.jpg"></p><h2 id="终极解决方案"><a href="#终极解决方案" class="headerlink" title="终极解决方案"></a>终极解决方案</h2><ol><li><p>在终端输入以下脚本，强制指定 </p><pre class="language-none"><code class="language-none">JAVA_HOME</code></pre><p> 的默认版本是 1.8 </p><ul><li>这样虽然无法改变当前系统的默认 JDK 版本</li><li> <strong>但是可以控制其他软件获取到的 JDK 版本</strong>，这就已经满足需求了</li></ul></li></ol><pre class="language-sh" data-language="sh"><code class="language-sh">echo export &quot;JAVA_HOME&#x3D;\$(&#x2F;usr&#x2F;libexec&#x2F;java_home -v 1.8)&quot; &gt;&gt; ~&#x2F;.bash_profilesource ~&#x2F;.bash_profile</code></pre><h3 id="再次查看当前-Maven-版本"><a href="#再次查看当前-Maven-版本" class="headerlink" title="再次查看当前 Maven 版本"></a>再次查看当前 Maven 版本</h3><ol><li>下图中可以看到，Maven 当前指定的 JDK 已经替换成了 1.8</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj24erfomj30he02xjs2.jpg"></p><h3 id="再次查看当前系统配置的所有-JDK-版本"><a href="#再次查看当前系统配置的所有-JDK-版本" class="headerlink" title="再次查看当前系统配置的所有 JDK 版本"></a>再次查看当前系统配置的所有 JDK 版本</h3><ol><li>下图中可以看到，当前系统默认的 JDK 版本依旧是 11</li></ol><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj24n80daj30dr03dq3h.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nexus仓库分类</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="Nexus仓库分类"><a href="#Nexus仓库分类" class="headerlink" title="Nexus仓库分类"></a>Nexus仓库分类</h3><p>Nexus包含了各种类型的仓库类型。在登录后的Nexus界面，单击左边的“Repositories”链接</p><p>四种仓库类型：</p><p>1）group（仓库组）</p><p>2）hosted（宿主）</p><p>3）proxy（代理）</p><p>4）virtual（虚拟）</p><p>说明：</p><p>1）每种类型的Format有Maven1或者Maven2，maven1是老版本，现在一般使用maven2。</p><p>2）仓库的Policy（策略）表示该仓库为发布（Release）版本还是快照（Snapshot）版本仓库。</p><p>3）虚拟仓库其实也是为maven1服务的，所以意义不大。</p><p>4）宿主仓库指的就是我们自己项目所构建组成的仓库。</p><p>5）代理仓库指的是远程仓库，比如中央仓库等，因为私服需要完全替代中央仓库，那么他必须拥有中央仓库的功能，所以nexus的仓库会有各种代理仓库</p><p>6）仓库组，他是整合以上所有的仓库于一体，那么他就是我们项目私服的地址，因为他把所有仓库都容纳为一个个体，所以我们下载资源时，他都能在对应的仓库中找到。</p><p><a href="http://localhost:8081/nexus/content/groups/public/">http://localhost:8081/nexus/content/groups/public/</a></p><p><img src="http://static.oschina.net/uploads/space/2015/0604/191316_hhia_1989321.png" alt="img"></p><p>Nexus列出了默认的几个仓库：</p><p>1）Public Repositories：仓库组，将所有策略为Release的仓库聚合并通过一致的地址提供服务。</p><p>2）3rd party：一个策略为Release的宿主类型仓库，用来部署无法从公共仓库获得的第三方发布版本构件。</p><p>3）Apache Snapshots：策略为Snapshots的代理仓库，用来代理Apache Maven仓库的快照版本构件。</p><p>4）Central：该仓库代理Maven的中央仓库，策略为Release，只会下载和缓存中央仓库中的发布版本构件。</p><p>5）Central M1 shadow：maven1格式的虚拟类型仓库。</p><p>6）Codehaus Snapshots：代理Codehaus Maven仓库快照版本的代理仓库。</p><p>7）Release：策略为Release的宿主类型仓库，用来部署组织内部的发布版本构件。</p><p>8）Snapshots：策略为Snapshots的宿主类型仓库，用来部署组织内部的快照版本构件。</p><p><img src="http://static.oschina.net/uploads/space/2015/0604/191357_Rrwh_1989321.png" alt="img"></p><p>仓库之间的关系</p><p><img src="http://static.oschina.net/uploads/space/2015/0604/191445_kmKi_1989321.jpeg" alt="img"></p><h3 id="2、Nexus的索引与构件搜索"><a href="#2、Nexus的索引与构件搜索" class="headerlink" title="2、Nexus的索引与构件搜索"></a>2、Nexus的索引与构件搜索</h3><p>点击列表上的“Central”行，在下方的“Configuration”中我们可以看到，在“Ordered Group Repositories”中包含了Release、Snapshots、3rd party、Central等仓库。为了构建Nexus的Maven中央库索引，首先需要设置Nexus中Maven Cencal代理仓库下载远程索引，将“Download Remote Indexes”的值从默认值false改为true。然而，由于其他索引库，因为他们要么依赖中央库，要么是本地库，所以，只需要右键update index即可。</p><p><img src="http://static.oschina.net/uploads/space/2015/0604/191532_xf3l_1989321.jpeg" alt="img"></p><p>点击“Save”后，点击update now 更新索引，Nexus后台在下载Maven中央仓库的索引。</p><p><img src="http://static.oschina.net/uploads/space/2015/0604/191615_JXjl_1989321.png" alt="img"></p><p>保存过后点击Browser Remote 然后看看远程索引库是否更新下来了</p><p><img src="http://static.oschina.net/uploads/space/2015/0604/191644_ybMm_1989321.png" alt="img"></p><p>如果没有出现远程索引信息，那么要在“Public Repositories”行右击，点击“Update Index”</p><p><img src="http://static.oschina.net/uploads/space/2015/0604/191731_e2Xb_1989321.jpeg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nexus 使用</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="账号密码"><a href="#账号密码" class="headerlink" title="账号密码"></a>账号密码</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 在servers标签下配置server, 包括: 私服的用户名和密码, 在deploy项目时需要用到 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>StongPublic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>StongCentral<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xxxx/repository/maven-public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span></code></pre><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><h2 id="1-查看当前正在使用的settings-xml"><a href="#1-查看当前正在使用的settings-xml" class="headerlink" title="1.查看当前正在使用的settings.xml"></a>1.查看当前正在使用的settings.xml</h2><pre class="language-bash" data-language="bash"><code class="language-bash">mvn help:effective-settings</code></pre><p>在pom文件中加入如下配置：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--使用分发上传将项目打成jar包，上传到nexus私服上--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--发布版本仓库--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--nexus服务器中用户名：在settings.xml中和&lt;server>的id一致--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--自定义名称--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>RELEASES PUBLISH<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--仓库地址--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xx.xx.xx.xx:xxxx/repository/maven-releases/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--快照版本仓库--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--nexus服务器中用户名：在settings.xml中和&lt;server>的id一致--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--自定义名称--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>SNAPSHOTS PUBLISH<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--仓库地址--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xx.xx.xx.xx:xxxx/repository/maven-snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">></span></span></code></pre><h2 id="2-在settings-xml文件中加入如下配置："><a href="#2-在settings-xml文件中加入如下配置：" class="headerlink" title="2.在settings.xml文件中加入如下配置："></a>2.在settings.xml文件中加入如下配置：</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>####@123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>####@123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span>123456789101112</code></pre><h2 id="3-发生如下错误可能是配置的账号信息有误的原因："><a href="#3-发生如下错误可能是配置的账号信息有误的原因：" class="headerlink" title="3.发生如下错误可能是配置的账号信息有误的原因："></a>3.发生如下错误可能是配置的账号信息有误的原因：</h2><pre class="language-none"><code class="language-none">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy (default-deploy) on project demo-childA: Failed to deploy artifacts: Could not transfer artifact com.ecp:demo-childA:jar:1.0-20190625.082808-1 from&#x2F;to maven-snapshots (http:&#x2F;&#x2F;xx.xxx.xx.xx:xxxx&#x2F;repository&#x2F;maven-snapshots&#x2F;): Failed to transfer file http:&#x2F;&#x2F;xx.xxx.xx.xx:xxxx&#x2F;repository&#x2F;maven-snapshots&#x2F;com&#x2F;ecp&#x2F;demo-childA&#x2F;1.0-SNAPSHOT&#x2F;demo-childA-1.0-20190625.082808-1.jar with status code 401 -&gt; [Help 1]123</code></pre><p>可以使用：mvn help:effective-settings命令查看settings.xml配置文件查看配置信息</p><h2 id="4-将本地项目发布到Nexus私服："><a href="#4-将本地项目发布到Nexus私服：" class="headerlink" title="4.将本地项目发布到Nexus私服："></a>4.将本地项目发布到Nexus私服：</h2><pre class="language-bash" data-language="bash"><code class="language-bash">mvn clean deploy<span class="token comment">## 跳过javadoc</span>mvn deploy  -Dmaven.javadoc.skip<span class="token operator">=</span>true</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手动创建FeignCliet</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://my.oschina.net/wuxinshui/blog/3058490">Feign-请求不同注册中心的服务</a>中，提到，如果需要请求不同注册中心的服务，可以设置<code>@FeignClient</code>的<code>url</code>属性。</p><p>这种做法有个缺点，需要服务消费者，配置各个环境的<code>url</code>。</p><p>如果服务提供方<code>url</code>变更，需要通知到服务消费者，如果消费者很多，变更通知也是件麻烦事。</p><p>基于java的封装特性，作为独立的服务提供者，如果能封装<code>url</code>，岂不是更好？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//@FeignClient(name = "feign-provider")</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomizeFeignApi</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/customize"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">queryCustomize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>@FeignClient</code>，不需要。加上的话，会自动创建对应bean，达不到手动创建的目的。</p><p>自定义配置</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">FeignClientsConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignClientConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CustomizeFeignApi</span> <span class="token function">customizeFeignApi</span><span class="token punctuation">(</span><span class="token class-name">Contract</span> contract<span class="token punctuation">,</span> <span class="token class-name">Decoder</span> decoder<span class="token punctuation">,</span> <span class="token class-name">Encoder</span> encoder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Feign</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contract</span><span class="token punctuation">(</span>contract<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encoder</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decoder</span><span class="token punctuation">(</span>decoder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token class-name">CustomizeFeignApi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"http://localhost:8004"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>@Configuration</code>：需要被消费者应用扫描到。</p><p><code>@Import(FeignClientsConfiguration.class)</code>：如果消费者上下文不存在<code>Contract</code>, <code>Decoder</code>, <code>Encoder</code>，由<code>FeignClientsConfiguration</code>提供默认bean。</p><p>以上，可封装为<code>jar</code>，上传到公司nexus私服，有消费者下载使用。</p><p><img src="https://oscimg.oschina.net/oscnet/6732c4c0da2ed2f6e16796cc9ea54e426ca.jpg" alt="img"></p><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>依赖上文的jar。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--服务提供者--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.wxs.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud-sample-feign-provider-spi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>注入使用。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomizeFeignTestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CustomizeFeignApi</span> customizeFeignApi<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/customize"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> customizeFeignApi<span class="token punctuation">.</span><span class="token function">queryCustomize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>启动类，添加扫描。 <code>@ComponentScan(&quot;com.wxs.feign.provider.api&quot;)</code></p><p>验证</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><pre class="language-none"><code class="language-none">Method not annotated with HTTP method type (ex. GET, POST)Caused by: java.lang.IllegalStateException: Method queryCustomize not annotated with HTTP method type (ex. GET, POST)at feign.Util.checkState(Util.java:128) ~[feign-core-9.5.0.jar:na]at feign.Contract$BaseContract.parseAndValidateMetadata(Contract.java:97) ~[feign-core-9.5.0.jar:na]at feign.Contract$BaseContract.parseAndValidatateMetadata(Contract.java:64) ~[feign-core-9.5.0.jar:na]at feign.ReflectiveFeign$ParseHandlersByName.apply(ReflectiveFeign.java:146) ~[feign-core-9.5.0.jar:na]at feign.ReflectiveFeign.newInstance(ReflectiveFeign.java:53) ~[feign-core-9.5.0.jar:na]at feign.Feign$Builder.target(Feign.java:218) ~[feign-core-9.5.0.jar:na]at feign.Feign$Builder.target(Feign.java:214) ~[feign-core-9.5.0.jar:na]at com.wxs.feign.consumer.config.FeignClientConfig.customizeFeignApi(FeignClientConfig.java:38) ~[classes&#x2F;:na]</code></pre><p><code>feign.Feign.Builder</code>默认提供的是：<code>new Contract.Default()</code>。</p><p>需要指定<code>Contract</code>为<code>SpringMvcContract</code>。</p><pre class="language-none"><code class="language-none">Feign.builder().contract(new SpringMvcContract()).target(CustomizeFeignApi.class, &quot;http:&#x2F;&#x2F;localhost:8004&quot;)</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html">Creating Feign Clients Manually</a></p><p><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/760">Feign: Method not annotated with HTTP method type (ex. GET, POST)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos修改成阿里云仓库</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="DNF-YUM源配置文件替换为阿里家的"><a href="#DNF-YUM源配置文件替换为阿里家的" class="headerlink" title="DNF/YUM源配置文件替换为阿里家的"></a>DNF/YUM源配置文件替换为阿里家的</h1><p>由于系统安装的包管理配置文件链接的国外的服务器，导致我们安装软件、升级内核和升级软件的时候会从国外的服务器下载相关文件。由于众所周知的原因，国外服务器的网速真的不敢恭维，所以我们要把他们替换为国内的服务器，这样安装和升级软件的速度就会提高，降低维护人员在等待上所花费的时间。<br>因为阿里源文件里面已经包含了AppStream、Base、centosplus、Extras和PowerTools的相关内容，所以需要把这些文件改名为bak，不让系统执行。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/yum.repos.d/<span class="token function">mv</span> /etc/yum.repos.d/CentOS-AppStream.repo /etc/yum.repos.d/CentOS-AppStream.repo.bak<span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak<span class="token function">mv</span> /etc/yum.repos.d/CentOS-centosplus.repo /etc/yum.repos.d/CentOS-centosplus.repo.bak<span class="token function">mv</span> /etc/yum.repos.d/CentOS-Extras.repo /etc/yum.repos.d/CentOS-Extras.repo.bak<span class="token function">mv</span> /etc/yum.repos.d/CentOS-PowerTools.repo /etc/yum.repos.d/CentOS-PowerTools.repo.bak</code></pre><p>做完以上修改以后，就可以下载新的阿里源文件了，因为默认没有装wget，我们可以用curl来执行以下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</code></pre><p>如果有wget也可以执行以下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</code></pre><p>如果没有安装wget，运行这个命令会提示“bash: wget: 未找到命令”，那就用curl的那个命令来执行好了。或者你也可以先安装wget，很简单，只需要下面一个命令即可（前提是在将上面的文件改为“.bak”之前，如果已经改了，先改回去再执行下述命令）</p><pre class="language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">wget</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装jenkins</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">wget</span> -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo<span class="token function">sudo</span> <span class="token function">rpm</span> --import https://pkg.jenkins.io/redhat-stable/jenkins.io.keyyum <span class="token function">install</span> jenkins  </code></pre><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/sysconfig/jenkins<span class="token comment">#监听端口</span><span class="token assign-left variable">JENKINS_PORT</span><span class="token operator">=</span><span class="token string">"8080"</span></code></pre><h2 id="3-配置权限"><a href="#3-配置权限" class="headerlink" title="3.配置权限"></a>3.配置权限</h2><p>为了不因为权限出现各种问题，这里直接使用root</p><p>修改用户为root</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/sysconfig/jenkins<span class="token comment">#修改配置</span><span class="token variable">$JENKINS_USER</span><span class="token operator">=</span><span class="token string">"root"</span></code></pre><p>修改目录权限</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">chown</span> -R root:root /var/lib/jenkins<span class="token function">chown</span> -R root:root /var/cache/jenkins<span class="token function">chown</span> -R root:root /var/log/jenkins</code></pre><p>重启</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">service</span> jenkins restart<span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> jenkins</code></pre><h2 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h2><pre class="language-shell" data-language="shell"><code class="language-shell">systemctl start jenkins</code></pre><p>我这里启动失败了：</p><p><img src="https://images2018.cnblogs.com/blog/668104/201807/668104-20180710201227396-1299962709.png" alt="1531198978143"></p><p>错误信息为<code>Starting Jenkins bash: /usr/bin/java: No such file or directory</code>是java环境配置的问题。</p><p>找到你的jdk目录，我是在 <code>usr/local/java/jdk1.8.0_171/</code>下，创建软链接即可：</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">ln</span> -s /usr/local/java/jdk1.8.0_171/bin/java /usr/bin/java</code></pre><p>然后重新启动</p><p><img src="https://images2018.cnblogs.com/blog/668104/201807/668104-20180710201226959-451256225.png" alt="1531199078302"></p><h2 id="5-安装"><a href="#5-安装" class="headerlink" title="5.安装"></a>5.安装</h2><p>访问jenkins地址 http:&lt;ip或者域名&gt;:8080</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iowwig6j30rq0p4myg.jpg" alt="1531204667345"></p><p>执行命令查看密码：</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">cat</span> /var/lib/jenkins/secrets/initialAdminPassword</code></pre><p>插件安装选择推荐插件</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iox8ce3j30rq0p7tap.jpg" alt="1531204844660"></p><p>安装进行中</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iozkb95j30rl0owdhe.jpg" alt="1531204864191"></p><p>插件安装完成以后将会创建管理员账户</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioyv8m5j30rs0p4aat.jpg" alt="1531205120250"></p><p>安装完成：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioy5jyqj30rn0p8t9b.jpg" alt="1531205170165"></p><p>运行截图：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioxpo29j31h80q80ul.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装nexus</title>
      <link href="posts/24033b1e.html"/>
      <url>posts/24033b1e.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt<span class="token function">sudo</span> <span class="token function">curl</span> -O https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.3.1-01-unix.tar.gz<span class="token function">sudo</span> <span class="token function">tar</span> -xzvf nexus-3.3.1-01-unix.tar.gz<span class="token function">sudo</span> <span class="token function">ln</span> -s nexus-3.3.1-01 nexus</code></pre><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">useradd</span> nexus<span class="token function">sudo</span> <span class="token function">chown</span> -R nexus:nexus /opt/nexus<span class="token function">sudo</span> <span class="token function">chown</span> -R nexus:nexus /opt/sonatype-work/</code></pre><p>修改运行用户</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /opt/nexus/bin/nexus.rc<span class="token assign-left variable">run_as_user</span><span class="token operator">=</span><span class="token string">"nexus"</span></code></pre><h1 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/nexus-3.13.0-01/bin/nexus /etc/init.d/nexus<span class="token comment">#查看nexus服务状态、启动服务、停止服务等</span><span class="token function">service</span> nexus status/start/stop<span class="token comment">#设置为开机自启动/关闭等</span><span class="token function">chkconfig</span> nexus on/off</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装mongdb</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java动态代理</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="自己的基本理解"><a href="#自己的基本理解" class="headerlink" title="自己的基本理解"></a>自己的基本理解</h1><p>1、mybtis的核心代理类是MapperProxy,这是mybatis的代理类，具体的逻辑可以从这里看下去，前面是相关配置文件的读取。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//调用XxxMapper接口自定义的方法，进行代理</span>    <span class="token comment">//首先将当前被调用的方法Method构造成一个MapperMethod对象，然后掉用其execute方法真正的开始执行。</span>        <span class="token keyword">return</span> <span class="token function">cachedInvoker</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><p>2、接着使用MethodInvoker的实现类去执行，核心是实现类中的一个变量就是MapperMethod，真正执行的是这个类，他包含我们需要的所有内容</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PlainMethodInvoker</span> <span class="token keyword">implements</span> <span class="token class-name">MapperMethodInvoker</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MapperMethod</span> mapperMethod<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PlainMethodInvoker</span><span class="token punctuation">(</span><span class="token class-name">MapperMethod</span> mapperMethod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>mapperMethod <span class="token operator">=</span> mapperMethod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> mapperMethod<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><p>3、执行MapperMethod的execute方法就开始执行我们的的相关逻辑,获取statement,使用sqlSession去执行相关的sql。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Object</span> result<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> INSERT<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> UPDATE<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> DELETE<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> SELECT<span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">hasResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">executeWithResultHandler</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token function">executeForMany</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token function">executeForMap</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token function">executeForCursor</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          result <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FLUSH<span class="token operator">:</span>      result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Unknown execution method for: "</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Mapper method '"</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">+</span> <span class="token string">" attempted to return null from a method with a primitive return type ("</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java动态代理</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java-动态代理详解-https-www-cnblogs-com-whirly-p-10154887-html"><a href="#Java-动态代理详解-https-www-cnblogs-com-whirly-p-10154887-html" class="headerlink" title="Java 动态代理详解](https://www.cnblogs.com/whirly/p/10154887.html)"></a>Java 动态代理详解](<a href="https://www.cnblogs.com/whirly/p/10154887.html">https://www.cnblogs.com/whirly/p/10154887.html</a>)</h1><p>动态代理在Java中有着广泛的应用，比如Spring AOP、Hibernate数据查询、测试框架的后端mock、RPC远程调用、Java注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等。</p><p>本文主要介绍Java中两种常见的动态代理方式：JDK原生动态代理和CGLIB动态代理。</p><p>由于Java动态代理与java反射机制关系紧密，请读者确保已经了解了Java反射机制，可参考上一篇文章《<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDU0MTE1NA==&mid=2247483785&idx=1&sn=f696c8c49cb7ecce9818247683482a1c&chksm=e9c2ed84deb564925172b2dd78d307d4dc345fa313d3e44f01e84fa22ac5561b37aec5cbd5b4&scene=0#rd">Java反射机制详解</a>》</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>本文将介绍的Java动态代理与设计模式中的代理模式有关，什么是代理模式呢？</p><p><strong>代理模式</strong>：给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。</p><p>代理模式角色分为 3 种：</p><p><strong>Subject（抽象主题角色）</strong>：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p><p><strong>RealSubject（真实主题角色</strong>）：真正实现业务逻辑的类；</p><p><strong>Proxy（代理主题角色）</strong>：用来代理和封装真实主题；</p><p>代理模式的结构比较简单，其核心是代理类，为了让客户端能够<strong>一致性地对待</strong>真实对象和代理对象，在代理模式中引入了抽象层</p><p><img src="http://image.laijianfeng.org/2018_12_20_proxyUML.jpg" alt="代理模式类图"></p><p>代理模式<strong>按照职责</strong>（使用场景）来分类，至少可以分为以下几类：1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理等等。</p><p>如果<strong>根据字节码的创建时机</strong>来分类，可以分为静态代理和动态代理：</p><ul><li>所谓<strong>静态</strong>也就是在<strong>程序运行前</strong>就已经存在代理类的<strong>字节码文件</strong>，代理类和真实主题角色的关系在运行前就确定了。</li><li>而动态代理的源码是在程序运行期间由<strong>JVM</strong>根据反射等机制<strong>动态的生成</strong>，所以在运行前并不存在代理类的字节码文件</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>我们先通过实例来学习静态代理，然后理解静态代理的缺点，再来学习本文的主角：动态代理</p><p>编写一个接口 UserService ，以及该接口的一个实现类 UserServiceImpl</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询 selectById"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新 update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们将通过静态代理对 UserServiceImpl 进行功能增强，在调用 <code>select</code> 和 <code>update</code> 之前记录一些日志。写一个代理类 UserServiceProxy，代理类需要实现 UserService</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> target<span class="token punctuation">;</span> <span class="token comment">// 被代理的对象</span>    <span class="token keyword">public</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里才实际调用真实主题角色的方法</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里才实际调用真实主题角色的方法</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 在执行方法之前执行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log start time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 在执行方法之后执行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log end time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>客户端测试</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UserService</span> userServiceImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span>userServiceImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>输出</p><pre class="language-none"><code class="language-none">log start time [Thu Dec 20 14:13:25 CST 2018] 查询 selectByIdlog end time [Thu Dec 20 14:13:25 CST 2018] log start time [Thu Dec 20 14:13:25 CST 2018] 更新 updatelog end time [Thu Dec 20 14:13:25 CST 2018] </code></pre><p>通过静态代理，我们达到了功能增强的目的，而且没有侵入原代码，这是静态代理的一个优点。</p><h4 id="静态代理的缺点"><a href="#静态代理的缺点" class="headerlink" title="静态代理的缺点"></a>静态代理的缺点</h4><p>虽然静态代理实现简单，且不侵入原代码，但是，当场景稍微复杂一些的时候，静态代理的缺点也会暴露出来。</p><p>1、 当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：</p><ul><li>只维护一个代理类，由这个代理类实现多个接口，但是这样就导致<strong>代理类过于庞大</strong></li><li>新建多个代理类，每个目标对象对应一个代理类，但是这样会<strong>产生过多的代理类</strong></li></ul><p>2、 当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，<strong>不易维护</strong>。</p><h4 id="如何改进？"><a href="#如何改进？" class="headerlink" title="如何改进？"></a>如何改进？</h4><p>当然是让代理类<strong>动态的生成</strong>啦，也就是动态代理。</p><p><strong>为什么类可以动态的生成？</strong></p><p>这就涉及到Java虚拟机的<strong>类加载机制</strong>了，推荐翻看《深入理解Java虚拟机》7.3节 类加载的过程。</p><p>Java虚拟机类加载过程主要分为五个阶段：加载、验证、准备、解析、初始化。其中加载阶段需要完成以下3件事情：</p><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为方法区这个类的各种数据访问入口</li></ol><p>由于虚拟机规范对这3点要求并不具体，所以实际的实现是非常灵活的，关于第1点，<strong>获取类的二进制字节流</strong>（class字节码）就有很多途径：</p><ul><li>从ZIP包获取，这是JAR、EAR、WAR等格式的基础</li><li>从网络中获取，典型的应用是 Applet</li><li><strong>运行时计算生成</strong>，这种场景使用最多的是动态代理技术，在 java.lang.reflect.Proxy 类中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 <code>*$Proxy</code> 的代理类的二进制字节流</li><li>由其它文件生成，典型应用是JSP，即由JSP文件生成对应的Class类</li><li>从数据库中获取等等</li></ul><p>所以，动态代理就是想办法，根据接口或目标对象，计算出代理类的字节码，然后再加载到JVM中使用。但是如何计算？如何生成？情况也许比想象的复杂得多，我们需要借助现有的方案。</p><h4 id="常见的字节码操作类库"><a href="#常见的字节码操作类库" class="headerlink" title="常见的字节码操作类库"></a>常见的字节码操作类库</h4><blockquote><p>这里有一些介绍：<a href="https://java-source.net/open-source/bytecode-libraries">https://java-source.net/open-source/bytecode-libraries</a></p></blockquote><ul><li>Apache BCEL (Byte Code Engineering Library)：是Java classworking广泛使用的一种框架，它可以深入到JVM汇编语言进行类操作的细节。</li><li>ObjectWeb ASM：是一个Java字节码操作框架。它可以用于直接以二进制形式动态生成stub根类或其他代理类，或者在加载时动态修改类。</li><li>CGLIB(Code Generation Library)：是一个功能强大，高性能和高质量的代码生成库，用于扩展JAVA类并在运行时实现接口。</li><li>Javassist：是Java的加载时反射系统，它是一个用于在Java中编辑字节码的类库; 它使Java程序能够在运行时定义新类，并在JVM加载之前修改类文件。</li><li>…</li></ul><h4 id="实现动态代理的思考方向"><a href="#实现动态代理的思考方向" class="headerlink" title="实现动态代理的思考方向"></a>实现动态代理的思考方向</h4><p>为了让生成的代理类与目标对象（真实主题角色）保持一致性，从现在开始将介绍以下两种最常见的方式：</p><ol><li>通过实现接口的方式 -&gt; JDK动态代理</li><li>通过继承类的方式 -&gt; CGLIB动态代理</li></ol><p>注：使用ASM对使用者要求比较高，使用Javassist会比较麻烦</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>JDK动态代理主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code>，我们仍然通过案例来学习</p><p>编写一个调用逻辑处理器 LogHandler 类，提供日志增强功能，并实现 InvocationHandler 接口；在 LogHandler 中维护一个目标对象，这个对象是被代理的对象（真实主题角色）；在 <code>invoke</code> 方法中编写方法调用的逻辑处理</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> target<span class="token punctuation">;</span>  <span class="token comment">// 被代理的对象，实际的方法执行者</span>    <span class="token keyword">public</span> <span class="token class-name">LogHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用 target 的 method 方法</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token comment">// 返回方法的执行结果</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调用invoke方法之前执行</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log start time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调用invoke方法之后执行</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log end time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>编写客户端，获取动态生成的代理类的对象须借助 Proxy 类的 newProxyInstance 方法，具体步骤可见代码和注释</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">proxy<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">proxy<span class="token punctuation">.</span></span><span class="token class-name">UserServiceImpl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 设置变量可以保存动态代理类，默认名称以 $Proxy0 格式命名</span>        <span class="token comment">// System.getProperties().setProperty("sun.misc.ProxyGenerator.saveGeneratedFiles", "true");</span>        <span class="token comment">// 1. 创建被代理的对象，UserService接口的实现类</span>        <span class="token class-name">UserServiceImpl</span> userServiceImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 获取对应的 ClassLoader</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> userServiceImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，</span>        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> userServiceImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用</span>        <span class="token comment">//     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl</span>        <span class="token class-name">InvocationHandler</span> logHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogHandler</span><span class="token punctuation">(</span>userServiceImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*   5.根据上面提供的信息，创建代理对象 在这个过程中，               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码               b.然后根据相应的字节码转换成对应的class，               c.然后调用newInstance()创建代理实例 */</span>        <span class="token class-name">UserService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> logHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用代理的方法</span>        proxy<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy</span>        <span class="token comment">// ProxyUtils.generateClassFile(userServiceImpl.getClass(), "UserServiceProxy");</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">log start time [Thu Dec 20 16:55:19 CST 2018] 查询 selectByIdlog end time [Thu Dec 20 16:55:19 CST 2018] log start time [Thu Dec 20 16:55:19 CST 2018] 更新 updatelog end time [Thu Dec 20 16:55:19 CST 2018] </code></pre><p>InvocationHandler 和 Proxy 的主要方法介绍如下：</p><p><strong>java.lang.reflect.InvocationHandler</strong></p><p><code>Object invoke(Object proxy, Method method, Object[] args)</code> 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用</p><p><strong>java.lang.reflect.Proxy</strong></p><p><code>static InvocationHandler getInvocationHandler(Object proxy)</code> 用于获取指定代理对象所关联的调用处理器</p><p><code>static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces)</code> 返回指定接口的代理类</p><p><code>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code> 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的 invoke 方法</p><p><code>static boolean isProxyClass(Class&lt;?&gt; cl)</code> 返回 cl 是否为一个代理类</p><h4 id="代理类的调用过程"><a href="#代理类的调用过程" class="headerlink" title="代理类的调用过程"></a>代理类的调用过程</h4><p>生成的代理类到底长什么样子呢？借助下面的工具类，把代理类保存下来再探个究竟<br>（通过设置环境变量sun.misc.ProxyGenerator.saveGeneratedFiles=true也可以保存代理类）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span><span class="token class-name">ProxyGenerator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 将根据类信息动态生成的二进制字节码保存到硬盘中，默认的是clazz目录下     * params: clazz 需要生成动态代理类的类     * proxyName: 为动态生成的代理类的名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generateClassFile</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> proxyName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 根据类信息和提供的代理类名称，生成字节码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classFile <span class="token operator">=</span> <span class="token class-name">ProxyGenerator</span><span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span>proxyName<span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> paths <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//保留到硬盘中</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>paths <span class="token operator">+</span> proxyName <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>classFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>然后在 Client2 测试类的main的最后面加入一行代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy</span><span class="token class-name">ProxyUtils</span><span class="token punctuation">.</span><span class="token function">generateClassFile</span><span class="token punctuation">(</span>userServiceImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UserServiceProxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>IDEA 再次运行之后就可以在 target 的类路径下找到 UserServiceProxy.class，双击后IDEA的反编译插件会将该二进制class文件</p><p><img src="http://image.laijianfeng.org/20181220_171031.png" alt="JDK 动态代理生成的代理类"></p><p>UserServiceProxy 的代码如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">proxy<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m4<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m0<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m3<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token comment">// 省略...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token comment">// 省略...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m4<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token comment">// 省略...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            m1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m4 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"proxy.UserService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m0 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"proxy.UserService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>var3<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>从 UserServiceProxy 的代码中我们可以发现：</p><ul><li>UserServiceProxy 继承了 Proxy 类，并且实现了被代理的所有接口，以及equals、hashCode、toString等方法</li><li>由于 UserServiceProxy 继承了 Proxy 类，所以每个代理类都会关联一个 InvocationHandler 方法调用处理器</li><li>类和所有方法都被 <code>public final</code> 修饰，所以代理类只可被使用，不可以再被继承</li><li>每个方法都有一个 Method 对象来描述，Method 对象在static静态代码块中创建，以 <code>m + 数字</code> 的格式命名</li><li>调用方法的时候通过 <code>super.h.invoke(this, m1, (Object[])null);</code> 调用，其中的 <code>super.h.invoke</code> 实际上是在创建代理的时候传递给 <code>Proxy.newProxyInstance</code> 的 LogHandler 对象，它继承 InvocationHandler 类，负责实际的调用处理逻辑</li></ul><p>而 LogHandler 的 invoke 方法接收到 method、args 等参数后，进行一些处理，然后通过反射让被代理的对象 target 执行方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 调用 target 的 method 方法</span>    <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token comment">// 返回方法的执行结果</span><span class="token punctuation">&#125;</span></code></pre><p>JDK动态代理执行方法调用的过程简图如下：</p><p><img src="http://image.laijianfeng.org/2018_12_20_JDKProxy.png" alt="JDK动态代理执行方法调用过程"></p><p>代理类的调用过程相信大家都明了了，而关于Proxy的源码解析，还请大家另外查阅其他文章或者直接看源码</p><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><p>maven引入CGLIB包，然后编写一个UserDao类，它没有接口，只有两个方法，select() 和 update()</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao 查询 selectById"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserDao 更新 update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>编写一个 LogInterceptor ，继承了 MethodInterceptor，用于方法的拦截回调</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @param object 表示要进行增强的对象     * @param method 表示拦截的方法     * @param objects 数组表示参数列表，基本数据类型需要传入其包装类型，如int-->Integer、long-Long、double-->Double     * @param methodProxy 表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用     * @return 执行结果     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 注意这里是调用 invokeSuper 而不是 invoke，否则死循环，methodProxy.invokesuper执行的是原始类的方法，method.invoke执行的是子类的方法</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log start time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log end time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>测试</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DaoProxy</span> daoProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DaoProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">Dao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置超类，cglib是通过继承来实现的</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>daoProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Dao</span> dao <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dao</span><span class="token punctuation">)</span>enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建代理类</span>        dao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dao<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-none"><code class="language-none">log start time [Fri Dec 21 00:06:40 CST 2018] UserDao 查询 selectByIdlog end time [Fri Dec 21 00:06:40 CST 2018] log start time [Fri Dec 21 00:06:40 CST 2018] UserDao 更新 updatelog end time [Fri Dec 21 00:06:40 CST 2018] </code></pre><p>还可以进一步多个 MethodInterceptor 进行过滤筛选</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogInterceptor2</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log2 start time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"log2 end time [%s] "</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 回调过滤器: 在CGLib回调时可以设置对不同方法执行不同的回调逻辑，或者根本不执行回调。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaoFilter</span> <span class="token keyword">implements</span> <span class="token class-name">CallbackFilter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// Callback 列表第1个拦截器</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// Callback 列表第2个拦截器，return 2 则为第3个，以此类推</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>再次测试</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibTest2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LogInterceptor</span> logInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LogInterceptor2</span> logInterceptor2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogInterceptor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置超类，cglib是通过继承来实现的</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallbacks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>logInterceptor<span class="token punctuation">,</span> logInterceptor2<span class="token punctuation">,</span> <span class="token class-name">NoOp</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置多个拦截器，NoOp.INSTANCE是一个空拦截器，不做任何处理</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallbackFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DaoFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDao</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建代理类</span>        proxy<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果</p><pre class="language-java" data-language="java"><code class="language-java">log start time <span class="token punctuation">[</span><span class="token class-name">Fri</span> <span class="token class-name">Dec</span> <span class="token number">21</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">39</span> CST <span class="token number">2018</span><span class="token punctuation">]</span> <span class="token class-name">UserDao</span> 查询 selectByIdlog end time <span class="token punctuation">[</span><span class="token class-name">Fri</span> <span class="token class-name">Dec</span> <span class="token number">21</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">39</span> CST <span class="token number">2018</span><span class="token punctuation">]</span> log2 start time <span class="token punctuation">[</span><span class="token class-name">Fri</span> <span class="token class-name">Dec</span> <span class="token number">21</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">39</span> CST <span class="token number">2018</span><span class="token punctuation">]</span> <span class="token class-name">UserDao</span> 更新 updatelog2 end time <span class="token punctuation">[</span><span class="token class-name">Fri</span> <span class="token class-name">Dec</span> <span class="token number">21</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">39</span> CST <span class="token number">2018</span><span class="token punctuation">]</span> </code></pre><p>CGLIB 创建动态代理类的模式是：</p><ol><li>查找目标类上的所有非final 的public类型的方法定义；</li><li>将这些方法的定义转换成字节码；</li><li>将组成的字节码转换成相应的代理的class对象；</li><li>实现 MethodInterceptor接口，用来处理对代理类上所有方法的请求</li></ol><h3 id="JDK动态代理与CGLIB动态代理对比"><a href="#JDK动态代理与CGLIB动态代理对比" class="headerlink" title="JDK动态代理与CGLIB动态代理对比"></a>JDK动态代理与CGLIB动态代理对比</h3><p>JDK动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。</p><p>cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。</p><p>JDK Proxy 的优势：</p><ul><li>最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。</li><li>平滑进行 JDK 版本升级，而字节码类库通常需要进行更新以保证在新版 Java 上能够使用。</li><li>代码实现简单。</li></ul><p>基于类似 cglib 框架的优势：</p><ul><li>无需实现接口，达到代理类无侵入</li><li>只操作我们关心的类，而不必为其他相关类增加工作量。</li><li>高性能</li></ul><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><blockquote><p>来源于网上，用于帮助理解和掌握，欢迎补充</p></blockquote><h4 id="描述动态代理的几种实现方式？分别说出相应的优缺点"><a href="#描述动态代理的几种实现方式？分别说出相应的优缺点" class="headerlink" title="描述动态代理的几种实现方式？分别说出相应的优缺点"></a>描述动态代理的几种实现方式？分别说出相应的优缺点</h4><p>代理可以分为 “静态代理” 和 “动态代理”，动态代理又分为 “JDK动态代理” 和 “CGLIB动态代理” 实现。</p><p><strong>静态代理</strong>：代理对象和实际对象都继承了同一个接口，在代理对象中指向的是实际对象的实例，这样对外暴露的是代理对象而真正调用的是 Real Object</p><ul><li><strong>优点</strong>：可以很好的保护实际对象的业务逻辑对外暴露，从而提高安全性。</li><li><strong>缺点</strong>：不同的接口要有不同的代理类实现，会很冗余</li></ul><p><strong>JDK 动态代理</strong>：</p><ul><li>为了解决静态代理中，生成大量的代理类造成的冗余；</li><li>JDK 动态代理只需要实现 InvocationHandler 接口，重写 invoke 方法便可以完成代理的实现，</li><li>jdk的代理是利用反射生成代理类 Proxyxx.class 代理类字节码，并生成对象</li><li>jdk动态代理之所以<strong>只能代理接口</strong>是因为<strong>代理类本身已经extends了Proxy，而java是不允许多重继承的</strong>，但是允许实现多个接口</li><li><strong>优点</strong>：解决了静态代理中冗余的代理实现类问题。</li><li><strong>缺点</strong>：JDK 动态代理是基于接口设计实现的，如果没有接口，会抛异常。</li></ul><p><strong>CGLIB 代理</strong>：</p><ul><li>由于 JDK 动态代理限制了只能基于接口设计，而对于没有接口的情况，JDK方式解决不了；</li><li>CGLib 采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑，来完成动态代理的实现。</li><li>实现方式实现 MethodInterceptor 接口，重写 intercept 方法，通过 Enhancer 类的回调方法来实现。</li><li>但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。</li><li>同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。</li><li><strong>优点</strong>：没有接口也能实现动态代理，而且采用字节码增强技术，性能也不错。</li><li><strong>缺点</strong>：技术实现相对难理解些。</li></ul><h4 id="CGlib-对接口实现代理？"><a href="#CGlib-对接口实现代理？" class="headerlink" title="CGlib 对接口实现代理？"></a>CGlib 对接口实现代理？</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodProxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">proxy<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token comment">/** * 创建代理类的工厂 该类要实现 MethodInterceptor 接口。 * 该类中完成三样工作： * （1）声明目标类的成员变量，并创建以目标类对象为参数的构造器。用于接收目标对象 * （2）定义代理的生成方法，用于创建代理对象。方法名是任意的。代理对象即目标类的子类 * （3）定义回调接口方法。对目标类的增强这在这里完成 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CGLibFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 声明目标类的成员变量</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CGLibFactory</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 定义代理的生成方法,用于创建代理对象</span>    <span class="token keyword">public</span> <span class="token class-name">UserService</span> <span class="token function">myCGLibCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 为代理对象设置父类，即指定目标类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 设置回调接口对象 注意，只所以在setCallback()方法中可以写上this，         * 是因为MethodIntecepter接口继承自Callback，是其子接口         */</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// create用以生成CGLib代理对象</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start invoke "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end invoke "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>参考：<br>《Java核心技术》卷1<br>《深入理解Java虚拟机》7.3<br>java docs: <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html">https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html</a><br><a href="https://segmentfault.com/a/1190000011291179">Java三种代理模式：静态代理、动态代理和cglib代理</a><br><a href="http://xzc.fun/w/index.php?title=%E6%8F%8F%E8%BF%B0%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F_%E5%88%86%E5%88%AB%E8%AF%B4%E5%87%BA%E7%9B%B8%E5%BA%94%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9">描述动态代理的几种实现方式 分别说出相应的优缺点</a><br><a href="https://my.oschina.net/robinyao/blog/811193">JDK动态代理详解</a><br><a href="https://blog.csdn.net/luanlouis/article/details/24589193">Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）</a><br><a href="https://blog.csdn.net/WangQYoho/article/details/77584832">静态代理和动态代理的理解</a></p><p><a href="https://www.jianshu.com/p/9bcac608c714">https://www.jianshu.com/p/9bcac608c714</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装nacos</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>不同版本有点配置有点差别</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;nacos&#x2F;releaseshttps:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;nacos&#x2F;releases&#x2F;download&#x2F;1.3.2&#x2F;nacos-server-1.3.2.zip</code></pre><h1 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h1><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#*************** Config Module Related Configurations ***************#</span><span class="token comment">### If use MySQL as datasource:</span><span class="token comment"># spring.datasource.platform=mysql</span><span class="token comment">### Count of DB:</span><span class="token comment"># db.num=1</span><span class="token comment">### Connect URL of DB:</span><span class="token comment"># db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><span class="token comment"># db.user=nacos</span><span class="token comment"># db.password=nacos</span></code></pre><h1 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h1><pre class="language-none"><code class="language-none">mysqldump -h -u -p nacos &lt; xx.sql</code></pre><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><pre class="language-bash" data-language="bash"><code class="language-bash">./startup.sh -m standalone</code></pre><h1 id="编写service"><a href="#编写service" class="headerlink" title="编写service"></a>编写service</h1><pre class="language-none"><code class="language-none">[Unit]Description&#x3D;nacosAfter&#x3D;network.target [Service]Type&#x3D;forkingExecStart&#x3D;&#x2F;opt&#x2F;nacos&#x2F;bin&#x2F;startup.sh -m standaloneExecReload&#x3D;&#x2F;opt&#x2F;nacos&#x2F;bin&#x2F;shutdown.shExecStop&#x3D;&#x2F;opt&#x2F;nacos&#x2F;bin&#x2F;shutdown.shPrivateTmp&#x3D;true [Install]  WantedBy&#x3D;multi-user.target</code></pre><pre class="language-none"><code class="language-none">systemctl start nacossystemctl enable nacos</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weihuaya/article/details/108060847">https://blog.csdn.net/weihuaya/article/details/108060847</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装rockermq</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h6 id="一、安装jdk-1-8"><a href="#一、安装jdk-1-8" class="headerlink" title="一、安装jdk 1.8"></a>一、安装jdk 1.8</h6><ol><li><p>jdk1.8 资源下载</p></li><li><p>上传至服务器目录，解压（以上传至root 目录为例）</p></li></ol><pre class="language-linux" data-language="linux"><code class="language-linux">tar -zxvf jdk-8u221-linux-x64.tar.gz</code></pre><ol><li>将解压后的文件夹移动到/usr/local目录下</li></ol><pre class="language-linux" data-language="linux"><code class="language-linux">mv jdk1.8.0_221 &#x2F;usr&#x2F;local&#x2F;</code></pre><ol><li>编辑以下文件，配置java 环境</li></ol><pre class="language-linux" data-language="linux"><code class="language-linux">vim &#x2F;etc&#x2F;profile</code></pre><ol><li>具体java 环境配置:</li></ol><pre class="language-linux" data-language="linux"><code class="language-linux">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_221export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jreexport CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;dt.JAVA_HOME&#x2F;lib&#x2F;tools.jar:$&#123;JRE_HOME&#125;&#x2F;libexport PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$&#123;PATH&#125;</code></pre><h6 id="此处顺便配置rocketmq-环境"><a href="#此处顺便配置rocketmq-环境" class="headerlink" title="此处顺便配置rocketmq 环境"></a>此处顺便配置rocketmq 环境</h6><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NAMESRV_ADDR</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:9876</code></pre><p>6.刷新文件，使配置立即生效</p><pre class="language-linux" data-language="linux"><code class="language-linux">source &#x2F;etc&#x2F;profile</code></pre><ol><li>查看是否安装成功</li></ol><pre class="language-linux" data-language="linux"><code class="language-linux">java -version</code></pre><p>8.配置成功,将会看到以下类似信息</p><pre class="language-css" data-language="css"><code class="language-css">java version <span class="token string">"1.8.0_221"</span><span class="token function">Java</span><span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build 1.8.0_221-b11<span class="token punctuation">)</span>Java <span class="token function">HotSpot</span><span class="token punctuation">(</span>TM<span class="token punctuation">)</span> 64-Bit Server VM <span class="token punctuation">(</span>build 25.221-b11<span class="token punctuation">,</span> mixed mode<span class="token punctuation">)</span></code></pre><h6 id="注意：使用openjdk-安装的话在配置rocketMq时候会出现（JAVA-HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。"><a href="#注意：使用openjdk-安装的话在配置rocketMq时候会出现（JAVA-HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。" class="headerlink" title="注意：使用openjdk 安装的话在配置rocketMq时候会出现（JAVA_HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。"></a>注意：使用openjdk 安装的话在配置rocketMq时候会出现（JAVA_HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。</h6><h6 id="二、安装rocketMQ"><a href="#二、安装rocketMQ" class="headerlink" title="二、安装rocketMQ"></a>二、安装rocketMQ</h6><ol><li>直接下载安装包（以4.5.1为例）<br> 官网：<a href="https://links.jianshu.com/go?to=https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip">https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip</a> </li></ol><h6 id="注意：不要下载源码包，否则是没有bin目录的"><a href="#注意：不要下载源码包，否则是没有bin目录的" class="headerlink" title="注意：不要下载源码包，否则是没有bin目录的"></a>注意：不要下载源码包，否则是没有bin目录的</h6><pre class="language-ruby" data-language="ruby"><code class="language-ruby">wget http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>apache<span class="token operator">/</span>rocketmq<span class="token operator">/</span><span class="token number">4.5</span><span class="token number">.1</span><span class="token operator">/</span>rocketmq<span class="token operator">-</span>all<span class="token operator">-</span><span class="token number">4.5</span><span class="token number">.1</span><span class="token operator">-</span>bin<span class="token operator">-</span>release<span class="token punctuation">.</span>zip</code></pre><p>2.解压,将会得到 rocketmq-all-4.5.1-bin-release 文件夹</p><pre class="language-css" data-language="css"><code class="language-css">unzip rocketmq-all-4.5.1-bin-release.zip</code></pre><p>3.进入bin 目录 修改配置(分别修改runserver.sh 以及 runbroker.sh，因为默认配置内存过大，可能导致启动失败)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/rocketmq-all-4.5.1-bin-release/bin/</code></pre><ol><li>修改 runserver.sh 文件</li></ol><p>   <img src="https://upload-images.jianshu.io/upload_images/12596656-c90d7cc4f81e1343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1141/format/webp" alt="img"></p><p>   修改位置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> runbroker.sh<span class="token comment">##使用快捷键 i 开启编辑模式</span><span class="token comment">##找到以下配置，将xms/xmx/xmn 分别修改成以下数值（视机器配置而定）</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span><span class="token comment">##保存</span>wq</code></pre><ol><li>修改 runbroker.sh</li></ol><p>   <img src="https://upload-images.jianshu.io/upload_images/12596656-50cf906fa3423e9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/604/format/webp" alt="img"></p><p>   修改位置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> runbroker.sh<span class="token comment">##使用快捷键 i 开启编辑模式</span><span class="token comment">##具体数值视机器而定</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms128m -Xmx256m -Xmn256m"</span><span class="token comment">##保存</span>wq</code></pre><p>修改配置文件</p><pre class="language-css" data-language="css"><code class="language-css">vim broker.conf </code></pre><p>新增如下选项</p><pre class="language-xml" data-language="xml"><code class="language-xml">brokerIP1=xxxxxx(你的服务器公网ip)</code></pre><ol><li>分别后台启动 runserver.sh 以及 runbroker.sh</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##启动runserver</span><span class="token function">nohup</span> <span class="token function">sh</span> mqnamesrv <span class="token operator">&amp;</span><span class="token comment">##以配置文件启动runbroker</span><span class="token function">nohup</span> <span class="token function">sh</span> mqbroker -n localhost:9876 -c /root/rocketmq-all-4.5.1-bin-release/conf/broker.conf <span class="token operator">&amp;</span></code></pre><p>7.查看启动是否成功</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">jps</code></pre><ol><li>启动成功(可以看到NamesrvStartup以及BrokerStartup)</li></ol><pre class="language-undefined" data-language="undefined"><code class="language-undefined">16065 Jps9679 NamesrvStartup7887 jar11279 BrokerStartup</code></pre><p>10.启动成功日志</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">tail <span class="token operator">-</span>f <span class="token operator">~</span><span class="token operator">/</span>logs<span class="token operator">/</span>rocketmqlogs<span class="token operator">/</span>namesrv<span class="token punctuation">.</span>logtail <span class="token operator">-</span>f <span class="token operator">~</span><span class="token operator">/</span>logs<span class="token operator">/</span>rocketmqlogs<span class="token operator">/</span>broker<span class="token punctuation">.</span>log</code></pre><p>11.如果启动失败，请查看失败日志</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp">cat nohup<span class="token punctuation">.</span><span class="token keyword">out</span></code></pre><h6 id="三、关于防火墙以及安全组规则配置"><a href="#三、关于防火墙以及安全组规则配置" class="headerlink" title="三、关于防火墙以及安全组规则配置"></a>三、关于防火墙以及安全组规则配置</h6><p><strong>首先，请在你的云服务器配置安全组规则通道 9876 端口</strong><br> <strong>其次，centos7默认使用firewalld防火墙，而不是iptables，卸载firewalld，再安装iptables</strong></p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property">##卸载firewalld</span>yum <span class="token keyword">remove</span> firewalld<span class="token preprocessor property">##安装iptables</span>yum install iptables<span class="token operator">-</span>services<span class="token preprocessor property">##查看防火墙状态</span>service iptables status<span class="token preprocessor property">##停止防火墙</span>service iptables stop</code></pre><h6 id="四、SpringBoot整合监视台（rocketmq-externals插件）"><a href="#四、SpringBoot整合监视台（rocketmq-externals插件）" class="headerlink" title="四、SpringBoot整合监视台（rocketmq-externals插件）"></a>四、SpringBoot整合监视台（rocketmq-externals插件）</h6><p><a href="https://links.jianshu.com/go?to=https://github.com/apache/rocketmq-externals">GITHUB地址</a><br> 下载<a href="https://links.jianshu.com/go?to=https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console">rocketmq-console</a>模块即可<br> 修改配置文件</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">rocketmq.config.namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">你的公网IP:9876</span><span class="token comment">##如果你版本小于3.5.8，下面应该配置为false</span><span class="token attr-name">rocketmq.config.isVIPChannel</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre><p>启动即可</p><pre class="language-none"><code class="language-none">Description&#x3D;rockermq name serviceRequires&#x3D;network-online.targetAfter&#x3D;network-online.target[Service]Type&#x3D;simpleUser&#x3D;anonymousWorkingDirectory&#x3D;&#x2F;opt&#x2F;rocketmqExecStart&#x3D;&#x2F;opt&#x2F;rocketmq&#x2F;bin&#x2F;mqnamesrvRestart&#x3D;on-failure[Install]WantedBy&#x3D;multi-user.target</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis拦截器</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><h2 id="拦截器注解的规则："><a href="#拦截器注解的规则：" class="headerlink" title="拦截器注解的规则："></a>拦截器注解的规则：</h2><p>具体规则如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@Intercepts</span><span class="token punctuation">(</span></span><span class="token punctuation">&#123;</span>    <span class="token atrule"><span class="token rule">@Signature</span><span class="token punctuation">(</span>type = StatementHandler.class<span class="token punctuation">,</span> method = <span class="token string">"query"</span><span class="token punctuation">,</span> args =</span> <span class="token punctuation">&#123;</span>Statement.class<span class="token punctuation">,</span> ResultHandler.class<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token atrule"><span class="token rule">@Signature</span><span class="token punctuation">(</span>type = StatementHandler.class<span class="token punctuation">,</span> method = <span class="token string">"update"</span><span class="token punctuation">,</span> args =</span> <span class="token punctuation">&#123;</span>Statement.class<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token atrule"><span class="token rule">@Signature</span><span class="token punctuation">(</span>type = StatementHandler.class<span class="token punctuation">,</span> method = <span class="token string">"batch"</span><span class="token punctuation">,</span> args =</span> <span class="token punctuation">&#123;</span>Statement.class<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><ol><li>@Intercepts：标识该类是一个拦截器；</li><li>@Signature：指明自定义拦截器需要拦截哪一个类型，哪一个方法；<br> 2.1 type：对应四种类型中的一种；<br> 2.2 method：对应接口中的哪类方法（因为可能存在重载方法）；<br> 2.3 args：对应哪一个方法；</li></ol><blockquote><p><strong>5. 拦截器可拦截的方法：</strong></p></blockquote><table><thead><tr><th>拦截的类</th><th>拦截的方法</th></tr></thead><tbody><tr><td>Executor</td><td>update, query, flushStatements, commit, rollback,getTransaction, close, isClosed</td></tr><tr><td>ParameterHandler</td><td>getParameterObject, setParameters</td></tr><tr><td>StatementHandler</td><td>prepare, parameterize, batch, update, query</td></tr><tr><td>ResultSetHandler</td><td>handleResultSets, handleOutputParameters</td></tr></tbody></table><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>        args <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Object</span> target <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//被代理对象</span>     <span class="token class-name">Method</span> method <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//代理方法</span>     <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方法参数</span>     <span class="token comment">// do something ...... 方法拦截前执行代码块</span>     <span class="token class-name">Object</span> result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// do something .......方法拦截后执行代码块</span>     <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="setProperties方法"><a href="#setProperties方法" class="headerlink" title="setProperties方法"></a>setProperties方法</h2><p>如果我们的拦截器需要一些变量对象，而且这个对象是支持可配置的。<br> 类似于Spring中的@Value(“${}”)从<a href="https://links.jianshu.com/go?to=http://application.properties">application.properties</a>文件中获取。<br> 使用方法：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.plugin.mybatis.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><h2 id="plugin方法"><a href="#plugin方法" class="headerlink" title="plugin方法"></a>plugin方法</h2><p>这个方法的作用是就是让mybatis判断，是否要进行拦截，然后做出决定是否生成一个代理。</p><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Override</span><span class="token keyword">public</span> Object <span class="token function">plugin</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target instanceof StatementHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Plugin<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>需要注意的是：每经过一个拦截器对象都会调用插件的plugin方法，也就是说，该方法会调用4次。根据@Intercepts注解来决定是否进行拦截处理。</strong></p><blockquote><p>问题1：**Plugin.wrap(target, this)**方法的作用？</p></blockquote><p>解答：判断是否拦截这个类型对象（根据@Intercepts注解决定），然后决定是返回一个代理对象还是返回原对象。</p><p>故我们在实现plugin方法时，要判断一下目标类型，是本插件要拦截的对象时才执行Plugin.wrap方法，否则的话，直接返回目标本身。</p><blockquote><p>问题2：拦截器代理对象可能经过多层代理，如何获取到真实的拦截器对象？</p></blockquote><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token comment">/** * &lt;p> * 获得真正的处理对象,可能多层代理. * &lt;/p> */</span><span class="token metadata symbol">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>public <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">realTarget</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        MetaObject metaObject <span class="token operator">=</span> SystemMetaObject<span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">realTarget</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"h.target"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> target<span class="token punctuation">;</span></code></pre><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top/sciento/wumu/jdbc/mybatis/db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.sciento.wumu.jdbc.mybatis.plugin.ExamplePlugin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.sciento.wumu.jdbc.mybatis.plugin.PagePlugin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.sciento.wumu.jdbc.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>        type<span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        method <span class="token operator">=</span> <span class="token string">"update"</span><span class="token punctuation">,</span>        args <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExamplePlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被拦截方法执行之前，做的辅助服务······"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> target  <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MappedStatement</span> mappedStatement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedStatement</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> proceed <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被拦截方法执行之后，做的辅助服务······"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PagePlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MappedStatement</span> mappedStatement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedStatement</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//获取参数</span>        <span class="token class-name">Object</span> param <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> parameterObject <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 判断是否是继承PageVo来判断是否需要进行分页         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterObject <span class="token keyword">instanceof</span> <span class="token class-name">Page</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//强转 为了拿到分页数据</span>            <span class="token class-name">Page</span> pagevo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取相关配置</span>            <span class="token class-name">Configuration</span> config <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Connection</span> connection <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//拼接查询当前条件的sql的总条数</span>            <span class="token class-name">String</span> countSql <span class="token operator">=</span> <span class="token string">"select count(*) from ("</span> <span class="token operator">+</span> sql <span class="token operator">+</span> <span class="token string">") a"</span><span class="token punctuation">;</span>            <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>countSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BoundSql</span> countBoundSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoundSql</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> countSql<span class="token punctuation">,</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ParameterHandler</span> parameterHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultParameterHandler</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> countBoundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            parameterHandler<span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span>preparedStatement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//执行获得总条数</span>            <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                count <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//拼接分页sql</span>            <span class="token class-name">String</span> pageSql <span class="token operator">=</span> sql <span class="token operator">+</span> <span class="token string">" limit "</span> <span class="token operator">+</span> pagevo<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" , "</span> <span class="token operator">+</span> pagevo<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//重新执行新的sql</span>            <span class="token function">doNewSql</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> pageSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 这是使用了两种不同的方式返回最终的结果</span>            pagevo<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            pagevo<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//处理新的结构</span>            <span class="token class-name">PageResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> pageResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span> result<span class="token punctuation">,</span>pagevo<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pagevo<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> count <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PageResult</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token function">add</span><span class="token punctuation">(</span>pageResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doNewSql</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MappedStatement</span> statement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedStatement</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> parameterObject <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MappedStatement</span> newStatement <span class="token operator">=</span> <span class="token function">newMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BoundSqlSqlSource</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MetaObject</span> msObject <span class="token operator">=</span> <span class="token class-name">MetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>newStatement<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultObjectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultObjectWrapperFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultReflectorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"sqlSource.boundSql.sql"</span><span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> newStatement<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">MappedStatement</span> <span class="token function">newMappedStatement</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">SqlSource</span> newSqlSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token class-name">Builder</span> builder <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token class-name">Builder</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newSqlSource<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getSqlCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">fetchSize</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getFetchSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">statementType</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">keyGenerator</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getKeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getKeyProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ms<span class="token punctuation">.</span><span class="token function">getKeyProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StringBuilder</span> keyProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> keyProperty <span class="token operator">:</span> ms<span class="token punctuation">.</span><span class="token function">getKeyProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                keyProperties<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>keyProperty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            keyProperties<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>keyProperties<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> keyProperties<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">keyProperty</span><span class="token punctuation">(</span>keyProperties<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        builder<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">parameterMap</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">resultMaps</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">resultSetType</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">cache</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">flushCacheRequired</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">isFlushCacheRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">useCache</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">isUseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 新的SqlSource需要实现     */</span>    <span class="token keyword">class</span> <span class="token class-name">BoundSqlSqlSource</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSource</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">BoundSqlSqlSource</span><span class="token punctuation">(</span><span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>boundSql <span class="token operator">=</span> boundSql<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> boundSql<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/0a72bb1f6a21">https://www.jianshu.com/p/0a72bb1f6a21</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis入门</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>x.x.x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.44<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h1><p>mybatis-config.xml</p><p>配置文件的标签顺序不能打乱，不然会报错。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top/sciento/wumu/jdbc/mybatis/db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.sciento.wumu.jdbc.mybatis.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>db.properties</p><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://:3306/test</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-name">password</span><span class="token punctuation">=</span></code></pre><h1 id="编写执行文件"><a href="#编写执行文件" class="headerlink" title="编写执行文件"></a>编写执行文件</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>sciento<span class="token punctuation">.</span>wumu<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>mybatis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resources</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>sciento<span class="token punctuation">.</span>wumu<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">top<span class="token punctuation">.</span>sciento<span class="token punctuation">.</span>wumu<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Reader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisRunner</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">MybatisRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> reader <span class="token operator">=</span> <span class="token class-name">MybatisRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSessionFactory</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Configuration</span> configuration  <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 默认是不会提交的，需要手动提交</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"wumu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SelectProvider</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">UserSqlBuilder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token string">"selectList"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里使用动态sql</span>    <span class="token annotation punctuation">@InsertProvider</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">UserSqlBuilder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token string">"insert"</span><span class="token punctuation">)</span><span class="token comment">//    @Options(useGeneratedKeys = true, keyProperty = "id", keyColumn = "id")</span>    <span class="token annotation punctuation">@SelectKey</span><span class="token punctuation">(</span>statement <span class="token operator">=</span> <span class="token string">"select last_insert_id()"</span><span class="token punctuation">,</span> keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> before <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> resultType <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserSqlBuilder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">"base_user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//        return new SQL().INSERT_INTO("base_user").INTO_COLUMNS("name","age")</span><span class="token comment">//                .INTO_VALUES(user.getName(),String.valueOf(user.getAge())).toString();</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">INSERT_INTO</span><span class="token punctuation">(</span><span class="token string">"base_user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"#&#123;name&#125;"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"#&#123;age&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- namespace属性是名称空间，必须唯一 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.sciento.wumu.jdbc.mybatis.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- resultMap标签:映射实体与表         type属性：表示实体全路径名         id属性：为实体与表的映射取一个任意的唯一的名字    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.sciento.wumu.jdbc.mybatis.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- id标签:映射主键属性             result标签：映射非主键属性             property属性:实体的属性名             column属性：表的字段名        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from base_user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h1 id="知识分析"><a href="#知识分析" class="headerlink" title="知识分析"></a>知识分析</h1><h2 id="返回主键"><a href="#返回主键" class="headerlink" title="返回主键"></a>返回主键</h2><p>1、使用options</p><p>options可以配置sql的大部分属性，对应着我们标签<code>&lt;select&gt;</code>上写的相关属性。</p><table><thead><tr><th>–</th><th>–</th><th></th><th>描述</th></tr></thead><tbody><tr><td><code>@Options</code></td><td><code>方法</code></td><td>映射语句的属性</td><td>该注解允许你指定大部分开关和配置选项，它们通常在映射语句上作为属性出现。与在注解上提供大量的属性相比，<code>Options</code> 注解提供了一致、清晰的方式来指定选项。属性：<code>useCache=true</code>、<code>flushCache=FlushCachePolicy.DEFAULT</code>、<code>resultSetType=DEFAULT</code>、<code>statementType=PREPARED</code>、<code>fetchSize=-1</code>、<code>timeout=-1</code>、<code>useGeneratedKeys=false</code>、<code>keyProperty=&quot;&quot;</code>、<code>keyColumn=&quot;&quot;</code>、<code>resultSets=&quot;&quot;</code>, <code>databaseId=&quot;&quot;</code>。注意，Java 注解无法指定 <code>null</code> 值。因此，一旦你使用了 <code>Options</code> 注解，你的语句就会被上述属性的默认值所影响。要注意避免默认值带来的非预期行为。 The <code>databaseId</code>(Available since 3.5.5), in case there is a configured <code>DatabaseIdProvider</code>, the MyBatis use the <code>Options</code> with no <code>databaseId</code> attribute or with a <code>databaseId</code> that matches the current one. If found with and without the <code>databaseId</code> the latter will be discarded.         注意：<code>keyColumn</code> 属性只在某些数据库中有效（如 Oracle、PostgreSQL 等）。要了解更多关于 <code>keyColumn</code> 和 <code>keyProperty</code> 可选值信息，请查看“insert, update 和 delete”一节。</td></tr></tbody></table><p>2、使用SelectKey</p><p>对应着SelectKey标签</p><table><thead><tr><th>–</th><th>–</th><th>–</th><th>-</th></tr></thead><tbody><tr><td><code>@SelectKey</code></td><td><code>方法</code></td><td><code>&lt;selectKey&gt;</code></td><td>这个注解的功能与 <code>&lt;selectKey&gt;</code> 标签完全一致。该注解只能在 <code>@Insert</code> 或 <code>@InsertProvider</code> 或 <code>@Update</code> 或 <code>@UpdateProvider</code> 标注的方法上使用，否则将会被忽略。如果标注了 <code>@SelectKey</code> 注解，MyBatis 将会忽略掉由 <code>@Options</code> 注解所设置的生成主键或设置（configuration）属性。属性：<code>statement</code> 以字符串数组形式指定将会被执行的 SQL 语句，<code>keyProperty</code> 指定作为参数传入的对象对应属性的名称，该属性将会更新成新的值，<code>before</code> 可以指定为 <code>true</code> 或 <code>false</code> 以指明 SQL 语句应被在插入语句的之前还是之后执行。<code>resultType</code> 则指定 <code>keyProperty</code> 的 Java 类型。<code>statementType</code> 则用于选择语句类型，可以选择 <code>STATEMENT</code>、<code>PREPARED</code> 或 <code>CALLABLE</code> 之一，它们分别对应于 <code>Statement</code>、<code>PreparedStatement</code> 和 <code>CallableStatement</code>。默认值是 <code>PREPARED</code>。 The <code>databaseId</code>(Available since 3.5.5), in case there is a configured <code>DatabaseIdProvider</code>, the MyBatis will use a statement with no <code>databaseId</code> attribute or with a <code>databaseId</code> that matches the current one. If found with and without the <code>databaseId</code> the latter will be discarded.</td></tr></tbody></table><p>描述：</p><p>@SelctKey(statement=”SQL语句”,keyProperty=”将SQL语句查询结果存放到keyProperty中去”,before=”true表示先查询再插入，false反之”,resultType=int.class)<br>其中：</p><ul><li>statement是要运行的SQL语句，它的返回值通过resultType来指定</li><li>before表示查询语句statement运行的时机</li><li>keyProperty表示查询结果赋值给代码中的哪个对象，keyColumn表示将查询结果赋值给数据库表中哪一列</li><li>keyProperty和keyColumn都不是必需的，有没有都可以</li><li>before=true，插入之前进行查询，可以将查询结果赋给keyProperty和keyColumn，赋给keyColumn相当于更改数据库</li><li>befaore=false，先插入，再查询，这时只能将结果赋给keyProperty</li><li>赋值给keyProperty用来“读”数据库，赋值给keyColumn用来写数据库</li><li>selectKey的两大作用：1、生成主键；2、获取刚刚插入数据的主键。</li><li>使用selectKey，并且使用MySQL的last_insert_id()函数时，before必为false，也就是说必须先插入然后执行last_insert_id()才能获得刚刚插入数据的ID。</li></ul><h2 id="maven打包xml文件"><a href="#maven打包xml文件" class="headerlink" title="maven打包xml文件"></a>maven打包xml文件</h2><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos8安装mysql</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>以root身份或<a href="https://www.myfreax.com/create-a-sudo-user-on-centos/">具有sudo特权的用户身份使用CentOS软件包管理器安装MySQL 8.0服务器</a>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> @mysql</code></pre><p><code>@mysql</code>模块安装MySQL及其所有依赖项。</p><p>安装完成后，通过运行以下命令来启动MySQL服务并使其在启动时自动启动：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> --now mysqld</code></pre><p>要检查MySQL服务器是否正在运行，请输入：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status mysqld</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">● mysqld.service - MySQL <span class="token number">8.0</span> database server   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/mysqld.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: disabled<span class="token punctuation">)</span>   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Thu <span class="token number">2019</span>-10-17 <span class="token number">22</span>:09:39 UTC<span class="token punctuation">;</span> 15s ago   <span class="token punctuation">..</span>.</code></pre><h2 id="保护MySQL"><a href="#保护MySQL" class="headerlink" title="保护MySQL"></a>保护MySQL</h2><p>运行<code>mysql_secure_installation</code>脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation</code></pre><p>将要求您配置<a href="https://dev.mysql.com/doc/refman/8.0/en/validate-password.html"> <code>VALIDATE PASSWORD PLUGIN</code> </a>，该工具用于测试MySQL用户密码的强度并提高安全性。密码验证策略分为三个级别：低，中和强。如果您不想设置验证密码插件，请按<code>ENTER</code>。</p><p>在下一个提示符下，将要求您为MySQL根用户设置密码。完成此操作后，脚本还将要求您删除匿名用户，限制root用户对本地计算机的访问，并删除测试数据库。您应该对所有问题回答“是”。</p><p>要从命令行与MySQL服务器进行交互，请使用MySQL客户端实用程序，它作为依赖项安装。通过键入以下内容测试根访问权限：</p><pre class="language-bash" data-language="bash"><code class="language-bash">mysql -u root -p</code></pre><p>出现提示时输入<a href="https://www.myfreax.com/how-to-reset-a-mysql-root-password/"> root密码</a>，将为您提供MySQL shell，如下所示：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">12</span>Server version: <span class="token number">8.0</span>.17 Source distribution</code></pre><p>就是这样！您已经在CentOS服务器上安装并保护了MySQL 8.0，并准备使用它。</p><h2 id="身份验证方法"><a href="#身份验证方法" class="headerlink" title="身份验证方法"></a>身份验证方法</h2><p>由于CentOS 8中的某些客户端工具和库与<code>caching_sha2_password</code>方法不兼容，CentOS 8存储库中包含的MySQL 8.0服务器被设置为使用旧的<code>mysql_native_password</code>身份验证插件。上游MySQL 8.0版本。</p><p><code>mysql_native_password</code>方法适用于大多数设置。但是，如果您想将默认身份验证插件更改为<code>caching_sha2_password</code>，这会更快并提供更好的安全性，请打开以下配置文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/my.cnf.d/mysql-default-authentication-plugin.cnf</code></pre><p>将<code>default_authentication_plugin</code>的值更改为<code>caching_sha2_password</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token assign-left variable">default_authentication_plugin</span><span class="token operator">=</span>caching_sha2_password</code></pre><p><a href="https://www.myfreax.com/how-to-save-file-in-vim-quit-editor/">关闭并保存文件</a>，然后重新启动MySQL服务器以使更改生效：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart mysqld</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql账号管理</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p><strong>注意：</strong>创建好用户（角色）之后需要连接的话，还需要修改2个权限控制的配置文件（pg_hba.conf、pg_ident.conf）。并且创建用户（user）和创建角色（role）一样，唯一的区别是用户默认可以登录，而创建的角色默认不能登录。创建用户和角色的各个参数选项是一样的。</p><p><strong>Tip：安装PostgreSQL会自动创建一个postgres用户，需要切换到该用户下访问PostgreSQL。</strong></p><ul><li><p><a href="https://www.postgresql.org/docs/11/sql-createuser.html">创建用户/角色</a></p><pre class="language-none"><code class="language-none">CREATE USER&#x2F;ROLE name [ [ WITH ] option [ ... ] ]  : 关键词 USER,ROLE； name 用户或角色名； where option can be:      SUPERUSER | NOSUPERUSER      :超级权限，拥有所有权限，默认nosuperuser。    | CREATEDB | NOCREATEDB        :建库权限，默认nocreatedb。    | CREATEROLE | NOCREATEROLE    :建角色权限，拥有创建、修改、删除角色，默认nocreaterole。    | INHERIT | NOINHERIT          :继承权限，可以把除superuser权限继承给其他用户&#x2F;角色，默认inherit。    | LOGIN | NOLOGIN              :登录权限，作为连接的用户，默认nologin，除非是create user（默认登录）。    | REPLICATION | NOREPLICATION  :复制权限，用于物理或则逻辑复制（复制和删除slots），默认是noreplication。    | BYPASSRLS | NOBYPASSRLS      :安全策略RLS权限，默认nobypassrls。</code></pre><pre class="language-none"><code class="language-none">| CONNECTION LIMIT connlimit   :限制用户并发数，默认-1，不限制。正常连接会受限制，后台连接和prepared事务不受限制。| [ ENCRYPTED ] PASSWORD &#39;password&#39; | PASSWORD NULL :设置密码，密码仅用于有login属性的用户，不使用密码身份验证，则可以省略此选项。可以选择将空密码显式写为PASSWORD NULL。                                                     加密方法由配置参数password_encryption确定，密码始终以加密方式存储在系统目录中。| VALID UNTIL &#39;timestamp&#39;      :密码有效期时间，不设置则用不失效。| IN ROLE role_name [, ...]    :新角色将立即添加为新成员。| IN GROUP role_name [, ...]   :同上| ROLE role_name [, ...]       :ROLE子句列出一个或多个现有角色，这些角色自动添加为新角色的成员。 （这实际上使新角色成为“组”）。| ADMIN role_name [, ...]      :与ROLE类似，但命名角色将添加到新角色WITH ADMIN OPTION，使他们有权将此角色的成员资格授予其他人。| USER role_name [, ...]       :同上| SYSID uid                    :被忽略，但是为向后兼容性而存在。</code></pre></li></ul><p>​      <strong>示例：</strong></p><ol><li><p>创建不需要密码登陆的用户zjy：</p><pre class="language-none"><code class="language-none">postgres&#x3D;# CREATE ROLE zjy LOGIN;CREATE ROLE</code></pre><p>创建该用户后，还不能直接登录。需要修改 <strong>pg_hba.conf</strong> 文件（后面会对该文件进行说明），加入：</p><p>①：本地登陆：local   all    all    <strong>trust</strong>②：远程登陆：host   all    all    192.168.163.132/32     <strong>trust</strong></p></li><li><p>创建需要密码登陆的用户zjy1：</p><pre class="language-none"><code class="language-none">postgres&#x3D;# CREATE USER zjy1 WITH PASSWORD &#39;zjy1&#39;;CREATE ROLE</code></pre><p>和ROLE的区别是：USER带LOGIN属性。也需要修改 <strong>pg_hba.conf</strong> 文件（后面会对该文件进行说明），加入：<br>host    all     all     192.168.163.132/32    <strong>md5</strong></p></li><li><p>创建有时间限制的用户zjy2：</p><pre class="language-none"><code class="language-none">postgres&#x3D;# CREATE ROLE zjy2 WITH LOGIN PASSWORD &#39;zjy2&#39; VALID UNTIL &#39;2019-05-30&#39;;CREATE ROLE</code></pre><p>和2的处理方法一样，修改 <strong>pg_hba.conf</strong> 文件，该用户会的密码在给定的时间之后过期不可用。</p></li><li><p>创建有创建数据库和管理角色权限的用户admin：</p><pre class="language-none"><code class="language-none">postgres&#x3D;# CREATE ROLE admin WITH CREATEDB CREATEROLE;CREATE ROLE</code></pre><p>注意：拥有创建数据库，角色的用户，也可以删除和修改这些对象。</p></li><li><p>创建具有超级权限的用户：admin</p><pre class="language-none"><code class="language-none">postgres&#x3D;# CREATE ROLE admin WITH SUPERUSER LOGIN PASSWORD &#39;admin&#39;;CREATE ROLE</code></pre></li><li><p>创建复制账号：repl </p><pre class="language-none"><code class="language-none">postgres&#x3D;# CREATE USER repl REPLICATION LOGIN ENCRYPTED PASSWORD &#39;repl&#39;;CREATE ROLE</code></pre></li><li><p>其他说明</p></li></ol><ol start="8"><li></li></ol><ul><li><a href="https://www.postgresql.org/docs/11/sql-grant.html">授权，定义访问权限</a></li></ul>  <pre class="language-none"><code class="language-none">GRANT &#123; &#123; SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER &#125;    [, ...] | ALL [ PRIVILEGES ] &#125;    ON &#123; [ TABLE ] table_name [, ...]         | ALL TABLES IN SCHEMA schema_name [, ...] &#125;    TO role_specification [, ...] [ WITH GRANT OPTION ]##单表授权：授权zjy账号可以访问schema为zjy的zjy表grant select,insert,update,delete on zjy.zjy to zjy;##所有表授权：grant select,insert,update,delete on all tables in schema zjy to zjy;GRANT &#123; &#123; SELECT | INSERT | UPDATE | REFERENCES &#125; ( column_name [, ...] )    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) &#125;    ON [ TABLE ] table_name [, ...]    TO role_specification [, ...] [ WITH GRANT OPTION ]##列授权，授权指定列(zjy schema下的zjy表的name列)的更新权限给zjy用户grant update (name) on zjy.zjy to zjy;##指定列授不同权限，zjy schema下的zjy表，查看更新name、age字段，插入name字段grant select (name,age),update (name,age),insert(name) on zjy.xxx to zjy;GRANT &#123; &#123; USAGE | SELECT | UPDATE &#125;    [, ...] | ALL [ PRIVILEGES ] &#125;    ON &#123; SEQUENCE sequence_name [, ...]         | ALL SEQUENCES IN SCHEMA schema_name [, ...] &#125;    TO role_specification [, ...] [ WITH GRANT OPTION ]##序列（自增键）属性授权，指定zjy schema下的seq_id_seq 给zjy用户grant select,update on sequence zjy.seq_id_seq to zjy;##序列（自增键）属性授权，给用户zjy授权zjy schema下的所有序列grant select,update on all sequences in schema zjy to zjy;GRANT &#123; &#123; CREATE | CONNECT | TEMPORARY | TEMP &#125; [, ...] | ALL [ PRIVILEGES ] &#125;    ON DATABASE database_name [, ...]    TO role_specification [, ...] [ WITH GRANT OPTION ]##连接数据库权限，授权cc用户连接数据库zjygrant connect on database zjy to cc;GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;    ON DOMAIN domain_name [, ...]    TO role_specification [, ...] [ WITH GRANT OPTION ]##</code></pre>  <pre class="language-none"><code class="language-none">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;    ON FOREIGN DATA WRAPPER fdw_name [, ...]    TO role_specification [, ...] [ WITH GRANT OPTION ]</code></pre><pre><code>\##</code></pre>  <pre class="language-none"><code class="language-none">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;    ON FOREIGN SERVER server_name [, ...]    TO role_specification [, ...] [ WITH GRANT OPTION ]</code></pre>  <pre class="language-none"><code class="language-none">##</code></pre>  <pre class="language-none"><code class="language-none">GRANT &#123; EXECUTE | ALL [ PRIVILEGES ] &#125;    ON &#123; &#123; FUNCTION | PROCEDURE | ROUTINE &#125; routine_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]         | ALL &#123; FUNCTIONS | PROCEDURES | ROUTINES &#125; IN SCHEMA schema_name [, ...] &#125;    TO role_specification [, ...] [ WITH GRANT OPTION ]</code></pre>  <pre class="language-none"><code class="language-none">##GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;    ON LANGUAGE lang_name [, ...]    TO role_specification [, ...] [ WITH GRANT OPTION ]</code></pre><pre><code>\##</code></pre>  <pre class="language-none"><code class="language-none">GRANT &#123; &#123; SELECT | UPDATE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;    ON LARGE OBJECT loid [, ...]    TO role_specification [, ...] [ WITH GRANT OPTION ]</code></pre>  <pre class="language-none"><code class="language-none">##GRANT &#123; &#123; CREATE | USAGE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;    ON SCHEMA schema_name [, ...]    TO role_specification [, ...] [ WITH GRANT OPTION ]##连接schema权限，授权cc访问zjy schema权限grant usage on schema zjy to cc;GRANT &#123; CREATE | ALL [ PRIVILEGES ] &#125;    ON TABLESPACE tablespace_name [, ...]    TO role_specification [, ...] [ WITH GRANT OPTION ]GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;    ON TYPE type_name [, ...]    TO role_specification [, ...] [ WITH GRANT OPTION ]where role_specification can be:    [ GROUP ] role_name  | PUBLIC  | CURRENT_USER  | SESSION_USERGRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ]##把zjy用户的权限授予用户cc。grant zjy to cc;</code></pre><p>  <a href="https://blog.51cto.com/riverxyz/1880795">权限说明</a>：</p>  <pre class="language-none"><code class="language-none">SELECT：允许从指定表，视图或序列的任何列或列出的特定列进行SELECT。也允许使用COPY TO。在UPDATE或DELETE中引用现有列值也需要此权限。对于序列，此权限还允许使用currval函数。对于大对象，此权限允许读取对象。INSERT：允许将新行INSERT到指定的表中。如果列出了特定列，则只能在INSERT命令中为这些列分配（因此其他列将接收默认值）。也允许COPY FROM。UPDATE：允许更新指定表的任何列或列出的特定列，需要SELECT权限。DELETE：允许删除指定表中的行，需要SELECT权限。TRUNCATE：允许在指定的表上创建触发器。REFERENCES：允许创建引用指定表或表的指定列的外键约束。TRIGGER：允许在指定的表上创建触发器。 CREATE：对于数据库，允许在数据库中创建新的schema、table、index。CONNECT：允许用户连接到指定的数据库。在连接启动时检查此权限。TEMPORARY、TEMP：允许在使用指定数据库时创建临时表。EXECUTE：允许使用指定的函数或过程以及在函数。USAGE：对于schema，允许访问指定模式中包含的对象；对于sequence，允许使用currval和nextval函数。对于类型和域，允许在创建表，函数和其他模式对象时使用类型或域。ALL PRIVILEGES：一次授予所有可用权限。</code></pre><ul><li><a href="https://www.postgresql.org/docs/11/sql-revoke.html">撤销权限</a></li></ul>  <pre class="language-none"><code class="language-none">REVOKE [ GRANT OPTION FOR ]    &#123; &#123; SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER &#125;    [, ...] | ALL [ PRIVILEGES ] &#125;    ON &#123; [ TABLE ] table_name [, ...]         | ALL TABLES IN SCHEMA schema_name [, ...] &#125;    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT ] ##移除用户zjy在schema zjy上所有表的select权限 revoke select on all tables in schema zjy from zjy;REVOKE [ GRANT OPTION FOR ]    &#123; &#123; SELECT | INSERT | UPDATE | REFERENCES &#125; ( column_name [, ...] )    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) &#125;    ON [ TABLE ] table_name [, ...]    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT ] ##移除用户zjy在zjy schema的zjy表的age列的查询权限 revoke select (age) on zjy.zjy from zjy;REVOKE [ GRANT OPTION FOR ]    &#123; &#123; USAGE | SELECT | UPDATE &#125;    [, ...] | ALL [ PRIVILEGES ] &#125;    ON &#123; SEQUENCE sequence_name [, ...]         | ALL SEQUENCES IN SCHEMA schema_name [, ...] &#125;    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT ]##序列REVOKE [ GRANT OPTION FOR ]    &#123; &#123; CREATE | CONNECT | TEMPORARY | TEMP &#125; [, ...] | ALL [ PRIVILEGES ] &#125;    ON DATABASE database_name [, ...]    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT ]##库REVOKE [ GRANT OPTION FOR ]    &#123; USAGE | ALL [ PRIVILEGES ] &#125;    ON DOMAIN domain_name [, ...]    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT]##REVOKE [ GRANT OPTION FOR ]    &#123; USAGE | ALL [ PRIVILEGES ] &#125;    ON FOREIGN DATA WRAPPER fdw_name [, ...]    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT]##REVOKE [ GRANT OPTION FOR ]    &#123; USAGE | ALL [ PRIVILEGES ] &#125;    ON FOREIGN SERVER server_name [, ...]    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT]##REVOKE [ GRANT OPTION FOR ]    &#123; EXECUTE | ALL [ PRIVILEGES ] &#125;    ON &#123; &#123; FUNCTION | PROCEDURE | ROUTINE &#125; function_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]         | ALL &#123; FUNCTIONS | PROCEDURES | ROUTINES &#125; IN SCHEMA schema_name [, ...] &#125;    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT ]##</code></pre>  <pre class="language-none"><code class="language-none">REVOKE [ GRANT OPTION FOR ]    &#123; USAGE | ALL [ PRIVILEGES ] &#125;    ON LANGUAGE lang_name [, ...]    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT ]##REVOKE [ GRANT OPTION FOR ]    &#123; &#123; SELECT | UPDATE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;    ON LARGE OBJECT loid [, ...]    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT ]##REVOKE [ GRANT OPTION FOR ]    &#123; &#123; CREATE | USAGE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;    ON SCHEMA schema_name [, ...]    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT ]##schena权限REVOKE [ GRANT OPTION FOR ]    &#123; CREATE | ALL [ PRIVILEGES ] &#125;    ON TABLESPACE tablespace_name [, ...]    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT ]##REVOKE [ GRANT OPTION FOR ]    &#123; USAGE | ALL [ PRIVILEGES ] &#125;    ON TYPE type_name [, ...]    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]    [ CASCADE | RESTRICT ]##</code></pre>  <pre class="language-none"><code class="language-none">REVOKE [ ADMIN OPTION FOR ]    role_name [, ...] FROM role_name [, ...]    [ CASCADE | RESTRICT ]##</code></pre><p>  注意：任何用户对public的schema都有all的权限，为了安全可以禁止用户对public schema</p>  <pre class="language-none"><code class="language-none">##移除所有用户（public），superuser除外，对指定DB下的public schema的create 权限。zjy&#x3D;# revoke  create  on schema public from public;REVOKE</code></pre><ul><li><a href="https://www.postgresql.org/docs/11/sql-alteruser.html">修改用户属性</a></li></ul>  <pre class="language-none"><code class="language-none">ALTER USER role_specification [ WITH ] option [ ... ]where option can be:      SUPERUSER | NOSUPERUSER    | CREATEDB | NOCREATEDB    | CREATEROLE | NOCREATEROLE    | INHERIT | NOINHERIT    | LOGIN | NOLOGIN    | REPLICATION | NOREPLICATION    | BYPASSRLS | NOBYPASSRLS    | CONNECTION LIMIT connlimit    | [ ENCRYPTED ] PASSWORD &#39;password&#39; | PASSWORD NULL    | VALID UNTIL &#39;timestamp&#39;ALTER USER name RENAME TO new_nameALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] SET configuration_parameter &#123; TO | &#x3D; &#125; &#123; value | DEFAULT &#125;ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] SET configuration_parameter FROM CURRENTALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] RESET configuration_parameterALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] RESET ALLwhere role_specification can be:    role_name  | CURRENT_USER  | SESSION_USER</code></pre><p>  <strong>示例：</strong>     注意：option选项里的用户都可以通过alter role进行修改</p><ul><li><ul><li><p>修改用户为超级/非超级用户</p><pre class="language-none"><code class="language-none">alter role caocao with superuser&#x2F;nosuperuser;</code></pre></li><li><p>修改用户为可/不可登陆用户</p><pre class="language-none"><code class="language-none">alter role caocao with nologin&#x2F;login;</code></pre></li><li><p>修改用户名：</p><pre class="language-none"><code class="language-none">alter role caocao rename to youxing;</code></pre></li><li><p>修改用户密码，移除密码用NULL</p><pre class="language-none"><code class="language-none">alter role youxing with password &#39;youxing&#39;;</code></pre></li><li><p>修改用户参数，该用户登陆后的以该参数为准</p><pre class="language-none"><code class="language-none">alter role zjy in database zjy SET geqo to 0&#x2F;default;</code></pre></li></ul></li><li><p><a href="https://www.postgresql.org/docs/11/auth-pg-hba-conf.html">控制访问文件</a> pg_hba.conf<a href="https://www.postgresql.org/docs/11/auth-pg-hba-conf.html"></a></p></li></ul>  <pre class="language-none"><code class="language-none">local      database  user  auth-method  [auth-options]host       database  user  address  auth-method  [auth-options]hostssl    database  user  address  auth-method  [auth-options]hostnossl  database  user  address  auth-method  [auth-options]host       database  user  IP-address  IP-mask  auth-method  [auth-options]hostssl    database  user  IP-address  IP-mask  auth-method  [auth-options]hostnossl  database  user  IP-address  IP-mask  auth-method  [auth-options]</code></pre><p>  <strong>local</strong>：匹配使用Unix域套接字的连接，如果没有此类型的记录，则不允许使用Unix域套接字连接。<br>  <strong>host</strong>：匹配使用TCP/IP进行的连接，主机记录匹配SSL或非SSL连接，需要配置listen_addresses。<br>  <strong>hostssl</strong>：匹配使用TCP/IP进行的连接，仅限于使用SSL加密进行连接，需要配置ssl参数。<br>  <strong>hostnossl</strong>：匹配通过TCP/IP进行的连接，不使用SSL的连接。<br>  <strong>database</strong>：匹配的数据库名称，all指定它匹配所有数据库。如果请求的数据库与请求的用户具有相同的名称则可以使用samerole值。复制（replication）不指定数据库，多个数据库可以用逗号分隔。<br>  <strong>user</strong>：匹配的数据库用户名，值all指定它匹配所有用户。 可以通过用逗号分隔来提供多个用户名。<br>  <strong>address</strong>：匹配的客户端计算机地址，可以包含主机名，IP地址范围。如：172.20.143.89/32、172.20.143.0/24、10.6.0.0/16、:: 1/128。 0.0.0.0/0表示所有IPv4地址，:: 0/0表示所有IPv6地址。要指定单个主机，请使用掩码长度32（对于IPv4）或128（对于IPv6）。all以匹配任何IP地址。<br>  <strong>IP-address、IP-mask</strong>：这两个字段可用作IP地址/掩码长度，如：127.0.0.1 255.255.255.255。<br>  <strong>auth-method</strong>：指定连接与此记录匹配时要使用的身份验证方法：trust、reject、scram-sha-256、md5、password、gss、sspi、ident、peer、ldap、radius、cert、pam、bsd。</p>  <pre class="language-none"><code class="language-none">trust：允许无条件连接，允许任何PostgreSQL用户身份登录，而无需密码或任何其他身份验证。reject：拒绝任何条件连接，这对于从组中“过滤掉”某些主机非常有用。scram-sha-256：执行SCRAM-SHA-256身份验证以验证用户的密码。md5：执行SCRAM-SHA-256或MD5身份验证以验证用户的密码。password：要提供未加密的密码以进行身份验证。由于密码是通过网络以明文形式发送的，因此不应在不受信任的网络上使用。gss：使用GSSAPI对用户进行身份验证，这仅适用于TCP &#x2F; IP连接。sspi：使用SSPI对用户进行身份验证，这仅适用于Windows。ident：通过联系客户端上的ident服务器获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。 Ident身份验证只能用于TCP &#x2F; IP连接。为本地连接指定时，将使用对等身份验证。peer：从操作系统获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。这仅适用于本地连接。ldap：使用LDAP服务器进行身份验证。radius：使用RADIUS服务器进行身份验证。cert：使用SSL客户端证书进行身份验证。pam：使用操作系统提供的可插入身份验证模块（PAM）服务进行身份验证。bsd：使用操作系统提供的BSD身份验证服务进行身份验证。</code></pre><p>  <strong>auth-options</strong>：在auth-method字段之后，可以存在name = value形式的字段，用于指定认证方法的选项。<br>  例子：</p>  <pre class="language-none"><code class="language-none"># TYPE  DATABASE    USER   ADDRESS   METHODlocal          all               all                         trust--在本地允许任何用户无密码登录local          all                all                        peer--操作系统的登录用户和pg的用户是否一致，一致则可以登录local          all                all                        ident--操作系统的登录用户和pg的用户是否一致，一致则可以登录host          all                all    192.168.163.0&#x2F;24   md5--指定客户端IP访问通过md5身份验证进行登录host          all                all     192.168.163.132&#x2F;32   password--指定客户端IP通过passwotd身份验证进行登录host    all             all     192.168.54.1&#x2F;32         rejecthost    all             all     192.168.0.0&#x2F;16           ident  host    all             all     127.0.0.1       255.255.255.255     trust...</code></pre><p>  设置完之后可以通过查看表来查看hba：</p>  <pre class="language-none"><code class="language-none">zjy&#x3D;# select * from pg_hba_file_rules; line_number | type  |   database    | user_name |    address    |                 netmask                 | auth_method | options | error -------------+-------+---------------+-----------+---------------+-----------------------------------------+-------------+---------+-------          87 | host  | &#123;all&#125;         | &#123;all&#125;     | 192.168.163.0 | 255.255.255.0                           | md5         |         |           92 | local | &#123;all&#125;         | &#123;all&#125;     |               |                                         | peer        |         |           94 | host  | &#123;all&#125;         | &#123;all&#125;     | 127.0.0.1     | 255.255.255.255                         | md5         |         |           96 | host  | &#123;all&#125;         | &#123;all&#125;     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         |           99 | local | &#123;replication&#125; | &#123;all&#125;     |               |                                         | peer        |         |          100 | host  | &#123;replication&#125; | &#123;all&#125;     | 127.0.0.1     | 255.255.255.255                         | md5         |         |          101 | host  | &#123;replication&#125; | &#123;all&#125;     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         | </code></pre><p>  当然，修改完pg_hba.conf文件之后，需要重新加载配置，不用重启数据库：</p>  <pre class="language-none"><code class="language-none">postgres&#x3D;# select pg_reload_conf(); pg_reload_conf ---------------- t</code></pre><ul><li><h3 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h3></li></ul><p>用户权限管理涉及到的东西很多，本文也只是大致说明了一小部分，大部分的还得继续学习。那么现在按照一个正常项目上线的流程来创建一个应用账号为例，看看需要怎么操作。</p><p>比如一个项目<strong>zjy</strong>上线：用管理账号来操作</p><ul><li><p>创建数据库：</p><pre class="language-none"><code class="language-none">postgres&#x3D;# create database zjy;CREATE DATABASE</code></pre></li><li><p>创建账号：账号和数据库名字保持一致（search_path）</p><pre class="language-none"><code class="language-none">postgres&#x3D;# create user zjy with password &#39;zjy&#39;;CREATE ROLE</code></pre></li><li><p>创建schema：不能用默认的public的schma</p><pre class="language-none"><code class="language-none">postgres&#x3D;# \c zjyYou are now connected to database &quot;zjy&quot; as user &quot;postgres&quot;.zjy&#x3D;# create schema zjy;CREATE SCHEMA</code></pre></li><li><p>授权：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre class="language-none"><code class="language-none">#访问库zjy&#x3D;# grant connect on database zjy to zjy;GRANT#访问schmeazjy&#x3D;# grant usage on schema zjy to zjy;GRANT#访问表zjy&#x3D;# grant select,insert,update,delete on all tables in schema zjy to zjy;GRANT#如果访问自增序列，需要授权zjy&#x3D;# grant select,update on all sequences in schema zjy to zjy;GRANT注意：上面的授权只对历史的一些对象授权，后期增加的对象是没有权限的，需要给个默认权限#默认表权限zjy&#x3D;# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,insert,update,delete ON TABLES TO zjy;ALTER DEFAULT PRIVILEGES#默认自增序列权限zjy&#x3D;# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,update ON sequences TO zjy;ALTER DEFAULT PRIVILEGES</code></pre></li><li><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3></li></ul><ol><li><p>查看当前用户javascript:void(0);)</p><pre class="language-none"><code class="language-none">zjy&#x3D;# \du                                   List of roles Role name |                         Attributes                         | Member of -----------+------------------------------------------------------------+----------- admin     | Superuser, Cannot login                                    | &#123;&#125; postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125; zjy       |                                                            | &#123;&#125;zjy&#x3D;# select * from pg_roles;       rolname        | rolsuper | rolinherit | rolcreaterole | rolcreatedb | rolcanlogin | rolreplication | rolconnlimit | rolpassword | rolvaliduntil | rolbypassrls | rolconfig |  oid  ----------------------+----------+------------+---------------+-------------+-------------+----------------+--------------+-------------+---------------+--------------+-----------+------- pg_signal_backend    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  4200 postgres             | t        | t          | t             | t           | t           | t              |           -1 | ********    |               | t            |           |    10 admin                | t        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 16456 pg_read_all_stats    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3375 zjy                  | f        | t          | f             | f           | t           | f              |           -1 | ********    |               | f            |           | 16729 pg_monitor           | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3373 pg_read_all_settings | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3374 pg_stat_scan_tables  | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3377(8 rows)</code></pre></li><li><p>查看用户权限javascript:void(0);)</p><pre class="language-none"><code class="language-none">zjy&#x3D;# select * from information_schema.table_privileges where grantee&#x3D;&#39;zjy&#39;; grantor  | grantee | table_catalog | table_schema | table_name | privilege_type | is_grantable | with_hierarchy ----------+---------+---------------+--------------+------------+----------------+--------------+---------------- postgres | zjy     | zjy           | zjy          | zjy        | INSERT         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy        | SELECT         | NO           | YES postgres | zjy     | zjy           | zjy          | zjy        | UPDATE         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy        | DELETE         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy1       | INSERT         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy1       | SELECT         | NO           | YES postgres | zjy     | zjy           | zjy          | zjy1       | UPDATE         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy1       | DELETE         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy2       | INSERT         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy2       | SELECT         | NO           | YES postgres | zjy     | zjy           | zjy          | zjy2       | UPDATE         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy2       | DELETE         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy3       | INSERT         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy3       | SELECT         | NO           | YES postgres | zjy     | zjy           | zjy          | zjy3       | UPDATE         | NO           | NO postgres | zjy     | zjy           | zjy          | zjy3       | DELETE         | NO           | NO</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装vnc</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos8安装docker</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>下载docker-ce的repo</p><pre class="language-bash" data-language="bash"><code class="language-bash">dnf config-manager --add-repo<span class="token operator">=</span>https://download.docker.com/linux/centos/docker-ce.repo</code></pre></li><li><p>安装</p><pre class="language-bash" data-language="bash"><code class="language-bash">dnf <span class="token function">install</span> docker-ce --nobest -y</code></pre></li><li><p>运行</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start dockersystemctl <span class="token builtin class-name">enable</span> dockerdocker --version</code></pre></li><li><p>安装docker-compose</p><pre class="language-bash" data-language="bash"><code class="language-bash">dnf <span class="token function">install</span> <span class="token function">curl</span> -y<span class="token function">curl</span> -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> -o /usr/local/bin/docker-compose<span class="token function">chmod</span> +x /usr/local/bin/docker-composedocker-compose --version</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8安装kvm</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何在CentOS-RHEL-8上安装KVM虚拟化"><a href="#如何在CentOS-RHEL-8上安装KVM虚拟化" class="headerlink" title="如何在CentOS/RHEL 8上安装KVM虚拟化"></a>如何在CentOS/RHEL 8上安装KVM虚拟化</h1><p>基于内核的虚拟机（简称KVM）是一种开源的标准虚拟化解决方案，已紧密集成到Linux中。它是一个可加载的内核模块，将Linux转换为Type-1（裸机）虚拟机管理程序，该虚拟机管理程序创建了用于运行虚拟机（VM）的虚拟操作平台。</p><h3 id="精选回答"><a href="#精选回答" class="headerlink" title="精选回答"></a>精选回答</h3><p>在KVM下，每个VM是一个Linux进程，由内核调度和管理，并具有专用的虚拟化硬件（即CPU，网卡，磁盘等）。它还支持嵌套虚拟化，使您可以在另一个VM内运行一个VM。</p><p>它的一些主要功能包括支持广泛的Linux支持的硬件平台（带有虚拟化扩展的x86硬件（Intel VT或AMD-V）），它使用SELinux和安全虚拟化（sVirt）提供增强的VM安全性和隔离，它继承了内核内存管理功能，并且支持脱机和实时迁移（在物理主机之间迁移正在运行的VM）。</p><p>在本文中，您将学习如何在CentOS 8和RHEL 8 Linux中安装KVM虚拟化，创建和管理虚拟机。</p><p>准备工作：</p><p>全新安装的CentOS 8<a href="https://www.a5idc.net/">服务器</a></p><p>全新安装的RHEL 8服务器</p><p>在RHEL 8服务器上启用了RedHat订阅</p><p>此外，通过运行以下命令，确保您的硬件平台支持虚拟化。</p><pre class="language-none"><code class="language-none"># grep -e &#39;vmx&#39; &#x2F;proc&#x2F;cpuinfo #Intel systems# grep -e &#39;svm&#39; &#x2F;proc&#x2F;cpuinfo #AMD systems</code></pre><p>另外，请确认内核中已加载KVM模块（默认情况下应为KVM模块）。</p><p>＃lsmod | grep kvm</p><p>这是基于英特尔的测试系统上的示例输出：</p><p><img src="https://tp.a5idc.net/wd/1a.png" alt="img"></p><p>在以前的KVM指南系列中，我们展示了如何使用KVM（基于内核的虚拟机）在Linux中创建虚拟机，并展示了如何使用virt-manager GUI工具（根据RHEL已弃用）创建和管理VM。8个文档）。对于本指南，我们将采用不同的方法，我们将使用Cockpit Web控制台。</p><p>步骤1：在CentOS 8上设置Cockpit Web控制台</p><p>1.在Cockpit是一个易于使用的集成和可扩展的基于Web的界面在网页浏览器来管理Linux服务器。它使您能够执行系统任务，例如配置网络，管理存储，创建VM和使用鼠标检查日志。它使用系统的普通用户登录名和特权，但也支持其他身份验证方法。</p><p>它是预先安装的，并已在新安装的CentOS 8和RHEL 8系统上启用，如果尚未安装，请使用以下dnf命令进行安装。应安装cockpit-machines扩展程序以管理基于Libvirt的 VM 。</p><p># dnf install cockpit cockpit-machines</p><p>2.软件包安装完成后，启动座舱插座，使其在系统启动时自动启动，并检查其状态以确认其已启动并正在运行。</p><p># systemctl start cockpit.socket</p><p># systemctl enable cockpit.socket</p><p># systemctl status cockpit.socket</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7689tj30p807nwej.jpg" alt="img"></p><p>3.接下来，使用firewall-cmd命令将cockpit服务添加到默认启用的系统防火墙中，然后重新加载防火墙配置以应用新更改。</p><p># firewall-cmd –add-service=cockpit –permanent</p><p># firewall-cmd –reload</p><p>4.要访问CockpitWeb控制台，请打开Web浏览器并使用以下URL进行导航。</p><p><a href="https://fqdn:9090/%E6%88%96%E8%80%85https://SERVER_IP:9090/">https://FQDN:9090/或者https://SERVER_IP:9090/</a></p><p>该Cockpit采用的是自签名证书启用HTTPS，只需使用该连接，当你在浏览器的警告。在登录页面上，使用您的服务器用户帐户凭据。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrar1fvj30wq0n4glu.jpg" alt="img"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrbov8uj30wq0nldgf.jpg" alt="img"></p><p>步骤2：安装KVM虚拟化CentOS 8</p><p>5.接下来，如下安装虚拟化模块和其他虚拟化软件包。所述的virt安装包提供用于从所述命令行界面进行安装的虚拟机的工具，和一个的virt查看器用于查看虚拟机。</p><p># dnf module install virt</p><p># dnf install virt-install virt-viewer</p><p>6.接下来，运行virt-host-validate命令以验证主机是否设置为运行libvirt系统管理程序驱动程序。</p><p># virt-host-validate</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7hgijj30o506mt8o.jpg" alt="img"></p><p>7.接下来，启动libvirtd守护程序（libvirtd），并使它在每次引导时自动启动。然后检查其状态以确认它已启动并正在运行。</p><p># systemctl start libvirtd.service</p><p># systemctl enable libvirtd.service</p><p># systemctl status libvirtd.service</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrd3s9zj30vz0bj74i.jpg" alt="img"></p><p>步骤3：通过Cockpit设置网桥（虚拟网络交换机）</p><p>8.现在创建一个网桥（虚拟网络交换机），将虚拟机集成到与主机相同的网络中。默认情况下，一旦启动libvirtd守护程序，它将激活默认网络接口virbr0，该接口代表以NAT模式运行的虚拟网络交换机。</p><p>在本指南中，我们将以桥接模式创建名为br0的网络接口。这将使虚拟机可在主机网络上访问。</p><p>在座舱主界面中，单击“ 网络”，然后单击“ 添加网桥”，如以下屏幕截图所示。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrf0gggj30yd0n8dgd.jpg" alt="img"></p><p>9.从弹出窗口中，输入网桥名称，然后选择网桥从站或端口设备（例如，代表以太网接口的enp2s0），如以下屏幕截图所示。然后单击“ 应用”。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9t6d6j30ls0dedfu.jpg" alt="img"></p><p>10.现在，当您查看“ 接口 ”列表时，新的网桥应显示在此处，几秒钟后，应禁用以太网接口（关闭）。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgraacb2j30ya0bz3yo.jpg" alt="img"></p><p>步骤4：通过Cockpit Web控制台创建和管理虚拟机</p><p>11.在座舱主界面中，单击“ 虚拟机”选项，如以下屏幕快照中突出显示。在“ 虚拟机”页面上，单击创建虚拟机。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrejb9rj30wm0ckq30.jpg" alt="img"></p><p>12.将显示一个带有用于创建新VM的选项的窗口。输入连接，名称（例如ubuntu18.04），安装源类型（在测试系统上，我们已将ISO映像存储在存储池下，即/ var / lib / libvirt / images /），安装源，存储，大小，内存如下图所示。输入安装源后，应自动选择OS供应商和操作系统。</p><p>还要选中立即启动VM的选项，然后单击“ 创建”。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9d2jdj30hp0gedg2.jpg" alt="img"></p><p>13.在上一步中单击“ 创建”后，应自动启动VM，并使用提供的ISO映像启动VM。继续安装客户机操作系统（在本例中为Ubuntu 18.04）。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7y5kjj30wj0hst90.jpg" alt="img"></p><p>如果你点击网络接口的的虚拟机，网络源应注明新建桥网络接口。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8w9jwj30wm09o74g.jpg" alt="img"></p><p>并且在安装过程中，在配置网络接口的步骤中，您应该能够注意到VM以太网接口从主机网络的DHCP服务器接收IP地址。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrcmjofj30wm0c1q33.jpg" alt="img"></p><p>请注意，您需要安装OpenSSH软件包才能从主机网络上的任何计算机通过SSH访问来宾OS，如上一节所述。</p><p>14.客户机操作系统安装完成后，请重新引导VM，然后转到“ 磁盘”并分离/除去VM磁盘下的cdrom设备。然后单击“运行”以启动VM。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrb8getj30rs090wek.jpg" alt="img"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrc5he7j30s206mdfr.jpg" alt="img"></p><p>15.现在，在Consoles（控制台）下，您可以使用在OS安装期间创建的用户帐户登录来宾OS。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8ep0jj30qu0il74f.jpg" alt="img"></p><p>步骤5：通过SSH访问虚拟机访客操作系统</p><p>16.要通过SSH从主机网络访问新安装的来宾OS，请运行以下命令（将10.42.0.197替换为来宾的IP地址）。</p><p>$ ssh <a href="mailto:&#x74;&#101;&#99;&#109;&#105;&#x6e;&#x74;&#64;&#49;&#48;&#x2e;&#52;&#50;&#46;&#x30;&#x2e;&#49;&#57;&#x37;">&#x74;&#101;&#99;&#109;&#105;&#x6e;&#x74;&#64;&#49;&#48;&#x2e;&#52;&#50;&#46;&#x30;&#x2e;&#49;&#57;&#x37;</a></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrdqnrej30qj0ent91.jpg" alt="img"></p><p>17.要关闭，重新启动或删除VM，请从VM列表中单击它，然后使用以下屏幕快照中突出显示的按钮。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgre19rij30sy0b2dfw.jpg" alt="img"></p><p>在本文中，介绍了如何安装KVM虚拟化软件包以及如何通过cockpit Web控制台创建和管理VM。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8扩容root分区</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="扩展磁盘"><a href="#扩展磁盘" class="headerlink" title="扩展磁盘"></a>扩展磁盘</h1><p>最近使用虚拟机的方式弄了个centos8的虚拟机，体验最新centos系统，分配了127g的空间，由于实际需要，发现home空间有好几十g的空间，而我都是使用root用户，无需home空间，因此找到在centos8中把home空间调整到root的方法，这里跟网上找到的centos7是有差别的。</p><p>步骤：</p><ol><li>使用usb系统进入修复</li><li>使用df-h查看空间使用情况，备份home</li><li>卸载home文件系统</li><li>删除/home所在的lv</li><li>扩展/root所在的lv</li><li>扩展/root文件系统</li><li>重新创建home lv并挂载home</li><li>查看最终调整结果</li></ol><h2 id="使用df-lh查看空间使用情况，备份home"><a href="#使用df-lh查看空间使用情况，备份home" class="headerlink" title="使用df-lh查看空间使用情况，备份home"></a>使用df-lh查看空间使用情况，备份home</h2><p>首先登陆ssh，使用df -lh查看空间使用情况</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> -lh</code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyleo0zj30kf07cjsm.jpg"></p><p>root已经不够了，而vps也就自己一个人用，根本不需要用到home，home设置1个g就够了，其余的都给root，这样就可以给root多出来73个g的空间。 这因为一开始没有截图，所以看到的是后面的1g大小，一开始home是74g大小的。 备份home文件到/tmp目录</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> cvf  /tmp/home.tar /home<span class="token comment"># zip -r /tmp/home.zip /home</span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyr28toj30go0c5dh3.jpg"></p><h2 id="卸载home文件系统"><a href="#卸载home文件系统" class="headerlink" title="卸载home文件系统"></a>卸载home文件系统</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">fuser</span> -km /home/<span class="token function">umount</span> /home</code></pre><p>解除home目录的占用，卸载home目录</p><h2 id="删除-home所在的lv"><a href="#删除-home所在的lv" class="headerlink" title="删除/home所在的lv"></a>删除/home所在的lv</h2><p>这一步centos8有很大不同，因为centos7中目录是/dev/mapper/centos-home,而在centos8中为 /dev/mapper/cl-home，因此注意卸载设备名称</p><pre class="language-bash" data-language="bash"><code class="language-bash">lvremove /dev/mapper/cl-home</code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girez61asuj30nf01xmxc.jpg"></p><h2 id="扩展-root所在的lv"><a href="#扩展-root所在的lv" class="headerlink" title="扩展/root所在的lv"></a>扩展/root所在的lv</h2><p>扩展root空间lv</p><pre class="language-bash" data-language="bash"><code class="language-bash">lvextend -L +73G /dev/mapper/cl-root  </code></pre><h2 id="扩展-root文件系统"><a href="#扩展-root文件系统" class="headerlink" title="扩展/root文件系统"></a>扩展/root文件系统</h2><p>这一步是真正增加root空间，centos7和centos8具有非常大的差别，centos7中是使用xfs_growfs /dev/mapper/centos-root，按逻辑centos8就应该是 xfs_growfs /dev/mapper/cl-root，但是结果就是</p><pre class="language-bash" data-language="bash"><code class="language-bash">xfs_growfs /dev/mapper/cl-root </code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girezkj110j30li01gdfw.jpg"></p><p>经过摸索发现应该直接使用/就可以了</p><pre class="language-bash" data-language="bash"><code class="language-bash">xfs_growfs / </code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0736ygj30pp0810ub.jpg"></p><h2 id="重新创建home-lv并挂载home"><a href="#重新创建home-lv并挂载home" class="headerlink" title="重新创建home lv并挂载home"></a>重新创建home lv并挂载home</h2><p>创建1g空间的home</p><pre class="language-bash" data-language="bash"><code class="language-bash">lvcreate -L 1G -n home cl</code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0kmo2hj30qq02rq39.jpg">文件系统类型设置</p><pre class="language-bash" data-language="bash"><code class="language-bash">mkfs.xfs /dev/cl/home </code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0uu0ecj30pa07dq4c.jpg"></p><p>挂载到home目录</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/cl/home /home</code></pre><p>恢复home目录下文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /tmp/home.tar /home<span class="token builtin class-name">cd</span> /home<span class="token function">tar</span> xvf  home.tar<span class="token function">mv</span> home/* <span class="token builtin class-name">.</span><span class="token function">rm</span> -rf home*</code></pre><h2 id="查看最终调整结果"><a href="#查看最终调整结果" class="headerlink" title="查看最终调整结果"></a>查看最终调整结果</h2><p>查看各分区大小</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> -lh</code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girf13w9foj30jt06qjsf.jpg"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>本文主要介绍了在centos8系统下调整各分区大小，这里就是/home分区和/root分区，介绍在centos7和centos8下参数差异。熟悉linux系统下的文件系统的分区调整。对于刚装系统分区不合适需要调整centos各分区大小的用户起到指导作用，有疑问再邮件联系吧。</p><h1 id="lvm修改根分区大小"><a href="#lvm修改根分区大小" class="headerlink" title="lvm修改根分区大小"></a>lvm修改根分区大小</h1><ul><li>参考：<ol><li>减小lvm根分区容量: <a href="http://kwokchivu.blog.51cto.com/1128937/724128">http://kwokchivu.blog.51cto.com/1128937/724128</a></li><li>CentOS 5 LVM逻辑卷管理: <a href="http://sunshyfangtian.blog.51cto.com/1405751/860018">http://sunshyfangtian.blog.51cto.com/1405751/860018</a></li></ol></li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>home、根各为50GB空间，根空间不足，需缩小home至10GB、扩大根为90GB。</p><pre class="language-none"><code class="language-none">lvm&gt; lvscan  ACTIVE            &#39;&#x2F;dev&#x2F;vg_db&#x2F;lv_root&#39; [50.00 GiB] inherit  ACTIVE            &#39;&#x2F;dev&#x2F;vg_db&#x2F;lv_home&#39; [50.00 GiB] inherit  ACTIVE            &#39;&#x2F;dev&#x2F;vg_db&#x2F;lv_swap&#39; [9.83 GiB] inherit</code></pre><h2 id="缩小home、增大根分区"><a href="#缩小home、增大根分区" class="headerlink" title="缩小home、增大根分区"></a>缩小home、增大根分区</h2><h3 id="进入rescue模式"><a href="#进入rescue模式" class="headerlink" title="进入rescue模式"></a>进入rescue模式</h3><pre class="language-none"><code class="language-none">增大root分区是否可以在线完成、不用进rescue状态？找机会试试...</code></pre><p>从Linux安装光盘启动进入rescue模式；</p><p>选择相关的语言，键盘模式，当系统提示启用网络设备时，选择“NO”；</p><p>然后在提示允许rescue模式挂载本地Linux系统到/mnt/sysimage下时选择“Skip”，文件系统必须不被挂载才可以对/分区减小容量操作。</p><p>最后系统会提示选择进入shell终端还是reboot机器，选择进入shell终端。</p><h3 id="激活分区"><a href="#激活分区" class="headerlink" title="激活分区"></a>激活分区</h3><p>输入lvm命令，进入lvm界面，依次输入pvscan、vgscan、lvscan三个命令扫描pv、vg、lv相关信息。</p><p>然后输入lvchange -ay /dev/vg_db/lv_root（上文提到的/分区名称）此命令是激活/分区所在的逻辑卷，输入 quit返回到bash shell界面。</p><pre class="language-none"><code class="language-none">lvchange -ay &#x2F;dev&#x2F;vg_db&#x2F;lv_homelvchange -ay &#x2F;dev&#x2F;vg_db&#x2F;lv_root</code></pre><h3 id="缩小home分区"><a href="#缩小home分区" class="headerlink" title="缩小home分区"></a>缩小home分区</h3><ul><li><p>先检查下分区: e2fsck -f /dev/vg_db/lv_home</p></li><li><p>缩小文件系统大小：resize2fs /dev/vg_db/lv_home 10G</p></li><li><p>缩小逻辑卷</p><ul><li>输入lvm命令进入lvm模式</li><li>缩小逻辑卷：lvreduce -L 10G /dev/vg_db/lv_home</li><li>系统会询问是否缩小逻辑卷，输入 y 确定。</li></ul></li><li><p>查看修改结果: vgdisplay，lvdisplay</p><pre class="language-none"><code class="language-none">减小LVM中的文件系统必须离线操作(处于umount装态)，要减小文件系统和LV:    # Unmount相应的文件系统    # 运行磁盘检查确保卷的完整    # 减小文件系统    # 减小LV</code></pre></li></ul><h3 id="扩大根分区"><a href="#扩大根分区" class="headerlink" title="扩大根分区"></a>扩大根分区</h3><ul><li>先检查下分区: e2fsck -f /dev/vg_db/lv_root</li><li>扩大逻辑卷:<ul><li>输入lvm命令进入lvm模式</li><li>扩大逻辑卷：lvresize -L +40G /dev/vg_db/lv_root</li></ul></li><li>更改文件系统大小<ul><li>resize2fs -p /dev/vg_db/lv_root</li></ul></li><li>查看修改结果: lvscan</li></ul><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="修改swap卷大小"><a href="#修改swap卷大小" class="headerlink" title="修改swap卷大小"></a>修改swap卷大小</h3><ul><li>取消激活swap空间: swapoff</li><li>修改swap分区大小: lvresize -L 4G /dev/vg_db/lv_swap</li><li>重新格区化: mkswap -f /dev/vb_db/lv_swap</li><li>激活swap空间: swapon</li></ul><h3 id="新建逻辑卷lv-develop"><a href="#新建逻辑卷lv-develop" class="headerlink" title="新建逻辑卷lv_develop"></a>新建逻辑卷lv_develop</h3><ul><li>创建逻辑卷 : lvcreate -L 2.8G -n lv_develop /dev/vb_db</li><li>创建文件系统 : mkfs.ext3 /dev/vg_db/lv_develop</li></ul><h3 id="增加物理盘"><a href="#增加物理盘" class="headerlink" title="增加物理盘"></a>增加物理盘</h3><ul><li>fdisk分区，并将分区类型为0×8e(Linux LVM)</li><li>创建物理卷PV: pvcreate /dev/hdb1</li><li>创建卷组VG: vgcreate vgtest /dev/hdb1</li><li>添加PV到VG: vgextend</li><li>创建逻辑卷LV: lvcreate -L 6000M -n mysql vgtest</li><li>创建文件系统: mkfs -t ext3 /dev/vgtest/mysql</li><li>建立新分区卷标: tune2fs –L /mysql /dev/vgtest/mysql</li><li>加载新分区: mount –t ext3 /dev/vgtest/mysql /mysql</li><li>卸载卷的顺序:<ol><li>umount</li><li>卸载逻辑卷:lvremove LVDEVICE</li><li>卸载卷组:vgremove VGNAME</li><li>卸载物理卷:pvremove PVDEVICE</li></ol></li></ul><h1 id="LVM分区在线扩容"><a href="#LVM分区在线扩容" class="headerlink" title="LVM分区在线扩容"></a>LVM分区在线扩容</h1><p>2011-12-19 15:24:16</p><p><a href="http://share.blog.51cto.com/278008/745479">http://share.blog.51cto.com/278008/745479</a></p><p>今天对三台服务器的LV分区进行了一次扩容。本文有点标题党嫌疑，因为只有一台服务器是在线扩容，其它两台都是先卸载再扩容的。</p><p>在线扩容的这台服务器，LV分区格式为xfs，原大小1.2TB。增加了一块硬盘，大小为1.8TB。</p><pre class="language-none"><code class="language-none">&#96;fdisk&#96; &#96;&#x2F;dev&#x2F;cciss&#x2F;c0d1&#96;                              &#96;# 创建分区，并指定分区类型为LVM (8e) &#96;&#96;pvcreate &#96;&#96;&#x2F;dev&#x2F;cciss&#x2F;c0d1p1&#96;                         &#96;# 创建pv&#96;&#96;vgextend VolGroup00 &#96;&#96;&#x2F;dev&#x2F;cciss&#x2F;c0d1p1&#96;              &#96;# 添加新创建的pv到原有vg&#96;&#96;lvextend -L +1.8T &#96;&#96;&#x2F;dev&#x2F;mapper&#x2F;VolGroup00-LogVol05&#96;  &#96;# 在线扩容指定lv分区&#96;&#96;xfs_growfs &#96;&#96;&#x2F;dev&#x2F;mapper&#x2F;VolGroup00-LogVol05&#96;         &#96;# 使扩容生效。注意xfs文件系统的生效命令！ &#96;</code></pre><p>其它两台服务器也是新增了一个1.8TB的硬盘，要扩容的LV分区格式为ext3。之所以没有进行在线扩容，是因为没有找到ext2online命令；后来发现，resize2fs也是支持在线扩容的！</p><pre class="language-none"><code class="language-none">&#96;lvextend -l +100%FREE &#96;&#96;&#x2F;dev&#x2F;mapper&#x2F;VolGroup00-LogVol05&#96;&#96;umount&#96; &#96;-l &#96;&#96;&#x2F;dev&#x2F;mapper&#x2F;VolGroup00-LogVol05&#96;&#96;e2fsck -f &#96;&#96;&#x2F;dev&#x2F;mapper&#x2F;VolGroup00-LogVol05&#96;    &#96;# 过程比较长 &#96;&#96;resize2fs &#96;&#96;&#x2F;dev&#x2F;mapper&#x2F;VolGroup00-LogVol05&#96;    &#96;# 也要几分钟时间 &#96;&#96;mount&#96; &#96;&#x2F;dev&#x2F;mapper&#x2F;VolGroup00-LogVol05&#96; &#96;&#x2F;hdfs&#96;</code></pre><p>虽然resize2fs可以在线使用，但是对在线lv分区执行e2fsck有点风险！</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos使用cockpit</title>
      <link href="posts/1ddf19cb.html"/>
      <url>posts/1ddf19cb.html</url>
      
        <content type="html"><![CDATA[<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> --now cockpit.socket</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>leiakun@centos8 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> --now cockpit.socket<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> leiakun 的密码：Created symlink /etc/systemd/system/sockets.target.wants/cockpit.socket → /usr/lib/systemd/system/cockpit.socket.<span class="token punctuation">[</span>leiakun@centos8 ~<span class="token punctuation">]</span>$ <span class="token punctuation">[</span>leiakun@centos8 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> firewall-cmd --get-services <span class="token operator">|</span><span class="token function">grep</span> cockpitRH-Satellite-6 amanda-client amanda-k5-client amqp amqps apcupsd auditbacula bacula-client bb bgp bitcoin bitcoin-rpc bitcoin-testnet bitcoin-testnet-rpcbittorrent-lsd ceph ceph-mon cfengine cockpit condor-collector ctdb dhcp dhcpv6 dhcpv6-client distcc dns dns-over-tls docker-registry docker-swarm dropbox-lansync elasticsearch etcd-client etcd-server finger freeipa-4 freeipa-ldap freeipa-ldaps freeipa-replication freeipa-trust <span class="token function">ftp</span> ganglia-client ganglia-master <span class="token function">git</span> grafana gre high-availability http https imap imaps ipp ipp-client ipsec irc ircs iscsi-target isns jenkins kadmin kdeconnect kerberos kibana klogin kpasswd kprop kshell ldap ldaps libvirt libvirt-tls lightning-network llmnr managesievematrix mdns memcache minidlna mongodb mosh mountd mqtt mqtt-tls ms-wbt mssqlmurmur mysql nfs nfs3 nmea-0183 nrpe ntp nut openvpn ovirt-imageio ovirt-storageconsole ovirt-vmconsole plex pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxyprometheus proxy-dhcp ptp pulseaudio puppetmaster quassel radius rdp redis redis-sentinel rpc-bind rsh rsyncd rtsp salt-master samba samba-client samba-dcsane sip sips slp smtp smtp-submission smtps snmp snmptrap spideroak-lansync spotify-sync squid ssdp <span class="token function">ssh</span> steam-streaming svdrp svn syncthing syncthing-gui synergy syslog syslog-tls telnet tentacle tftp tftp-client tile38 tinc tor-socks transmission-client upnp-client vdsm vnc-server wbem-http wbem-https wsman wsmansxdmcp xmpp-bosh xmpp-client xmpp-local xmpp-server zabbix-agent zabbix-server<span class="token function">sudo</span> firewall-cmd --add-service<span class="token operator">=</span>cockpit --permanent<span class="token function">sudo</span> firewall-cmd --reload</code></pre><h1 id="多主机管理"><a href="#多主机管理" class="headerlink" title="多主机管理"></a>多主机管理</h1><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y cockpit-dashboard</code></pre><h1 id="centos7安装cockpit"><a href="#centos7安装cockpit" class="headerlink" title="centos7安装cockpit"></a>centos7安装cockpit</h1><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y cockpit*</code></pre><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> --now cockpit.socket</code></pre><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><pre class="language-bash" data-language="bash"><code class="language-bash">firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">9090</span>/tcp  <span class="token operator">&amp;&amp;</span>  firewall-cmd --reload<span class="token comment">## 或者</span>firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-service<span class="token operator">=</span>cockpit  <span class="token operator">&amp;&amp;</span> firewall-cmd --reload</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos创建用户</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> wumu<span class="token comment">## 给用户添加组，一定要加a</span><span class="token punctuation">(</span>FC4: <span class="token function">usermod</span> -G groupA,groupB,groupC user<span class="token punctuation">)</span>-a 代表 append， 也就是 将自己添加到 用户组groupA 中，而不必离开 其他用户组。<span class="token comment">#命令的所有的选项，及其含义：</span>Options:-c, --comment COMMENT         new value of the GECOS field-d, --home HOME_DIR           new home directory <span class="token keyword">for</span> the user account-e, --expiredate EXPIRE_DATE <span class="token builtin class-name">set</span> account expiration <span class="token function">date</span> to EXPIRE_DATE-f, --inactive INACTIVE       <span class="token builtin class-name">set</span> password inactive after expirationto INACTIVE-g, --gid GROUP               force use GROUP as new primary group-G, --groups <span class="token environment constant">GROUPS</span>           new list of supplementary <span class="token environment constant">GROUPS</span>-a, --append          append the user to the supplemental <span class="token environment constant">GROUPS</span>mentioned by the -G option without removinghim/her from other <span class="token function">groups</span>-h, --help                    display this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>-l, --login NEW_LOGIN         new value of the login name-L, --lock                    lock the user account-m, --move-home               move contents of the home directory to the newlocation <span class="token punctuation">(</span>use only with -d<span class="token punctuation">)</span>-o, --non-unique              allow using duplicate <span class="token punctuation">(</span>non-unique<span class="token punctuation">)</span> <span class="token environment constant">UID</span>-p, --password PASSWORD       use encrypted password <span class="token keyword">for</span> the new password-s, --shell <span class="token environment constant">SHELL</span>             new login shell <span class="token keyword">for</span> the user account-u, --uid <span class="token environment constant">UID</span>                 new <span class="token environment constant">UID</span> <span class="token keyword">for</span> the user account-U, --unlock                  unlock the user account<span class="token function">usermod</span> -a -G wumugroup wumu<span class="token function">passwd</span> wumu</code></pre><h1 id="添加sudo权限"><a href="#添加sudo权限" class="headerlink" title="添加sudo权限"></a>添加sudo权限</h1><pre class="language-bash" data-language="bash"><code class="language-bash">visudo<span class="token comment">#找到如下行数</span>root  <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>   ALL<span class="token comment">#添加</span>username <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL</code></pre><h1 id="免密码登录"><a href="#免密码登录" class="headerlink" title="免密码登录"></a>免密码登录</h1><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygenssh-copy-id -i .ssh/id_rsa.pub  用户名字@192.168.x.xxx<span class="token function">ssh</span> 用户名字@192.168.x.xxx</code></pre><h1 id="使用pem登录"><a href="#使用pem登录" class="headerlink" title="使用pem登录"></a>使用pem登录</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在本地生成公钥私钥</span>ssh-keygen<span class="token comment">#输入命令后，一路回车，即可。</span><span class="token comment">#将本地的公钥传到服务器上</span>ssh-copy-id -i ~/.ssh/id_rsa.pub remote-host<span class="token comment">#会提示你输入密码，成功之后，会帮助你把公钥放在服务器上，供登录使用。</span><span class="token comment">#把本地的私钥转为 pem 格式，供windows上的 ssh 客户端使用</span>openssl rsa -in ~/.ssh/id_rsa -outform pem <span class="token operator">></span> id_rsa.pem<span class="token function">chmod</span> <span class="token number">700</span> id_rsa.pem<span class="token comment">#这样就导出了pem格式的私钥，因为公钥已经在服务器了，所以只要服务器上的公钥不删除，用这把私钥就能登录服务器,一般来说，经过这样设置之后，可以把ssh 密码登录的方式禁用掉，使得服务器更加安全。</span><span class="token comment">#关闭 ssh 密码登录</span><span class="token function">vi</span> /etc/ssh/sshd_config<span class="token comment">#修改</span>PasswordAuthentication no<span class="token comment">#重启 ssh 服务</span><span class="token function">service</span> sshd restart</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos配置网络</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>centos8已经发布了，下载了一个体验一下，新安装好的centos8默认网卡是没有启动的，安装好后需要先配置网络。在<code>/etc/sysconfig/network-scripts</code>目录下存放着网卡的配置文件，文件名称是<code>ifcfg- 网卡名称</code>。</p><h4 id="一-修改配置文件"><a href="#一-修改配置文件" class="headerlink" title="一 修改配置文件"></a>一 修改配置文件</h4><p>设置网络时首先打开配置文件，配置文件默认如下所示，如果使用dhcp自动获取ip，只需将<code>ONBOOT=no</code>修改为<code>ONBOOT=no</code>即可。</p><pre class="language-none"><code class="language-none"># 网卡配置文件按默认配置TYPE&#x3D;EthernetPROXY_METHOD&#x3D;noneBROWSER_ONLY&#x3D;noBOOTPROTO&#x3D;dhcpDEFROUTE&#x3D;yesIPV4_FAILURE_FATAL&#x3D;noIPV6INIT&#x3D;yesIPV6_AUTOCONF&#x3D;yesIPV6_DEFROUTE&#x3D;yesIPV6_FAILURE_FATAL&#x3D;noIPV6_ADDR_GEN_MODE&#x3D;stable-privacyNAME&#x3D;ens33UUID&#x3D;e4987998-a4ce-4cef-96f5-a3106a97f5bfDEVICE&#x3D;ens33ONBOOT&#x3D;no  #如果使用dhcp分配ip的话，只需要将这里no改为yes，然后重启网络服务就行</code></pre><p>如果需要配置静态ip，则按照以下修改方法修改</p><pre class="language-none"><code class="language-none">TYPE&#x3D;EthernetPROXY_METHOD&#x3D;noneBROWSER_ONLY&#x3D;noBOOTPROTO&#x3D;static   #将dhcp修改为stati表示使用静态ipDEFROUTE&#x3D;yesIPADDR&#x3D;192.168.128.129   #设置IP地址NETMASK&#x3D;255.255.255.0    #设置子网掩码GATEWAY&#x3D;192.168.128.1    #设置网关DNS1&#x3D;114.114.114.114     #设置dnsIPV4_FAILURE_FATAL&#x3D;noIPV6INIT&#x3D;yesIPV6_AUTOCONF&#x3D;yesIPV6_DEFROUTE&#x3D;yesIPV6_FAILURE_FATAL&#x3D;noIPV6_ADDR_GEN_MODE&#x3D;stable-privacyNAME&#x3D;ens33UUID&#x3D;e4987998-a4ce-4cef-96f5-a3106a97f5bfDEVICE&#x3D;ens33ONBOOT&#x3D;yes  #将no改为yes</code></pre><h4 id="二-重启网络服务"><a href="#二-重启网络服务" class="headerlink" title="二 重启网络服务"></a>二 重启网络服务</h4><p>使用<strong>nmcli c reload</strong>命令重启网络服务，网络这块算是centos8改动较大的一块了，nmcli命令的参数如下所示：</p><pre class="language-none"><code class="language-none">[hk@localhost network-scripts]$ nmcli  -hUsage: nmcli [OPTIONS] OBJECT &#123; COMMAND | help &#125;OPTIONS  -o[verview]                                    overview mode (hide default values)  -t[erse]                                       terse output  -p[retty]                                      pretty output  -m[ode] tabular|multiline                      output mode  -c[olors] auto|yes|no                          whether to use colors in output  -f[ields] &lt;field1,field2,...&gt;|all|common       specify fields to output  -g[et-values] &lt;field1,field2,...&gt;|all|common   shortcut for -m tabular -t -f  -e[scape] yes|no                               escape columns separators in values  -a[sk]                                         ask for missing parameters  -s[how-secrets]                                allow displaying passwords  -w[ait] &lt;seconds&gt;                              set timeout waiting for finishing operations  -v[ersion]                                     show program version  -h[elp]                                        print this helpOBJECT  g[eneral]       NetworkManager&#39;s general status and operations  n[etworking]    overall networking control  r[adio]         NetworkManager radio switches  c[onnection]    NetworkManager&#39;s connections  # 网络管理一般使用 nmcli c  d[evice]        devices managed by NetworkManager  a[gent]         NetworkManager secret agent or polkit agent  m[onitor]       monitor NetworkManager changes[hk@localhost network-scripts]$ </code></pre><p>网络管理一般使用 <code>nmclli c</code>，用法如下：</p><pre class="language-none"><code class="language-none">[hk@localhost network-scripts]$ nmcli c -hUsage: nmcli connection &#123; COMMAND | help &#125;COMMAND :&#x3D; &#123; show | up | down | add | modify | clone | edit | delete | monitor | reload | load | import | export &#125;  show [--active] [--order &lt;order spec&gt;]  show [--active] [id | uuid | path | apath] &lt;ID&gt; ...  up [[id | uuid | path] &lt;ID&gt;] [ifname &lt;ifname&gt;] [ap &lt;BSSID&gt;] [passwd-file &lt;file with passwords&gt;]  down [id | uuid | path | apath] &lt;ID&gt; ...  add COMMON_OPTIONS TYPE_SPECIFIC_OPTIONS SLAVE_OPTIONS IP_OPTIONS [-- ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+]  modify [--temporary] [id | uuid | path] &lt;ID&gt; ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+  clone [--temporary] [id | uuid | path ] &lt;ID&gt; &lt;new name&gt;  edit [id | uuid | path] &lt;ID&gt;  edit [type &lt;new_con_type&gt;] [con-name &lt;new_con_name&gt;]  delete [id | uuid | path] &lt;ID&gt;  monitor [id | uuid | path] &lt;ID&gt; ...  reload  load &lt;filename&gt; [ &lt;filename&gt;... ]  import [--temporary] type &lt;type&gt; file &lt;file to import&gt;  export [id | uuid | path] &lt;ID&gt; [&lt;output file&gt;][hk@localhost network-scripts]$ </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sudoer文件解析</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>sudo的权限控制可以在<code>/etc/sudoers</code>文件中查看到。</p><p>如果想要控制某个用户(或某个组用户)只能执行root权限中的一部分命令, 或者允许某些用户使用sudo时不需要输入密码,就需要对该文件有所了解。</p><p>一般来说，通过<code>cat /etc/sudoers</code>指令来查看该文件, 会看到如下几行代码:</p><pre class="language-bash" data-language="bash"><code class="language-bash">root   <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL%wheel <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL%sudo  <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL</code></pre><p>对<code>/etc/sudoers</code>文件进行编辑的代码公式可以概括为:</p><pre class="language-bash" data-language="bash"><code class="language-bash">授权用户/组 主机<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>切换到哪些用户或组<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>是否需要输入密码验证<span class="token punctuation">]</span> 命令1,命令2,<span class="token punctuation">..</span>.</code></pre><p>凡是<code>[ ]</code>中的内容, 都能省略; 命令和命令之间用<code>,</code>号分隔;</p><p>为了方便说明, 将公式的各个部分称呼为字段1 - 字段5:</p><pre class="language-bash" data-language="bash"><code class="language-bash">授权用户/组 主机  <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>切换到哪些用户或组<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>是否需要输入密码验证<span class="token punctuation">]</span> 命令1,命令2,<span class="token punctuation">..</span>.字段1      字段2  <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>字段3<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>字段4<span class="token punctuation">]</span> 字段5</code></pre><p>字段3、字段4，是可以省略的。</p><p>在上面的默认例子中, “字段1”不以<code>%</code>号开头的表示”将要授权的用户”, 比如例子中的<code>root</code>；<br>以<code>%</code>号开头的表示”将要授权的组”, 比如例子中的<code>%wheel</code>组 和 <code>%sudo</code>组。</p><p>“字段2”表示允许登录的主机, ALL表示所有; 如果该字段不为ALL,表示授权用户只能在某些机器上登录本服务器来执行sudo命令. 比如:</p><pre class="language-bash" data-language="bash"><code class="language-bash">jack <span class="token assign-left variable">mycomputer</span><span class="token operator">=</span>/usr/sbin/reboot,/usr/sbin/shutdown</code></pre><p>表示: 普通用户jack在主机(或主机组)mycomputer上, 可以通过sudo执行reboot和shutdown两个命令。”字段3”和”字段4”省略。</p><p>“字段3”如果省略, 相当于<code>(root:root)</code>，表示可以通过<code>sudo</code>提权到root; 如果为<code>(ALL)</code>或者<code>(ALL:ALL)</code>, 表示能够提权到<code>(任意用户:任意用户组)</code>。</p><p>请注意，”字段3”如果没省略,必须使用<code>( )</code>双括号包含起来。这样才能区分是省略了”字段3”还是省略了”字段4”。</p><p>“字段4”的可能取值是<code>NOPASSWD:</code>。请注意NOPASSWD后面带有冒号<code>:</code>。表示执行sudo时可以不需要输入密码。比如:</p><pre class="language-bash" data-language="bash"><code class="language-bash">lucy <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: /bin/useradd</code></pre><p>表示: 普通用户lucy可以在任何主机上, 通过sudo执行<code>/bin/useradd</code>命令, 并且不需要输入密码.</p><p>又比如:</p><pre class="language-bash" data-language="bash"><code class="language-bash">peter <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: ALL</code></pre><p>表示: 普通用户peter可以在任何主机上, 通过sudo执行任何命令, 并且不需要输入密码。</p><p>“字段5”是使用逗号分开一系列命令,这些命令就是授权给用户的操作; ALL表示允许所有操作。</p><p>你可能已经注意到了, 命令都是使用绝对路径, 这是为了避免目录下有同名命令被执行，从而造成安全隐患。</p><p>如果你将授权写成如下安全性欠妥的格式:</p><pre class="language-none"><code class="language-none">lucy ALL&#x3D;(ALL) chown,chmod,useradd</code></pre><p>那么用户就有可能创建一个他自己的程序, 也命名为userad, 然后放在它的本地路径中, 如此一来他就能够使用root来执行这个”名为useradd的程序”。这是相当危险的!</p><p>命令的绝对路径可通过<code>which</code>指令查看到: 比如<code>which useradd</code>可以查看到命令<code>useradd</code>的绝对路径: <code>/usr/sbin/useradd</code></p><h3 id="公式还要扩充"><a href="#公式还要扩充" class="headerlink" title="公式还要扩充"></a>公式还要扩充</h3><p>例子1:</p><pre class="language-bash" data-language="bash"><code class="language-bash">papi <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> NOPASSWD: /bin/chown,/usr/sbin/useradd</code></pre><p>表示: 用户papi能在所有可能出现的主机上, 提权到root下执行/bin/chown, 不必输入密码; 但运行/usr/sbin/useradd 命令时需要密码.</p><p>这是因为<code>NOPASSWD:</code>只影响了其后的第一个命令: 命令1.</p><p>上面给出的公式只是简化版，完整的公式如下:</p><pre class="language-bash" data-language="bash"><code class="language-bash">授权用户/组 主机<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>切换到哪些用户或组<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>是否需要输入密码验证<span class="token punctuation">]</span> 命令1, <span class="token punctuation">[</span><span class="token punctuation">(</span>字段3<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>字段4<span class="token punctuation">]</span> 命令2, <span class="token punctuation">..</span>.</code></pre><p>在具有sudo操作的用户下, 执行<code>sudo -l</code>可以查看到该用户被允许和被禁止运行的命令.</p><h3 id="通配符和取消命令"><a href="#通配符和取消命令" class="headerlink" title="通配符和取消命令"></a>通配符和取消命令</h3><p>例子2:</p><pre class="language-none"><code class="language-none">papi ALL&#x3D;&#x2F;usr&#x2F;sbin&#x2F;*,&#x2F;sbin&#x2F;*,!&#x2F;usr&#x2F;sbin&#x2F;fdisk</code></pre><p>用例子2来说明通配符<code>*</code>的用法, 以及命令前面加上<code>!</code>号表示取消该命令。</p><p>该例子的意思是: 用户papi在所有可能出现的主机上, 能够运行目录/usr/sbin和/sbin下所有的程序, 但fdisk除外.</p><h3 id="开始编辑"><a href="#开始编辑" class="headerlink" title="开始编辑"></a>开始编辑</h3><p>“你讲了这么多,但是在实践中,我去编辑/etc/sudoers文件，系统提示我没权限啊，怎么办?”</p><p>这是因为<code>/etc/sudoers</code>的内容如此敏感，以至于该文件是只读的。所以，编辑该文件前，请确认清楚你知道自己正在做什么。</p><p>强烈建议通过<code>visudo</code>命令来修改该文件，通过<code>visudo</code>修改，如果配置出错，会有提示。</p><p>不过，系统文档推荐的做法，不是直接修改<code>/etc/sudoers</code>文件，而是将修改写在<code>/etc/sudoers.d/</code>目录下的文件中。</p><p>如果使用这种方式修改sudoers，需要在<code>/etc/sudoers</code>文件的最后行，加上<code>#includedir /etc/sudoers.d</code>一行(默认已有):</p><pre class="language-none"><code class="language-none">#includedir &#x2F;etc&#x2F;sudoers.d</code></pre><p>注意了，这里的指令<code>#includedir</code>是一个整体, 前面的<code>#</code>号不能丢，并非注释，也不能在<code>#</code>号后有空格。</p><p>任何在<code>/etc/sudoers.d/</code>目录下，不以<code>~</code>号结尾的文件和不包含<code>.</code>号的文件，都会被解析成<code>/etc/sudoers</code>的内容。</p><p>文档中是这么说的:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># This will cause sudo to read and parse any files in the /etc/sudoers.d</span><span class="token comment"># directory that do not end in '~' or contain a '.' character.</span><span class="token comment"># Note that there must be at least one file in the sudoers.d directory (this</span><span class="token comment"># one will do), and all files in this directory should be mode 0440.</span><span class="token comment"># Note also, that because sudoers contents can vary widely, no attempt is</span><span class="token comment"># made to add this directive to existing sudoers files on upgrade.</span><span class="token comment"># Finally, please note that using the visudo command is the recommended way</span><span class="token comment"># to update sudoers content, since it protects against many failure modes.</span></code></pre><h3 id="其他小知识"><a href="#其他小知识" class="headerlink" title="其他小知识"></a>其他小知识</h3><h4 id="输入密码时有反馈"><a href="#输入密码时有反馈" class="headerlink" title="输入密码时有反馈"></a>输入密码时有反馈</h4><p>当使用sudo后输入密码，并不会显示任何东西 —— 甚至连常规的星号都没有。有个办法可以解决该问题。</p><p>打开<code>/etc/sudoers</code>文件找到下述一行:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Defaults env_reset</code></pre><p>修改成:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Defaults        env_reset,pwfeedback</code></pre><h4 id="修改sudo会话时间"><a href="#修改sudo会话时间" class="headerlink" title="修改sudo会话时间"></a>修改sudo会话时间</h4><p>如果你经常使用sudo 命令，你肯定注意到过当你成功输入一次密码后，可以不用再输入密码就可以运行几次sudo命令。<br>但是一段时间后，sudo 命令会再次要求你输入密码。默认是15分钟，该时间可以调整。添加<code>timestamp_timeout=分钟数</code>即可。<br>时间以分钟为单位，-1表示永不过期，但强烈不推荐。</p><p>比如我希望将时间延长到1小时，还是打开<code>/etc/sudoers</code>文件找到下述一行:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Defaults env_reset</code></pre><p>修改成:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Defaults        env_reset,pwfeedback,timestamp_timeout<span class="token operator">=</span><span class="token number">60</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络配置三种模式对比（桥接模式，主机模式，网络地址转换）</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="VMware三种网络模式简介"><a href="#VMware三种网络模式简介" class="headerlink" title="VMware三种网络模式简介"></a>VMware三种网络模式简介</h1><p>​    VMWare提供了三种工作模式，它们是bridged(桥接模式)、NAT(网络地址转换模式)和host-only(主机模式)。安装好虚拟机以后，在网络连接里面可以看到多了两块网卡。如下图。</p><h1 id="1-bridged-桥接模式"><a href="#1-bridged-桥接模式" class="headerlink" title="1 bridged(桥接模式)"></a>1 bridged(桥接模式)</h1><h2 id="1-1-模式简介"><a href="#1-1-模式简介" class="headerlink" title="1.1 模式简介"></a>1.1 模式简介</h2><p>　　在这种模式下，VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。  　　在桥接模式下，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和<a href="https://cloud.tencent.com/product/cdh?from=10680">宿主机</a>器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由 于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。  　　使用桥接模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。想让它们相互通讯，你就需要为虚拟系统配置IP地址和子网掩码，否则就无法通信。    </p><h2 id="1-2-工作的虚拟网卡"><a href="#1-2-工作的虚拟网卡" class="headerlink" title="1.2 工作的虚拟网卡"></a>1.2 工作的虚拟网卡</h2><p>​    bridged模式下的VMnet0虚拟网络    </p><h2 id="1-3-架构图"><a href="#1-3-架构图" class="headerlink" title="1.3 架构图"></a>1.3 架构图</h2><p>1）使用VMnet0虚拟交换机，此时虚拟机相当与网络上的一台独立计算机与主机一样，拥有一个独立的IP地址。使用<strong>桥接方式</strong>，A，A1，A2，B可互访。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jxbkbk6j30ir0a00ta.jpg"></p><p>2）虚拟机就像一台真正的计算机一样，直接连接到实际的网络上，可以理解为与宿主机没有任何联系。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzb54q3j30ig08caam.jpg"></p><h2 id="1-4-使用范围"><a href="#1-4-使用范围" class="headerlink" title="1.4 使用范围"></a>1.4 使用范围</h2><p>​    1）如果你想利用VMWare在局域网内新建一个虚拟服务器，为局域网用户提供网络服务，就应该选择桥接模式。      2）如果你有路由器的话，那么就可以使用桥接方式上网，因为此时你申请的IP地址是写在了路由器上，而不是你的机器上，这样包括你的主机，虚拟机，也包括 连在路由器上的其他人的机器，都将可以上网，使用着由路由器分配的IP地址。  </p><h1 id="2-host-only-主机模式"><a href="#2-host-only-主机模式" class="headerlink" title="2 host-only(主机模式)"></a>2 host-only(主机模式)</h1><h2 id="2-1-模式简介"><a href="#2-1-模式简介" class="headerlink" title="2.1 模式简介"></a>2.1 模式简介</h2><p>​    在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用host-only模式。在host-only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。  　　提示：在host-only模式下，虚拟系统和宿主机器系统是可以相互通信的，相当于这两台机器通过双绞线互连。  　　在host-only模式下，虚拟系统的TCP/IP配置信息(如IP地址、网关地址、DNS服务器等)，都是由VMnet1(host-only)虚拟网络的DHCP服务器来动态分配的。  　　如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。    <a href="http://blog.csdn.net/suneqing/article/details/51787336">Linux虚拟机实现Host-only方式上网</a></p><h2 id="2-2-工作的虚拟网卡"><a href="#2-2-工作的虚拟网卡" class="headerlink" title="2.2 工作的虚拟网卡"></a>2.2 工作的虚拟网卡</h2><p>   host-only模式下的 VMnet1虚拟网络  </p><h2 id="2-3-架构图"><a href="#2-3-架构图" class="headerlink" title="2.3 架构图"></a>2.3 架构图</h2><p>1）使用Vmnet1虚拟交换机，此时虚拟机只能与虚拟机、主机互访。也就是不能上Internet。使用Host方式，A，A1，A2可以互访，但A1，A2不能访问B，也不能被B访问。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzy56yqj30h709ajs1.jpg"></p><p>2）这种方式下，虚拟机的网卡连接到宿主的 VMnet1 上，但系统并不为虚拟机提供任何路由服务，因此虚拟机只能和宿主机进行通信，而不能连接到实际网络上。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k09nm0nj30hb086dgg.jpg"></p><h2 id="2-4-使用范围"><a href="#2-4-使用范围" class="headerlink" title="2.4 使用范围"></a>2.4 使用范围</h2><p>   如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。  </p><h1 id="3-NAT-网络地址转换模式"><a href="#3-NAT-网络地址转换模式" class="headerlink" title="3 NAT(网络地址转换模式)"></a>3 NAT(网络地址转换模式)</h1><h2 id="3-1-模式简介"><a href="#3-1-模式简介" class="headerlink" title="3.1 模式简介"></a>3.1 模式简介</h2><p>​    使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟 系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机 器能访问互联网即可。    </p><h2 id="3-2-工作的虚拟网卡"><a href="#3-2-工作的虚拟网卡" class="headerlink" title="3.2 工作的虚拟网卡"></a>3.2 工作的虚拟网卡</h2><p>   NAT模式下的VMnet8虚拟网络    </p><h2 id="3-3-架构图"><a href="#3-3-架构图" class="headerlink" title="3.3 架构图"></a>3.3 架构图</h2><p>1） 使用Vmnet8虚拟交换机，此时虚拟机可以通过主机单向网络上的其他工作站，其他工作站不能访问虚拟机。用NAT方式，A1，A2可以访问B，但B不可以访问A1，A2。但A，A1，A2可以互访。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0pewx6j30i909gaav.jpg"></p><p>2） 这种方式下，虚拟机的网卡连接到宿主的 VMnet8 上。此时系统的 VMWare NAT Service 服务就充当了路由器的作用，负责将虚拟机发到 VMnet8 的包进行地址转换之后发到实际的网络上，再将实际网络上返回的包进行地址转换后通过 VMnet8 发送给虚拟机。VMWare DHCP Service 负责为虚拟机提供 DHCP 服务。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0w2pqrj30hm0863z4.jpg"></p><h2 id="3-4-使用范围"><a href="#3-4-使用范围" class="headerlink" title="3.4 使用范围"></a>3.4 使用范围</h2><p>​    如果你想利用VMWare安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用NAT模式。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/CleverCode/article/details/45934233">https://blog.csdn.net/CleverCode/article/details/45934233</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose文件编写</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Quartz框架的实现</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>定时任务 想必做程序的都或多或少的接触过,以便于我们以某个特定的 时间/频率 去执行所需要的程序,Quartz 是一个优秀的框架,可以根据我们的配置将 定时任务的执行 时间/频率 持久化至数据库, 我们通过修改数据库中的任务下次执行时间,达到不需要等到任务配置执行的原始 时间/频率,随时地运行定时任务; 并且可以看到任务的运行状态 WATING BLOCKING等</p><p>   1.导入依赖</p><p>   quartz自定义配置的数据源会使用C3P0创建连接,所以要引入C3P0依赖</p><pre class="language-java" data-language="java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token class-name">Quartz</span>定时任务 <span class="token operator">--</span><span class="token operator">></span>   <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>quartz<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>C3P0 <span class="token operator">--</span><span class="token operator">></span>   <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>       <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>mchange<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>c3p0<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">0.9</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>2.quartz 配置文件,yml方式</p><p>创建定时任务表的sql太长,这里就不贴了,我会将sql上传至GitHub,文末我会贴地址</p><pre class="language-java" data-language="java"><code class="language-java">## quartz定时任务spring<span class="token operator">:</span>  quartz<span class="token operator">:</span>    #jdbc 采用数据库方式  memory 采用内存方式    job<span class="token operator">-</span>store<span class="token operator">-</span>type<span class="token operator">:</span> jdbc      initialize<span class="token operator">-</span>schema<span class="token operator">:</span> embedded    #设置自动启动，默认为 <span class="token boolean">true</span>    auto<span class="token operator">-</span>startup<span class="token operator">:</span> <span class="token boolean">true</span>    #启动时更新己存在的<span class="token class-name">Job</span>    overwrite<span class="token operator">-</span>existing<span class="token operator">-</span>jobs<span class="token operator">:</span> <span class="token boolean">true</span>    properties<span class="token operator">:</span>      org<span class="token operator">:</span>        quartz<span class="token operator">:</span>          scheduler<span class="token operator">:</span>            instanceName<span class="token operator">:</span> <span class="token class-name">MyScheduler</span>            instanceId<span class="token operator">:</span> AUTO          jobStore<span class="token operator">:</span>            #指定使用的<span class="token class-name">JobStore</span>            <span class="token keyword">class</span><span class="token operator">:</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>jdbcjobstore<span class="token punctuation">.</span><span class="token class-name">JobStoreTX</span>            driverDelegateClass<span class="token operator">:</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>jdbcjobstore<span class="token punctuation">.</span><span class="token class-name">StdJDBCDelegate</span>            #数据库前缀            tablePrefix<span class="token operator">:</span> QRTZ_            #是否为集群            isClustered<span class="token operator">:</span> <span class="token boolean">false</span>            #检测任务执行时间的间隔  毫秒            misfireThreshold<span class="token operator">:</span> <span class="token number">5000</span>            clusterCheckinInterval<span class="token operator">:</span> <span class="token number">10000</span>            #数据源名称            dataSource<span class="token operator">:</span> myDS          #线程池配置          threadPool<span class="token operator">:</span>            <span class="token keyword">class</span><span class="token operator">:</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>simpl<span class="token punctuation">.</span><span class="token class-name">SimpleThreadPool</span>            threadCount<span class="token operator">:</span> <span class="token number">20</span>            threadPriority<span class="token operator">:</span> <span class="token number">5</span>            threadsInheritContextClassLoaderOfInitializingThread<span class="token operator">:</span> <span class="token boolean">true</span>          #数据源          dataSource<span class="token operator">:</span>            myDS<span class="token operator">:</span>              driver<span class="token operator">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span><span class="token class-name">Driver</span>              URL<span class="token operator">:</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test<span class="token operator">?</span>characterEncoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&amp;</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>tinyInt1isBit<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span><span class="token class-name">Asia</span><span class="token operator">/</span><span class="token class-name">Shanghai</span>              user<span class="token operator">:</span> root              password<span class="token operator">:</span> root              maxConnections<span class="token operator">:</span> <span class="token number">5</span></code></pre><p>有同学可能会问了,配置文件是配置好了,是在哪引用的呢? 别急, 且听我娓娓道来</p><p>spring-boot-starter-quartz (为方便诉说,下文中使用 bootquartz代替) 这个包下的QuartzProperties会帮我们自动加载配置文件,且看以下部分截图</p><p><img src="https://img-blog.csdnimg.cn/20200617111853517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70" alt="img"></p><p>可以看到, QuartzProperties 使用了 @ConfigurationProperties 加载了 spring.quartz 前缀的配置,也就是上面我们的配置文件中的配置;加载之后呢, bootquartz包下有 类 QuartzAutoConfiguration, 看名字就可以知道,这个就是自动配置 quartz的类了.</p><p>所以我们不需要再去通过代码去配置 SchedulerFactoryBean 了,这是后话</p><p>QuartzAutoConfiguration 类注释</p><p><img src="https://img-blog.csdnimg.cn/20200617113632769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70" alt="img"></p><p>通过上面的截图我们发现,这里引用了 QuartzProperties</p><p>其中的 quartzScheduler()方法帮助我们创建了 SchedulerFactoryBean 并使用了** **QuartzProperties 中的自定义配置,以下是quartzScheduler()部分代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> <span class="token class-name">SchedulerFactoryBean</span> <span class="token function">quartzScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SchedulerFactoryBean</span> schedulerFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">setQuartzProperties</span><span class="token punctuation">(</span><span class="token function">asProperties</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">customize</span><span class="token punctuation">(</span>schedulerFactoryBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> schedulerFactoryBean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>姑且一提,方法中调用了 customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置</p><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>那么到这里结束了吗?不! 这里还有本文中最大的一个坑,作者深受其扰,扒了两天的源码才找到这个问题!!!</p><p>如果我们的项目中有其它的默认数据源,那么quartz会忽略配置文件中自定义数据源,使用默认数据源,原因看以下源码</p><p>首先是 QuartzAutoConfiguration 中的 静态内部类 JdbcStoreTypeConfiguration</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JdbcStoreTypeConfiguration</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">SchedulerFactoryBeanCustomizer</span> <span class="token function">dataSourceCustomizer</span><span class="token punctuation">(</span><span class="token class-name">QuartzProperties</span> properties<span class="token punctuation">,</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span><span class="token annotation punctuation">@QuartzDataSource</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataSource</span><span class="token punctuation">></span></span> quartzDataSource<span class="token punctuation">,</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">></span></span> transactionManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>schedulerFactoryBean<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getJobStoreType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">JobStoreType</span><span class="token punctuation">.</span>JDBC<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                              <span class="token comment">//重点在这里 begin</span><span class="token class-name">DataSource</span> dataSourceToUse <span class="token operator">=</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span>quartzDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSourceToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//重点在这里 end</span><span class="token class-name">PlatformTransactionManager</span> txManager <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">getIfUnique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>txManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">setTransactionManager</span><span class="token punctuation">(</span>txManager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span class="token keyword">private</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataSource</span><span class="token punctuation">></span></span> quartzDataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSource</span> dataSourceIfAvailable <span class="token operator">=</span> quartzDataSource<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>dataSourceIfAvailable <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> dataSourceIfAvailable <span class="token operator">:</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>其中的getDataSource 方法判断了我们项目中的 quartzDataSource是否为空,如果为空,那么就使用默认的数据源;quartzDataSource怎么才能不为空呢? 可以看到dataSourceCustomizer 方法参数中有 @QuartzDataSource 注解, 这个注解会去寻找我们项目中使用@QuartzDataSource配置的数据源,但是 我都已经在配置文件中自定义了数据源,再去手动配置一遍不是多此一举吗? 接着往下看</p><p><strong>SchedulerFactoryBean 的初始化方法部分源码▼</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initSchedulerFactory</span><span class="token punctuation">(</span><span class="token class-name">StdSchedulerFactory</span> schedulerFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Properties</span> mergedProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mergedProps<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">.</span>PROP_JOB_STORE_CLASS<span class="token punctuation">,</span> <span class="token class-name">LocalDataSourceJobStore</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们在静态内部类设置过了数据源,初始化方法只要发现数据源不为空,那么就使用会使用 LocalDataSourceJobStore 覆盖我们quartz配置文件中设置的  org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX</p><p>而LocalDataSourceJobStore 中的初始化方法使用的是 SchedulerFactoryBean 中设置的数据源,所以我们quartz配置文件中的数据源才不会生效!!!</p><p>怎么解决呢?   我们上面提到了customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置</p><p>所以 我们只要在SchedulerFactoryBean 创建后调用初始化方法之前,再将DataSource设置为null,那么SchedulerFactoryBean 初始化时,将会使用我们配置文件中的JobStoreTX去寻找我们配置的数据源了,至此,填坑完毕▼</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">SchedulerFactoryBeanCustomizer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span></span><span class="token class-name">SchedulerFactoryBean</span><span class="token punctuation">;</span><span class="token comment">/** * @author Demo-Liu * @create 2020-06-12 11:20 * @description 配置定时任务 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulerConfig</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulerFactoryBeanCustomizer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @Author Demo-Liu     * @Date 20200614 12:44     * 自定义 quartz配置     * @param schedulerFactoryBean     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">SchedulerFactoryBean</span> schedulerFactoryBean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>以上</strong></p><p><strong>在文末附上我的GitHub小demo,其中包含了quartz的数据库建表sql,并提供了一种可以更加灵活便捷的通过yml文件配置定时任务的方式  地址: GitHub-BootQuartzYml</strong></p><p><strong>以下是yml配置文件配置定时任务的例子</strong></p><pre class="language-java" data-language="java"><code class="language-java">#通过加载此配置文件实现动态创建<span class="token class-name">Job</span> 旨在通过一种更灵活便捷的方式来控制定时任务#<span class="token number">20200611</span> by <span class="token class-name">Demo</span><span class="token operator">-</span><span class="token class-name">Liu</span>#jobs<span class="token operator">:</span>#  jobList<span class="token operator">:</span>#    <span class="token operator">-</span> jobConf<span class="token operator">:</span>#        name<span class="token operator">:</span> 测试任务                             #任务名 可选#        job<span class="token operator">:</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span><span class="token class-name">DemoJob</span>  #任务类包路径 必须#        param<span class="token operator">:</span>                                     #可为job类注入参数<span class="token punctuation">(</span>可配置多项<span class="token punctuation">)</span>   可选#          jtbs<span class="token operator">:</span> test#        cron<span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>                         #任务执行频率 必须#        active<span class="token operator">:</span> <span class="token boolean">true</span>                               #任务激活状态 必须jobs<span class="token operator">:</span>  jobList<span class="token operator">:</span>    <span class="token operator">-</span> jobConf<span class="token operator">:</span>        name<span class="token operator">:</span> 测试任务        job<span class="token operator">:</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span><span class="token class-name">DemoJob</span>        param<span class="token operator">:</span>          jtbs<span class="token operator">:</span> test          ss<span class="token operator">:</span> test2        cron<span class="token operator">:</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>        active<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token operator">-</span> jobConf<span class="token operator">:</span>        name<span class="token operator">:</span> 测试任务<span class="token number">2</span>        job<span class="token operator">:</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span><span class="token class-name">DemoJob2</span>        param<span class="token operator">:</span>          jtbs<span class="token operator">:</span> test          ss<span class="token operator">:</span> test2        cron<span class="token operator">:</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>        active<span class="token operator">:</span> <span class="token boolean">false</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>框架的实现</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>frp是有个内网穿透的工具，分为客户端和服务端。客户端的程序名称是frpc，服务端的程序名称是frps。</p><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre class="language-none"><code class="language-none">&#x2F;&#x2F; lorawan gateway 下载mipsle版本https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases</code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token comment"># frps.ini</span><span class="token punctuation">[</span><span class="token table class-name">common</span><span class="token punctuation">]</span><span class="token key property">bind_port</span> <span class="token punctuation">=</span> <span class="token number">7000</span>   <span class="token comment"># 用于与客户端之间通信</span></code></pre><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><pre class="language-bash" data-language="bash"><code class="language-bash">./frps -c ./frps.ini</code></pre><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><p>详细看<a href="https://github.com/fatedier/frp/blob/master/README_zh.md#dashboard">https://github.com/fatedier/frp/blob/master/README_zh.md#dashboard</a></p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token comment"># frpc.ini</span><span class="token punctuation">[</span><span class="token table class-name">common</span><span class="token punctuation">]</span><span class="token key property">server_addr</span> <span class="token punctuation">=</span> x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token key property">server_port</span> <span class="token punctuation">=</span> <span class="token number">7000</span><span class="token comment"># frp multi user 插件</span><span class="token key property">user</span> <span class="token punctuation">=</span> user1<span class="token key property">meta_token</span> <span class="token punctuation">=</span> <span class="token number">123</span><span class="token punctuation">[</span><span class="token table class-name">web</span><span class="token punctuation">]</span><span class="token key property">type</span> <span class="token punctuation">=</span> http<span class="token key property">local_port</span> <span class="token punctuation">=</span> <span class="token number">80</span><span class="token key property">custom_domains</span> <span class="token punctuation">=</span> www<span class="token punctuation">.</span>yourdomain<span class="token punctuation">.</span>com<span class="token punctuation">[</span><span class="token table class-name">ssh</span><span class="token punctuation">]</span><span class="token key property">type</span> <span class="token punctuation">=</span> tcp<span class="token key property">local_ip</span> <span class="token punctuation">=</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token key property">local_port</span> <span class="token punctuation">=</span> <span class="token number">22</span><span class="token key property">remote_port</span> <span class="token punctuation">=</span> <span class="token number">6000</span></code></pre><h2 id="运行程序-1"><a href="#运行程序-1" class="headerlink" title="运行程序"></a>运行程序</h2><pre class="language-bash" data-language="bash"><code class="language-bash">./frpc -c ./frpc.ini</code></pre><h2 id="openwrt开机启动"><a href="#openwrt开机启动" class="headerlink" title="openwrt开机启动"></a>openwrt开机启动</h2><ol><li><p>配置服务</p><pre class="language-none"><code class="language-none">## &#x2F;etc&#x2F;init.d&#x2F;frpc#!&#x2F;bin&#x2F;sh &#x2F;etc&#x2F;rc.common# &quot;new&quot; style init script# Look at &#x2F;lib&#x2F;functions&#x2F;service.sh on a running system for explanations of what other SERVICE_# options you can use, and when you might want them.START&#x3D;80APP&#x3D;frpcstart() &#123;      service_start &#x2F;usr&#x2F;sbin&#x2F;$APP -c &#x2F;etc&#x2F;frpc.ini &gt; &#x2F;usr&#x2F;frpc.log &amp;&#125;stop() &#123;        service_stop &#x2F;usr&#x2F;sbin&#x2F;$APP&#125;</code></pre></li><li><p>开机启动</p><pre class="language-none"><code class="language-none">chmod +x &#x2F;etc&#x2F;init.d&#x2F;frpc&#x2F;etc&#x2F;init.d&#x2F;frpc enable&#x2F;etc&#x2F;init.d&#x2F;frpc start</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名不能解析</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>DNS有问题，之前手动配置DNS导致，执行如下内容(8.8.8.8是谷歌提供的)</p><p>echo ‘nameserver 8.8.8.8’&gt;&gt;/etc/resolv.conf</p><p>也可使用阿里巴巴提供的DNS域名解析</p><p>nameserver 223.5.5.5</p><p>nameserver 223.6.6.6</p><p><code>阿里巴巴DNS介绍</code> <a href="https://opsx.alibaba.com/service?lang=zh-CN">https://opsx.alibaba.com/service?lang=zh-CN</a></p><p><img src="https://img2018.cnblogs.com/blog/1114349/201910/1114349-20191026203755691-995379198.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3工程搭建</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -g @vue/clivue create <span class="token builtin class-name">test</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写自己的Springboot-starter</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖，使得我们在开发业务代码时能够非常方便的、不需要过多关注框架的配置，而只需要关注业务即可。</p><p>例如我想要在SpringBoot项目中集成Redis，那么我只需要加入spring-data-redis-starter的依赖，并简单配置一下连接信息以及Jedis连接池配置就可以。这为我们省去了之前很多的配置操作。甚至有些功能的开启只需要在启动类或配置类上增加一个注解即可完成。</p><p>那么如果我们想要自己实现自己的Starter需要做些什么呢？下面就开始介绍如何实现自己的SpringBoot-xxx-starter。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先说说原理，我们知道使用一个公用的starter的时候，只需要将相应的依赖添加的Maven的配置文件当中即可，免去了自己需要引用很多依赖类，并且SpringBoot会自动进行类的自动配置。那么 SpringBoot 是如何知道要实例化哪些类，并进行自动配置的呢？ 下面简单说一下。</p><p>首先，SpringBoot 在启动时会去依赖的starter包中寻找 <code>resources/META-INF/spring.factories </code>文件，然后根据文件中配置的Jar包去扫描项目所依赖的Jar包，这类似于 Java 的 <strong>SPI</strong> 机制。</p><p>第二步，根据 <code>spring.factories</code>配置加载<code>AutoConfigure</code>类。</p><p>最后，根据 <code>@Conditional</code>注解的条件，进行自动配置并将Bean注入Spring Context 上下文当中。</p><p>我们也可以使用<code>@ImportAutoConfiguration(&#123;MyServiceAutoConfiguration.class&#125;)</code> 指定自动配置哪些类。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>终于到了代码实现的步骤，接下来就开始编码我们自己的SpringBoot-starter。</p><h4 id="第一步创建一个SpringBoot-项目，并添加下面两个依赖到pom-xml文件当中"><a href="#第一步创建一个SpringBoot-项目，并添加下面两个依赖到pom-xml文件当中" class="headerlink" title="第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中"></a>第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中</h4><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;        &lt;optional&gt;true&lt;&#x2F;optional&gt;    &lt;&#x2F;dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;spring-boot-autoconfigure&lt;&#x2F;artifactId&gt;    &lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;</code></pre><p>其中 <code>spring-boot-configuration-processor </code>的作用是编译时生成 <code>spring-configuration-metadata.json </code>，此文件主要给IDE使用。如当配置此jar相关配置属性在 <code>application.yml </code>，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。</p><p>我们日常使用的Spring官方的Starter一般采取<code>spring-boot-starter-&#123;name&#125; </code>的命名方式，如 <code>spring-boot-starter-web </code>。</p><p>而非官方的Starter，官方建议 <code>artifactId</code> 命名应遵循<code>&#123;name&#125;-spring-boot-starter </code>的格式。 例如：<code>ysc-spring-boot-starter </code> 。</p><pre class="language-XML" data-language="XML"><code class="language-XML">&lt;groupId&gt;com.ysc&lt;&#x2F;groupId&gt;&lt;artifactId&gt;simple-spring-boot-starter&lt;&#x2F;artifactId&gt;&lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;&lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</code></pre><h4 id="第二步编写我们的Service类"><a href="#第二步编写我们的Service类" class="headerlink" title="第二步编写我们的Service类"></a>第二步编写我们的Service类</h4><p>这里讲一下我们的Starter要实现的功能，很简单，提供一个<code>Service</code>，包含一个能够将配置文件中配置的字符串根据传入的字符进行分割的方法<code>String[] split(String separatorChar)</code>。</p><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">public class StarterService &#123;    private String config;    public StarterService(String config) &#123;        this.config &#x3D; config;    &#125;        public String[] split(String separatorChar) &#123;        return StringUtils.split(this.config, separatorChar);    &#125;    &#125;</code></pre><h4 id="第三步编写配置文件读取类"><a href="#第三步编写配置文件读取类" class="headerlink" title="第三步编写配置文件读取类"></a>第三步编写配置文件读取类</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"example.service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarterServiceProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> config<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><h4 id="第四步，编写AutoConfigure类-，这步是关键点"><a href="#第四步，编写AutoConfigure类-，这步是关键点" class="headerlink" title="第四步，编写AutoConfigure类 ，这步是关键点"></a>第四步，编写<code>AutoConfigure</code>类 ，这步是关键点</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">StarterService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">StarterServiceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarterAutoConfigure</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StarterServiceProperties</span> properties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"example.service"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token class-name">StarterService</span> starterService <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StarterService</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>解释一下代码中用到的几个注解：</p><ul><li><code>@ConditionalOnClass</code>，当<code>classpath</code>下发现该类的情况下进行自动配置。</li><li><code>@ConditionalOnMissingBean</code>，当<code>Spring Context</code>中不存在该<code>Bean</code>时。</li><li><code>@ConditionalOnProperty(prefix = &quot;example.service&quot;,value = &quot;enabled&quot;,havingValue = &quot;true&quot;)</code>，当配置文件中<code>example.service.enabled=true</code>时。</li></ul><h5 id="下面列举SpringBoot中的所有-Conditional注解及作用"><a href="#下面列举SpringBoot中的所有-Conditional注解及作用" class="headerlink" title="下面列举SpringBoot中的所有@Conditional注解及作用"></a>下面列举SpringBoot中的所有@Conditional注解及作用</h5><pre class="language-none"><code class="language-none">@ConditionalOnBean:当容器中有指定的Bean的条件下  @ConditionalOnClass：当类路径下有指定的类的条件下  @ConditionalOnExpression:基于SpEL表达式作为判断条件  @ConditionalOnJava:基于JVM版本作为判断条件  @ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  @ConditionalOnMissingBean:当容器中没有指定Bean的情况下  @ConditionalOnMissingClass:当类路径下没有指定的类的条件下  @ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  @ConditionalOnProperty:指定的属性是否有指定的值  @ConditionalOnResource:类路径下是否有指定的资源  @ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下  </code></pre><h4 id="最后一步，在resources-META-INF-下创建spring-factories文件，并添加如下内容："><a href="#最后一步，在resources-META-INF-下创建spring-factories文件，并添加如下内容：" class="headerlink" title="最后一步，在resources/META-INF/下创建spring.factories文件，并添加如下内容："></a>最后一步，在<code>resources/META-INF/</code>下创建<code>spring.factories</code>文件，并添加如下内容：</h4><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">com.example.autocinfigure.StarterAutoConfigure</span></code></pre><p>至此，我们的一个Starter代码部分就是完成了，下面将项目安装到本地Maven仓库中。</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>在项目根目录执行 <code>mvn install</code> 进行打包安装。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>将Starter项目的依赖添加到我们自己的SpringBoot项目中</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ysc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>simple-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>在<code>application.yml</code> 配置文件中添加配置信息：</p><pre class="language-none"><code class="language-none">example  service    enabled: true    config： abc-des-dde,SSS-DRS-RE,SDR-SDFR-XXX</code></pre><p>在本地使用<code>JUnit</code>进行代码测试</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">StarterService</span> starterService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">starterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> splitArray <span class="token operator">=</span> starterService<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>splitArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> sprintboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hivemq源码学习-启动</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="hivemq技术选型"><a href="#hivemq技术选型" class="headerlink" title="hivemq技术选型"></a>hivemq技术选型</h1><ul><li><strong>使用Guice做DI</strong></li><li><strong>使用Netty 4做网络框架</strong></li><li><strong>使用JGroups做Cluster Node之间的集群通讯</strong></li><li><strong>使用Exodus做Broker信息文件持久化存储</strong></li><li><strong>使用Dropwizard Metrics做Broker的统计、监控</strong></li><li><strong>使用Kryo做序列化/反序列化</strong></li><li><strong>使用Jetty做Broker端servlet容器</strong></li><li><strong>使用Resteasy做Broker端restfull框架</strong></li><li><strong>使用Quartz/做Broker端任务的调度</strong></li></ul><h1 id="程序启动main函数"><a href="#程序启动main函数" class="headerlink" title="程序启动main函数"></a>程序启动main函数</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">MetricRegistry</span> metricRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MetricRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>metricRegistry<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MetricRegistryLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">SystemInformationImpl</span> systemInformation<span class="token punctuation">;</span><span class="token class-name">LoggingBootstrap</span><span class="token punctuation">.</span><span class="token function">prepareLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Starting HiveMQ Community Edition Server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Initializing HiveMQ home directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Create SystemInformation this early because logging depends on it</span>systemInformation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemInformationImpl</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Initializing Logging"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LoggingBootstrap</span><span class="token punctuation">.</span><span class="token function">initLogging</span><span class="token punctuation">(</span>systemInformation<span class="token punctuation">.</span><span class="token function">getConfigFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Initializing Exception handlers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HiveMQExceptionHandlerBootstrap</span><span class="token punctuation">.</span><span class="token function">addUnrecoverableExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Initializing configuration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">FullConfigurationService</span> configService <span class="token operator">=</span> <span class="token class-name">ConfigurationBootstrap</span><span class="token punctuation">.</span><span class="token function">bootstrapConfig</span><span class="token punctuation">(</span>systemInformation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">HivemqId</span> hiveMQId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HivemqId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"This HiveMQ ID is &#123;&#125;"</span><span class="token punctuation">,</span> hiveMQId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ungraceful shutdown does not delete tmp folders, so we clean them up on broker start</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Cleaning up temporary folders"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TemporaryFileUtils</span><span class="token punctuation">.</span><span class="token function">deleteTmpFolder</span><span class="token punctuation">(</span>systemInformation<span class="token punctuation">.</span><span class="token function">getDataFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//must happen before persistence injector bootstrap as it creates the persistence folder.</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Checking for migrations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MigrationUnit</span><span class="token punctuation">,</span> <span class="token class-name">PersistenceType</span><span class="token punctuation">></span></span> migrations <span class="token operator">=</span> <span class="token class-name">Migrations</span><span class="token punctuation">.</span><span class="token function">checkForTypeMigration</span><span class="token punctuation">(</span>systemInformation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MigrationUnit</span><span class="token punctuation">></span></span> valueMigrations <span class="token operator">=</span> <span class="token class-name">Migrations</span><span class="token punctuation">.</span><span class="token function">checkForValueMigration</span><span class="token punctuation">(</span>systemInformation<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Initializing persistences"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Injector</span> persistenceInjector <span class="token operator">=</span>    <span class="token class-name">GuiceBootstrap</span><span class="token punctuation">.</span><span class="token function">persistenceInjector</span><span class="token punctuation">(</span>systemInformation<span class="token punctuation">,</span> metricRegistry<span class="token punctuation">,</span> hiveMQId<span class="token punctuation">,</span> configService<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//blocks until all persistences started</span>persistenceInjector<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">PersistenceStartup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ShutdownHooks</span><span class="token punctuation">.</span>SHUTTING_DOWN<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>configService<span class="token punctuation">.</span><span class="token function">persistenceConfigurationService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">PersistenceMode</span><span class="token punctuation">.</span>IN_MEMORY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>migrations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> valueMigrations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>migrations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Persistence types has been changed, migrating persistent data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Persistence values has been changed, migrating persistent data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MigrationUnit</span> migrationUnit <span class="token operator">:</span> migrations<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; needs to be migrated."</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span>migrationUnit<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MigrationUnit</span> migrationUnit <span class="token operator">:</span> valueMigrations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; needs to be migrated."</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span>migrationUnit<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Migrations</span><span class="token punctuation">.</span><span class="token function">migrate</span><span class="token punctuation">(</span>persistenceInjector<span class="token punctuation">,</span> migrations<span class="token punctuation">,</span> valueMigrations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Migrations</span><span class="token punctuation">.</span><span class="token function">afterMigration</span><span class="token punctuation">(</span>systemInformation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Starting with in memory persistences"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Initializing Guice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Injector</span> injector <span class="token operator">=</span> <span class="token class-name">GuiceBootstrap</span><span class="token punctuation">.</span><span class="token function">bootstrapInjector</span><span class="token punctuation">(</span>systemInformation<span class="token punctuation">,</span>                                                           metricRegistry<span class="token punctuation">,</span>                                                           hiveMQId<span class="token punctuation">,</span>                                                           configService<span class="token punctuation">,</span>                                                           persistenceInjector<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>injector <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ShutdownHooks</span><span class="token punctuation">.</span>SHUTTING_DOWN<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建hivemq服务器进行相关逻辑操作</span><span class="token keyword">final</span> <span class="token class-name">HiveMQServer</span> instance <span class="token operator">=</span> injector<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">HiveMQServer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">InternalConfigurations</span><span class="token punctuation">.</span>GC_AFTER_STARTUP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Starting initial garbage collection after startup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Start garbage collection of objects we don't need anymore after starting up</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Finished initial garbage collection after startup in &#123;&#125;ms"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ShutdownHooks</span><span class="token punctuation">.</span>SHUTTING_DOWN<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* It's important that we are modifying the log levels after Guice is initialized,        otherwise this somehow interferes with Singleton creation */</span><span class="token class-name">LoggingBootstrap</span><span class="token punctuation">.</span><span class="token function">addLoglevelModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ShutdownHooks</span><span class="token punctuation">.</span>SHUTTING_DOWN<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Started HiveMQ in &#123;&#125;ms"</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ShutdownHooks</span><span class="token punctuation">.</span>SHUTTING_DOWN<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 发送hivemq官方使用数据，不用管</span><span class="token keyword">final</span> <span class="token class-name">UsageStatistics</span> usageStatistics <span class="token operator">=</span> injector<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">UsageStatistics</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>usageStatistics<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis开启远程连接</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h4 id="1、修改redis服务器的配置文件"><a href="#1、修改redis服务器的配置文件" class="headerlink" title="1、修改redis服务器的配置文件"></a>1、修改redis服务器的配置文件</h4><p>vi redis.conf</p><p>注释以下绑定的主机地址</p><p># bind 127.0.0.1</p><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><p>vim  redis.conf</p><p>bind  0.0.0.0</p><p>protected-mode   no</p><h4 id="2、修改redis服务器的参数配置"><a href="#2、修改redis服务器的参数配置" class="headerlink" title="2、修改redis服务器的参数配置"></a>2、修改redis服务器的参数配置</h4><p>修改redis的守护进程为no，不启用</p><p>127.0.0.1:6379&gt; config  set   daemonize  “no”</p><p>OK</p><p>修改redis的保护模式为no，不启用</p><p>127.0.0.1:6379&gt; config   set   protected-mode”no”</p><p>OK</p><p>或者</p><p>config set requirepass 123 -&gt;123是密码</p><h4 id="注意：开启-6379端口"><a href="#注意：开启-6379端口" class="headerlink" title="注意：开启 6379端口"></a>注意：开启 6379端口</h4>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx的servername配置</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>编译自：<br> <a href="https://link.jianshu.com/?t=http://nginx.org/en/docs/http/server_names.html">server_names</a></p><p><strong>目录</strong>：</p><ul><li>通配符主机名</li><li>正则表达式主机名</li><li>混杂主机名</li><li>对主机名的优化</li><li>兼容性</li></ul><p>nginx 的 server names 由 server_name 指令定义，server name 是 nginx 用于选择以哪个 server 区块处理访问请求的依据参数。可参考 《nginx 是如何处理请求的》 的描述。</p><p>server name 可以用三种方式定义：</p><ul><li>定义准确的名字</li><li>定义通配符名字</li><li>定义正则表达式名字</li></ul><p>例如：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  example<span class="token punctuation">.</span>org  www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>org<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  <span class="token operator">*</span><span class="token punctuation">.</span>example<span class="token punctuation">.</span>org<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  mail<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  <span class="token operator">~</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token keyword">user</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">)</span>\<span class="token punctuation">.</span>example\<span class="token punctuation">.</span>net$<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>当 nginx 以请求的 server name 查找匹配的虚拟主机时，如果匹配的 server 区块不止一个，nginx 按照如下的优先顺序选择 server 区块：</p><ol><li>准确的主机名</li><li>以 “*” 起始的最长的通配主机名</li><li>以 “*” 结尾的最长的通配主机名</li><li>第一个匹配的正则表达式（按照配置文件中的顺序）</li></ol><p>所以，如果同时有一个通配主机名和正则表达式主机名与访问请求的 server name 匹配，nginx 会选择通配主机名的 server 区块处理请求。</p><h2 id="通配主机名"><a href="#通配主机名" class="headerlink" title="通配主机名"></a>通配主机名</h2><hr><p>通配主机名只能在起始和末尾使用 “<code>*</code>” 字符，而且必须以 “<code>.</code>” 分隔。形如 “<code>www.*.example.org</code>” 或者 “<code>w*.example.org</code>” 的通配主机名是无效的。要达到这个匹配效果，只有使用正则表达式：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">“www<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>example<span class="token punctuation">.</span>org” <span class="token operator">-</span><span class="token operator">></span>  “<span class="token operator">~</span><span class="token operator">^</span>www\<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span>\<span class="token punctuation">.</span>example\<span class="token punctuation">.</span>org$”“w<span class="token operator">*</span><span class="token punctuation">.</span>example<span class="token punctuation">.</span>org”    <span class="token operator">-</span><span class="token operator">></span>  “<span class="token operator">~</span><span class="token operator">^</span>w<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span>example\<span class="token punctuation">.</span>org$”</code></pre><p>“<code>*</code>” 号可以匹配多个名字区域，“<code>*.example.org</code>” 不仅可以匹配 <a href="https://link.jianshu.com/?t=http://www.example.org">www.example.org</a>，也能够匹配 <a href="https://link.jianshu.com/?t=http://www.sub.example.org">www.sub.example.org</a>。</p><h2 id="正则表达式主机名"><a href="#正则表达式主机名" class="headerlink" title="正则表达式主机名"></a>正则表达式主机名</h2><hr><p>nginx 使用的正则表达式与 Perl 语言的正则表达式（PCRE）兼容。使用正则表达式主机名，server name 必须以 “~” 字符为起始字符。</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">server_name  <span class="token operator">~</span><span class="token operator">^</span>www\d<span class="token operator">+</span>\<span class="token punctuation">.</span>example\<span class="token punctuation">.</span>net$<span class="token punctuation">;</span></code></pre><p>如果不以 “~” 字符为起始字符，该 server name 将被视为 “准确的主机名” 或者当 server name 包含 “<code>*</code>” 时被视为 “通配主机名” (多数情况是非法通配主机名，因为只有当 “<code>*</code>” 在 server name 的起始或结尾时才合法)。</p><p>不要忘记设置 “<code>^</code>” 和 “<code>$</code>” 锚定符对主机名进行界定，这不是 nginx 的配置语法要求，而是为了使正则表达式能正确匹配。</p><p>同时也要注意，域名的分隔符 “.” 在正则表达式中应该以 “\” 引用。如果在正则表达式中使用了 “<code>&#123;</code>” 和 “<code>&#125;</code>” 字符，应该将整个正则表达式引用起来，因为花括弧在 nginx 配置中也有特殊意义，引用起来以避免被 nginx 错误解析。例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash">server_name  <span class="token string">"~^(?&lt;name>\w\d&#123;1,3&#125;+)\.example\.net$"</span><span class="token punctuation">;</span></code></pre><p>如果不引用起来，nginx 会启动失败，并显示如下错误信息：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp">directive <span class="token string">"server_name"</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token class-name">terminated</span> <span class="token keyword">by</span> <span class="token string">";"</span> <span class="token keyword">in</span> <span class="token range operator">..</span><span class="token punctuation">.</span></code></pre><p>正则表达式的 named capture （使用一个名字对匹配的字符串进行引用）可被视为一个变量，在后面的配置中使用：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">server <span class="token punctuation">&#123;</span>    server_name   <span class="token operator">~</span><span class="token operator">^</span><span class="token punctuation">(</span>www\<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;</span>domain<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">)</span>$<span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        root   <span class="token operator">/</span>sites<span class="token operator">/</span><span class="token variable">$domain</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>PCRE 库支持 named capture，有如下几种语法：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">?</span><span class="token operator">&lt;</span>name<span class="token operator">></span>     <span class="token constant">Perl</span> <span class="token number">5.10</span> compatible syntax<span class="token punctuation">,</span> supported since <span class="token constant">PCRE</span><span class="token operator">-</span><span class="token number">7.0</span><span class="token operator">?</span><span class="token string">'name'</span>     <span class="token constant">Perl</span> <span class="token number">5.10</span> compatible syntax<span class="token punctuation">,</span> supported since <span class="token constant">PCRE</span><span class="token operator">-</span><span class="token number">7.0</span><span class="token operator">?</span><span class="token constant">P</span><span class="token operator">&lt;</span>name<span class="token operator">></span>    <span class="token constant">Python</span> compatible syntax<span class="token punctuation">,</span> supported since <span class="token constant">PCRE</span><span class="token operator">-</span><span class="token number">4.0</span></code></pre><p>可参考：<a href="https://link.jianshu.com/?t=http://www.pcre.org/current/doc/html/pcre2pattern.html#SEC16">pcre2pattern</a>：</p><pre class="language-tsx" data-language="tsx"><code class="language-tsx">\d     <span class="token builtin">any</span> decimal digit\<span class="token constant">D</span>     <span class="token builtin">any</span> character that <span class="token keyword">is</span> not a decimal digit\h     <span class="token builtin">any</span> horizontal white space character\<span class="token constant">H</span>     <span class="token builtin">any</span> character that <span class="token keyword">is</span> not a horizontal white space character\s     <span class="token builtin">any</span> white space character\<span class="token constant">S</span>     <span class="token builtin">any</span> character that <span class="token keyword">is</span> not a white space character\v     <span class="token builtin">any</span> vertical white space character\<span class="token constant">V</span>     <span class="token builtin">any</span> character that <span class="token keyword">is</span> not a vertical white space character\w     <span class="token builtin">any</span> <span class="token string">"word"</span> character\<span class="token constant">W</span>     <span class="token builtin">any</span> <span class="token string">"non-word"</span> character</code></pre><p>如果 nginx 启动失败，并显示如下信息：</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">pcre_compile() failed: unrecognized character after (?&lt; in ...</code></pre><p>这表示 PCRE 库太老旧，可尝试使用 “<code>?P&lt;name&gt;</code>” 替代 “<code>?&lt;name&gt;</code>”。</p><p>named capture 也能以数字形式使用：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">server <span class="token punctuation">&#123;</span>    server_name   <span class="token operator">~</span><span class="token operator">^</span><span class="token punctuation">(</span>www\<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token punctuation">)</span>$<span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        root   <span class="token operator">/</span>sites<span class="token operator">/</span>$<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>无论如何，数字形式的使用应尽量简单，因为数字是只是顺序标识，而不是被匹配的字符串的标识，这导致数字引用很容易被覆盖。</p><h2 id="混杂主机名"><a href="#混杂主机名" class="headerlink" title="混杂主机名"></a>混杂主机名</h2><hr><p>有一些主机名是被特殊对待的。</p><p>对于未定义 “Host” 请求首部的请求，如果希望在某个 server 区块中处理这样的请求，应在 server_name 指令的参数中添加 “” 空字符串参数：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  example<span class="token punctuation">.</span>org  www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>org  <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>在《nginx 是如何处理访问请求的》一文中曾经介绍过，如果 server 区块中没有定义 server_name 指令，便如同定义了 server_name “”。</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">Note</span><span class="token punctuation">:</span>在 0.8.48 版以前，遇到 server 区块中没有定义 server_name 指令的情况，会将系统的主机名设置为 server 区块的 server name，而不是自动设置 <span class="token string">""</span> 为server name。</code></pre><p>在 0.9.4 版本，如果设置：<code>server_name $hostname</code>，会将系统的主机名设置为 server name。</p><p>如果某个访问使用了 IP 地址 而不是 server name，“Host” 请求首部会包含 IP 地址。对于这样的请求，可使用如下的配置：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  example<span class="token punctuation">.</span>org                 www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>org                 <span class="token string">""</span>                 <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span>                 <span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>下面是一个 catch-all server 区块的配置，使用了 “_” 作为 server name:</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span>  default_server<span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  _<span class="token punctuation">;</span>    <span class="token keyword">return</span>       <span class="token number">444</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这个 server name 并没有什么特殊之处，它仅是一个无效的域名而已，也可以使用其他类似的名字，如 “–” and “!@#” 。</p><p>0.6.25 版以前的 nginx 曾经支持一个特殊的 server name: “<code>*</code>”，这个特殊主机名被错误的解释成一个 catch-all 主机名。但它从未以一个 catch-all 或者 通配主机名工作，它的功能实际上与现在的 server_name_in_redirect 指令的功能相同：<a href="https://link.jianshu.com/?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_name_in_redirect">server_name_in_redirect</a></p><p>特殊的 server name “<code>*</code>” 现在已经被弃用，应使用 server_name_in_redirect 指令。</p><p>要注意的是，使用 server_name 指令无法指定 defalt server 或是 catch-all name，这是 listen 指令的属性，不是 server_name 指令的属性。可参考《nginx 是如何处理访问请求的》。</p><p>我们可以定义两个 server，它们都同时监听于 *:80 端口 和 *:8080 端口，将其中一个设置为 *:80 端口的默认 server，将另一个设置为 *:8080 端口的默认 server：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">listen</span>       <span class="token number">8080</span>  default_server<span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  example<span class="token punctuation">.</span>net<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span>  default_server<span class="token punctuation">;</span>    <span class="token keyword">listen</span>       <span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  example<span class="token punctuation">.</span>org<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><h2 id="对主机名的优化"><a href="#对主机名的优化" class="headerlink" title="对主机名的优化"></a>对主机名的优化</h2><hr><p>准确的主机名、以 “<code>*</code>” 起始的通配主机名、以 “<code>*</code>” 结尾的通配主机名，这三种主机名被存放在三个 hash table 中。这三个 hash table 是与监听端口绑定的。hash table 的大小在配置阶段被优化，优化的目的是努力降低这些名字在 CPU 缓存中命中失败的几率。关于设置 hash table 的详细讨论请参考：<a href="https://link.jianshu.com/?t=http://nginx.org/en/docs/hash.html">hash</a></p><p>在匹配主机名时，首先查找“准确主机名”的 hash table，如果没有找到，会查找以 “<code>*</code>” 起始的“通配主机名”的 hash table，如果没有仍未找到，会查找以 “<code>*</code>” 结尾的“通配主机名”的 hash table。</p><p>对于“通配主机名”的 hash table 的检索会更慢，因为是以主机名的域名部分去检索的。</p><p>注意，对于特殊的通配主机名，形如 “.example.org”，这样的主机名是存放在“通配主机名”的 hash table 中，而不是存放在“准确主机名”的 hash table 中。</p><p>如果前面都未找到，正则表达式会按写在配置文件中的顺序被测试，因此正则表达式是最慢的方法，并且没有可扩展性。</p><p>因为以上这些原因，在可能的情况下最好使用 “准确的主机名”。例如，如果对于 <a href="https://link.jianshu.com/?t=http://example.org">example.org</a> 和 <a href="https://link.jianshu.com/?t=http://www.example.org">www.example.org</a> 的请求最为频繁，对他们进行显式的定义会更有效率：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  example<span class="token punctuation">.</span>org  www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>org  <span class="token operator">*</span><span class="token punctuation">.</span>example<span class="token punctuation">.</span>org<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>下面的定义方法不如上面的配置有效率：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  <span class="token punctuation">.</span>example<span class="token punctuation">.</span>org<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>如果定义了大量的主机名，或者使用了很长的主机名，应在配置文件的 http context 中调整这个两个参数：</p><ul><li><a href="https://link.jianshu.com/?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_max_size">server_names_hash_max_size</a></li><li><a href="https://link.jianshu.com/?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size">server_names_hash_bucket_size</a></li></ul><p><code>server_names_hash_bucket_size</code> 指令的默认值可能为 32 或 64 或 其他数字，这是根据 CPU 缓存线大小而定的。如果默认值为 32，而且定义了一个 server name 为：“<code>too.long.server.name.example.org</code>” 这时 nginx 就不能启动，而且显示如下的错误信息：</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">could not build the server_names_hash,you should increase server_names_hash_bucket_size: 32</code></pre><p>遇到这种情况，应将默认值设置为原来的两倍：</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">http &#123;    server_names_hash_bucket_size  64;    ...</code></pre><p>如果定义了大量的主机名，可能显示如下的错误信息：</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">could not build the server_names_hash,you should increase either server_names_hash_max_size: 512or server_names_hash_bucket_size: 32</code></pre><p>遇到这种情况，首先尝试调整 <code>server_names_hash_max_size</code> 的值，设置为大于 server name 总数的值。如果这样设置仍不能让 nginx 正常启动，或者 nginx 启动的时间变得过长，再尝试增加 <code>server_names_hash_bucket_size</code> 的值。</p><p>如果一个 server 是某个监听端口唯一的 server，这时 nginx 根本不会去测试 server name，同时也不会为该监听端口构建 hash table。但其中又有一个例外，如果 server name 是正则表达式，而且正则表达式中包含了 captures，这时 nginx 不得不执行该正则表达式以获取 captures。（正则表达式的 capture 是指被圆括号引用的表达式部分，它们所匹配的字符串，可通过名字或数字引用）</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><hr><p>从 0.9.4 开始支持特殊主机名 “$hostname”</p><p>从 0.8.48 开始，如果 server 区块中未定义 server_name 指令，nginx 默认设定空字符串为主机名，如同定义了 server_name “”</p><p>从 0.8.25 开始支持在“正则表达式主机名”中使用 named capture 特性</p><p>从 0.7.40 开始支持在“正则表达式主机名”中使用 capture 特性</p><p>从 0.7.12 开始支持 “” 空字符串主机名</p><p>从 0.6.25 开始，支持使用“正则表达式主机名”或者“通配主机名”作为第一个主机名。</p><p>从 0.6.7 开始支持“正则表达式主机名”</p><p>从 0.6.0 开始支持形如 example.* 的“通配主机名”</p><p>从 0.3.18 开始支持形如 .example.org 的特殊“通配主机名”</p><p>从 0.1.13 开始支持形如 *.example.org 的“通配主机名”</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/1430e4046fd9">https://www.jianshu.com/p/1430e4046fd9</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo的dbfilter配置</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于-Odoo-的-dbfilter-配置项"><a href="#关于-Odoo-的-dbfilter-配置项" class="headerlink" title="关于 Odoo 的 dbfilter 配置项"></a>关于 Odoo 的 dbfilter 配置项</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>默认情况下首次访问odoo页面时，会要求选择要访问的数据库，db中的所有库都会被列出来供选择，这种在生产环境下通常是不希望的看到，如果在启动时指定连接的数据库名可以解决这个问题</p><ol><li>.conf文件中指定 <code>db_name = xxx</code></li><li>或者启动命令加参数<code>-d xxx</code></li></ol><h2 id="dbfilter"><a href="#dbfilter" class="headerlink" title="dbfilter"></a>dbfilter</h2><p>当我们需要根据域名来匹配数据库时（比如saas环境）这样就不适用了，这个时候就可以用 dbfilter 这个配置项来实现</p><p>dbfilter 默认值为 <code>.*</code></p><p>eg: <code>dbfilter = ^%h$</code> 表示按域名精确匹配数据库服务器中名称为域名的数据库</p><p>启动参数 <code>--db-filter=&#39;^%d$&#39;</code> 表示按二级域名前缀精确匹配对应名称的数据库（注意：127.0.0.1访问时会被匹配为 127 库名）</p><p>可用的匹配替代符号有 %h 和 %d</p><h3 id="h"><a href="#h" class="headerlink" title="%h"></a>%h</h3><p>%h 代表访问访问的域名，比如 <a href="http://www.abc.com/">www.abc.com</a></p><h3 id="d"><a href="#d" class="headerlink" title="%d"></a>%d</h3><p>当访问地址为 <a href="http://www.abc.com/">www.abc.com</a> 时 %d 为 abc<br>当访问地址为 shop.abc.com 时 %d 为 shop</p><h2 id="相关源代码"><a href="#相关源代码" class="headerlink" title="相关源代码"></a>相关源代码</h2><p>odoo中的相应的解析代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">db_filter</span><span class="token punctuation">(</span>dbs<span class="token punctuation">,</span> httprequest<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    httprequest <span class="token operator">=</span> httprequest <span class="token keyword">or</span> request<span class="token punctuation">.</span>httprequest    h <span class="token operator">=</span> httprequest<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_HOST'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    d<span class="token punctuation">,</span> _<span class="token punctuation">,</span> r <span class="token operator">=</span> h<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> d <span class="token operator">==</span> <span class="token string">"www"</span> <span class="token keyword">and</span> r<span class="token punctuation">:</span>        d <span class="token operator">=</span> r<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    r <span class="token operator">=</span> openerp<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'dbfilter'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'%h'</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'%d'</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>    dbs <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> dbs <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dbs</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> odoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql配置文件</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h1><p>配置文件控制着一个PostgreSQL服务器实例的基本行为，主要包含postgresql.conf、pg_hba.conf、pg_ident.conf</p><p>（1）postgresql.conf</p><p>   该文件包含一些通用设置，比如内存分配，新建database的默认存储位置，PostgreSQL服务器的IP地址，日志的位置以及许多其他设置。9.4版引入了</p><p>   一个新的postgresql.auto.conf文件，任何时候执行Altersystem SQL命令，都会创建或重写该文件。该文件中的设置会替代postgresql.conf文件中的设置。</p><p>（2）pg_hba.conf</p><p>​    该文件用于控制访问安全性，管理客户端对Postgresql服务器的访问权限，内容包括：允许哪些用户连接到哪个数据库，允许哪些IP或者哪个网段的IP连</p><p>​    接到本服务器，以及指定连接时使用的身份验证模式</p><p>（3）pg_ident.conf</p><p>   pg_hba.conf的权限控制信息中的身份验证模式字段如果指定为ident方式，则用户连接时系统会尝试访问pg_ident文件，如果该文件存在，则系统会基于</p><p>​    文件内容将当前执行登录操作的操作系统用户映射为一个PostgreSQL数据库内部用户的身份来登录。</p><h1 id="2、查看配置文件的位置："><a href="#2、查看配置文件的位置：" class="headerlink" title="2、查看配置文件的位置："></a>2、查看配置文件的位置：</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># selectname,setting from pg_settings where category='File Locations';</span>       name        <span class="token operator">|</span>                 setting                 -------------------+----------------------------------------- config_file       <span class="token operator">|</span>/var/lib/pgsql/9.6/data/postgresql.conf data_directory    <span class="token operator">|</span> /var/lib/pgsql/9.6/data external_pid_file <span class="token operator">|</span>  hba_file          <span class="token operator">|</span> /var/lib/pgsql/9.6/data/pg_hba.conf ident_file        <span class="token operator">|</span> /var/lib/pgsql/9.6/data/pg_ident.conf</code></pre><h1 id="3、postgresql-conf"><a href="#3、postgresql-conf" class="headerlink" title="3、postgresql.conf"></a>3、postgresql.conf</h1><p>3.1、关键的设置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">postgres</span><span class="token operator">=</span><span class="token comment"># selectname,context,unit,setting,boot_val,reset_val from pg_settings where namein('listen_addresses','max_connections','shared_buffers','effective_cache_size','work_mem','maintenance_work_mem')order by context,name;</span>         name         <span class="token operator">|</span> context   <span class="token operator">|</span> unit <span class="token operator">|</span> setting <span class="token operator">|</span>boot_val  <span class="token operator">|</span> reset_val ----------------------+------------+------+---------+-----------+----------- listen_addresses     <span class="token operator">|</span> postmaster <span class="token operator">|</span>      <span class="token operator">|</span> *      <span class="token operator">|</span> localhost <span class="token operator">|</span> * max_connections      <span class="token operator">|</span> postmaster <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token number">100</span>    <span class="token operator">|</span> <span class="token number">100</span>       <span class="token operator">|</span> <span class="token number">100</span> shared_buffers       <span class="token operator">|</span> postmaster <span class="token operator">|</span> 8kB  <span class="token operator">|</span> <span class="token number">16384</span>  <span class="token operator">|</span> <span class="token number">1024</span>      <span class="token operator">|</span> <span class="token number">16384</span> effective_cache_size <span class="token operator">|</span> user       <span class="token operator">|</span> 8kB <span class="token operator">|</span> <span class="token number">524288</span>  <span class="token operator">|</span> <span class="token number">524288</span>    <span class="token operator">|</span> <span class="token number">524288</span> maintenance_work_mem <span class="token operator">|</span> user       <span class="token operator">|</span> kB  <span class="token operator">|</span> <span class="token number">65536</span>   <span class="token operator">|</span> <span class="token number">65536</span>     <span class="token operator">|</span> <span class="token number">65536</span> work_mem             <span class="token operator">|</span> user       <span class="token operator">|</span> kB  <span class="token operator">|</span> <span class="token number">4096</span>    <span class="token operator">|</span> <span class="token number">4096</span>      <span class="token operator">|</span> <span class="token number">4096</span><span class="token punctuation">(</span><span class="token number">6</span> rows<span class="token punctuation">)</span></code></pre><p>context 设置为postmaster，更改此形参后需要重启PostgreSQL服务才能生效；</p><p>设置为user，那么只需要执行一次重新加载即可全局生效。重启数据库服务会终止活动连接，但重新加载不会。  </p><p>unit 字段表示这些设置的单位</p><p>setting是指当前设置；boot_val是指默认设置；reset_val是指重新启动服务器或重新加载设置之后的新设置</p><p>在postgresql.conf中修改了设置后，一定记得查看一下setting和reset_val并确保二者是一致，否则说明设置并未生效，需要重新启动服务器或者重新加载设置</p><p>3.2、postgresql.auto.conf与postgresql.conf区别</p><p>对于9.4版及之后的版本来说，Postgresql.auto.conf的优先级是高于postgresql.conf的，如果这两个文件中存在同名配置项，则系统会优先选择前者设定的值。</p><p>3.3、postgresql.conf以下网络设置，修改这些值是一定要重新启动数据库服务的</p><p>listen_addresses 一般设定为localhost或者local，但也有很多人会设为*，表示使用本机任一IP地址均可连接到Postgresql服务</p><p>port 默认值 为5432</p><p>max_connections</p><p>3.4、以下四个设置对系统性能有着全局性的影响，建议你在实际环境下通过实测来找到最优值</p><p>(1)share_buffers</p><p>​    用于缓存最近访问过的数据页的内存区大小，所有用户会话均可共享此缓存区</p><p>​    一般来说越大越好，至少应该达到系统总内存的25%，但不宜超过8GB，因为超过后会出现“边际收益递减”效应。</p><p>​    需重启postgreSQL服务</p><p>（2）effective_cache_size</p><p>一个查询执行过程中可以使用的最大缓存，包括操作系统使用的部分以及PostgreSQL使用部分，系统并不会根据这个值来真实地分配这么多内存，但是规划器会根据这个值来判断系统能否提供查询执行过程中所需的内存。如果将此设置设得过小，远远小于系统真实可用内存量，那么可能会给规划器造成误导，让规划器认为系统可用内存有限，从而选择不使用索引而是走全表扫描（因为使用索引虽然速度快，但需要占用更多的中间内存）。</p><p>在一台专用于运行PostgreSQL数据库服务的服务器上，建议将effective_cache_size的值设为系统总内存的一半或者更多。</p><p>此设置可动态生效，执行重新加载即可。</p><p>（3）work_mem</p><p>此设置指定了用于执行排序，哈希关联，表扫描等操作的最大内存量。</p><p>此设置可动态生效，执行重新加载即可。</p><p>   （4）mintenance_work_mem</p><p>​     此设置指定可用于vaccum操作（即清空已标记为“被删除”状态的记录）这类系统内部维护操作的内存总量。</p><p>​     其值不应大于1GB</p><p>此设置可动态生效，执行重新加载即可。</p><p>3.5修改参数命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">Alter system <span class="token builtin class-name">set</span> <span class="token assign-left variable">work_mem</span><span class="token operator">=</span><span class="token number">8192</span><span class="token punctuation">;</span></code></pre><p>设置重新加载命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">Select pg_reload_conf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.6、遇到修改了postgresql.conf文件，结果服务器崩溃了这种情况</p><p>定位这种问题最简单的方法是查看日志文件，该文件位于postgresql数据文件夹的根目录或者pg_log子文件夹下。</p><h1 id="4、pg-hba-conf"><a href="#4、pg-hba-conf" class="headerlink" title="4、pg_hba.conf"></a>4、pg_hba.conf</h1><p>cat /var/lib/pgsql/9.6/data/pg_hba.conf</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span> <span class="token comment"># "local" isfor Unix domain socket connections only</span><span class="token builtin class-name">local</span>   all             all                                     peer<span class="token comment"># IPv4 localconnections:</span><span class="token function">host</span>    all             all             <span class="token number">0.0</span>.0.0/0               trust<span class="token comment"># IPv6 localconnections:</span><span class="token function">host</span>    all             all             ::1/128                 ident<span class="token comment"># Allow replicationconnections from localhost, by a user with the</span><span class="token comment"># replication privilege.</span><span class="token comment">#local   replication     postgres                                peer</span><span class="token comment">#host    replication     postgres        127.0.0.1/32            ident</span><span class="token comment">#host    replication     postgres        ::1/128                 ident</span></code></pre><p>(1)   身份验证模式，一般以下几种常用选项：ident、trust、md5以及password</p><ol><li>1版本开始引入了peer身份验证模式。</li></ol><p>Ident和peer模式公适用于Linux，Unix和Mac,不适用于windwos</p><p>Reject模式，其作用是拒绝所有请求。</p><p>(2)   如果你将+0.0.0./0 reject+规则放到+127.0.0.1/32 trust+的前面，那么此时本地用户全都无法连接，即使下面有规则允许也不行。</p><p>（3）各模式</p><p>trust最不安全的身份验证模式，该模式允许用户“自证清白”，即可以不用密码就连到数据库</p><p>md5该模式最常用，要求连接发起者携带用md5算法加密的密码</p><p>password 不推荐，因为该模式使用明文密码进行身份验证，不安全</p><p>ident：该身份验证模式下，系统会将请求发起的操作系统用户映射为PostgreSQL数据库内部用户，并以该内部用户的权限登录，且此时无需提供登录密码。操作系统用户与数据库内部用户之间的映射关系会记录在pg_ident.conf文件中。</p><p>peer使用发起端的操作系统名进行身份验证</p><h1 id="5、配置文件的重新加载"><a href="#5、配置文件的重新加载" class="headerlink" title="5、配置文件的重新加载"></a>5、配置文件的重新加载</h1><pre class="language-bash" data-language="bash"><code class="language-bash">/usr/pgsql-9.6/bin/pg_ctlreload -D /var/lib/pgsql/9.6/data/ systemctlreload postgresql-9.6.service selectpg_reload_conf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql安装</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Install the repository RPM:</span>dnf <span class="token function">install</span> -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm<span class="token comment"># Disable the built-in PostgreSQL module:</span>dnf -qy module disable postgresql<span class="token comment"># Install PostgreSQL:</span>dnf <span class="token function">install</span> -y postgresql12-server<span class="token comment"># Optionally initialize the database and enable automatic start:</span>/usr/pgsql-12/bin/postgresql-12-setup initdbsystemctl <span class="token builtin class-name">enable</span> postgresql-12systemctl start postgresql-12</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql连接外网安装</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="添加-MySQL-YUM-源"><a href="#添加-MySQL-YUM-源" class="headerlink" title="添加 MySQL YUM 源"></a>添加 MySQL YUM 源</h2><p>根据自己的操作系统选择合适的<a href="https://link.jianshu.com/?t=http://dev.mysql.com/downloads/repo/yum/">安装源</a>，和其他公司一样，总会让大家注册账号获取更新，注意是 Oracle 的账号，如果不想注册，下方有直接<a href="https://link.jianshu.com/?t=https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm">下载的地址</a>，下载之后通过 <code>rpm -Uvh</code> 安装。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$wget</span> <span class="token string">'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span><span class="token variable">$sudo</span> <span class="token function">rpm</span> -Uvh mysql57-community-release-el7-11.noarch.rpm<span class="token variable">$yum</span> repolist all <span class="token operator">|</span> <span class="token function">grep</span> mysqlmysql-connectors-community/x86_64 MySQL Connectors Community                  <span class="token number">36</span>mysql-tools-community/x86_64      MySQL Tools Community                       <span class="token number">47</span>mysql57-community/x86_64          MySQL <span class="token number">5.7</span> Community Server                 <span class="token number">187</span></code></pre><p>先解释下为什么下载的是 5.7 版本的，现在最新的是 5.7 版本的，当然官网默认都是最新版本的，但是下载的页面也有说明</p><blockquote><p>The MySQL Yum repository includes the latest versions of:<br> MySQL 8.0 (Development)<br> MySQL 5.7 (GA)<br> MySQL 5.6 (GA)<br> MySQL 5.5 (GA - Red Hat Enterprise Linux and Oracle Linux Only)<br> MySQL Cluster 7.5 (GA)<br> MySQL Cluster 7.6 (Development)<br> MySQL Workbench<br> MySQL Fabric<br> MySQL Router (GA)<br> MySQL Utilities<br> MySQL Connector / ODBC<br> MySQL Connector / Python<br> MySQL Shell (GA)</p></blockquote><p>也就是说这个安装源包含了上面列举的这些版本，当然包括 5.6 版本的。</p><h2 id="选择安装版本"><a href="#选择安装版本" class="headerlink" title="选择安装版本"></a>选择安装版本</h2><p>如果想安装最新版本的，直接使用 yum 命令即可</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> yum <span class="token function">install</span> mysql-community-server</code></pre><p>如果想要安装 5.6 版本的，有2个方法。命令行支持 <code>yum-config-manager</code> 命令的话，可以使用如下命令：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">$ sudo dnf config<span class="token operator">-</span>manager <span class="token operator">--</span>disable mysql57<span class="token operator">-</span>community$ sudo dnf config<span class="token operator">-</span>manager <span class="token operator">--</span>enable mysql56<span class="token operator">-</span>community$ yum repolist <span class="token operator">|</span> grep mysqlmysql<span class="token operator">-</span>connectors<span class="token operator">-</span>community<span class="token operator">/</span>x86_64 <span class="token constant">MySQL</span> <span class="token constant">Connectors</span> <span class="token constant">Community</span>                  <span class="token number">36</span>mysql<span class="token operator">-</span>tools<span class="token operator">-</span>community<span class="token operator">/</span>x86_64      <span class="token constant">MySQL</span> <span class="token constant">Tools</span> <span class="token constant">Community</span>                       <span class="token number">47</span>mysql56<span class="token operator">-</span>community<span class="token operator">/</span>x86_64          <span class="token constant">MySQL</span> <span class="token number">5.6</span> <span class="token constant">Community</span> <span class="token constant">Server</span>                 <span class="token number">327</span></code></pre><p>或者直接修改 <code>/etc/yum.repos.d/mysql-community.repo</code> 这个文件</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># Enable to use MySQL 5.6</span><span class="token punctuation">[</span>mysql56<span class="token operator">-</span>community<span class="token punctuation">]</span>name<span class="token operator">=</span><span class="token constant">MySQL</span> <span class="token number">5.6</span> <span class="token constant">Community</span> <span class="token constant">Server</span>baseurl<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>repo<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>com<span class="token operator">/</span>yum<span class="token operator">/</span>mysql<span class="token operator">-</span><span class="token number">5.6</span><span class="token operator">-</span>community<span class="token operator">/</span>el<span class="token operator">/</span><span class="token number">7</span><span class="token regex">/$basearch/</span>enabled<span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#表示当前版本是安装</span>gpgcheck<span class="token operator">=</span><span class="token number">1</span>gpgkey<span class="token operator">=</span>file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>etc<span class="token operator">/</span>pki<span class="token operator">/</span>rpm<span class="token operator">-</span>gpg<span class="token operator">/</span><span class="token constant">RPM</span><span class="token operator">-</span><span class="token constant">GPG</span><span class="token operator">-</span><span class="token constant">KEY</span><span class="token operator">-</span>mysql<span class="token punctuation">[</span>mysql57<span class="token operator">-</span>community<span class="token punctuation">]</span>name<span class="token operator">=</span><span class="token constant">MySQL</span> <span class="token number">5.7</span> <span class="token constant">Community</span> <span class="token constant">Server</span>baseurl<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>repo<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>com<span class="token operator">/</span>yum<span class="token operator">/</span>mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token operator">-</span>community<span class="token operator">/</span>el<span class="token operator">/</span><span class="token number">7</span><span class="token regex">/$basearch/</span>enabled<span class="token operator">=</span><span class="token number">0</span> <span class="token comment">#默认这个是 1</span>gpgcheck<span class="token operator">=</span><span class="token number">1</span>gpgkey<span class="token operator">=</span>file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>etc<span class="token operator">/</span>pki<span class="token operator">/</span>rpm<span class="token operator">-</span>gpg<span class="token operator">/</span><span class="token constant">RPM</span><span class="token operator">-</span><span class="token constant">GPG</span><span class="token operator">-</span><span class="token constant">KEY</span><span class="token operator">-</span>mysql</code></pre><p>通过设置 <code>enabled</code> 来决定安装哪个版本。</p><p>设置好之后使用 <code>yum</code> 安装即可。</p><h2 id="启动-MySQL-服务"><a href="#启动-MySQL-服务" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h2><p>启动命令很简单</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$sudo</span> service mysqld start <span class="token variable">$sudo</span> systemctl start mysqld <span class="token shell-comment comment">#CentOS 7</span><span class="token variable">$sudo</span> systemctl status mysqld● mysqld<span class="token punctuation">.</span>service <span class="token operator">-</span> MySQL Community Server   Loaded<span class="token punctuation">:</span> loaded <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>systemd<span class="token operator">/</span>system<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset<span class="token punctuation">:</span> disabled<span class="token punctuation">)</span>   Active<span class="token punctuation">:</span> active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Sat <span class="token number">2017</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">27</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token number">26</span> <span class="token constant">CST</span><span class="token punctuation">;</span> <span class="token number">15</span>s ago  Process<span class="token punctuation">:</span> <span class="token number">2482</span> ExecStartPost<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>mysql<span class="token operator">-</span>systemd<span class="token operator">-</span>start post <span class="token punctuation">(</span>code<span class="token operator">=</span>exited<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">0</span><span class="token operator">/</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span>  Process<span class="token punctuation">:</span> <span class="token number">2421</span> ExecStartPre<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>mysql<span class="token operator">-</span>systemd<span class="token operator">-</span>start pre <span class="token punctuation">(</span>code<span class="token operator">=</span>exited<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">0</span><span class="token operator">/</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> Main <span class="token constant">PID</span><span class="token punctuation">:</span> <span class="token number">2481</span> <span class="token punctuation">(</span>mysqld_safe<span class="token punctuation">)</span>   CGroup<span class="token punctuation">:</span> <span class="token operator">/</span>system<span class="token punctuation">.</span>slice<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>service           ├─<span class="token number">2481</span> <span class="token operator">/</span>bin<span class="token operator">/</span>sh <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>mysqld_safe <span class="token operator">--</span>basedir<span class="token operator">=</span><span class="token operator">/</span>usr           └─<span class="token number">2647</span> <span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>mysqld <span class="token operator">--</span>basedir<span class="token operator">=</span><span class="token operator">/</span>usr <span class="token operator">--</span>datadir<span class="token operator">=</span><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql <span class="token operator">--</span>plugin<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>说明已经正在运行中了。</p><p>对于 MySQL 5.7 版本，启动的时候如果数据为空的，则会出现如下提示</p><blockquote><p>The server is initialized.<br> An SSL certificate and key files are generated in the data directory.<br> The validate_password plugin is installed and enabled.<br> A superuser account ‘root’@’localhost’ is created. A password for the superuser is set and stored in the error log <a href="https://link.jianshu.com/?t=http://file.To">file.To</a> reveal it, use the following command:<br> <code>sudo grep &#39;temporary password&#39; /var/log/mysqld.log</code></p></blockquote><p>简单的说就是服务安装好了，SSL 认证的文件会在 data 目录中生存，密码不要设置的太简单了，初始密码通过下面的命令查看，赶紧去改密码吧。<br> 安装提示，查看密码，登录数据库，然后修改密码：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">$ mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p  <span class="token comment">#输入查看到的密码</span>mysql<span class="token operator">></span> <span class="token constant">ALTER</span> <span class="token constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token constant">IDENTIFIED</span> <span class="token constant">BY</span> <span class="token string">'MyNewPass4!'</span><span class="token punctuation">;</span></code></pre><h2 id="MySQL-5-6-的安全设置"><a href="#MySQL-5-6-的安全设置" class="headerlink" title="MySQL 5.6 的安全设置"></a>MySQL 5.6 的安全设置</h2><p>由于 5.7 版本在安装的时候就设置好了，不需要额外设置，但是 5.6 版本建议从安全角度完善下，运行官方脚本即可</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">$ mysql_secure_installation</code></pre><p>会提示设置5个关键位置</p><ol><li>设置 root 密码</li><li>禁止 root 账号远程登录</li><li>禁止匿名账号（anonymous）登录</li><li>删除测试库</li><li>是否确认修改</li></ol><h2 id="安装第三方组件"><a href="#安装第三方组件" class="headerlink" title="安装第三方组件"></a>安装第三方组件</h2><p>查看 yum 源中有哪些默认的组件：</p><pre class="language-php" data-language="php"><code class="language-php">$ yum <span class="token operator">--</span>disablerepo<span class="token operator">=</span>\<span class="token operator">*</span> <span class="token operator">--</span>enablerepo<span class="token operator">=</span><span class="token single-quoted-string string">'mysql*-community*'</span> <span class="token keyword">list</span> available</code></pre><p>需要安装直接通过 <code>yum</code> 命令安装即可。</p><h2 id="修改编码"><a href="#修改编码" class="headerlink" title="修改编码"></a>修改编码</h2><p>在 <code>/etc/my.cnf</code> 中设置默认的编码</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">client</span></span><span class="token punctuation">]</span><span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span><span class="token keyword">set</span> <span class="token operator">=</span> utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token keyword">default</span><span class="token operator">-</span>storage<span class="token operator">-</span>engine <span class="token operator">=</span> INNODBcharacter<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">-</span>server <span class="token operator">=</span> utf8collation<span class="token operator">-</span>server <span class="token operator">=</span> utf8_general_ci #不区分大小写collation<span class="token operator">-</span>server <span class="token operator">=</span>  utf8_bin #区分大小写collation<span class="token operator">-</span>server <span class="token operator">=</span> utf8_unicode_ci #比 utf8_general_ci 更准确</code></pre><h2 id="创建数据库和用户"><a href="#创建数据库和用户" class="headerlink" title="创建数据库和用户"></a>创建数据库和用户</h2><p>创建数据库</p><pre class="language-bash" data-language="bash"><code class="language-bash">CREATE DATABASE <span class="token operator">&lt;</span>datebasename<span class="token operator">></span> CHARACTER SET utf8<span class="token punctuation">;</span>CREATE <span class="token environment constant">USER</span> <span class="token string">'username'</span>@<span class="token string">'host'</span> IDENTIFIED BY <span class="token string">'password'</span><span class="token punctuation">;</span>GRANT privileges ON databasename.tablename TO <span class="token string">'username'</span>@<span class="token string">'host'</span><span class="token punctuation">;</span>SHOW GRANTS FOR <span class="token string">'username'</span>@<span class="token string">'host'</span><span class="token punctuation">;</span>REVOKE privilege ON databasename.tablename FROM <span class="token string">'username'</span>@<span class="token string">'host'</span><span class="token punctuation">;</span>DROP <span class="token environment constant">USER</span> <span class="token string">'username'</span>@<span class="token string">'host'</span><span class="token punctuation">;</span></code></pre><p>其中</p><ul><li>username：你将创建的用户名</li><li>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用 localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符 %</li><li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li><li>privileges：用户的操作权限，如 SELECT，INSERT，UPDATE 等，如果要授予所的权限则使用ALL</li><li>databasename：数据库名</li><li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用 * 表示，如 <em>.</em></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/7cccdaa2d177">https://www.jianshu.com/p/7cccdaa2d177</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux-saga分成多个文件</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1)"></a>1)</h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F; single entry point to start all Sagas at onceexport default function* rootSaga() &#123;  yield [    saga1(),    saga2(),    saga3(),  ]&#125;</code></pre><p>Here the 3 sagas will be run in parallel. The root saga will block until the 3 sagas complete. If one of the 3 fail, the error will be propagated to the root saga which will be killed, which will also kill the other 2 saga</p><h3 id="2"><a href="#2" class="headerlink" title="2)"></a>2)</h3><pre class="language-none"><code class="language-none">export default function* root() &#123;  yield [    fork(saga1),    fork(saga2),    fork(saga3)  ]&#125;</code></pre><p>The only difference I see here is that this time the yield effect will not block because forking is non-blocking, thus the root saga will reach the end but the 3 childs will remain alive. Error behavior is the same as 1)</p><h3 id="3"><a href="#3" class="headerlink" title="3)"></a>3)</h3><pre class="language-none"><code class="language-none">export default function* root() &#123;  yield fork(saga1)  yield fork(saga2)  yield fork(saga3)&#125;</code></pre><p>I don’t see any difference in behavior from 2)</p><hr><h1 id="better-examples"><a href="#better-examples" class="headerlink" title="better examples"></a>better examples</h1><p>The problem with forking is that if any of the root saga fails, then the root saga will be killed, and the other sub sagas will also be killed because their parent got killed. In practice this means that your whole app may become unusable (if it relies heavily on sagas) just because of a minor saga error so it’s not really good.</p><h3 id="4"><a href="#4" class="headerlink" title="4)"></a>4)</h3><pre class="language-none"><code class="language-none">export default function* root() &#123;  yield spawn(saga1)  yield spawn(saga2)  yield spawn(saga3)&#125;</code></pre><p>This time, if an error occur in saga1, it will not make root, saga2 and saga3 get killed so only a part of your app stops working in case of error. Somehow this can also be very problematic because the saga1 might be killed due to an error like a failing http request that you didn’t catch properly, making the whole feature covered by saga1 unavailable for the app lifetime.</p><h3 id="5"><a href="#5" class="headerlink" title="5)"></a>5)</h3><p><a href="https://github.com/granmoe">@granmoe</a> has suggested the following way to start sagas in: <a href="https://github.com/redux-saga/redux-saga/issues/570">#570</a></p><pre class="language-none"><code class="language-none">function* rootSaga () &#123;  const sagas &#x3D; [    saga1,    saga2,    saga3,  ];   yield sagas.map(saga &#x3D;&gt;    spawn(function* () &#123;      while (true) &#123;        try &#123;          yield call(saga)        &#125; catch (e) &#123;          console.log(e)        &#125;      &#125;    &#125;)  )&#125;</code></pre><p>This time, if any of the 3 sagas had an error, it would be automatically restarted. This may, or not, be the desired behavior according to your app.</p><h3 id="6"><a href="#6" class="headerlink" title="6)"></a>6)</h3><p>Here’s how I handle sagas in my own app:</p><pre class="language-none"><code class="language-none">const makeRestartable &#x3D; (saga) &#x3D;&gt; &#123;  return function* () &#123;    yield spawn(function* () &#123;      while (true) &#123;        try &#123;          yield call(saga);          console.error(&quot;unexpected root saga termination. The root sagas are supposed to be sagas that live during the whole app lifetime!&quot;,saga);        &#125; catch (e) &#123;          console.error(&quot;Saga error, the saga will be restarted&quot;,e);        &#125;        yield delay(1000); &#x2F;&#x2F; Avoid infinite failures blocking app TODO use backoff retry policy...      &#125;    &#125;)  &#125;;&#125;;const rootSagas &#x3D; [  domain1saga,  domain2saga,  domain3saga,].map(makeRestartable);export default function* root() &#123;  yield rootSagas.map(saga &#x3D;&gt; call(saga));&#125;</code></pre><p>I’m using a saga HOC to add error handling to the root sagas. In my app, all root sagas are never supposed to terminate but should block, and if there are errors they should be automatically restarted.</p><p>Restarting synchronously can, in my experience, lead to infinite loops (if the saga fails everytime you try to restart it) so I added a hacky delay for now to prevent this issue.</p><p>You mentionned different domains in your app so this pattern seems appropriate to your usecase where each domain should somehow have its own root saga.</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo源码解析4-wsgi_server</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="application"><a href="#application" class="headerlink" title="application"></a>application</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">application</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 是否启动代理</span>    <span class="token comment"># FIXME: is checking for the presence of HTTP_X_FORWARDED_HOST really useful?</span>    <span class="token comment">#        we're ignoring the user configuration, and that means we won't</span>    <span class="token comment">#        support the standardised Forwarded header once werkzeug supports</span>    <span class="token comment">#        it</span>    <span class="token keyword">if</span> config<span class="token punctuation">[</span><span class="token string">'proxy_mode'</span><span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token string">'HTTP_X_FORWARDED_HOST'</span> <span class="token keyword">in</span> environ<span class="token punctuation">:</span>        <span class="token keyword">return</span> ProxyFix<span class="token punctuation">(</span>application_unproxied<span class="token punctuation">)</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> application_unproxied<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span></code></pre><h1 id="application-unproxied"><a href="#application-unproxied" class="headerlink" title="application_unproxied"></a>application_unproxied</h1><p>清除数据库和用户的追踪<br>清除动作在application方法的结尾不能完成，因为werkzeu在后面还会生成有关的日志。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">application_unproxied</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" WSGI entry point."""</span>    <span class="token comment"># cleanup db/uid trackers - they're set at HTTP dispatch in</span>    <span class="token comment"># web.session.OpenERPSession.send() and at RPC dispatch in</span>    <span class="token comment"># odoo.service.web_services.objects_proxy.dispatch().</span>    <span class="token comment"># /!\ The cleanup cannot be done at the end of this `application`</span>    <span class="token comment"># method because werkzeug still produces relevant logging afterwards</span>    <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'uid'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>uid    <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'dbname'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dbname    <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>url    <span class="token keyword">with</span> odoo<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span>manage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> odoo<span class="token punctuation">.</span>http<span class="token punctuation">.</span>root<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>        <span class="token keyword">if</span> result <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> result    <span class="token comment"># We never returned from the loop.</span>    <span class="token keyword">return</span> werkzeug<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>NotFound<span class="token punctuation">(</span><span class="token string">"No handler found.\n"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/weixin_35737303/article/details/79038982">https://blog.csdn.net/weixin_35737303/article/details/79038982</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> odoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo源码解析-启动web服务器</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>preload<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" Start the odoo http server and cron processor.    """</span>    <span class="token keyword">global</span> server<span class="token comment">## 这里加载两个模块web和web_kan，在这里加载模块才能够在用户没有登录的时候才能够访问路由</span>    load_server_wide_modules<span class="token punctuation">(</span><span class="token punctuation">)</span>    odoo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>wsgi_server<span class="token punctuation">.</span>_patch_xmlrpc_marshaller<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    ·GeventServer    ·PreforkServer    ·ThreadedServer(默认)    CommonServer是后面三个类的父类Odoo服务器通过ThreadedServer.run()运行    """</span>    <span class="token keyword">if</span> odoo<span class="token punctuation">.</span>evented<span class="token punctuation">:</span>        server <span class="token operator">=</span> GeventServer<span class="token punctuation">(</span>odoo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>wsgi_server<span class="token punctuation">.</span>application<span class="token punctuation">)</span>    <span class="token keyword">elif</span> config<span class="token punctuation">[</span><span class="token string">'workers'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> config<span class="token punctuation">[</span><span class="token string">'test_enable'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> config<span class="token punctuation">[</span><span class="token string">'test_file'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            _logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"Unit testing in workers mode could fail; use --workers 0."</span><span class="token punctuation">)</span>        server <span class="token operator">=</span> PreforkServer<span class="token punctuation">(</span>odoo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>wsgi_server<span class="token punctuation">.</span>application<span class="token punctuation">)</span>        <span class="token comment"># Workaround for Python issue24291, fixed in 3.6 (see Python issue26721)</span>        <span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># turn on buffering also for wfile, to avoid partial writes (Default buffer = 8k)</span>            werkzeug<span class="token punctuation">.</span>serving<span class="token punctuation">.</span>WSGIRequestHandler<span class="token punctuation">.</span>wbufsize <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        server <span class="token operator">=</span> ThreadedServer<span class="token punctuation">(</span>odoo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>wsgi_server<span class="token punctuation">.</span>application<span class="token punctuation">)</span>    watcher <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> <span class="token string">'reload'</span> <span class="token keyword">in</span> config<span class="token punctuation">[</span><span class="token string">'dev_mode'</span><span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token keyword">not</span> odoo<span class="token punctuation">.</span>evented<span class="token punctuation">:</span>        <span class="token keyword">if</span> inotify<span class="token punctuation">:</span>            watcher <span class="token operator">=</span> FSWatcherInotify<span class="token punctuation">(</span><span class="token punctuation">)</span>            watcher<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> watchdog<span class="token punctuation">:</span>            watcher <span class="token operator">=</span> FSWatcherWatchdog<span class="token punctuation">(</span><span class="token punctuation">)</span>            watcher<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'posix'</span> <span class="token keyword">and</span> platform<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'Darwin'</span><span class="token punctuation">:</span>                module <span class="token operator">=</span> <span class="token string">'inotify'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                module <span class="token operator">=</span> <span class="token string">'watchdog'</span>            _logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"'%s' module not installed. Code autoreload feature is disabled"</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'werkzeug'</span> <span class="token keyword">in</span> config<span class="token punctuation">[</span><span class="token string">'dev_mode'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        server<span class="token punctuation">.</span>app <span class="token operator">=</span> DebuggedApplication<span class="token punctuation">(</span>server<span class="token punctuation">.</span>app<span class="token punctuation">,</span> evalex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment">##  启动web服务器</span>    rc <span class="token operator">=</span> server<span class="token punctuation">.</span>run<span class="token punctuation">(</span>preload<span class="token punctuation">,</span> stop<span class="token punctuation">)</span>    <span class="token keyword">if</span> watcher<span class="token punctuation">:</span>        watcher<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># like the legend of the phoenix, all ends with beginnings</span>    <span class="token keyword">if</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>odoo<span class="token punctuation">,</span> <span class="token string">'phoenix'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        _reexec<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> rc <span class="token keyword">if</span> rc <span class="token keyword">else</span> <span class="token number">0</span></code></pre><h1 id="ThreadedServer-CommandServer"><a href="#ThreadedServer-CommandServer" class="headerlink" title="ThreadedServer(CommandServer)"></a>ThreadedServer(CommandServer)</h1><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">""" Start the http server and the cron thread then wait for a signal.        The first SIGINT or SIGTERM signal will initiate a graceful shutdown while        a second one if any will force an immediate exit.        """</span><span class="token comment">## 启动一个系统命令监测。。。</span>self<span class="token punctuation">.</span>start<span class="token punctuation">(</span>stop<span class="token operator">=</span>stop<span class="token punctuation">)</span><span class="token comment">## 安装、更新、加载模块</span>rc <span class="token operator">=</span> preload_registries<span class="token punctuation">(</span>preload<span class="token punctuation">)</span><span class="token keyword">if</span> stop<span class="token punctuation">:</span>    self<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> rc<span class="token comment">## 加载定时任务</span>self<span class="token punctuation">.</span>cron_spawn<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Wait for a first signal to be handled. (time.sleep will be interrupted</span><span class="token comment"># by the signal handler)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> self<span class="token punctuation">.</span>quit_signals_received <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>process_limit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>limit_reached_time<span class="token punctuation">:</span>            has_other_valid_requests <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">(</span>                <span class="token keyword">not</span> t<span class="token punctuation">.</span>daemon <span class="token keyword">and</span>                t <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>limits_reached_threads                <span class="token keyword">for</span> t <span class="token keyword">in</span> threading<span class="token punctuation">.</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'http'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> has_other_valid_requests <span class="token keyword">or</span>                <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>limit_reached_time<span class="token punctuation">)</span> <span class="token operator">></span> SLEEP_INTERVAL<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># We wait there is no processing requests</span>                <span class="token comment"># other than the ones exceeding the limits, up to 1 min,</span>                <span class="token comment"># before asking for a reload.</span>                _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Dumping stacktrace of limit exceeding threads before reloading'</span><span class="token punctuation">)</span>                dumpstacks<span class="token punctuation">(</span>thread_idents<span class="token operator">=</span><span class="token punctuation">[</span>thread<span class="token punctuation">.</span>ident <span class="token keyword">for</span> thread <span class="token keyword">in</span> self<span class="token punctuation">.</span>limits_reached_threads<span class="token punctuation">]</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span><span class="token builtin">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># `reload` increments `self.quit_signals_received`</span>                <span class="token comment"># and the loop will end after this iteration,</span>                <span class="token comment"># therefore leading to the server stop.</span>                <span class="token comment"># `reload` also sets the `phoenix` flag</span>                <span class="token comment"># to tell the server to restart the server after shutting down.</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>SLEEP_INTERVAL<span class="token punctuation">)</span>                        <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>                            <span class="token keyword">pass</span>                        self<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    _logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"Setting signal handlers"</span><span class="token punctuation">)</span>    set_limit_memory_hard<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'posix'</span><span class="token punctuation">:</span>        signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGINT<span class="token punctuation">,</span> self<span class="token punctuation">.</span>signal_handler<span class="token punctuation">)</span>        signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">,</span> self<span class="token punctuation">.</span>signal_handler<span class="token punctuation">)</span>        signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGCHLD<span class="token punctuation">,</span> self<span class="token punctuation">.</span>signal_handler<span class="token punctuation">)</span>        signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGHUP<span class="token punctuation">,</span> self<span class="token punctuation">.</span>signal_handler<span class="token punctuation">)</span>        signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGXCPU<span class="token punctuation">,</span> self<span class="token punctuation">.</span>signal_handler<span class="token punctuation">)</span>        signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGQUIT<span class="token punctuation">,</span> dumpstacks<span class="token punctuation">)</span>        signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGUSR1<span class="token punctuation">,</span> log_ormcache_stats<span class="token punctuation">)</span>        <span class="token keyword">elif</span> os<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'nt'</span><span class="token punctuation">:</span>            <span class="token keyword">import</span> win32api            win32api<span class="token punctuation">.</span>SetConsoleCtrlHandler<span class="token punctuation">(</span><span class="token keyword">lambda</span> sig<span class="token punctuation">:</span> self<span class="token punctuation">.</span>signal_handler<span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            test_mode <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'test_enable'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> config<span class="token punctuation">[</span><span class="token string">'test_file'</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> test_mode <span class="token keyword">or</span> <span class="token punctuation">(</span>config<span class="token punctuation">[</span><span class="token string">'http_enable'</span><span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token keyword">not</span> stop<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># some tests need the http deamon to be available...</span>                self<span class="token punctuation">.</span>http_spawn<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="ThreadedWSGIServerReloadable"><a href="#ThreadedWSGIServerReloadable" class="headerlink" title="ThreadedWSGIServerReloadable"></a>ThreadedWSGIServerReloadable</h1><p>这个服务可以不启动也能够运行程序。他的作用是debug保持端口是开启的。</p><p>Werkzeug是Python的WSGI规范的实现函数库。基于BSD协议。<br>WSGI(Web Server Gateway Interface)<br>WSGI服务允许重用环境提供的监听套接字，它通过自动重加载使用，用于保持当有重加载的时候监听套接字是打开状态</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ThreadedWSGIServerReloadable</span><span class="token punctuation">(</span>LoggingBaseWSGIServerMixIn<span class="token punctuation">,</span> werkzeug<span class="token punctuation">.</span>serving<span class="token punctuation">.</span>ThreadedWSGIServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" werkzeug Threaded WSGI Server patched to allow reusing a listen socket    given by the environement, this is used by autoreload to keep the listen    socket open when a reload happens.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>ThreadedWSGIServerReloadable<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> app<span class="token punctuation">,</span>                                                           handler<span class="token operator">=</span>RequestHandler<span class="token punctuation">)</span>        <span class="token comment"># See https://github.com/pallets/werkzeug/pull/770</span>        <span class="token comment"># This allow the request threads to not be set as daemon</span>        <span class="token comment"># so the server waits for them when shutting down gracefully.</span>        self<span class="token punctuation">.</span>daemon_threads <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">server_bind</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        SD_LISTEN_FDS_START <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'LISTEN_FDS'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token keyword">and</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'LISTEN_PID'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>reload_socket <span class="token operator">=</span> <span class="token boolean">True</span>            self<span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>fromfd<span class="token punctuation">(</span>SD_LISTEN_FDS_START<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>            _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'HTTP service (werkzeug) running through socket activation'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>reload_socket <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token builtin">super</span><span class="token punctuation">(</span>ThreadedWSGIServerReloadable<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>server_bind<span class="token punctuation">(</span><span class="token punctuation">)</span>            _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'HTTP service (werkzeug) running on %s:%s'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>server_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>server_port<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">server_activate</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>reload_socket<span class="token punctuation">:</span>            <span class="token builtin">super</span><span class="token punctuation">(</span>ThreadedWSGIServerReloadable<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>server_activate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Start a new thread to process the request.        Override the default method of class socketserver.ThreadingMixIn        to be able to get the thread object which is instantiated        and set its start time as an attribute        """</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target <span class="token operator">=</span> self<span class="token punctuation">.</span>process_request_thread<span class="token punctuation">,</span>                             args <span class="token operator">=</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> client_address<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>daemon <span class="token operator">=</span> self<span class="token punctuation">.</span>daemon_threads        t<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">'http'</span>        t<span class="token punctuation">.</span>start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># TODO: Remove this method as soon as either of the revision</span>    <span class="token comment"># - python/cpython@8b1f52b5a93403acd7d112cd1c1bc716b31a418a for Python 3.6,</span>    <span class="token comment"># - python/cpython@908082451382b8b3ba09ebba638db660edbf5d8e for Python 3.7,</span>    <span class="token comment"># is included in all Python 3 releases installed on all operating systems supported by Odoo.</span>    <span class="token comment"># These revisions are included in Python from releases 3.6.8 and Python 3.7.2 respectively.</span>    <span class="token keyword">def</span> <span class="token function">_handle_request_noblock</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        In the python module `socketserver` `process_request` loop,        the __shutdown_request flag is not checked between select and accept.        Thus when we set it to `True` thanks to the call `httpd.shutdown`,        a last request is accepted before exiting the loop.        We override this function to add an additional check before the accept().        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_BaseServer__shutdown_request<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>ThreadedWSGIServerReloadable<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>_handle_request_noblock<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/weixin_35737303/article/details/79038879">https://blog.csdn.net/weixin_35737303/article/details/79038879</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> odoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate使用hbm2ddl.auto=在生产环境更新.md</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.codenong.com/221379/">https://www.codenong.com/221379/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo源码解析2-server命令</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>默认情况下的启动命令的server，这个是将odoo运行起来的命令。核心代码如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">## 判断是否为root用户，如果为root用户就发送警告</span>check_root_user<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">## 解析命令行参数</span>odoo<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>config<span class="token punctuation">.</span>parse_config<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token comment">## 如果为postgres用户就停止运行</span>check_postgres_user<span class="token punctuation">(</span><span class="token punctuation">)</span>report_configuration<span class="token punctuation">(</span><span class="token punctuation">)</span>config <span class="token operator">=</span> odoo<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>config<span class="token comment"># the default limit for CSV fields in the module is 128KiB, which is not</span><span class="token comment"># quite sufficient to import images to store in attachment. 500MiB is a</span><span class="token comment"># bit overkill, but better safe than sorry I guess</span>csv<span class="token punctuation">.</span>field_size_limit<span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token comment">## 创建加载的数据库</span>preload <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> config<span class="token punctuation">[</span><span class="token string">'db_name'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    preload <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">'db_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> db_name <span class="token keyword">in</span> preload<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            odoo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>db<span class="token punctuation">.</span>_create_empty_database<span class="token punctuation">(</span>db_name<span class="token punctuation">)</span>            config<span class="token punctuation">[</span><span class="token string">'init'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'base'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">except</span> ProgrammingError <span class="token keyword">as</span> err<span class="token punctuation">:</span>            <span class="token keyword">if</span> err<span class="token punctuation">.</span>pgcode <span class="token operator">==</span> errorcodes<span class="token punctuation">.</span>INSUFFICIENT_PRIVILEGE<span class="token punctuation">:</span>                <span class="token comment"># We use an INFO loglevel on purpose in order to avoid</span>                <span class="token comment"># reporting unnecessary warnings on build environment</span>                <span class="token comment"># using restricted database access.</span>                _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Could not determine if database %s exists, "</span>                             <span class="token string">"skipping auto-creation: %s"</span><span class="token punctuation">,</span> db_name<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> err        <span class="token keyword">except</span> odoo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>db<span class="token punctuation">.</span>DatabaseExists<span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">if</span> config<span class="token punctuation">[</span><span class="token string">"translate_out"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    export_translation<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> config<span class="token punctuation">[</span><span class="token string">"translate_in"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    import_translation<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># This needs to be done now to ensure the use of the multiprocessing</span><span class="token comment"># signaling mecanism for registries loaded with -d</span><span class="token keyword">if</span> config<span class="token punctuation">[</span><span class="token string">'workers'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    odoo<span class="token punctuation">.</span>multi_process <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment">## 是否在启动服务后停止，用户创建更新数据库</span>stop <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">"stop_after_init"</span><span class="token punctuation">]</span><span class="token comment">## 设置pid文件</span>setup_pid_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">## 启动server</span>rc <span class="token operator">=</span> odoo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>server<span class="token punctuation">.</span>start<span class="token punctuation">(</span>preload<span class="token operator">=</span>preload<span class="token punctuation">,</span> stop<span class="token operator">=</span>stop<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>rc<span class="token punctuation">)</span></code></pre><p>参考</p><blockquote><p><a href="https://blog.csdn.net/weixin_35737303/article/details/79038671">https://blog.csdn.net/weixin_35737303/article/details/79038671</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> odoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo模块加载机制</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p><strong>Odoo的启动通过openerp-server脚本完成，它是系统的入口。</strong></p><p><strong>然后加载配置文件openerp-server.conf 或者 openerp_serverrc；</strong></p><p>openerp-server.conf的主要内容：</p><p>这个文件缺省是没有的，Odoo系统会有一个默认值，但是一般情况我们都需配置这个文件。</p><p>启动http服务器，监听端口。</p><p><strong>模块加载：</strong></p><p>模块加载外层就是封装一个Registry(Mapping)对象:实际是一个字典，它包含对应的db，model等映射关系，一个DB对应一个Registry。后续的操作都会围绕这个Registry进行，将相关的数据赋值给相应的属性项。</p><h2 id="初始化数据库（初次运行"><a href="#初始化数据库（初次运行" class="headerlink" title="初始化数据库（初次运行)"></a>初始化数据库（初次运行)</h2><p><strong>1)加载base模块下的base.sql文件并执行。</strong><br>此时数据库表为：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_actions <span class="token punctuation">(</span>  id <span class="token keyword">serial</span><span class="token punctuation">,</span>  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_act_window <span class="token punctuation">(</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> INHERITS <span class="token punctuation">(</span>ir_actions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_act_report_xml <span class="token punctuation">(</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> INHERITS <span class="token punctuation">(</span>ir_actions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_act_url <span class="token punctuation">(</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> INHERITS <span class="token punctuation">(</span>ir_actions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_act_server <span class="token punctuation">(</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> INHERITS <span class="token punctuation">(</span>ir_actions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_act_client <span class="token punctuation">(</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> INHERITS <span class="token punctuation">(</span>ir_actions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_model <span class="token punctuation">(</span>  id <span class="token keyword">serial</span><span class="token punctuation">,</span>  model <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  name <span class="token keyword">varchar</span><span class="token punctuation">,</span>  state <span class="token keyword">varchar</span><span class="token punctuation">,</span>  info <span class="token keyword">text</span><span class="token punctuation">,</span>  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_model_fields <span class="token punctuation">(</span>  id <span class="token keyword">serial</span><span class="token punctuation">,</span>  model <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  model_id <span class="token keyword">integer</span> <span class="token keyword">references</span> ir_model <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span><span class="token punctuation">,</span>  name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  relation <span class="token keyword">varchar</span><span class="token punctuation">,</span>  select_level <span class="token keyword">varchar</span><span class="token punctuation">,</span>  field_description <span class="token keyword">varchar</span><span class="token punctuation">,</span>  ttype <span class="token keyword">varchar</span><span class="token punctuation">,</span>  state <span class="token keyword">varchar</span> <span class="token keyword">default</span> <span class="token string">'base'</span><span class="token punctuation">,</span>  relation_field <span class="token keyword">varchar</span><span class="token punctuation">,</span>  translate <span class="token keyword">boolean</span> <span class="token keyword">default</span> <span class="token boolean">False</span><span class="token punctuation">,</span>  serialization_field_id <span class="token keyword">integer</span> <span class="token keyword">references</span> ir_model_fields <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span><span class="token punctuation">,</span>   <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> res_lang <span class="token punctuation">(</span>    id <span class="token keyword">serial</span><span class="token punctuation">,</span>    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    code <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> res_users <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    active <span class="token keyword">boolean</span> <span class="token keyword">default</span> <span class="token boolean">True</span><span class="token punctuation">,</span>    login <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token comment">-- No FK references below, will be added later by ORM</span>    <span class="token comment">-- (when the destination rows exist)</span>    company_id <span class="token keyword">integer</span><span class="token punctuation">,</span> <span class="token comment">-- references res_company,</span>    partner_id <span class="token keyword">integer</span><span class="token punctuation">,</span> <span class="token comment">-- references res_partner,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> wkf <span class="token punctuation">(</span>    id <span class="token keyword">serial</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    osv <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    on_create <span class="token keyword">bool</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_module_category <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_uid <span class="token keyword">integer</span><span class="token punctuation">,</span> <span class="token comment">-- references res_users on delete set null,</span>    create_date <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    write_date <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    write_uid <span class="token keyword">integer</span><span class="token punctuation">,</span> <span class="token comment">-- references res_users on delete set null,</span>    parent_id <span class="token keyword">integer</span> <span class="token keyword">REFERENCES</span> ir_module_category <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    name <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_module_module <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_uid <span class="token keyword">integer</span><span class="token punctuation">,</span> <span class="token comment">-- references res_users on delete set null,</span>    create_date <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    write_date <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    write_uid <span class="token keyword">integer</span><span class="token punctuation">,</span> <span class="token comment">-- references res_users on delete set null,</span>    website <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    summary <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    name <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    author <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    icon <span class="token keyword">varchar</span><span class="token punctuation">,</span>    state <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    latest_version <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    shortdesc <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    category_id <span class="token keyword">integer</span> <span class="token keyword">REFERENCES</span> ir_module_category <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">SET</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    description <span class="token keyword">text</span><span class="token punctuation">,</span>    application <span class="token keyword">boolean</span> <span class="token keyword">default</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    demo <span class="token keyword">boolean</span> <span class="token keyword">default</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    web <span class="token keyword">boolean</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span>    license <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sequence <span class="token keyword">integer</span> <span class="token keyword">DEFAULT</span> <span class="token number">100</span><span class="token punctuation">,</span>    auto_install <span class="token keyword">boolean</span> <span class="token keyword">default</span> <span class="token boolean">False</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> ir_module_module <span class="token keyword">add</span> <span class="token keyword">constraint</span> name_uniq <span class="token keyword">unique</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_module_module_dependency <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_uid <span class="token keyword">integer</span><span class="token punctuation">,</span> <span class="token comment">-- references res_users on delete set null,</span>    create_date <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    write_date <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    write_uid <span class="token keyword">integer</span><span class="token punctuation">,</span> <span class="token comment">-- references res_users on delete set null,</span>    name <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    module_id <span class="token keyword">integer</span> <span class="token keyword">REFERENCES</span> ir_module_module <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">cascade</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_model_data <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_uid <span class="token keyword">integer</span><span class="token punctuation">,</span>    create_date <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    write_date <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    write_uid <span class="token keyword">integer</span><span class="token punctuation">,</span>    noupdate <span class="token keyword">boolean</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    date_init <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    date_update <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    module <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    model <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    res_id <span class="token keyword">integer</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- Records foreign keys and constraints installed by a module (so they can be</span><span class="token comment">-- removed when the module is uninstalled):</span><span class="token comment">--   - for a foreign key: type is 'f',</span><span class="token comment">--   - for a constraint: type is 'u' (this is the convention PostgreSQL uses).</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_model_constraint <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    date_init <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    date_update <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    module <span class="token keyword">integer</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">references</span> ir_module_module <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">restrict</span><span class="token punctuation">,</span>    model <span class="token keyword">integer</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">references</span> ir_model <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">restrict</span><span class="token punctuation">,</span>    <span class="token keyword">type</span> <span class="token keyword">character</span> <span class="token keyword">varying</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- Records relation tables (i.e. implementing many2many) installed by a module</span><span class="token comment">-- (so they can be removed when the module is uninstalled).</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ir_model_relation <span class="token punctuation">(</span>    id <span class="token keyword">serial</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    date_init <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    date_update <span class="token keyword">timestamp</span> without <span class="token keyword">time</span> zone<span class="token punctuation">,</span>    module <span class="token keyword">integer</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">references</span> ir_module_module <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">restrict</span><span class="token punctuation">,</span>    model <span class="token keyword">integer</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">references</span> ir_model <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">restrict</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> res_currency <span class="token punctuation">(</span>    id <span class="token keyword">serial</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> res_company <span class="token punctuation">(</span>    id <span class="token keyword">serial</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    partner_id <span class="token keyword">integer</span><span class="token punctuation">,</span>    currency_id <span class="token keyword">integer</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> res_partner <span class="token punctuation">(</span>    id <span class="token keyword">serial</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">,</span>    company_id <span class="token keyword">integer</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这20张表是odoo系统级的，它是模块加载及系统运行的基础。后续模块生成的表及相关数据都可以在这20张中找到蛛丝马迹。</p><h2 id="数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。"><a href="#数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。" class="headerlink" title="数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。"></a>数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。</h2><p>找到addons-path下所有的模块,然后一个一个的加载到数据库中。<br>Info就是load模块的<strong>openerp</strong>.py文件，它是一个dict。</p><p>根据<strong>openerp</strong>.py中定义的category创建分类信息：<br>将模块信息写入ir_module_module表：<br>将module信息写入ir_model_data表：<br>一个module要写两次ir_model_data表，<br>写module的dependency表：</p><p>根据依赖关系进行判断，递归更新那些需要auto_install的模块状态为“to install”。</p><p>到目前为止，模块的加载都是在数据库级别，只是将“模块文件”信息存入数据库表，但是还没有真正加载到程序中。<br>Odoo运行时查找object是通过Registry.get()获取的，而不是通过python自己的机制来找到相应的object，所以odoo在加载模块时会把模块下包含的model全部注册到models.py的module_to_models字典中。</p><p>**下面的步骤就是加载模块到内存：</p><h2 id="加载base模块"><a href="#加载base模块" class="headerlink" title="加载base模块"></a>加载base模块</h2><p>创建一个包含model层级的节点图，第二行代码将从数据库更新数据到graph中。然后调用load_module_graph方法加载模块，最终执行加载的方法：</p><p>这个方法是odoo加载model的核心，通过 __import__方法加载模块，这个是python的机制，当import到某个继承了BaseModel类的class时，它的实例化将有别于python自身的实例化操作，<br>后者说它根本不会通过python自身的__new__方法创建实例，所有的实例创建都是通过 _build_model 方法及元类创建，并注册到module_to_models中。通过这种方式实例化model就可以解决我们在xml中配置model时指定的继承，字段，约束等各种属性。</p><h2 id="标记需要加载或者更新的模块（db）"><a href="#标记需要加载或者更新的模块（db）" class="headerlink" title="标记需要加载或者更新的模块（db）"></a>标记需要加载或者更新的模块（db）</h2><h2 id="加载被标记的模块（加载过程与加载base模块一致）"><a href="#加载被标记的模块（加载过程与加载base模块一致）" class="headerlink" title="加载被标记的模块（加载过程与加载base模块一致）"></a>加载被标记的模块（加载过程与加载base模块一致）</h2><h2 id="完成及清理安装"><a href="#完成及清理安装" class="headerlink" title="完成及清理安装"></a>完成及清理安装</h2><h2 id="清理菜单"><a href="#清理菜单" class="headerlink" title="清理菜单"></a>清理菜单</h2><h2 id="删除卸载的模块"><a href="#删除卸载的模块" class="headerlink" title="删除卸载的模块"></a>删除卸载的模块</h2><h2 id="核实model的view"><a href="#核实model的view" class="headerlink" title="核实model的view"></a>核实model的view</h2><h2 id="运行post-install测试"><a href="#运行post-install测试" class="headerlink" title="运行post-install测试"></a>运行post-install测试</h2>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> odoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>odoo源码解析1-启动命令</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># set server timezone in UTC before time module imported</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'TZ'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'UTC'</span><span class="token keyword">import</span> odoo<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    odoo<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>main函数主要是进行一些初始化和启动相关的命令</p><ul><li>解析启动命令的参数</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment"># The only shared option is '--addons-path=' needed to discover additional</span>    <span class="token comment"># commands from modules</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">and</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'--addons-path='</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># parse only the addons-path, do not setup the logger...</span>        odoo<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>config<span class="token punctuation">.</span>_parse_config<span class="token punctuation">(</span><span class="token punctuation">[</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        args <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment"># Default legacy command</span>    command <span class="token operator">=</span> <span class="token string">"server"</span>    <span class="token comment"># TODO: find a way to properly discover addons subcommands without importing the world</span>    <span class="token comment"># Subcommand discovery</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>disable<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>CRITICAL<span class="token punctuation">)</span>        <span class="token keyword">for</span> module <span class="token keyword">in</span> get_modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> isdir<span class="token punctuation">(</span>joinpath<span class="token punctuation">(</span>get_module_path<span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'cli'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'odoo.addons.'</span> <span class="token operator">+</span> module<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>disable<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>NOTSET<span class="token punctuation">)</span>        command <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        args <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> command <span class="token keyword">in</span> commands<span class="token punctuation">:</span>        o <span class="token operator">=</span> commands<span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        o<span class="token punctuation">.</span>run<span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">'Unknow command %r'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>command<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> odoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python原类实践</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用原来创建ORM的实例"><a href="#使用原来创建ORM的实例" class="headerlink" title="使用原来创建ORM的实例"></a>使用原来创建ORM的实例</h1><p>我们通过创建一个类似Django中的ORM来熟悉一下元类的使用，通常元类用来创建API是非常好的选择，使用元类的编写很复杂但使用者可以非常简洁的调用API。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#我们想创建一个类似Django的ORM，只要定义字段就可以实现对数据库表和字段的操作。</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 定义类的属性到列的映射：</span>    <span class="token builtin">id</span> <span class="token operator">=</span> IntegerField<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'email'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span></code></pre><p>例如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建一个实例：</span>u <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">12345</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">'test@orm.org'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'my-pwd'</span><span class="token punctuation">)</span><span class="token comment"># 保存到数据库：</span>u<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>接下来我么来实现这么个功能：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf-8</span><span class="token comment">#一、首先来定义Field类，它负责保存数据库表的字段名和字段类型：</span><span class="token keyword">class</span> <span class="token class-name">Field</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> column_type<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>column_type <span class="token operator">=</span> column_type    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;%s:%s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">StringField</span><span class="token punctuation">(</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>StringField<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'varchar(100)'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">IntegerField</span><span class="token punctuation">(</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>IntegerField<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'bigint'</span><span class="token punctuation">)</span><span class="token comment">#二、定义元类，控制Model对象的创建</span><span class="token keyword">class</span> <span class="token class-name">ModelMetaclass</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''定义元类'''</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token operator">==</span><span class="token string">'Model'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span>ModelMetaclass<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span>        mappings <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> attrs<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 保存类属性和列的映射关系到mappings字典</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> Field<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Found mapping: %s==>%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>                mappings<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v        <span class="token keyword">for</span> k <span class="token keyword">in</span> mappings<span class="token punctuation">.</span>iterkeys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#将类属性移除，使定义的类字段不污染User类属性，只在实例中可以访问这些key</span>            attrs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>k<span class="token punctuation">)</span>        attrs<span class="token punctuation">[</span><span class="token string">'__table__'</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 假设表名和为类名的小写,创建类时添加一个__table__类属性</span>        attrs<span class="token punctuation">[</span><span class="token string">'__mappings__'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mappings <span class="token comment"># 保存属性和列的映射关系，创建类时添加一个__mappings__类属性</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span>ModelMetaclass<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token comment">#三、编写Model基类</span><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    __metaclass__ <span class="token operator">=</span> ModelMetaclass    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Model<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">r"'Model' object has no attribute '%s'"</span> <span class="token operator">%</span> key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> self<span class="token punctuation">.</span>__mappings__<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fields<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            params<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span>            args<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token string">'insert into %s (%s) values (%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__table__<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SQL: %s'</span> <span class="token operator">%</span> sql<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ARGS: %s'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#最后，我们使用定义好的ORM接口，使用起来非常的简单。</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 定义类的属性到列的映射：</span>    <span class="token builtin">id</span> <span class="token operator">=</span> IntegerField<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'email'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token comment"># 创建一个实例：</span>u <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">12345</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">'test@orm.org'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'my-pwd'</span><span class="token punctuation">)</span><span class="token comment"># 保存到数据库：</span>u<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#输出</span><span class="token comment"># Found mapping: email==>&lt;StringField:email></span><span class="token comment"># Found mapping: password==>&lt;StringField:password></span><span class="token comment"># Found mapping: id==>&lt;IntegerField:id></span><span class="token comment"># Found mapping: name==>&lt;StringField:username></span><span class="token comment"># SQL: insert into User (password,email,username,id) values (?,?,?,?)</span><span class="token comment"># ARGS: ['my-pwd', 'test@orm.org', 'Michael', 12345]</span></code></pre><h1 id="使用-new-方法和元类方式分别实现单例模式"><a href="#使用-new-方法和元类方式分别实现单例模式" class="headerlink" title="使用__new__方法和元类方式分别实现单例模式"></a>使用__new__方法和元类方式分别实现单例模式</h1><h2 id="1、-new-、-init-、-call-的介绍"><a href="#1、-new-、-init-、-call-的介绍" class="headerlink" title="1、__new__、__init__、__call__的介绍"></a>1、__new__、__init__、__call__的介绍</h2><p>在讲到使用元类创建单例模式之前，比需了解__new__这个内置方法的作用，在上面讲元类的时候我们用到了__new__方法来实现类的创建。然而我在那之前还是对__new__这个方法和__init__方法有一定的疑惑。因此这里花点时间对其概念做一次了解和区分。</p><p>__new__方法负责创建一个实例对象，在对象被创建的时候调用该方法它是一个类方法。__new__方法在返回一个实例之后，会自动的调用__init__方法，对实例进行初始化。如果__new__方法不返回值，或者返回的不是实例，那么它就不会自动的去调用__init__方法。</p><p><strong>init</strong> 方法负责将该实例对象进行初始化，在对象被创建之后调用该方法，在__new__方法创建出一个实例后对实例属性进行初始化。__init__方法可以没有返回值。</p><p>__call__方法其实和类的创建过程和实例化没有多大关系了，定义了__call__方法才能被使用函数的方式执行。</p><pre class="language-python" data-language="python"><code class="language-python">例如：<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"__call__ be called"</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#输出</span><span class="token comment">#__call__ be called </span></code></pre><p>打个比方帮助理解：如果将创建实例的过程比作建一个房子。</p><ul><li>那么class就是一个房屋的设计图，他规定了这个房子有几个房间，每个人房间的大小朝向等。这个设计图就是累的结构</li><li>__new__就是一个房屋的框架，每个具体的房屋都需要先搭好框架后才能进行专修，当然现有了房屋设计才能有具体的房屋框架出来。这个就是从类到类实例的创建。</li><li>__init__就是装修房子的过程，对房屋的墙面和地板等颜色材质的丰富就是它该做的事情，当然先有具体的房子框架出来才能进行装饰了。这个就是实例属性的初始化，它是在__new__出一个实例后才能初始化。</li><li>__call__就是房子的电话，有了固定电话，才能被打电话嘛（就是通过括号的方式像函数一样执行）。</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf-8</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#__new__是一个类方法，在对象创建的时候调用</span>        <span class="token keyword">print</span> <span class="token string">"excute __new__"</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#__init__是一个实例方法，在对象创建后调用，对实例属性做初始化</span>        <span class="token keyword">print</span> <span class="token string">"excute __init"</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> valuef1 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span> f1<span class="token punctuation">.</span>valuef2 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span> f2<span class="token punctuation">.</span>value<span class="token comment">#输出===：</span>excute __new__excute __init<span class="token number">1</span>excute __new__excute __init<span class="token number">2</span><span class="token comment">#====可以看出new方法在init方法之前执行</span></code></pre><p> 子类如果重写__new__方法，一般依然要调用父类的__new__方法。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> suyper<span class="token punctuation">(</span>Child<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></code></pre><p> 必须注意的是，类的<strong>new__方法之后，必须生成本类的实例才能自动调用本类的__init__方法进行初始化，否则不会自动调用__init</strong>.</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Foo __init__"</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Stranger<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Stranger</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"class Stranger's __init__ be called"</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> namefoo <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token builtin">type</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">#&lt;class '__main__.Stranger'></span><span class="token keyword">print</span> foo<span class="token punctuation">.</span>name <span class="token comment">#AttributeError: 'Stranger' object has no attribute 'name'</span><span class="token comment">#说明：如果new方法返回的不是本类的实例，那么本类（Foo）的init和生成的类(Stranger)的init都不会被调用</span></code></pre><h2 id="2-实现单例模式"><a href="#2-实现单例模式" class="headerlink" title="2.实现单例模式"></a>2.实现单例模式</h2><p>依照Python官方文档的说法，__new__方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。还有就是实现自定义的metaclass。接下来我们分别通过这两种方式来实现单例模式。当初在看到cookbook中的元类来实现单例模式的时候对其相当疑惑，因此才有了上面这些对元类的总结。</p><p>简单来说，单例模式的原理就是通过在类属性中添加一个单例判定位ins_flag，通过这个flag判断是否已经被实例化过了,如果被实例化过了就返回该实例。</p><h3 id="new-方法实现单例："><a href="#new-方法实现单例：" class="headerlink" title="__new__方法实现单例："></a>__new__方法实现单例：</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token string">"_instance"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instances1 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> s1 <span class="token keyword">is</span> s2</code></pre><p>因为重写__new__方法，所以继承至Singleton的类，在不重写__new__的情况下都将是单例模式。</p><h3 id="元类实现单例"><a href="#元类实现单例" class="headerlink" title="元类实现单例"></a>元类实现单例</h3><p>当初我也很疑惑为什么我们是从写使用元类的__init__方法，而不是使用__new__方法来初为元类增加一个属性。其实我只是上面那一段关于元类中__new__方法迷惑了，它主要用于我们需要对类的结构进行改变的时候我们才要重写这个方法。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"__init__"</span>        self<span class="token punctuation">.</span>__instance <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"__call__"</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__call__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__instance<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    __metaclass__ <span class="token operator">=</span> Singleton <span class="token comment">#在代码执行到这里的时候，元类中的__new__方法和__init__方法其实已经被执行了，而不是在Foo实例化的时候执行。且仅会执行一次。</span>foo1 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>foo2 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> Foo<span class="token punctuation">.</span>__dict__  <span class="token comment">#_Singleton__instance': &lt;__main__.Foo object at 0x100c52f10> 存在一个私有属性来保存属性，而不会污染Foo类（其实还是会污染，只是无法直接通过__instance属性访问）</span><span class="token keyword">print</span> foo1 <span class="token keyword">is</span> foo2  <span class="token comment"># True</span><span class="token comment"># 输出</span><span class="token comment"># __init__</span><span class="token comment"># __call__</span><span class="token comment"># __call__</span><span class="token comment"># &#123;'__module__': '__main__', '__metaclass__': &lt;class '__main__.Singleton'>, '_Singleton__instance': &lt;__main__.Foo object at 0x100c52f10>, '__dict__': &lt;attribute '__dict__' of 'Foo' objects>, '__weakref__': &lt;attribute '__weakref__' of 'Foo' objects>, '__doc__': None&#125;</span><span class="token comment"># True </span></code></pre><p>基于这个例子：</p><ul><li>我们知道元类(Singleton)生成的实例是一个类(Foo),而这里我们仅仅需要对这个实例(Foo)增加一个属性(__instance)来判断和保存生成的单例。想想也知道为一个类添加一个属性当然是在__init__中实现了。</li><li>关于__call__方法的调用，因为Foo是Singleton的一个实例。所以Foo()这样的方式就调用了Singleton的__call__方法。不明白就回头看看上一节中的__call__方法介绍。</li></ul><p>假如我们通过元类的__new__方法来也可以实现，但显然没有通过__init__来实现优雅，因为我们不会为了为实例增加一个属性而重写__new__方法。所以这个形式不推荐。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span>bases<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"__new__"</span>        attrs<span class="token punctuation">[</span><span class="token string">"_instance"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">return</span>  <span class="token builtin">super</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span>name<span class="token punctuation">,</span>bases<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"__call__"</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__call__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_instance<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    __metaclass__ <span class="token operator">=</span> Singletonfoo1 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>foo2 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> Foo<span class="token punctuation">.</span>__dict__ <span class="token keyword">print</span> foo1 <span class="token keyword">is</span> foo2  <span class="token comment"># True</span><span class="token comment"># 输出</span><span class="token comment"># __new__</span><span class="token comment"># __call__</span><span class="token comment"># __call__</span><span class="token comment"># &#123;'__module__': '__main__', '__metaclass__': &lt;class '__main__.Singleton'>, '_instance': &lt;__main__.Foo object at 0x103e07ed0>, '__dict__': &lt;attribute '__dict__' of 'Foo' objects>, '__weakref__': &lt;attribute '__weakref__' of 'Foo' objects>, '__doc__': None&#125;</span><span class="token comment"># True</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python原类</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python中一切皆对象，类也是对象"><a href="#Python中一切皆对象，类也是对象" class="headerlink" title="Python中一切皆对象，类也是对象"></a>Python中一切皆对象，类也是对象</h1><p>​    之前我们说Python中一切都是对象。对象从哪里来，对象是类的实例。如下，使用type()函数查看对象所属的类型。我们可以看到Python中所以实例都是类的对象。那么类呢，既然一切都是对象，那么类也应该是对象。如下代码中发现我们创建的Person类原来也是对象，是type的对象。</p><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">12.12</span><span class="token punctuation">;</span> c<span class="token operator">=</span><span class="token string">"hello"</span> <span class="token punctuation">;</span>d <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"rr"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>e <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aa"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">:</span><span class="token string">"cc"</span><span class="token punctuation">&#125;</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span>   <span class="token comment">#a = 10;a也是对象，即10是对象，是int类型的对象</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span> <span class="token comment">#float也是类，注意python很多类的写法是小写，有的则是大写</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不调用类，也会执行我"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this is a  methond"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>  tom <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"tom实例的类型是：%s"</span><span class="token operator">%</span><span class="token builtin">type</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 实例tom是Person类的对象。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Peron类的类型：%s"</span><span class="token operator">%</span><span class="token builtin">type</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#结果看出我们创建的类属于type类,也就是说Person是type类的对象</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"type的类型是：%s"</span><span class="token operator">%</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#type是type自己的对象</span>不调用类，也会执行我<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.Person'</span><span class="token operator">></span>tom实例的类型是：<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.Person'</span><span class="token operator">></span>Peron类的类型：<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span class="token builtin">type</span>的类型是：<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span></code></pre><h1 id="动态创建类"><a href="#动态创建类" class="headerlink" title="动态创建类"></a>动态创建类</h1><h2 id="通过class动态的构建需要的类"><a href="#通过class动态的构建需要的类" class="headerlink" title="通过class动态的构建需要的类"></a><strong>通过class动态的构建需要的类</strong></h2><p>因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用class关键字即可。 </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">choose_class</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'foo'</span><span class="token punctuation">:</span>        <span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> Foo     <span class="token comment"># 返回的是类，不是类的实例</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">class</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> BarMyClass <span class="token operator">=</span> choose_class<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token keyword">print</span> MyClass              <span class="token comment"># 函数返回的是类，不是类的实例</span><span class="token comment">#输出：&lt;class '__main__.Foo'></span><span class="token keyword">print</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 你可以通过这个类创建类实例，也就是对象</span><span class="token comment">#输出：&lt;__main__.Foo object at 0x1085ed950</span></code></pre><h2 id="通过type函数构造类"><a href="#通过type函数构造类" class="headerlink" title="通过type函数构造类"></a><strong>通过type函数构造类</strong></h2><p>但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。但就和Python中的大多数事情一样，Python仍然提供给你手动处理的方法。还记得内建函数type吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#输出：&lt;type 'int'></span><span class="token keyword">print</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token comment">#输出：&lt;type 'str'></span><span class="token keyword">print</span> <span class="token builtin">type</span><span class="token punctuation">(</span>ObjectCreator<span class="token punctuation">)</span><span class="token comment">#输出：&lt;type 'type'></span><span class="token keyword">print</span> <span class="token builtin">type</span><span class="token punctuation">(</span>ObjectCreator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#输出：&lt;class '__main__.ObjectCreator'></span></code></pre><p>这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）</p><p><strong>type的语法：</strong></p><pre class="language-none"><code class="language-none">type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)</code></pre><p>比如下面的代码：</p><pre class="language-none"><code class="language-none">class MyShinyClass(object):    pass</code></pre><p>可以手动通过type创建，其实</p><pre class="language-python" data-language="python"><code class="language-python">MyShinyClass <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'MyShinyClass'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个类对象</span><span class="token keyword">print</span> MyShinyClass<span class="token comment">#输出：&lt;class '__main__.MyShinyClass'></span><span class="token keyword">print</span> MyShinyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#  创建一个该类的实例</span><span class="token comment">#输出：&lt;__main__.MyShinyClass object at 0x1085cd810></span></code></pre><p> 你会发现我们使用“MyShinyClass”作为类名，并且也可以把它当做一个变量来作为类的引用。</p><p>接下来我们通过一个具体的例子看看type是如何创建类的，范例：javascript:void(0);)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1</span>、构建Foo类<span class="token comment">#构建目标代码</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    bar <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment">#使用type构建</span>Foo <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'Foo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'bar'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>继承Foo类<span class="token comment">#构建目标代码：</span><span class="token keyword">class</span> <span class="token class-name">FooChild</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment">#使用type构建</span>FooChild <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'FooChild'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Foo<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span> FooChild<span class="token comment">#输出：&lt;class '__main__.FooChild'></span><span class="token keyword">print</span> FooChild<span class="token punctuation">.</span>bar   <span class="token comment"># bar属性是由Foo继承而来</span><span class="token comment">#输出：True</span><span class="token number">3</span><span class="token punctuation">.</span>为Foochild类增加方法<span class="token keyword">def</span> <span class="token function">echo_bar</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> self<span class="token punctuation">.</span>barFooChild <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'FooChild'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Foo<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'echo_bar'</span><span class="token punctuation">:</span> echo_bar<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> <span class="token string">'echo_bar'</span><span class="token punctuation">)</span><span class="token comment">#输出：False</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>FooChild<span class="token punctuation">,</span> <span class="token string">'echo_bar'</span><span class="token punctuation">)</span><span class="token comment">#输出：True</span>my_foo <span class="token operator">=</span> FooChild<span class="token punctuation">(</span><span class="token punctuation">)</span>my_foo<span class="token punctuation">.</span>echo_bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#输出：True</span></code></pre><p>可以看到，在Python中，类也是对象，你可以动态的创建类。这就是当我们使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的。</p><h3 id="type创建类与class的比较"><a href="#type创建类与class的比较" class="headerlink" title="type创建类与class的比较"></a>type创建类与class的比较</h3><h3 id="使用type创建带属性和方法的类"><a href="#使用type创建带属性和方法的类" class="headerlink" title="使用type创建带属性和方法的类"></a><strong>使用type创建带属性和方法的类</strong></h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>使用<span class="token builtin">type</span>创建带有属性的类<span class="token punctuation">,</span>添加的属性是类属性，并不是实例属性Girl <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"Girl"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"country"</span><span class="token punctuation">:</span><span class="token string">"china"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token punctuation">:</span><span class="token string">"male"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>girl <span class="token operator">=</span> Girl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>country<span class="token punctuation">,</span>girl<span class="token punctuation">.</span>sex<span class="token punctuation">)</span>  <span class="token comment">#使用type创建的类，调用属性时IDE不会自动提示补全</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>Girl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''china male&lt;class '__main__.Girl'> &lt;class 'type'>'''</span> <span class="token number">2</span><span class="token punctuation">.</span>使用<span class="token builtin">type</span>创建带有方法的类<span class="token comment">#python中方法有普通方法，类方法，静态方法。</span><span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#要带有参数self,因为类中方法默认带self参数。</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是给类添加的普通方法"</span><span class="token punctuation">)</span> <span class="token decorator annotation punctuation">@classmethod</span><span class="token keyword">def</span> <span class="token function">c_run</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是给类添加的类方法"</span><span class="token punctuation">)</span> <span class="token decorator annotation punctuation">@staticmethod</span><span class="token keyword">def</span> <span class="token function">s_eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是给类添加的静态方法"</span><span class="token punctuation">)</span> <span class="token comment">#创建类，给类添加静态方法，类方法，普通方法。跟添加类属性差不多.</span>Boy <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"Boy"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"speak"</span><span class="token punctuation">:</span>speak<span class="token punctuation">,</span><span class="token string">"c_run"</span><span class="token punctuation">:</span>c_run<span class="token punctuation">,</span><span class="token string">"s_eat"</span><span class="token punctuation">:</span>s_eat<span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token punctuation">:</span><span class="token string">"female"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>boy <span class="token operator">=</span> Boy<span class="token punctuation">(</span><span class="token punctuation">)</span>boy<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>boy<span class="token punctuation">.</span>s_eat<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#调用类中的静态方法</span>boy<span class="token punctuation">.</span>c_run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#调用类中类方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"boy.sex:"</span><span class="token punctuation">,</span>boy<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>Boy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''这是给类添加的普通方法这是给类添加的静态方法这是给类添加的类方法boy.sex: female&lt;class '__main__.Boy'> &lt;class 'type'>'''</span></code></pre><h3 id="使用type定义带继承，属性和方法的类"><a href="#使用type定义带继承，属性和方法的类" class="headerlink" title="使用type定义带继承，属性和方法的类"></a><strong>使用type定义带继承，属性和方法的类</strong></h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">p</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是Person的方法"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"animal can run "</span><span class="token punctuation">)</span><span class="token comment">#定义一个拥有继承的类，继承的效果和性质和class一样。</span>Worker <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"Worker"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span>Animal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"job"</span><span class="token punctuation">:</span><span class="token string">"程序员"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>w1 <span class="token operator">=</span> Worker<span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span>w1<span class="token punctuation">.</span>p<span class="token punctuation">(</span><span class="token punctuation">)</span>w1<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>w1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>Worker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''这是Person的方法animal can run &lt;class '__main__.Worker'> &lt;class 'type'>&lt;class '__main__.Person'>'''</span></code></pre><p> 总结：</p><p>通过type添加的属性是类属性，并不是实例属性<br>通过type可以给类添加普通方法，静态方法，类方法，效果跟class一样<br>type创建类的效果，包括继承等的使用性质和class创建的类一样。本质class创建类的本质就是用type创建。所以可以说python中所有类都是type创建的。</p><h1 id="自定义元类"><a href="#自定义元类" class="headerlink" title="自定义元类"></a>自定义元类</h1><p>元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过设定__metaclass__。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。</p><p>__metaclass__实际上可以被任意调用，它并不需要是一个正式的类。所以，我们这里就先以一个简单的函数作为例子开始。</p><h2 id="1、使用函数当做元类"><a href="#1、使用函数当做元类" class="headerlink" title="1、使用函数当做元类"></a>1、使用函数当做元类</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 元类会自动将你通常传给‘type’的参数作为自己的参数传入</span><span class="token keyword">def</span> <span class="token function">upper_attr</span><span class="token punctuation">(</span>future_class_name<span class="token punctuation">,</span> future_class_parents<span class="token punctuation">,</span> future_class_attr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''返回一个类对象，将属性都转为大写形式'''</span>    <span class="token comment">#选择所有不以'__'开头的属性</span>    attrs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> future_class_attr<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'__'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 将它们转为大写形式</span>    uppercase_attr <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> attrs<span class="token punctuation">)</span>    <span class="token comment">#通过'type'来做类对象的创建</span>    <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">(</span>future_class_name<span class="token punctuation">,</span> future_class_parents<span class="token punctuation">,</span> uppercase_attr<span class="token punctuation">)</span><span class="token comment">#返回一个类</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    __metaclass__ <span class="token operator">=</span> upper_attr    bar <span class="token operator">=</span> <span class="token string">'bip'</span> </code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token comment"># 输出: False</span><span class="token keyword">print</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> <span class="token string">'BAR'</span><span class="token punctuation">)</span><span class="token comment"># 输出:True</span> f <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> f<span class="token punctuation">.</span>BAR<span class="token comment"># 输出:'bip'</span></code></pre><h2 id="2、使用class来当做元类"><a href="#2、使用class来当做元类" class="headerlink" title="2、使用class来当做元类"></a>2、使用class来当做元类</h2><p>由于__metaclass__必须返回一个类。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 请记住，'type'实际上是一个类，就像'str'和'int'一样。所以，你可以从type继承</span><span class="token comment"># __new__ 是在__init__之前被调用的特殊方法，__new__是用来创建对象并返回之的方法，__new_()是一个类方法</span><span class="token comment"># 而__init__只是用来将传入的参数初始化给对象，它是在对象创建之后执行的方法。</span><span class="token comment"># 你很少用到__new__，除非你希望能够控制对象的创建。这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span><span class="token comment"># 如果你希望的话，你也可以在__init__中做些事情。还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用，下面我们可以单独的讨论这个使用</span><span class="token keyword">class</span> <span class="token class-name">UpperAttrMetaClass</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>upperattr_metaclass<span class="token punctuation">,</span> future_class_name<span class="token punctuation">,</span> future_class_parents<span class="token punctuation">,</span> future_class_attr<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> future_class_attr<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'__'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        uppercase_attr <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> attrs<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">(</span>future_class_name<span class="token punctuation">,</span> future_class_parents<span class="token punctuation">,</span> uppercase_attr<span class="token punctuation">)</span><span class="token comment">#返回一个对象，但同时这个对象是一个类</span></code></pre><p> 但是，这种方式其实不是OOP。我们直接调用了type，而且我们没有改写父类的__new__方法。现在让我们这样去处理:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UpperAttrMetaclass</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>upperattr_metaclass<span class="token punctuation">,</span> future_class_name<span class="token punctuation">,</span> future_class_parents<span class="token punctuation">,</span> future_class_attr<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> future_class_attr<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'__'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        uppercase_attr <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> attrs<span class="token punctuation">)</span>         <span class="token comment"># 复用type.__new__方法</span>        <span class="token comment"># 这就是基本的OOP编程，没什么魔法。由于type是元类也就是类，因此它本身也是通过__new__方法生成其实例，只不过这个实例是一个类.</span>        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>upperattr_metaclass<span class="token punctuation">,</span> future_class_name<span class="token punctuation">,</span> future_class_parents<span class="token punctuation">,</span> uppercase_attr<span class="token punctuation">)</span></code></pre><p>你可能已经注意到了有个额外的参数upperattr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就像在普通的类方法中的self参数一样。当然了，为了清晰起见，这里的名字我起的比较长。但是就像self一样，所有的参数都有它们的传统名称。因此，在真实的产品代码中一个元类应该是像这样的：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UpperAttrMetaclass</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> dct<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> dct<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'__'</span><span class="token punctuation">)</span>        uppercase_attr  <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> attrs<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> uppercase_attr<span class="token punctuation">)</span></code></pre><p>如果使用super方法的话，我们还可以使它变得更清晰一些。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UpperAttrMetaclass</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> dct<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> dct<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'__'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        uppercase_attr <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> attrs<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span>UpperAttrMetaclass<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> uppercase_attr<span class="token punctuation">)</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/tkqasn/p/6524879.html">https://www.cnblogs.com/tkqasn/p/6524879.html</a></p><p><a href="https://blog.csdn.net/qq_26442553/article/details/82459234">https://blog.csdn.net/qq_26442553/article/details/82459234</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2学习</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="pm2基本命令"><a href="#pm2基本命令" class="headerlink" title="pm2基本命令"></a>pm2基本命令</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动程序</span>pm2 start app.jspm2 start <span class="token function">npm</span> --name pro -- run dev<span class="token comment"># 查看程序</span>pm2 start listpm2 monitpm2 logs<span class="token comment"># 重启</span>pm2 restart allpm2 reload allpm2 restartt <span class="token number">0</span><span class="token comment"># 停止</span>pm2 stop allpm2 stop <span class="token number">0</span><span class="token comment"># 杀死</span>pm2 delete allpm2 delete <span class="token number">0</span><span class="token comment"># 集群</span>pm2 start app.js -i max <span class="token comment"># 根据cpu数目启动线程</span>pm2 start app.js -i <span class="token number">3</span> <span class="token comment"># 启动3个进程</span>pm2 start app.js -x  <span class="token comment"># 使用fork模式启动</span>pm2 start app.json</code></pre><h1 id="日志问题"><a href="#日志问题" class="headerlink" title="日志问题"></a>日志问题</h1><p>日志系统对于任意应用而言，通常都是必不可少的一个辅助功能。pm2的相关文件默认存放于$HOME/.pm2/目录下，其日志主要有两类：</p><p>a. pm2自身的日志，存放于$HOME/.pm2/pm2.log；</p><p>b. pm2所管理的应用的日志，存放于$HOME/.pm2/logs/目录下，标准谁出日志存放于${APP_NAME}_out.log，标准错误日志存放于${APP_NAME}_error.log；</p><p>这里之所以把日志单独说明一下是因为，如果程序开发不严谨，为了调试程序，导致应用产生大量标准输出，使服务器本身记录大量的日志，导致服务磁盘满载问题。一般而言，pm2管理的应用本身都有自己日志系统，所以对于这种不必要的输出内容需禁用日志，重定向到/dev/null。</p><p>与crontab比较，也有类似情况，crontab自身日志，与其管理的应用本身的输出。应用脚本输出一定需要重定向到/dev/null，因为该输出内容会以邮件的形式发送给用户，内容存储在邮件文件，会产生意向不到的结果，或会导致脚本压根不被执行；</p><h1 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h1><pre class="language-bash" data-language="bash"><code class="language-bash">pm2 startupsystemctl <span class="token builtin class-name">enable</span> pm2-root</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://pm2.keymetrics.io/docs/usage/monitoring/">https://pm2.keymetrics.io/docs/usage/monitoring/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile中的CMD与ENTRYPOINT</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/sparkdev/p/8461576.html">https://www.cnblogs.com/sparkdev/p/8461576.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker网络模式</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker的网络模式详解"><a href="#Docker的网络模式详解" class="headerlink" title="Docker的网络模式详解"></a>Docker的网络模式详解</h1><h2 id="1、Docker的四种网络模式"><a href="#1、Docker的四种网络模式" class="headerlink" title="1、Docker的四种网络模式"></a>1、Docker的四种网络模式</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3mf2e5nj30q80g5di8.jpg" alt="img"></p><p>（1）docker四种网络模式如下：</p><ul><li>Bridge contauner 桥接式网络模式</li><li>Host(open) container 开放式网络模式</li><li>Container(join) container 联合挂载式网络模式，是host网络模式的延伸</li><li>None(Close) container 封闭式网络模式</li></ul><p>（2）可以通过docker network命令查看</p><pre class="language-none"><code class="language-none">[root@along ~]# docker network lsNETWORK ID          NAME                DRIVER              SCOPEf23b4899add1        bridge              bridge              local65520497f693        host                host                locala0c5f18e0f04        none                null                local复制代码</code></pre><p>（3）docker run –network 命令可以指定使用网络模式</p><h2 id="2、Bridge-网络模式"><a href="#2、Bridge-网络模式" class="headerlink" title="2、Bridge 网络模式"></a>2、Bridge 网络模式</h2><h4 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h4><p>　　当Docker进程启动时，会<strong>在主机上创建一个名为docker0的虚拟网桥</strong>，此主机上启动的<strong>Docker容器会连接到这个虚拟网桥上，</strong>所以有默认地址172.17.0.0/16的地址。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p><p>　　从<strong>docker0子网中分配一个IP给容器使用</strong>，并设置<strong>docker0的IP地址为容器的默认网关</strong>。在主机上<strong>创建一对虚拟网卡</strong>veth pair设备，Docker将veth pair设备的<strong>一端放在新创建的容器</strong>中，并命名为eth0（容器的网卡），<strong>另一端放在主机中</strong>，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</p><pre class="language-none"><code class="language-none">[root@along ~]# brctl showbridge name    bridge id        STP enabled    interfacesdocker0    8000.024241c45d6e    no复制代码</code></pre><p>　　<strong>bridge模式是docker的默认网络模式</strong>，不写–net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。</p><pre class="language-none"><code class="language-none">[root@along ~]# iptables -t nat -vnLChain POSTROUTING (policy ACCEPT 20 packets, 1238 bytes) pkts bytes target     prot opt in     out     source               destination             0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0&#x2F;16        0.0.0.0&#x2F;0复制代码</code></pre><h4 id="2-2-bridge模式示意图"><a href="#2-2-bridge模式示意图" class="headerlink" title="2.2 bridge模式示意图"></a>2.2 bridge模式示意图</h4><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3o9zcpej30m80pjab7.jpg"></p><h4 id="2-3-演示"><a href="#2-3-演示" class="headerlink" title="2.3 演示"></a>2.3 演示</h4><p>bridge 网络模式；–network不指定，默认也是bridge模式</p><pre class="language-none"><code class="language-none">[root@along ~]# docker run --name b1 -it --network bridge --rm busybox:latest &#x2F; # ifconfig eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02            inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0          inet6 addr: fe80::42:acff:fe11:2&#x2F;64 Scope:Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:12 errors:0 dropped:0 overruns:0 frame:0          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0           RX bytes:1016 (1016.0 B)  TX bytes:508 (508.0 B)lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0          inet6 addr: ::1&#x2F;128 Scope:Host          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)&#x2F; # route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0&#x2F; # ping 10.11.55.5   正常访问宿主机PING 10.11.55.5 (10.11.55.5): 56 data bytes64 bytes from 10.11.55.5: seq&#x3D;0 ttl&#x3D;64 time&#x3D;0.292 ms&#x2F; # exit复制代码</code></pre><h2 id="3、Host-网络模式"><a href="#3、Host-网络模式" class="headerlink" title="3、Host 网络模式"></a>3、Host 网络模式</h2><h4 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h4><p>　　如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是<strong>和宿主机共用一个Network Namespace</strong>。容器将不会虚拟出自己的网卡，配置自己的IP等，而是<strong>使用宿主机的IP和端口</strong>。但是，<strong>容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的</strong>。</p><h4 id="3-2-Host模式示意图"><a href="#3-2-Host模式示意图" class="headerlink" title="3.2 Host模式示意图"></a>3.2 Host模式示意图</h4><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3ox4pnoj30m80oz0tk.jpg"></p><h4 id="3-3-演示"><a href="#3-3-演示" class="headerlink" title="3.3 演示"></a>3.3 演示</h4><pre class="language-none"><code class="language-none">[root@along ~]# docker run --name b2 -it --network host --rm busybox:latest&#x2F; # ifconfig -a   和宿主机一样docker0   Link encap:Ethernet  HWaddr 02:42:41:C4:5D:6E            inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0          inet6 addr: fe80::42:41ff:fec4:5d6e&#x2F;64 Scope:Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:90 errors:0 dropped:0 overruns:0 frame:0          TX packets:26 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0           RX bytes:5903 (5.7 KiB)  TX bytes:2381 (2.3 KiB)eth0      Link encap:Ethernet  HWaddr 00:0C:29:AB:D2:DA            inet addr:10.11.55.5  Bcast:10.11.55.255  Mask:255.255.255.0          inet6 addr: fe80::20c:29ff:feab:d2da&#x2F;64 Scope:Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:3913 errors:0 dropped:0 overruns:0 frame:0          TX packets:3327 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000           RX bytes:354314 (346.0 KiB)  TX bytes:919096 (897.5 KiB)lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0          inet6 addr: ::1&#x2F;128 Scope:Host          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)复制代码</code></pre><h2 id="4、Container-网络模式"><a href="#4、Container-网络模式" class="headerlink" title="4、Container 网络模式"></a>4、Container 网络模式</h2><h4 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h4><p>　　这个模式指定<strong>新创建的容器和已经存在的一个容器共享一个 Network Namespace</strong>，而不是和宿主机共享。<strong>新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围</strong>等。同样，<strong>两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的</strong>。两个容器的进程可以通过 lo 网卡设备通信。</p><h4 id="4-2-Container模式示意图"><a href="#4-2-Container模式示意图" class="headerlink" title="4.2 Container模式示意图"></a>4.2 Container模式示意图</h4><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3pqujjjj30m80pddgw.jpg"></p><h4 id="4-3-演示"><a href="#4-3-演示" class="headerlink" title="4.3 演示"></a>4.3 演示</h4><p>（1）在一个终端，使用bridge网络模式启动容器b1</p><pre class="language-none"><code class="language-none">[root@along ~]# docker run --name b1 -it --rm busybox:latest &#x2F; # ifconfig   b1的ip为172.17.0.2eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02            inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0          inet6 addr: fe80::42:acff:fe11:2&#x2F;64 Scope:Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:6 errors:0 dropped:0 overruns:0 frame:0          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0           RX bytes:508 (508.0 B)  TX bytes:508 (508.0 B)lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0          inet6 addr: ::1&#x2F;128 Scope:Host          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)&#x2F; # echo &quot;hello world b1&quot; &gt; &#x2F;tmp&#x2F;index.html&#x2F; # httpd -h &#x2F;tmp&#x2F;  在b1上启动httpd服务&#x2F; # netstat -nutlActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       tcp        0      0 :::80                   :::*                    LISTEN 复制代码</code></pre><p>（2）在另一个终端使用Container 网络模式创建容器b2</p><pre class="language-none"><code class="language-none">[root@along ~]# docker run --name b2 -it --network container:b1 --rm busybox:latest&#x2F; # ifconfig -a   b2的ip和b1一样eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02            inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0          inet6 addr: fe80::42:acff:fe11:2&#x2F;64 Scope:Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:8 errors:0 dropped:0 overruns:0 frame:0          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0           RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0          inet6 addr: ::1&#x2F;128 Scope:Host          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)&#x2F; # wget -O - -q 127.0.0.1   b1启动的httpd服务，在b2上直接访问hello world b1&#x2F; # ls &#x2F;tmp&#x2F;   但是文件系统并不共享，只共享网络复制代码</code></pre><h2 id="5、None-网络模式"><a href="#5、None-网络模式" class="headerlink" title="5、None 网络模式"></a>5、None 网络模式</h2><h4 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h4><p>　　使用none模式，Docker容器拥有自己的Network Namespace，但是，<strong>并不为Docker容器进行任何网络配置</strong>。也就是说，这个Docker容器没有网卡、IP、路由等信息，只有lo 网络接口。需要我们自己为Docker容器添加网卡、配置IP等。</p><p>　　不参与网络通信，运行于此类容器中的进程仅能访问本地回环接口；仅适用于进程无须网络通信的场景中，例如：备份、进程诊断及各种离线任务等。</p><h4 id="5-2-Node模式示意图"><a href="#5-2-Node模式示意图" class="headerlink" title="5.2 Node模式示意图"></a>5.2 Node模式示意图</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3q084q5j30m80pyq3o.jpg"></h4><h4 id="5-3-演示"><a href="#5-3-演示" class="headerlink" title="5.3 演示"></a>5.3 演示</h4><pre class="language-none"><code class="language-none">[root@along ~]# docker run --name b1 -it --network none --rm busybox:latest &#x2F; # ifconfig lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0          inet6 addr: ::1&#x2F;128 Scope:Host          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1           RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)&#x2F; # route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm版本管理</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>在打包项目的时候，我们都要更新package.json的版本号，接着给给代码添加tag，最后push代码，这样的流程泰国麻烦有什么方法简化。</p><pre class="language-none"><code class="language-none">1. package.json&#96;中修改递增&#96;version2. git add -A3. git commit -m &quot;update version&quot;4. git push5. git tag &lt;tag version&gt;6. git push --tag7. npm publish</code></pre><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>我们可以使用<code>npm version</code>命令，从<a href="https://docs.npmjs.com/cli/version">文档</a>上我们可以看到其依据<a href="https://semver.org/lang/zh-CN/">semver</a>支持了大部分alias：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> version <span class="token punctuation">[</span><span class="token operator">&lt;</span>newversion<span class="token operator">></span> <span class="token operator">|</span> major <span class="token operator">|</span> minor <span class="token operator">|</span> patch <span class="token operator">|</span> premajor <span class="token operator">|</span> preminor <span class="token operator">|</span> prepatch <span class="token operator">|</span> prerelease <span class="token operator">|</span> from-git<span class="token punctuation">]</span></code></pre><blockquote><p>例：初始版本为1.0.0</p><p><code>npm version prepatch</code>  //预备补丁版本号 v1.0.1-0</p><p><code>npm version prerelease</code>  //预发布版本号 v1.0.1-1</p><p><code>npm version patch</code> //补丁版本号 v1.0.2</p><p><code>npm version preminor</code> //预备次版本号 v1.1.0-0</p><p><code>npm version minor</code> //次版本号 v1.1.0</p><p><code>npm version premajor</code> //预备主版本号 v2.0.0-0</p><p><code>npm version major</code> //主版本号 v2.0.0</p></blockquote><p>当在仓库中执行<code>npm version时</code>，会自动提交<code>git commit</code>并打上<code>git tag</code>。</p><blockquote><p>当使用<code>-m</code>参数时，就可以自定义发布版本的信息，其中<code>%s</code>可以用来代替当前版本号</p><pre class="language-none"><code class="language-none">npm version patch -m &quot;upgrade to %s for reasons&quot;复制代码</code></pre></blockquote><p>这样以后版本迭代只需要以下步骤</p><ul><li><code>npm version patch | minor | major | ...etc</code></li><li><code>git push</code></li><li><code>git push --tag</code></li><li><code>npm publish</code></li></ul><p>npm version会同时创建时 <code>v版本号</code> 形式的tag，将tag push上去就可以自动触发构建了。</p><p>也可以简化这步操作，在npm version操作后自动 push</p><p>在 package.json中加入下面的代码，即可实现npm version操作后，自动push代码及tag，也就自动触发了 npm 发布操作。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token property">"postversion"</span><span class="token operator">:</span> <span class="token string">"git push --follow-tags"</span><span class="token punctuation">&#125;</span></code></pre><h1 id="衍生问题"><a href="#衍生问题" class="headerlink" title="衍生问题"></a>衍生问题</h1><blockquote><p>如何发布beta，rc，alpha版本呢？如果发布了，应该如何安装？</p></blockquote><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>首先我们要理解这些版本的含义</p><ul><li>alpha：内部测试版本</li><li>beta： 公开测试版本</li><li>rc： 候选版本（Release Candidate）</li></ul><p>然后将<code>package.json</code>的<code>version</code>改成<code>x.x.x-beta</code></p><p>配合<code>npm publish --tag &lt;tag&gt;</code>，我们可以发布对应的<code>dist-tag</code></p><blockquote><p>举个例子：</p><p>使用<code>npm publish --tag beta</code>发布后，然后就可以使用<code>npm install &lt;pkg&gt;@beta</code>安装对应版本的包。</p></blockquote><p>我们可以通过<code>npm dist-tag ls &lt;pkg&gt;</code>来查看包的<code>dist-tag</code></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    latest<span class="token operator">:</span> <span class="token number">1.0</span>.<span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 这就是npm publish默认发布的tag</span>    beta<span class="token operator">:</span> <span class="token number">1.0</span>.<span class="token number">1</span>-beta<span class="token punctuation">&#125;</span></code></pre><p>当我们的beta版本稳定后，可以使用<code>npm dist-tag add x.x.x-beta latest</code>设置为稳定版本。</p><h1 id="npm-version与npm-dist-tag"><a href="#npm-version与npm-dist-tag" class="headerlink" title="npm version与npm dist-tag"></a>npm version与npm dist-tag</h1><p>关于npm version prerelease的作用我这里不再赘述，你可以查看<a href="https://github.com/liangklfangl/npm-dist-tag/blob/master/NPM%E6%A8%A1%E5%9D%97%E7%9A%84TAG%E7%AE%A1%E7%90%86">这个文章</a>。我只是记录一下关于npm version与npm dist-tag的使用：</p><p>第一步：发布第一个稳定版本</p><pre class="language-none"><code class="language-none">npm publish&#x2F;&#x2F;1.0.0</code></pre><p>第二步：修改文件继续发布第二个版本</p><pre class="language-none"><code class="language-none">git add -A &amp;&amp; git commit -m &quot;c&quot;npm version patchnpm publish&#x2F;&#x2F;1.0.1</code></pre><p>第三步：继续修改文件发布一个prerelease版本</p><pre class="language-none"><code class="language-none">git add -A &amp;&amp; git commit -m &quot;c&quot;npm version prereleasenpm publish --tag -beta&#x2F;&#x2F;版本n-n-n-n@1.0.2-0</code></pre><p>第四步：继续修改发布第二个prerelease版本</p><pre class="language-none"><code class="language-none">git add -A &amp;&amp; git commit -m &quot;c&quot;npm version prereleasenpm publish --tag -beta&#x2F;&#x2F;版本n-n-n-n@1.0.2-1</code></pre><p>第五步：npm info查看我们的版本信息</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> 'n-n-n-n'<span class="token punctuation">,</span>  'dist-tags'<span class="token operator">:</span> <span class="token punctuation">&#123;</span> latest<span class="token operator">:</span> '<span class="token number">1.0</span>.<span class="token number">1</span>'<span class="token punctuation">,</span> '-beta'<span class="token operator">:</span> '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-1</span>' <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  versions<span class="token operator">:</span> <span class="token punctuation">[</span> '<span class="token number">1.0</span>.<span class="token number">0</span>'<span class="token punctuation">,</span> '<span class="token number">1.0</span>.<span class="token number">1</span>'<span class="token punctuation">,</span> '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-0</span>'<span class="token punctuation">,</span> '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-1</span>' <span class="token punctuation">]</span><span class="token punctuation">,</span>  maintainers<span class="token operator">:</span> <span class="token punctuation">[</span> 'liangklfang &lt;liangklfang@<span class="token number">163</span>.com>' <span class="token punctuation">]</span><span class="token punctuation">,</span>  time<span class="token operator">:</span>   <span class="token punctuation">&#123;</span> modified<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">56</span>.755Z'<span class="token punctuation">,</span>     created<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">23</span>.605Z'<span class="token punctuation">,</span>     '<span class="token number">1.0</span>.<span class="token number">0</span>'<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">23</span>.605Z'<span class="token punctuation">,</span>     '<span class="token number">1.0</span>.<span class="token number">1</span>'<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">24</span>.916Z'<span class="token punctuation">,</span>     '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-0</span>'<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">23</span>.354Z'<span class="token punctuation">,</span>     '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-1</span>'<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">56</span>.755Z' <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  homepage<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//github.com/liangklfang/n#readme',</span>  repository<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> 'git'<span class="token punctuation">,</span> url<span class="token operator">:</span> 'git+https<span class="token operator">:</span><span class="token comment">//github.com/liangklfang/n.git' &#125;,</span>  bugs<span class="token operator">:</span> <span class="token punctuation">&#123;</span> url<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//github.com/liangklfang/n/issues' &#125;,</span>  license<span class="token operator">:</span> 'ISC'<span class="token punctuation">,</span>  readmeFilename<span class="token operator">:</span> 'README.md'<span class="token punctuation">,</span>  version<span class="token operator">:</span> '<span class="token number">1.0</span>.<span class="token number">1</span>'<span class="token punctuation">,</span>  description<span class="token operator">:</span> ''<span class="token punctuation">,</span>  main<span class="token operator">:</span> 'index.js'<span class="token punctuation">,</span>  scripts<span class="token operator">:</span> <span class="token punctuation">&#123;</span> test<span class="token operator">:</span> 'echo <span class="token string">"Error: no test specified"</span> &amp;&amp; exit <span class="token number">1</span>' <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  author<span class="token operator">:</span> ''<span class="token punctuation">,</span>  gitHead<span class="token operator">:</span> '8123b8addf6fed83c4c5edead1dc2614241a4479'<span class="token punctuation">,</span>  dist<span class="token operator">:</span>   <span class="token punctuation">&#123;</span> shasum<span class="token operator">:</span> 'a60d8b02222e4cae74e91b69b316a5b173d2ac9d'<span class="token punctuation">,</span>     tarball<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.1.tgz' &#125;,</span>  directories<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p>我们只要注意下面者两个部分：</p><pre class="language-none"><code class="language-none">&#39;dist-tags&#39;: &#123; latest: &#39;1.0.1&#39;, &#39;-beta&#39;: &#39;1.0.2-1&#39; &#125;, versions: [ &#39;1.0.0&#39;, &#39;1.0.1&#39;, &#39;1.0.2-0&#39;, &#39;1.0.2-1&#39; ],</code></pre><p>其中最新的稳定版本和最新的beta版本可以在dist-tags中看到，而versions数组中存储的是所有的版本。</p><p>第六步：npm dist-tag命令</p><pre class="language-none"><code class="language-none">npm dist-tag ls n-n-n-n</code></pre><p>即npm dist-tag获取到所有的最新的版本，包括prerelease与稳定版本，得到下面结果：</p><pre class="language-none"><code class="language-none">-beta: 1.0.2-1latest: 1.0.1</code></pre><p>第七步：当我们的prerelease版本已经稳定了，重新设置为稳定版本</p><pre class="language-none"><code class="language-none">npm dist-tag add n-n-n-n@1.0.2-1 latest</code></pre><p>此时你通过npm info查看可以知道：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> 'n-n-n-n'<span class="token punctuation">,</span>  'dist-tags'<span class="token operator">:</span> <span class="token punctuation">&#123;</span> latest<span class="token operator">:</span> '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-1</span>'<span class="token punctuation">,</span> '-beta'<span class="token operator">:</span> '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-1</span>' <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  versions<span class="token operator">:</span> <span class="token punctuation">[</span> '<span class="token number">1.0</span>.<span class="token number">0</span>'<span class="token punctuation">,</span> '<span class="token number">1.0</span>.<span class="token number">1</span>'<span class="token punctuation">,</span> '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-0</span>'<span class="token punctuation">,</span> '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-1</span>' <span class="token punctuation">]</span><span class="token punctuation">,</span>  maintainers<span class="token operator">:</span> <span class="token punctuation">[</span> 'liangklfang &lt;liangklfang@<span class="token number">163</span>.com>' <span class="token punctuation">]</span><span class="token punctuation">,</span>  time<span class="token operator">:</span>   <span class="token punctuation">&#123;</span> modified<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">55</span>.800Z'<span class="token punctuation">,</span>     created<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">23</span>.605Z'<span class="token punctuation">,</span>     '<span class="token number">1.0</span>.<span class="token number">0</span>'<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">23</span>.605Z'<span class="token punctuation">,</span>     '<span class="token number">1.0</span>.<span class="token number">1</span>'<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">24</span>.916Z'<span class="token punctuation">,</span>     '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-0</span>'<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">23</span>.354Z'<span class="token punctuation">,</span>     '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-1</span>'<span class="token operator">:</span> '<span class="token number">2017</span><span class="token number">-04</span>-01T12<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">56</span>.755Z' <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  homepage<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//github.com/liangklfang/n#readme',</span>  repository<span class="token operator">:</span> <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> 'git'<span class="token punctuation">,</span> url<span class="token operator">:</span> 'git+https<span class="token operator">:</span><span class="token comment">//github.com/liangklfang/n.git' &#125;,</span>  bugs<span class="token operator">:</span> <span class="token punctuation">&#123;</span> url<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//github.com/liangklfang/n/issues' &#125;,</span>  license<span class="token operator">:</span> 'ISC'<span class="token punctuation">,</span>  readmeFilename<span class="token operator">:</span> 'README.md'<span class="token punctuation">,</span>  version<span class="token operator">:</span> '<span class="token number">1.0</span>.<span class="token number">2</span><span class="token number">-1</span>'<span class="token punctuation">,</span>  description<span class="token operator">:</span> ''<span class="token punctuation">,</span>  main<span class="token operator">:</span> 'index.js'<span class="token punctuation">,</span>  scripts<span class="token operator">:</span> <span class="token punctuation">&#123;</span> test<span class="token operator">:</span> 'echo <span class="token string">"Error: no test specified"</span> &amp;&amp; exit <span class="token number">1</span>' <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  author<span class="token operator">:</span> ''<span class="token punctuation">,</span>  gitHead<span class="token operator">:</span> '03189d2cc61604aa05f4b93e429d3caa3b637f8c'<span class="token punctuation">,</span>  dist<span class="token operator">:</span>   <span class="token punctuation">&#123;</span> shasum<span class="token operator">:</span> '41ea170a6b155c8d61658cd4c309f0d5d1b12ced'<span class="token punctuation">,</span>     tarball<span class="token operator">:</span> 'https<span class="token operator">:</span><span class="token comment">//registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz' &#125;,</span>  directories<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></code></pre><p>主要关注如下:</p><pre class="language-none"><code class="language-none">&#39;dist-tags&#39;: &#123; latest: &#39;1.0.2-1&#39;, &#39;-beta&#39;: &#39;1.0.2-1&#39; &#125;, versions: [ &#39;1.0.0&#39;, &#39;1.0.1&#39;, &#39;1.0.2-0&#39;, &#39;1.0.2-1&#39; ]</code></pre><p>此时latest版本已经是prerelease版本”1.0.2-1”了！此时用户如果直接运行npm install就会安装我们的prerelease版本了，因为版本已经更新了！</p><p>当然，我们的npm publish可以有很多tag的，比如上面是beta，也可以是stable, dev, canary等，比如下面你继续运行：</p><pre class="language-none"><code class="language-none">git add -A &amp;&amp; git commit -m &quot;c&quot;npm version prereleasenpm publish --tag -dev</code></pre><p>此时你运行npm info就会得到下面的信息：</p><pre class="language-none"><code class="language-none">&#123; name: &#39;n-n-n-n&#39;,  &#39;dist-tags&#39;: &#123; latest: &#39;1.0.2-1&#39;, &#39;-beta&#39;: &#39;1.0.2-1&#39;, &#39;-dev&#39;: &#39;1.0.2-2&#39; &#125;,  versions: [ &#39;1.0.0&#39;, &#39;1.0.1&#39;, &#39;1.0.2-0&#39;, &#39;1.0.2-1&#39;, &#39;1.0.2-2&#39; ],  maintainers: [ &#39;liangklfang &lt;liangklfang@163.com&gt;&#39; ],  time:   &#123; modified: &#39;2017-04-01T13:01:17.106Z&#39;,     created: &#39;2017-04-01T12:15:23.605Z&#39;,     &#39;1.0.0&#39;: &#39;2017-04-01T12:15:23.605Z&#39;,     &#39;1.0.1&#39;: &#39;2017-04-01T12:16:24.916Z&#39;,     &#39;1.0.2-0&#39;: &#39;2017-04-01T12:17:23.354Z&#39;,     &#39;1.0.2-1&#39;: &#39;2017-04-01T12:17:56.755Z&#39;,     &#39;1.0.2-2&#39;: &#39;2017-04-01T13:01:17.106Z&#39; &#125;,  homepage: &#39;https:&#x2F;&#x2F;github.com&#x2F;liangklfang&#x2F;n#readme&#39;,  repository: &#123; type: &#39;git&#39;, url: &#39;git+https:&#x2F;&#x2F;github.com&#x2F;liangklfang&#x2F;n.git&#39; &#125;,  bugs: &#123; url: &#39;https:&#x2F;&#x2F;github.com&#x2F;liangklfang&#x2F;n&#x2F;issues&#39; &#125;,  license: &#39;ISC&#39;,  readmeFilename: &#39;README.md&#39;,  version: &#39;1.0.2-1&#39;,  description: &#39;&#39;,  main: &#39;index.js&#39;,  scripts: &#123; test: &#39;echo &quot;Error: no test specified&quot; &amp;&amp; exit 1&#39; &#125;,  author: &#39;&#39;,  gitHead: &#39;03189d2cc61604aa05f4b93e429d3caa3b637f8c&#39;,  dist:   &#123; shasum: &#39;41ea170a6b155c8d61658cd4c309f0d5d1b12ced&#39;,     tarball: &#39;https:&#x2F;&#x2F;registry.npmjs.org&#x2F;n-n-n-n&#x2F;-&#x2F;n-n-n-n-1.0.2-1.tgz&#39; &#125;,  directories: &#123;&#125; &#125;</code></pre><p>重点关注如下内容</p><pre class="language-none"><code class="language-none">&#39;dist-tags&#39;: &#123; latest: &#39;1.0.2-1&#39;, &#39;-beta&#39;: &#39;1.0.2-1&#39;, &#39;-dev&#39;: &#39;1.0.2-2&#39; &#125;, versions: [ &#39;1.0.0&#39;, &#39;1.0.1&#39;, &#39;1.0.2-0&#39;, &#39;1.0.2-1&#39;, &#39;1.0.2-2&#39; ],</code></pre><p>此时你会看到-beta版本最新是1.0.2-1，而-dev版本最新是1.0.2-2</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://github.com/liangklfangl/npm-dist-tag">https://github.com/liangklfangl/npm-dist-tag</a></p><p><a href="https://juejin.im/post/5b624d42f265da0fa1223ffa">https://juejin.im/post/5b624d42f265da0fa1223ffa</a></p><p><a href="https://docs.npmjs.com/cli/version">https://docs.npmjs.com/cli/version</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中and和or用法</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>在<a href="http://lib.csdn.net/base/python">Python</a> 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。</p><p>（类似C++里面的&amp;&amp;和||的短路求值）</p><p>（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）</p><h1 id="and实例："><a href="#and实例：" class="headerlink" title="and实例："></a>and实例：</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span> <span class="token keyword">and</span> <span class="token string">'b'</span><span class="token string">'b'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">''</span> <span class="token keyword">and</span> <span class="token string">'b'</span><span class="token string">''</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span> <span class="token keyword">and</span> <span class="token string">'b'</span> <span class="token keyword">and</span> <span class="token string">'c'</span><span class="token string">'c'</span><span class="token number">12345</span></code></pre><p>从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。</p><h1 id="or实例："><a href="#or实例：" class="headerlink" title="or实例："></a>or实例：</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'a'</span> <span class="token keyword">or</span> <span class="token string">'b'</span><span class="token string">'a'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">''</span> <span class="token keyword">or</span> <span class="token string">'b'</span><span class="token string">'b'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">''</span> <span class="token keyword">or</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">or</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token number">12345</span></code></pre><p>从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。</p><h1 id="and-or搭配："><a href="#and-or搭配：" class="headerlink" title="and-or搭配："></a>and-or搭配：</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">"betabin"</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">"python"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">and</span> a <span class="token keyword">or</span> b<span class="token string">'betabin'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> a <span class="token keyword">or</span> b<span class="token string">'python'</span><span class="token number">12345</span></code></pre><p>看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。</p><p>如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">"betabin"</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">and</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">''</span><span class="token number">123</span></code></pre><p>就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。</p><p>这个and-or技巧主要在lambda中使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用jenv对java多版本管理</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<ul><li>配置JDK环境变量</li></ul><p>打开 vim ~/.bash_profile 文件 进行添加</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_8_HOME</span><span class="token operator">=</span>/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_7_HOME</span><span class="token operator">=</span>/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home<span class="token comment"># 默认激活 jdk8</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_8_HOME</span></code></pre><p>编辑完成，重新加载 .bash_profile</p><pre class="language-none"><code class="language-none">$ source ~&#x2F;.bash_profile</code></pre><h4 id="jEnv安装"><a href="#jEnv安装" class="headerlink" title="jEnv安装"></a>jEnv安装</h4><ul><li>安装</li></ul><pre class="language-none"><code class="language-none">$ brew install jenv</code></pre><ul><li>配置</li></ul><p>安装了zsh，配置如下</p><pre class="language-none"><code class="language-none">$ echo &#39;export PATH&#x3D;&quot;$HOME&#x2F;.jenv&#x2F;bin:$PATH&quot;&#39; &gt;&gt; ~&#x2F;.zshrc$ echo &#39;eval &quot;$(jenv init -)&quot;&#39; &gt;&gt; ~&#x2F;.zshrc</code></pre><p>如果是默认的bash</p><pre class="language-none"><code class="language-none">$ echo &#39;export PATH&#x3D;&quot;$HOME&#x2F;.jenv&#x2F;bin:$PATH&quot;&#39; &gt;&gt; ~&#x2F;.bash_profile$ echo &#39;eval &quot;$(jenv init -)&quot;&#39; &gt;&gt; ~&#x2F;.bash_profilec</code></pre><h4 id="jEnv配置JDK"><a href="#jEnv配置JDK" class="headerlink" title="jEnv配置JDK"></a>jEnv配置JDK</h4><p>查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ jenv versions  system  <span class="token number">1.7</span>* <span class="token number">1.7</span>.0.80 <span class="token punctuation">(</span>set by /Users/gulj/.java-version<span class="token punctuation">)</span>  <span class="token number">1.8</span>  <span class="token number">1.8</span>.0.112  oracle64-1.7.0.80  oracle64-1.8.0.112</code></pre><p>重启下terminal，为jEnv添加java版本</p><pre class="language-none"><code class="language-none">添加jdk7$ jenv add &#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.7.0_80.jdk&#x2F;Contents&#x2F;Home添加jdk8$ jenv add &#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_112.jdk&#x2F;Contents&#x2F;Home</code></pre><blockquote><p>添加完jdk7和jdk8之后，再执行 <strong>jenv versions</strong> 命令就会看到我们添加的jdk</p></blockquote><h4 id="jEnv常用命令"><a href="#jEnv常用命令" class="headerlink" title="jEnv常用命令"></a>jEnv常用命令</h4><ul><li>移除指定版本jdk</li></ul><pre class="language-none"><code class="language-none">$ jenv remove 1.8.0.111</code></pre><ul><li>选择一个jdk版本</li></ul><pre class="language-none"><code class="language-none">$ jenv local 1.8.0.111</code></pre><ul><li>设置默认的jdk版本</li></ul><pre class="language-none"><code class="language-none">$ jenv global 1.8.0.111</code></pre><ul><li>查看当前版本jdk的路径</li></ul><pre class="language-none"><code class="language-none">jenv which java</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-tree-walker学习</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="react-tree-walker"><a href="#react-tree-walker" class="headerlink" title="react-tree-walker"></a><code>react-tree-walker</code></h1><p>这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> reactTreeWalker <span class="token keyword">from</span> <span class="token string">'react-tree-walker'</span><span class="token keyword">class</span> <span class="token class-name">DataFetcher</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Supports promises! You could call an API for example to fetch some</span>    <span class="token comment">// data, or do whatever "bootstrapping" you desire.</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span>DataFetcher id<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>DataFetcher id<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>DataFetcher id<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token operator">></span>        <span class="token operator">&lt;</span>DataFetcher id<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>DataFetcher<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>DataFetcher<span class="token operator">></span>    <span class="token operator">&lt;</span>DataFetcher id<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">// You provide this! See the API docs below for full details.</span><span class="token keyword">function</span> <span class="token function">visitor</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> instance<span class="token punctuation">.</span>getData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      values<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token comment">// Return "false" to indicate that we do not want to visit "3"'s children,</span>      <span class="token comment">// therefore we do not expect "4" to make it into our values array.</span>      <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token number">3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">reactTreeWalker</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> visitor<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 5];</span>    <span class="token comment">// Now is a good time to call React's renderToString whilst exposing</span>    <span class="token comment">// whatever values you built up to your app.</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// since v3.0.0 you need to do your own error handling!</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="react-ssr-prepass"><a href="#react-ssr-prepass" class="headerlink" title="react-ssr-prepass"></a><code>react-ssr-prepass</code></h1><p>这个项目还在维护，是一个不错的选择</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> react-ssr-prepass<span class="token comment"># or</span><span class="token function">npm</span> <span class="token function">install</span> --save react-ssr-prepass</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createElement <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> renderToString <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom/server'</span><span class="token keyword">import</span> ssrPrepass <span class="token keyword">from</span> <span class="token string">'react-ssr-prepass'</span><span class="token keyword">const</span> <span class="token function-variable function">renderApp</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token parameter">App</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">ssrPrepass</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">renderToString</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">ssrPrepass</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>type <span class="token operator">===</span> SomeData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>fetchData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weboack性能优化笔记</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5b652b036fb9a04fa01d616b">https://juejin.im/post/5b652b036fb9a04fa01d616b</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lodash按需加载</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>lodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！</p><p>对于这个问题，有几种方案可供选择。</p><p><strong>一.引入单个函数</strong></p><p>　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如</p><p>let _trim= require(‘lodash/trim’) 或者 import trim from ‘lodash/trim’ </p><p>　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用</p><p>let _trim= require(‘lodash.trim’) 或者 import trim from ‘lodash.trim’ </p><p>trim(‘ 123123 ‘)</p><p><strong>二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化</strong></p><p>　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。</p><p>　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash</p><p>　　2）webpack.conf.js中</p><p>　　var LodashModuleReplacementPlugin = require(‘lodash-webpack-plugin’)</p><p>　　plugins: [ new LodashModuleReplacementPlugin()]</p><p>3）.babelrc中配置 “plugins”: [“transform-runtime”,”transform-vue-jsx”,”lodash”]</p><p>　　或者在webpack.conf.js的rules配置</p><pre class="language-none"><code class="language-none">&#123;  test: &#x2F;\.(js|jsx)$&#x2F;,  loader: &#39;babel-loader&#39;,  exclude: &#x2F;node_modules&#x2F;,  include: [resolve(&#39;src&#39;), resolve(&#39;test&#39;)]  options: &#123;plugins: [&#39;lodash&#39;]&#125;&#125;</code></pre><p><strong>三.lodash-es结合tree-shaking</strong></p><p>lodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。</p><p>import {isEmpty,forIn, cloneDeep} from ‘lodash-es’</p><p>tree-shaking的作用，即移除上下文中未引用的代码（dead code）</p><p>只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作</p><p>如何使用tree-shaking？</p><p>1）.确保代码是es6格式,即 export，import</p><p>2）.package.json中，设置sideEffects</p><p>3）.确保tree-shaking的函数没有副作用</p><p>4）.babelrc中设置presets [[“env”, { “modules”: false }]] 禁止转换模块，交由webpack进行模块化处理</p><p>5）.结合uglifyjs-webpack-plugin</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babel配置</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="Babel6"><a href="#Babel6" class="headerlink" title="Babel6"></a>Babel6</h1><p>Babel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用<code>babel-preset-env</code>，不需要写<code>babel-preset-esxxxx</code>了，但是<code>babel-preset-stage-x</code>还是要自己去加的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D babel-cli babel-preset-env</code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Babel6的配置文件是<code>.babelrc</code></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token comment">//https://juejin.im/post/5a79adeef265da4e93116430</span><span class="token punctuation">&#125;</span></code></pre><h1 id="Babel7"><a href="#Babel7" class="headerlink" title="Babel7"></a>Babel7</h1><p>Babel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了<code>babel-preset-esxxxx</code>和<code>babel-preset-stage-x</code>，后者的原因是提案一直在变化。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env</code></pre><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><p>Babel7有两种配置文件，一个是<code>.babelrc</code>，是局部的，另外一个是<code>babel.config.js</code>是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> babel </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react的children</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>React的核心为组件。你可以像嵌套HTML标签一样嵌套使用这些组件，这使得编写JSX更加容易因为它类似于标记语言。</p><p>当我刚开始学习React时，当时我认为“使用 <code>props.children</code> 就这么回事，我知道它的一切”。我错了。。</p><p>因为我们使用的事JavaScript，我们会改变children。我们能够给它们发送特殊的属性，以此来决定它们是否进行渲染。让我们来探究一下React中children的作用。</p><h2 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h2><p>我们有一个组件 <code>&lt;Grid /&gt;</code> 包含了几个组件 <code>&lt;Row /&gt;</code> 。你可能会这么使用它：</p><pre class="language-react" data-language="react"><code class="language-react">&lt;Grid&gt;  &lt;Row &#x2F;&gt;  &lt;Row &#x2F;&gt;  &lt;Row &#x2F;&gt;&lt;&#x2F;Grid&gt;</code></pre><p>这三个 <code>Row</code> 组件都成为了 <code>Grid</code> 的 <code>props.children</code> 。使用一个表达式容器，父组件就能够渲染它们的子组件：</p><pre class="language-react" data-language="react"><code class="language-react">class Grid extends React.Component &#123;  render() &#123;    return &lt;div&gt;&#123;this.props.children&#125;&lt;&#x2F;div&gt;  &#125;&#125;</code></pre><p>父组件也能够决定不渲染任何的子组件或者在渲染之前对它们进行操作。例如，这个 <code>&lt;Fullstop /&gt;</code> 组件就没有渲染它的子组件：</p><pre class="language-react" data-language="react"><code class="language-react">class Fullstop extends React.Component &#123;  render() &#123;    return &lt;h1&gt;Hello world!&lt;&#x2F;h1&gt;  &#125;&#125;</code></pre><p>不管你将什么子组件传递给这个组件，它都只会显示“Hello world!”</p><h2 id="任何东西都能是一个child"><a href="#任何东西都能是一个child" class="headerlink" title="任何东西都能是一个child"></a>任何东西都能是一个child</h2><p>React中的Children不一定是组件，它们可以使任何东西。例如，我们能够将上面的文字作为children传递我们的 <code>&lt;Grid /&gt;</code> 组件。</p><pre class="language-react" data-language="react"><code class="language-react">&lt;Grid&gt;Hello world!&lt;&#x2F;Grid&gt;</code></pre><p>JSX将会自动删除每行开头和结尾的空格，以及空行。它还会把字符串中间的空白行压缩为一个空格。</p><p>这意味着以下的这些例子都会渲染出一样的情况：</p><pre class="language-react" data-language="react"><code class="language-react">&lt;Grid&gt;Hello world!&lt;&#x2F;Grid&gt;&lt;Grid&gt;  Hello world!&lt;&#x2F;Grid&gt;&lt;Grid&gt;  Hello  world!&lt;&#x2F;Grid&gt;&lt;Grid&gt;  Hello world!&lt;&#x2F;Grid&gt;</code></pre><p>你也可以将多种类型的children完美的结合在一起：</p><pre class="language-react" data-language="react"><code class="language-react">&lt;Grid&gt;  Here is a row:  &lt;Row &#x2F;&gt;  Here is another row:  &lt;Row &#x2F;&gt;&lt;&#x2F;Grid&gt;</code></pre><h2 id="child-的功能"><a href="#child-的功能" class="headerlink" title="child 的功能"></a>child 的功能</h2><p>我们能够传递任何的JavaScript表达式作为children，包括函数。</p><p>为了说明这种情况，以下是一个组件，它将执行一个传递过来的作为child的函数：</p><pre class="language-react" data-language="react"><code class="language-react">class Executioner extends React.Component &#123;  render() &#123;    &#x2F;&#x2F; See how we&#39;re calling the child as a function?    &#x2F;&#x2F;                        ↓    return this.props.children()  &#125;&#125;</code></pre><p>你会像这样的使用这个组件</p><pre class="language-react" data-language="react"><code class="language-react">&lt;Executioner&gt;  &#123;() &#x3D;&gt; &lt;h1&gt;Hello World!&lt;&#x2F;h1&gt;&#125;&lt;&#x2F;Executioner&gt;</code></pre><p>当然，这个例子并没什么用，只是展示了这个想法。</p><p>假设你想从服务器获取一些数据。你能使用多种方法实现，像这种将函数作为child的方法也是可行的。</p><pre class="language-react" data-language="react"><code class="language-react">&lt;Fetch url&#x3D;&quot;api.myself.com&quot;&gt;  &#123;(result) &#x3D;&gt; &lt;p&gt;&#123;result&#125;&lt;&#x2F;p&gt;&#125;&lt;&#x2F;Fetch&gt;</code></pre><p>不要担心这些超出了你的脑容量。我想要的是当你以后遇到这种情况时不再惊讶。有了children什么事都会发生。</p><h2 id="操作children"><a href="#操作children" class="headerlink" title="操作children"></a>操作children</h2><p>如果你看过React的文档你就会说“children是一个不透明的数据结构”。从本质上来讲， <code>props.children</code> 可以使任何的类型，比如数组、函数、对象等等。</p><p>React提供了一系列的函数助手来使得操作children更加方便。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>两个最显眼的函数助手就是 <code>React.Children.map</code> 以及 <code>React.Children.forEach</code> 。它们在对应数组的情况下能起作用，除此之外，当函数、对象或者任何东西作为children传递时，它们也会起作用。</p><pre class="language-react" data-language="react"><code class="language-react">class IgnoreFirstChild extends React.Component &#123;  render() &#123;    const children &#x3D; this.props.children    return (      &lt;div&gt;        &#123;React.Children.map(children, (child, i) &#x3D;&gt; &#123;          &#x2F;&#x2F; Ignore the first child          if (i &lt; 1) return          return child        &#125;)&#125;      &lt;&#x2F;div&gt;    )  &#125;&#125;</code></pre><p><code>&lt;IgnoreFirstChild /&gt;</code> 组件在这里会遍历所有的children，忽略第一个child然后返回其他的。</p><pre class="language-react" data-language="react"><code class="language-react">&lt;IgnoreFirstChild&gt;  &lt;h1&gt;First&lt;&#x2F;h1&gt;  &lt;h1&gt;Second&lt;&#x2F;h1&gt; &#x2F;&#x2F; &lt;- Only this is rendered&lt;&#x2F;IgnoreFirstChild&gt;</code></pre><p>在这种情况下，我们也可以使用 <code>this.props.children.map</code> 的方法。但要是有人讲一个函数作为child传递过来将会发生什么呢？<code>this.props.children</code> 会是一个函数而不是一个数组，接着我们就会产生一个error！</p><p>然而使用 <code>React.Children.map</code> 函数，无论什么都不会报错。</p><pre class="language-react" data-language="react"><code class="language-react">&lt;IgnoreFirstChild&gt;  &#123;() &#x3D;&gt; &lt;h1&gt;First&lt;&#x2F;h1&gt;&#125; &#x2F;&#x2F; &lt;- Ignored ?&lt;&#x2F;IgnoreFirstChild&gt;</code></pre><h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><p>因为<code>this.props.children</code> 可以是任何类型的，检查一个组件有多少个children是非常困难的。天真的使用 <code>this.props.children.length</code> ，当传递了字符串或者函数时程序便会中断。假设我们有个child：<code>&quot;Hello World!&quot;</code> ，但是使用 <code>.length</code> 的方法将会显示为12。</p><p>这就是为什么我们有 <code>React.Children.count</code> 方法的原因</p><pre class="language-react" data-language="react"><code class="language-react">class ChildrenCounter extends React.Component &#123;  render() &#123;    return &lt;p&gt;React.Children.count(this.props.children)&lt;&#x2F;p&gt;  &#125;&#125;</code></pre><p>无论时什么类型它都会返回children的数量</p><pre class="language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; Renders &quot;1&quot;&lt;ChildrenCounter&gt;  Second!&lt;&#x2F;ChildrenCounter&gt;&#x2F;&#x2F; Renders &quot;2&quot;&lt;ChildrenCounter&gt;  &lt;p&gt;First&lt;&#x2F;p&gt;  &lt;ChildComponent &#x2F;&gt;&lt;&#x2F;ChildrenCounter&gt;&#x2F;&#x2F; Renders &quot;3&quot;&lt;ChildrenCounter&gt;  &#123;() &#x3D;&gt; &lt;h1&gt;First!&lt;&#x2F;h1&gt;&#125;  Second!  &lt;p&gt;Third!&lt;&#x2F;p&gt;&lt;&#x2F;ChildrenCounter&gt;</code></pre><h3 id="转换为数组"><a href="#转换为数组" class="headerlink" title="转换为数组"></a>转换为数组</h3><p>如果以上的方法你都不适合，你能将children转换为数组通过 <code>React.Children.toArray</code> 方法。如果你需要对它们进行排序，这个方法是非常有用的。</p><pre class="language-react" data-language="react"><code class="language-react">class Sort extends React.Component &#123;  render() &#123;    const children &#x3D; React.Children.toArray(this.props.children)    &#x2F;&#x2F; Sort and render the children    return &lt;p&gt;&#123;children.sort().join(&#39; &#39;)&#125;&lt;&#x2F;p&gt;  &#125;&#125;&lt;Sort&gt;  &#x2F;&#x2F; We use expression containers to make sure our strings  &#x2F;&#x2F; are passed as three children, not as one string  &#123;&#39;bananas&#39;&#125;&#123;&#39;oranges&#39;&#125;&#123;&#39;apples&#39;&#125;&lt;&#x2F;Sort&gt;</code></pre><p>上例会渲染为三个排好序的字符串。</p><h3 id="执行单一child"><a href="#执行单一child" class="headerlink" title="执行单一child"></a>执行单一child</h3><p>如果你回过来想刚才的 <code>&lt;Executioner /&gt;</code> 组件，它只能在传递单一child的情况下使用，而且child必须为函数。</p><pre class="language-react" data-language="react"><code class="language-react">class Executioner extends React.Component &#123;  render() &#123;    return this.props.children()  &#125;&#125;</code></pre><p>我们可以试着去强制执行 <code>propTypes</code> ，就像下面这样</p><pre class="language-js" data-language="js"><code class="language-js">Executioner<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  children<span class="token operator">:</span> React<span class="token punctuation">.</span>PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>这会使控制台打印出一条消息，部分的开发者将会把它忽视。相反的，我们可以使用在 <code>render</code> 里面使用 <code>React.Children.only</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Executioner</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样只会返回一个child。如果不止一个child，它就会抛出错误，让整个程序陷入中断——完美的避开了试图破坏组件的懒惰的开发者。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-cloneElement</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>react提供了一个克隆 API：</p><pre class="language-js" data-language="js"><code class="language-js">React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>  element<span class="token punctuation">,</span>  <span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token operator">...</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>官方定义：</p><pre class="language-none"><code class="language-none">Clone and return a new React element using element as the starting point. The resulting element will have the original element&#39;s props with the new props merged in shallowly. New children will replace existing children. key and ref from the original element will be preserved.</code></pre><p>下面实现一个demo，通过 React.cloneElement 向子组件传递 state 及 function，代码如下：</p><pre class="language-react" data-language="react"><code class="language-react">import React, &#123; Component &#125; from &#39;react&#39;;import ReactDOM from &#39;react-dom&#39;;class MyContainer extends Component &#123;    constructor(props) &#123;        super(props)        this.state &#x3D; &#123;            count: 1        &#125;        this.handleClick &#x3D; this.handleClick.bind(this);    &#125;    handleClick() &#123;        this.state.count++;        this.setState(&#123;            count: this.state.count++        &#125;)        console.log(this.state)    &#125;    render() &#123;        const childrenWithProps &#x3D; React.Children.map(this.props.children, child &#x3D;&gt; React.cloneElement(child,             &#123;                parentState: this.state.count,                handleClick: this.handleClick            &#125;        ));        return (            &lt;div style&#x3D;&#123;&#123;border:&quot;1px solid blue&quot;&#125;&#125;&gt;                &lt;span&gt;父容器:&lt;&#x2F;span&gt;                &#123; childrenWithProps &#125;            &lt;&#x2F;div&gt;        )    &#125;&#125;class MySub extends Component &#123;    constructor(props) &#123;        super(props)        this.state &#x3D; &#123;            flag: false        &#125;    &#125;    render() &#123;        return (            &lt;div style&#x3D;&#123;&#123;margin: &quot;15px&quot;, border: &quot;1px solid red&quot;&#125;&#125;&gt;                子元素:&#123;this.props.subInfo&#125;                &lt;br&#x2F;&gt;                父组件属性count值: &#123; this.props.parentState &#125;                &lt;br&#x2F;&gt;                &lt;span onClick&#x3D;&#123; () &#x3D;&gt; this.props.handleClick() &#125;                       style&#x3D;&#123;&#123;display:&quot;inline-block&quot;,padding: &quot;3px 5px&quot;, color:&quot;#ffffff&quot;, background: &quot;green&quot;, borderRadius: &quot;3px&quot;, cursor: &quot;pointer&quot;&#125;&#125;                 &gt;click me&lt;&#x2F;span&gt;            &lt;&#x2F;div&gt;        )    &#125;&#125;ReactDOM.render (    (        &lt;MyContainer&gt;            &lt;MySub subInfo&#x3D;&#123;&quot;1&quot;&#125;&#x2F;&gt;            &lt;MySub subInfo&#x3D;&#123;&quot;2&quot;&#125;&#x2F;&gt;        &lt;&#x2F;MyContainer&gt;    )    , document.getElementById(&#39;content&#39;))    </code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>react drag components example...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/build/main.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php5环境搭建</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> epel-releaseyum <span class="token function">install</span> nginx</code></pre><h1 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h1><p>remi源可以获取更高的版本，php-fpm是要启动的</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpmyum <span class="token function">install</span> --enablerepo<span class="token operator">=</span>remi --enablerepo<span class="token operator">=</span>remi-php56 php php-fpmyum <span class="token function">install</span> --enablerepo<span class="token operator">=</span>remi --enablerepo<span class="token operator">=</span>remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis</code></pre><h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  www<span class="token punctuation">.</span>test<span class="token punctuation">.</span>com test<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">root</span>     <span class="token operator">/</span>data<span class="token operator">/</span>www<span class="token operator">/</span>Public<span class="token punctuation">;</span>    <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token operator">?</span><span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token punctuation">&#123;</span>        <span class="token keyword">fastcgi_connect_timeout</span> <span class="token number">20</span>s<span class="token punctuation">;</span>     <span class="token comment"># default of 60s is just too long</span>        <span class="token keyword">fastcgi_read_timeout</span> <span class="token number">20</span>s<span class="token punctuation">;</span>       <span class="token comment"># default of 60s is just too long</span>        <span class="token keyword">include</span> fastcgi_params<span class="token punctuation">;</span>        <span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>        <span class="token keyword">fastcgi_pass</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">;</span>    <span class="token comment"># assumes you are running php-fpm locally on port 9000</span>        <span class="token keyword">fastcgi_param</span>  PHP_VALUE  <span class="token string">"open_basedir=/data/www/:/data/www/Data:/tmp/"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="开启php的日志"><a href="#开启php的日志" class="headerlink" title="开启php的日志"></a>开启php的日志</h1><ol><li><p>修改 php-fpm.conf 文件，添加（或修改）如下配置：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>  <span class="token keyword">error_log</span> <span class="token operator">=</span> log<span class="token operator">/</span><span class="token keyword">error_log</span>  <span class="token punctuation">[</span>www<span class="token punctuation">]</span>  catch_workers_output <span class="token operator">=</span> yes</code></pre></li><li><p>修改 php.ini 文件，添加（或修改）如下配置：</p><pre class="language-none"><code class="language-none">log_errors &#x3D; Onerror_log &#x3D; &quot;&#x2F;usr&#x2F;local&#x2F;lnmp&#x2F;php&#x2F;var&#x2F;log&#x2F;error_log&quot;error_reporting&#x3D;E_ALL&amp;~E_NOTICE</code></pre></li><li><p>重启 php-fpm </p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux压缩</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打包</span><span class="token function">tar</span> -cvf xx.tar dirName<span class="token comment"># 解包</span><span class="token function">tar</span> -xvf  xx.tar<span class="token comment"># .gz</span><span class="token comment"># 解压</span>gunzip fileName.gz<span class="token function">gzip</span> -d fileName.gz<span class="token comment"># 压缩</span><span class="token function">gzip</span> fileName<span class="token comment"># .tar.gz 和.tgz</span><span class="token comment"># 解压</span><span class="token function">tar</span> zxvf fileName.tar.gz<span class="token comment"># 压缩</span><span class="token function">tar</span> zcvf filename.tar.gz dirName<span class="token comment"># bz2</span><span class="token comment"># 解压</span><span class="token function">bzip2</span> -d fileName.bzbunzip2 fileName.bz<span class="token comment"># .tar.bz</span><span class="token comment"># 解压</span><span class="token function">tar</span> jxvf fileName.tar.bz<span class="token comment"># 压缩</span><span class="token function">tar</span> jcvf fileName.tar.bz dirName</code></pre><h1 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>yum <span class="token function">install</span> <span class="token function">zip</span> <span class="token function">unzip</span><span class="token comment"># 解压</span><span class="token function">unzip</span> mydata.zip -d mydatabak<span class="token comment"># 压缩</span><span class="token function">zip</span> -r abc123.zip abc <span class="token number">123</span>.txt</code></pre><h1 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span><span class="token function">wget</span> http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz<span class="token function">tar</span> -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的<span class="token builtin class-name">cd</span> <span class="token function">rar</span><span class="token function">make</span><span class="token comment"># 解压</span><span class="token function">rar</span> x fileName.rar<span class="token comment"># 压缩</span><span class="token function">rar</span> fileName.rar dirName</code></pre><h1 id="7z"><a href="#7z" class="headerlink" title="7z"></a>7z</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>yum <span class="token function">install</span> p7zip p7zip-plugins<span class="token comment"># 压缩</span>7za a 压缩包.7z 被压缩文件或目录<span class="token comment"># 解压</span><span class="token comment">#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格</span>7za x 压缩包.7z -o解压目录<span class="token comment">#将压缩包解压到当前目录</span>7za x 压缩包.7z</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx伪静态</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="伪静态"><a href="#伪静态" class="headerlink" title="伪静态"></a>伪静态</h1><p>伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。<br>nginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。<br>nginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。</p><p><strong>1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）</strong></p><p>找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：</p><p>下面加的意思是隐藏掉index.php：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>             <span class="token comment"># 其他的一些规则，自己加</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">-</span>e <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">rewrite</span>  <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$  <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token operator">?</span>s<span class="token operator">=</span>$<span class="token number">1</span>  last<span class="token punctuation">;</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>2、每个网站独立的配置文件（独立的伪静态规则）：</strong></p><p>我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：</p><p>如：在nginx.conf配置文件最下面添加以下代码：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">include</span> vhost<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span></code></pre><p>说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！</p><p>以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">root</span> <span class="token operator">/</span>www<span class="token operator">/</span>web<span class="token operator">/</span>admin<span class="token operator">/</span>public<span class="token punctuation">;</span>        <span class="token keyword">server_name</span> www<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token keyword">error_page</span>  <span class="token number">400</span> <span class="token operator">/</span>errpage<span class="token operator">/</span><span class="token number">400.</span>html<span class="token punctuation">;</span>        <span class="token keyword">error_page</span>  <span class="token number">403</span> <span class="token operator">/</span>errpage<span class="token operator">/</span><span class="token number">403.</span>html<span class="token punctuation">;</span>        <span class="token keyword">error_page</span>  <span class="token number">404</span> <span class="token operator">/</span>errpage<span class="token operator">/</span><span class="token number">404.</span>html<span class="token punctuation">;</span>        <span class="token keyword">error_page</span>  <span class="token number">503</span> <span class="token operator">/</span>errpage<span class="token operator">/</span><span class="token number">503.</span>html<span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">~</span> \<span class="token punctuation">.</span>php$ <span class="token punctuation">&#123;</span>                <span class="token keyword">fastcgi_pass</span>   <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">;</span>                <span class="token keyword">fastcgi_index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>                <span class="token keyword">include</span> fcgi<span class="token punctuation">.</span>conf<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">location</span> <span class="token operator">~</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>ht <span class="token punctuation">&#123;</span>                <span class="token keyword">deny</span>  all<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">-</span>e <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">rewrite</span>  <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$  <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token operator">?</span>s<span class="token operator">=</span>$<span class="token number">1</span>  last<span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="nginx-url重写"><a href="#nginx-url重写" class="headerlink" title="nginx url重写"></a>nginx url重写</h1><p>url重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等</p><h2 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>在配置文件的<code>server</code>块中写，如：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">rewrite</span> 规则 定向路径 重写类型<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>规则：可以是字符串或者正则来表示想匹配的目标url</li><li>定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用<code>$index</code>来表示正则里的捕获分组</li><li>重写类型：<ul><li>last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变</li><li>break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变</li><li>redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址</li><li>permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li></ul></li></ul><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 访问 /last.html 的时候，页面内容重写到 /index.html 中</span>    <span class="token keyword">rewrite</span> <span class="token operator">/</span>last<span class="token punctuation">.</span>html <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html last<span class="token punctuation">;</span>    <span class="token comment"># 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配</span>    <span class="token keyword">rewrite</span> <span class="token operator">/</span><span class="token keyword">break</span><span class="token punctuation">.</span>html <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment"># 访问 /redirect.html 的时候，页面直接302定向到 /index.html中</span>    <span class="token keyword">rewrite</span> <span class="token operator">/</span>redirect<span class="token punctuation">.</span>html <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html redirect<span class="token punctuation">;</span>    <span class="token comment"># 访问 /permanent.html 的时候，页面直接301定向到 /index.html中</span>    <span class="token keyword">rewrite</span> <span class="token operator">/</span>permanent<span class="token punctuation">.</span>html <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html permanent<span class="token punctuation">;</span>    <span class="token comment"># 把 /html/*.html => /post/*.html ，301定向</span>    <span class="token keyword">rewrite</span> <span class="token operator">^</span><span class="token operator">/</span>html<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">.</span>html$ <span class="token operator">/</span>post<span class="token operator">/</span>$<span class="token number">1.</span>html permanent<span class="token punctuation">;</span>    <span class="token comment"># 把 /search/key => /search.html?keyword=key</span>    <span class="token keyword">rewrite</span> <span class="token operator">^</span><span class="token operator">/</span>search\<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">^</span>\<span class="token operator">/</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\<span class="token operator">/</span><span class="token operator">|</span>$<span class="token punctuation">)</span> <span class="token operator">/</span>search<span class="token punctuation">.</span>html<span class="token operator">?</span>keyword<span class="token operator">=</span>$<span class="token number">1</span> permanent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="last和break的区别"><a href="#last和break的区别" class="headerlink" title="last和break的区别"></a>last和break的区别</h4><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p><ul><li>last一般写在server和if中，而break一般使用在location中</li><li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li><li>break和last都能组织继续执行后面的rewrite指令</li></ul><p>在<code>location</code>里一旦返回<code>break</code>则直接生效并停止后续的匹配<code>location</code></p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">rewrite</span> <span class="token operator">/</span>last<span class="token operator">/</span> <span class="token operator">/</span>q<span class="token punctuation">.</span>html last<span class="token punctuation">;</span>        <span class="token keyword">rewrite</span> <span class="token operator">/</span><span class="token keyword">break</span><span class="token operator">/</span> <span class="token operator">/</span>q<span class="token punctuation">.</span>html <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>q<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>访问<code>/last/</code>时重写到<code>/q.html</code>，然后使用新的<code>uri</code>再匹配，正好匹配到<code>locatoin = /q.html</code>然后返回了<code>400</code></li><li>访问<code>/break</code>时重写到<code>/q.html</code>，由于返回了<code>break</code>，则直接停止了</li></ul><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><p>只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到<code>if</code></p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre class="language-undefined" data-language="undefined"><code class="language-undefined">if (表达式) &#123;&#125;</code></pre><ul><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li><li>直接比较变量和内容时，使用=或!=</li><li><del>正则表达式匹配，</del>*不区分大小写的匹配，!~区分大小写的不匹配</li></ul><p>一些内置的条件判断：</p><ul><li>-f和!-f用来判断是否存在文件</li><li>-d和!-d用来判断是否存在目录</li><li>-e和!-e用来判断是否存在文件或目录</li><li>-x和!-x用来判断文件是否可执行</li></ul><h3 id="内置的全局变量"><a href="#内置的全局变量" class="headerlink" title="内置的全局变量"></a>内置的全局变量</h3><pre class="language-none"><code class="language-none">$args ：这个变量等于请求行中的参数，同$query_string$content_length ： 请求头中的Content-length字段。$content_type ： 请求头中的Content-Type字段。$document_root ： 当前请求在root指令中指定的值。$host ： 请求主机头字段，否则为服务器名称。$http_user_agent ： 客户端agent信息$http_cookie ： 客户端cookie信息$limit_rate ： 这个变量可以限制连接速率。$request_method ： 客户端请求的动作，通常为GET或POST。$remote_addr ： 客户端的IP地址。$remote_port ： 客户端的端口。$remote_user ： 已经经过Auth Basic Module验证的用户名。$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。$scheme ： HTTP方法（如http，https）。$server_protocol ： 请求使用的协议，通常是HTTP&#x2F;1.0或HTTP&#x2F;1.1。$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。$server_name ： 服务器名称。$server_port ： 请求到达服务器的端口号。$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”&#x2F;foo&#x2F;bar.php?arg&#x3D;baz”。$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”&#x2F;foo&#x2F;bar.html”。$document_uri ： 与$uri相同。</code></pre><p>如：</p><pre class="language-stylus" data-language="stylus"><code class="language-stylus">访问链接是：http<span class="token punctuation">:</span><span class="token comment">//localhost:88/test1/test2/test.php </span>网站路径是：/var/www/html$host：localhost$server_port：88$request_uri：http<span class="token punctuation">:</span><span class="token comment">//localhost:88/test1/test2/test.php</span>$document_uri：/test1/test2/test<span class="token punctuation">.</span>php$document_root：/var/www/html$request_filename：/var/www/html/test1/test2/test<span class="token punctuation">.</span>php</code></pre><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 如果文件不存在则返回400</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">-</span>f <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">400</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 如果host不是xuexb.com，则301到xuexb.com中</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$host</span> <span class="token operator">!=</span> <span class="token string">'xuexb.com'</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">rewrite</span> <span class="token operator">^</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>xuexb<span class="token punctuation">.</span>com<span class="token operator">/</span>$<span class="token number">1</span> permanent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 如果请求类型不是POST则返回405</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request_method</span> <span class="token operator">=</span> POST<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">405</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 如果参数中有 a=1 则301到指定域名</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$args</span> <span class="token operator">~</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">rewrite</span> <span class="token operator">^</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span> permanent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在某种场景下可结合<code>location</code>规则来使用，如：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 访问 /test.html 时</span><span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>test<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>    <span class="token comment"># 默认值为xiaowu</span>    <span class="token keyword">set</span> <span class="token variable">$name</span> xiaowu<span class="token punctuation">;</span>    <span class="token comment"># 如果参数中有 name=xx 则使用该值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$args</span> <span class="token operator">~</span><span class="token operator">*</span> name<span class="token operator">=</span><span class="token punctuation">(</span>\w<span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">|</span>$<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">set</span> <span class="token variable">$name</span> $<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 301</span>    <span class="token keyword">rewrite</span> <span class="token operator">^</span> <span class="token operator">/</span><span class="token variable">$name</span><span class="token punctuation">.</span>html permanent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上面表示：</p><ul><li>/test.html =&gt; /xiaowu.html</li><li>/test.html?name=ok =&gt; /ok.html?name=ok</li></ul><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>在<code>server</code>块中使用，如：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">location</span> 表达式 <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>location表达式类型</p><ul><li>如果直接写一个路径，则匹配该路径下的</li><li>~ 表示执行一个正则匹配，区分大小写</li><li>~* 表示执行一个正则匹配，不区分大小写</li><li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li><li>= 进行普通字符精确匹配。也就是完全匹配。</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol><li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li><li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li><li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li><li>常规字符串匹配类型。按前缀匹配。</li></ol><h3 id="例子-假地址掩饰真地址"><a href="#例子-假地址掩饰真地址" class="headerlink" title="例子 - 假地址掩饰真地址"></a>例子 - 假地址掩饰真地址</h3><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 用 xxoo_admin 来掩饰 admin</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># 使用break拿一旦匹配成功则忽略后续location</span>        <span class="token keyword">rewrite</span> <span class="token operator">/</span>xxoo_admin <span class="token operator">/</span>admin <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 访问真实地址直接报没权限</span>    <span class="token keyword">location</span> <span class="token operator">/</span>admin <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">403</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.toolnb.com/tools/rewriteTools.html">https://www.toolnb.com/tools/rewriteTools.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring数据库事务</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h2><p>PlatformTransactionManager接口中定义了三个方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span>      <span class="token comment">// Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span>    <span class="token class-name">TransactionStatus</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>     <span class="token comment">// Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span>    <span class="token class-name">Void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>      <span class="token comment">// Perform a rollback of the given transaction（对执行的事务进行回滚）</span>    <span class="token class-name">Void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> 复制代码</code></pre><p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p><p><img src="http://wumu.sciento.cn/20190901203705.png" alt="PlatformTransactionManager根据不同持久层框架所对应的接口实现"></p><p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 事务管理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 数据源 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h2><p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p><p><strong>那么什么是事务属性呢？</strong></p><p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p><p><img src="http://wumu.sciento.cn/20190901203901.png"></p><h3 id="TransactionDefinition接口中的方法如下："><a href="#TransactionDefinition接口中的方法如下：" class="headerlink" title="TransactionDefinition接口中的方法如下："></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p><p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 返回事务的传播行为</span>    <span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span>    <span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回事务必须在多少秒内完成</span>    <span class="token comment">//返回事务的名字</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；    <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回是否优化为只读事务。</span>    <span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </code></pre><h2 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h2><p>PlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：</p><h5 id="清单3-TransactionStatus-接口中定义的主要方法"><a href="#清单3-TransactionStatus-接口中定义的主要方法" class="headerlink" title="清单3. TransactionStatus 接口中定义的主要方法"></a>清单3. TransactionStatus 接口中定义的主要方法</h5><pre class="language-java" data-language="java"><code class="language-java">`<span class="token keyword">public</span>  <span class="token keyword">interface</span> <span class="token class-name">TransactionStatus</span><span class="token punctuation">&#123;</span>``   ``<span class="token keyword">boolean</span> <span class="token function">isNewTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``   ``<span class="token keyword">void</span> <span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``   ``<span class="token keyword">boolean</span> <span class="token function">isRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>``<span class="token punctuation">&#125;</span>`</code></pre><h1 id="事务管理API分析"><a href="#事务管理API分析" class="headerlink" title="事务管理API分析"></a>事务管理API分析</h1><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p><ul><li><p>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</p></li><li><p>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</p></li><li><p>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</p></li><li><p>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。</p></li><li><p>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</p></li></ul><h2 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h2><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p><ul><li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p><h2 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h2><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p><h2 id="事务的只读属性"><a href="#事务的只读属性" class="headerlink" title="事务的只读属性"></a>事务的只读属性</h2><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p><p>应用场合：</p><p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；<br>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。<br>【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】</p><p>怎样设置：</p><p>对于只读查询，可以指定事务类型为readonly，即只读事务。<br>由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。</p><p>（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);</p><p>（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER);<br>此时，Hibernate也会为只读事务提供Session方面的一些优化手段</p><p>（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”<br>或者用注解方式@Transactional(readOnly=true)<br>【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER,<br>and will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式</p><h2 id="事务的回滚规则"><a href="#事务的回滚规则" class="headerlink" title="事务的回滚规则"></a>事务的回滚规则</h2><p>通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库事务</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。</p><p>　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：</p><h2 id="⑴-原子性（Atomicity）"><a href="#⑴-原子性（Atomicity）" class="headerlink" title="⑴ 原子性（Atomicity）"></a>⑴ 原子性（Atomicity）</h2><p>　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><h2 id="⑵-一致性（Consistency）"><a href="#⑵-一致性（Consistency）" class="headerlink" title="⑵ 一致性（Consistency）"></a>⑵ 一致性（Consistency）</h2><p>　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p><h2 id="⑶-隔离性（Isolation）"><a href="#⑶-隔离性（Isolation）" class="headerlink" title="⑶ 隔离性（Isolation）"></a>⑶ 隔离性（Isolation）</h2><p>　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><p>　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p><h2 id="⑷-持久性（Durability）"><a href="#⑷-持久性（Durability）" class="headerlink" title="⑷ 持久性（Durability）"></a>⑷ 持久性（Durability）</h2><p>　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p>　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p><p>　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p><h2 id="1，脏读"><a href="#1，脏读" class="headerlink" title="1，脏读"></a>1，脏读</h2><p>　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p><p>　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下</p><pre class="language-none"><code class="language-none">update account set money&#x3D;money+100 where name&#x3D;’B’;  (此时A通知B)update account set money&#x3D;money - 100 where name&#x3D;’A’;</code></pre><p>　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p><h2 id="2，不可重复读"><a href="#2，不可重复读" class="headerlink" title="2，不可重复读"></a>2，不可重复读</h2><p>　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p><p>　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p><p>　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p><p>　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</p><h2 id="3，虚读-幻读"><a href="#3，虚读-幻读" class="headerlink" title="3，虚读(幻读)"></a>3，虚读(幻读)</h2><p>　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p><p>　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。<br>　　现在来看看MySQL数据库为我们提供的四种隔离级别：<br>　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。<br>　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。<br>　　③ Read committed (读已提交)：可避免脏读的发生。<br>　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</p><p>　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。</p><p>　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。</p><p>　　在MySQL数据库中查看当前事务的隔离级别：</p><pre class="language-none"><code class="language-none">select @@tx_isolation;</code></pre><p>　　在MySQL数据库中设置事务的隔离 级别：</p><pre class="language-none"><code class="language-none">set  [glogal | session]  transaction isolation level 隔离级别名称;set tx_isolation&#x3D;’隔离级别名称;’</code></pre><p>　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。</p><h1 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h1><p><a href="http://www.zhihu.com/question/23989904">http://www.zhihu.com/question/23989904</a><br><a href="http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html">http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html</a><br><a href="http://www.cnblogs.com/xdp-gacl/p/3984001.html">http://www.cnblogs.com/xdp-gacl/p/3984001.html</a><br><a href="https://www.cnblogs.com/fjdingsd/p/5273008.html">https://www.cnblogs.com/fjdingsd/p/5273008.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql性能检测</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="性能检测蝉蛹命令"><a href="#性能检测蝉蛹命令" class="headerlink" title="性能检测蝉蛹命令"></a>性能检测蝉蛹命令</h1><ol><li>show status</li><li>show processlist</li><li>show variables</li></ol><h1 id="瓶颈分析常用命令"><a href="#瓶颈分析常用命令" class="headerlink" title="瓶颈分析常用命令"></a>瓶颈分析常用命令</h1><h2 id="获取mysql用户下的进程总数"><a href="#获取mysql用户下的进程总数" class="headerlink" title="获取mysql用户下的进程总数"></a>获取mysql用户下的进程总数</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$1</span>&#125;'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"mysql"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">"grep"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l</code></pre><h2 id="主机性能状态"><a href="#主机性能状态" class="headerlink" title="主机性能状态"></a>主机性能状态</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">uptime</span></code></pre><h2 id="CPU使用率"><a href="#CPU使用率" class="headerlink" title="CPU使用率"></a>CPU使用率</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">top</span><span class="token function">vmstat</span></code></pre><h2 id="磁盘IO量"><a href="#磁盘IO量" class="headerlink" title="磁盘IO量"></a>磁盘IO量</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">vmstat</span>iostat</code></pre><h2 id="swap进出量"><a href="#swap进出量" class="headerlink" title="swap进出量"></a>swap进出量</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">free</span> -m</code></pre><h1 id="数据库性能状态"><a href="#数据库性能状态" class="headerlink" title="数据库性能状态"></a>数据库性能状态</h1><h2 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h2><p><strong>方法一 基于 questions  计算qps,基于  com_commit  com_rollback 计算tps</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql">questions <span class="token operator">=</span> <span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'questions'</span><span class="token punctuation">;</span>uptime <span class="token operator">=</span> <span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'uptime'</span><span class="token punctuation">;</span>qps<span class="token operator">=</span>questions<span class="token operator">/</span>uptime</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">com_commit <span class="token operator">=</span> <span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'com_commit'</span><span class="token punctuation">;</span>com_rollback <span class="token operator">=</span> <span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'com_rollback'</span><span class="token punctuation">;</span>uptime <span class="token operator">=</span> <span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'uptime'</span><span class="token punctuation">;</span>tps<span class="token operator">=</span><span class="token punctuation">(</span>com_commit <span class="token operator">+</span> com_rollback<span class="token punctuation">)</span><span class="token operator">/</span>uptime</code></pre><p><strong>方法二  基于 com_* 的status 变量计算tps ,qps</strong></p><p>使用如下命令：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token keyword">where</span> variable_name <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'com_select'</span><span class="token punctuation">,</span><span class="token string">'com_insert'</span><span class="token punctuation">,</span><span class="token string">'com_delete'</span><span class="token punctuation">,</span><span class="token string">'com_update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取间隔<span class="token number">1</span>s 的 com_<span class="token operator">*</span>的值，并作差值运算del_diff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>mystat2<span class="token punctuation">[</span><span class="token string">'com_delete'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token operator">-</span> <span class="token keyword">int</span><span class="token punctuation">(</span>mystat1<span class="token punctuation">[</span><span class="token string">'com_delete'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">/</span> diffins_diff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>mystat2<span class="token punctuation">[</span><span class="token string">'com_insert'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">-</span> <span class="token keyword">int</span><span class="token punctuation">(</span>mystat1<span class="token punctuation">[</span><span class="token string">'com_insert'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">/</span> diffsel_diff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>mystat2<span class="token punctuation">[</span><span class="token string">'com_select'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">-</span> <span class="token keyword">int</span><span class="token punctuation">(</span>mystat1<span class="token punctuation">[</span><span class="token string">'com_select'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">/</span> diffupd_diff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>mystat2<span class="token punctuation">[</span><span class="token string">'com_update'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token operator">-</span> <span class="token keyword">int</span><span class="token punctuation">(</span>mystat1<span class="token punctuation">[</span><span class="token string">'com_update'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">/</span> diff</code></pre><p><strong>总结：</strong></p><p>Questions 是记录了从mysqld启动以来所有的select，dml 次数包括show 命令的查询的次数。这样多少有失准确性，比如很多数据库有监控系统在运行，每5秒对数据库进行一次show 查询来获取当前数据库的状态，而这些查询就被记录到QPS,TPS统计中，造成一定的”数据污染”.</p><p>如果数据库中存在比较多的myisam表，则计算还是questions 比较合适。</p><p>如果数据库中存在比较多的innodb表，则计算以com_*数据来源比较合适</p><h2 id="TPS"><a href="#TPS" class="headerlink" title="TPS"></a>TPS</h2><p>TPS = (Com_commit + Com_rollback) / seconds </p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Com_commit'</span><span class="token punctuation">;</span> <span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Com_rollback'</span><span class="token punctuation">;</span></code></pre><h2 id="key-Buffer-命中率"><a href="#key-Buffer-命中率" class="headerlink" title="key Buffer 命中率"></a>key Buffer 命中率</h2><p>key_buffer_read_hits = (1-key_reads / key_read_requests) * 100%<br>key_buffer_write_hits = (1-key_writes / key_write_requests) * 100%</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Key%'</span><span class="token punctuation">;</span></code></pre><h2 id="InnoDB-Buffer命中率"><a href="#InnoDB-Buffer命中率" class="headerlink" title="InnoDB Buffer命中率"></a>InnoDB Buffer命中率</h2><p>innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'innodb_buffer_pool_read%'</span><span class="token punctuation">;</span></code></pre><h2 id="Query-Cache命中率"><a href="#Query-Cache命中率" class="headerlink" title="Query Cache命中率"></a>Query Cache命中率</h2><p>Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Qcache%'</span><span class="token punctuation">;</span></code></pre><h2 id="Table-Cache状态量"><a href="#Table-Cache状态量" class="headerlink" title="Table Cache状态量"></a>Table Cache状态量</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'open%'</span><span class="token punctuation">;</span></code></pre><h2 id="Thread-Cache-命中率"><a href="#Thread-Cache-命中率" class="headerlink" title="Thread Cache 命中率"></a>Thread Cache 命中率</h2><p>Thread_cache_hits = (1 - Threads_created / connections ) * 100%</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Thread%'</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Connections'</span><span class="token punctuation">;</span></code></pre><h2 id="锁定状态"><a href="#锁定状态" class="headerlink" title="锁定状态"></a>锁定状态</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'%lock%'</span><span class="token punctuation">;</span></code></pre><h2 id="复制延时量"><a href="#复制延时量" class="headerlink" title="复制延时量"></a>复制延时量</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> slave <span class="token keyword">status</span><span class="token punctuation">;</span></code></pre><h2 id="Tmp-Table-状况-临时表状况"><a href="#Tmp-Table-状况-临时表状况" class="headerlink" title="Tmp Table 状况(临时表状况)"></a>Tmp Table 状况(临时表状况)</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Create_tmp%'</span><span class="token punctuation">;</span></code></pre><h2 id="Binlog-Cache-使用状况"><a href="#Binlog-Cache-使用状况" class="headerlink" title="Binlog Cache 使用状况"></a>Binlog Cache 使用状况</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Binlog_cache%'</span><span class="token punctuation">;</span></code></pre><h2 id="Innodb-log-waits"><a href="#Innodb-log-waits" class="headerlink" title="Innodb_log_waits"></a>Innodb_log_waits</h2><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show status like &#39;innodb_log_waits&#39;;</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/li_adou/article/details/78791972">https://blog.csdn.net/li_adou/article/details/78791972</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate_Embedded和@Embeddable</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其是一个实体类要在多个不同的实体类中进行使用，而本身又不需要独立生成一个数据库表，这就是需要@Embedded、@Embeddable的时候了，下面分成4类来说明在一个实体类中引用另外的实体类的情况，具体的数据库环境是MySQL 5.7。</p><p>使用的两个实体类如下：</p><p>Address类</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8849870114128959929L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> detail<span class="token punctuation">;</span>        <span class="token comment">//setter、getter&#125;</span></code></pre><p>Person类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8849870114127659929L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>        <span class="token comment">//setter、getter</span><span class="token punctuation">&#125;</span></code></pre><h1 id="两个注解全不使用"><a href="#两个注解全不使用" class="headerlink" title="两个注解全不使用"></a>两个注解全不使用</h1><p>当这两个注解都不使用时，那么两个实体类和上面的相同，那么生成的表结构如下： </p><p><img src="http://wumu.sciento.cn/img/20190810110112.png"></p><p>Address属性字段会映射成tinyblob类型的字段，这是用来存储不超过255字符的二进制字符串的数据类型，显然我们通常不会这么使用。</p><h1 id="只使用-Embeddable"><a href="#只使用-Embeddable" class="headerlink" title="只使用@Embeddable"></a>只使用@Embeddable</h1><p>我们在Address实体类上加上@Embeddable注解，变成如下类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Embeddable</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8849870114128959929L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> detail<span class="token punctuation">;</span>        <span class="token comment">//setter、getter</span><span class="token punctuation">&#125;</span></code></pre><p>而Person实体类不变，生成的数据库表结构如下： </p><p><img src="http://wumu.sciento.cn/img/20190810110330.png"></p><p>可以看出这次是把Address中的字段映射成数据库列嵌入到Person表中了，而这些字段的类型和长度也使用默认值。如果我们在Address中的字段中设置列的相关属性，则会按照我们设定的值去生成，如下Address类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Embeddable</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8849870114128959929L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> detail<span class="token punctuation">;</span>    <span class="token comment">//setter、getter</span><span class="token punctuation">&#125;</span></code></pre><p>生成的表结构如下：</p><p> <img src="http://wumu.sciento.cn/img/20190810110454.png"></p><p>我们在Address中配置的属性全部成功映射到Person表中。</p><h1 id="只使用-Embedded"><a href="#只使用-Embedded" class="headerlink" title="只使用@Embedded"></a>只使用@Embedded</h1><p>这里我们只在Person中使用@Embedded,如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8849870114127659929L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Embedded</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>        <span class="token comment">//setter、getter</span><span class="token punctuation">&#125;</span></code></pre><p>Adddress类和最开始的不同POJO类相同，此时生成的表结构如下： </p><p><img src="http://wumu.sciento.cn/img/20190810110619.png"></p><p>可以看出这个表结构和在Address中只使用@Embeddable注解时相同，在进入深一步试验，我们在Address中加入列属性，但是不使用@Embeddable注解会发生什么？<br>Address类如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8849870114128959929L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> detail<span class="token punctuation">;</span>    <span class="token comment">//setter、getter</span><span class="token punctuation">&#125;</span></code></pre><p>生成数据表结构如下： </p><p><img src="http://wumu.sciento.cn/img/20190810110728.png"></p><p>所以只使用@Embedded和只使用@Embeddable产生的效果是相同的。</p><h1 id="两个注解全使用"><a href="#两个注解全使用" class="headerlink" title="两个注解全使用"></a>两个注解全使用</h1><p>既然单独使用@Embedded或者只使用@Embeddable都会产生作用，那么这两个都使用效果也一定是一样的，我们平时也是这么用的。所以在这部分我们就不演示和上面相同的效果了，而是说两个深入的话题。</p><h2 id="覆盖-Embeddable类中字段的列属性"><a href="#覆盖-Embeddable类中字段的列属性" class="headerlink" title="覆盖@Embeddable类中字段的列属性"></a>覆盖@Embeddable类中字段的列属性</h2><p>这里就要使用另外的两个注解@AttributeOverrides和@AttributeOverride，这两个注解是用来覆盖@Embeddable类中字段的属性的。</p><p>@AttributeOverrides：里面只包含了@AttributeOverride类型数组；<br>@AttributeOverride：包含要覆盖的@Embeddable类中字段名name和新增的@Column字段的属性；<br>使用如下：<br>Person类如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8849870114127659929L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Embedded</span>    <span class="token annotation punctuation">@AttributeOverrides</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@AttributeOverride</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"country"</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"person_country"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token annotation punctuation">@AttributeOverride</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"city"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"person_city"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>        <span class="token comment">//setter、getter</span><span class="token punctuation">&#125;</span></code></pre><p>Address类如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Embeddable</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8849870114128959929L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> detail<span class="token punctuation">;</span>    <span class="token comment">//setter、getter</span><span class="token punctuation">&#125;</span></code></pre><p>生成的数据表如下：</p><p><img src="http://wumu.sciento.cn/img/20190810110901.png"></p><p>可以看出我们的@AttributeOverrides和@AttributeOverride两个注解起作用了。</p><h2 id="多层嵌入实体类属性"><a href="#多层嵌入实体类属性" class="headerlink" title="多层嵌入实体类属性"></a>多层嵌入实体类属性</h2><p>上面所有的例子都是使用两层实体类嵌入，其实这种实体类的嵌入映射是可以使用多层的，具体的例子如下。<br>我们新建立一个类Direction表示方位如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Embeddable</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Direction</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> longitude<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> latitude<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>Address如下：</p><pre class="language-none"><code class="language-none">@Embeddablepublic class Address implements Serializable&#123;    private static final long serialVersionUID &#x3D; 8849870114128959929L;    @Column(nullable &#x3D; false)    private String country;    @Column(length &#x3D; 30)    private String province;    @Column(unique &#x3D; true)    private String city;    @Column(length &#x3D; 50)    private String detail;        @Embedded    private Direction direction;&#125;</code></pre><p>Person类如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8849870114127659929L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Embedded</span>    <span class="token annotation punctuation">@AttributeOverrides</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@AttributeOverride</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"direction.latitude"</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"person_latitude"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token annotation punctuation">@AttributeOverride</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"direction.longitude"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"person_longitude"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>生成的数据表如下：</p><p><img src="http://wumu.sciento.cn/img/20190810111050.png"></p><h1 id="在上面需要注意如下几点："><a href="#在上面需要注意如下几点：" class="headerlink" title="在上面需要注意如下几点："></a>在上面需要注意如下几点：</h1><p>在Person中定义Direction中的属性时，需要用”.”将所有相关的属性连接起来；<br>在Direction中longitude属性定义为not null，但是由于使用了@AttributeOverride注解，其中虽然没有定义null属性，但是这时使用的是默认的nullable属性，默认为true;</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/lmy86263/article/details/52108130">https://blog.csdn.net/lmy86263/article/details/52108130</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>create-react-app脚手架</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g create-react-app<span class="token comment"># 切记项目名称不能大写</span>create-react-app firstapp<span class="token builtin class-name">cd</span> firstapp<span class="token function">npm</span> run start</code></pre><h1 id="eject"><a href="#eject" class="headerlink" title="eject"></a>eject</h1><p>这是一次性的操作</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run <span class="token function">eject</span></code></pre><h1 id="启动less或者sass"><a href="#启动less或者sass" class="headerlink" title="启动less或者sass"></a>启动less或者sass</h1><h2 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h2><p>create-react-app默认有sass的配置，只需要安装依赖就行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> node-sass --save</code></pre><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>默认没有less的配置，需要自己在webpack中配置</p><ol><li><p>安装依赖</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">less</span> less-loader --save</code></pre></li><li><p>运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 <code>// style files regexes</code> 注释位置，仿照其解析 sass 的规则，在下面添加两行代码</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 添加 less 解析规则</span><span class="token keyword">const</span> lessRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> lessModuleRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.module\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>复制代码</code></pre><p>找到 rules 属性配置，在其中添加 less 解析配置</p><blockquote><p><strong>!!!注意：</strong> 这里有一个需要注意的地方，下面的这些 <code>less</code> 配置规则放在 <code>sass</code> 的解析规则下面即可，如果放在了 <code>file-loader</code> 的解析规则下面，<code>less</code> 文件解析不会生效。</p></blockquote><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// Less 解析配置</span><span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> lessRegex<span class="token punctuation">,</span>    exclude<span class="token operator">:</span> lessModuleRegex<span class="token punctuation">,</span>    use<span class="token operator">:</span> getStyleLoaders(        <span class="token punctuation">&#123;</span>            importLoaders<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            sourceMap<span class="token operator">:</span> isEnvProduction &amp;&amp; shouldUseSourceMap<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        'less-loader'    )<span class="token punctuation">,</span>    sideEffects<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> lessModuleRegex<span class="token punctuation">,</span>    use<span class="token operator">:</span> getStyleLoaders(        <span class="token punctuation">&#123;</span>            importLoaders<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            sourceMap<span class="token operator">:</span> isEnvProduction &amp;&amp; shouldUseSourceMap<span class="token punctuation">,</span>            modules<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            getLocalIdent<span class="token operator">:</span> getCSSModuleLocalIdent<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        'less-loader'    )<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre></li></ol><h1 id="css-module"><a href="#css-module" class="headerlink" title="css module"></a>css module</h1><p>在css的命名中使用*.module.css就可以使用css module，也可以自己修改webpack的文件。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/1f054623ecac">https://www.jianshu.com/p/1f054623ecac</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-类</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="类中默认函数"><a href="#类中默认函数" class="headerlink" title="类中默认函数"></a>类中默认函数</h1><h2 id="new-和-init-区别"><a href="#new-和-init-区别" class="headerlink" title="____new____和____init____区别"></a>____new____和____init____区别</h2><p><strong>new</strong>:创建对象时调用，会返回当前对象的一个实例</p><p><strong>init</strong>:创建完对象后调用，对当前对象的一些实例初始化，无返回值</p><p>1、在类中，如果<strong>new__和__init__同时存在，会优先调用__new</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">print</span> <span class="token string">"new"</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">print</span> <span class="token string">"init"</span> data <span class="token operator">=</span> Data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># new</span></code></pre><p>2、__new__方法会返回所构造的对象，__init__则不会。__init__无返回值。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span>             <span class="token keyword">print</span> <span class="token string">"init"</span>            <span class="token keyword">return</span> clsdata <span class="token operator">=</span> Data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''initTraceback (most recent call last):  File "&lt;stdin>", line 1, in &lt;module>TypeError: __init__() should return None, not 'Data''''</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"new"</span><span class="token punctuation">)</span>        cls<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> cls<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> Data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token comment"># new</span><span class="token comment"># 1</span>data<span class="token punctuation">.</span>x <span class="token operator">=</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token comment"># 2</span></code></pre><p>If <strong>new</strong>() returns an instance of cls, then the new instance’s <strong>init</strong>() method will be invoked like <strong>init</strong>(self[, …]), where self is the new instance and the remaining arguments are the same as were passed to <strong>new</strong>().</p><p>如果<strong>new__返回一个对象的实例，会隐式调用__init</strong></p><p>If <strong>new</strong>() does not return an instance of cls, then the new instance’s <strong>init</strong>() method will not be invoked.</p><p>如果__new__不返回一个对象的实例，__init__不会被调用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token builtin">object</span> <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>Class<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Class<span class="token punctuation">)</span>             <span class="token keyword">print</span> <span class="token string">"in New"</span>             <span class="token keyword">return</span> <span class="token builtin">object</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">print</span> <span class="token string">"in init"</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># in New</span><span class="token comment"># in init</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">print</span> <span class="token string">"in New"</span>             <span class="token keyword">return</span> cls     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">print</span> <span class="token string">"in init"</span> a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># in New </span></code></pre><p>object.<strong>init</strong>(self[, …])<br>Called when the instance is created. The arguments are those passed to the class constructor expression. If a base class has an <strong>init</strong>() method, the derived class’s <strong>init</strong>() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: BaseClass.<strong>init</strong>(self, [args…]). As a special constraint on constructors, no value may be returned; doing so will cause a TypeError to be raised at runtime.</p><p>在对象的实例创建完成后调用。参数被传给类的构造函数。如果基类有__init__方法，子类必须显示调用基类的__init__。</p><p>没有返回值，否则会再引发TypeError错误。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring的jms事务</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring事务实现</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="事务概念回顾"><a href="#事务概念回顾" class="headerlink" title="事务概念回顾"></a>事务概念回顾</h1><blockquote><h2 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h2></blockquote><p>事务是逻辑上的一组操作，要么都执行，要么都不执行.</p><blockquote><h2 id="事物的特性（ACID）："><a href="#事物的特性（ACID）：" class="headerlink" title="事物的特性（ACID）："></a>事物的特性（ACID）：</h2></blockquote><ol><li><strong>原子性：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li><strong>一致性：</strong> 执行事务前后，数据保持一致；</li><li><strong>隔离性：</strong> 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；</li><li><strong>持久性:</strong>  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol><h1 id="Spring事务管理接口介绍"><a href="#Spring事务管理接口介绍" class="headerlink" title="Spring事务管理接口介绍"></a>Spring事务管理接口介绍</h1><blockquote><h2 id="Spring事务管理接口："><a href="#Spring事务管理接口：" class="headerlink" title="Spring事务管理接口："></a>Spring事务管理接口：</h2></blockquote><ul><li><strong>PlatformTransactionManager：</strong> （平台）事务管理器</li><li><strong>TransactionDefinition：</strong> 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)</li><li><strong>TransactionStatus：</strong> 事务运行状态</li></ul><p><strong>所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。</strong></p><blockquote><h2 id="PlatformTransactionManager接口介绍"><a href="#PlatformTransactionManager接口介绍" class="headerlink" title="PlatformTransactionManager接口介绍"></a>PlatformTransactionManager接口介绍</h2></blockquote><p><strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong> ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： <strong>org.springframework.transaction.PlatformTransactionManager</strong> ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p><h3 id="PlatformTransactionManager接口代码如下："><a href="#PlatformTransactionManager接口代码如下：" class="headerlink" title="PlatformTransactionManager接口代码如下："></a>PlatformTransactionManager接口代码如下：</h3><p>PlatformTransactionManager接口中定义了三个方法：</p><pre class="language-none"><code class="language-none">Public interface PlatformTransactionManager()...&#123;      &#x2F;&#x2F; Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException;     &#x2F;&#x2F; Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）    Void commit(TransactionStatus status) throws TransactionException;      &#x2F;&#x2F; Perform a rollback of the given transaction（对执行的事务进行回滚）    Void rollback(TransactionStatus status) throws TransactionException;      &#125; 复制代码</code></pre><p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p><p><img src="http://wumu.sciento.cn/img/20190803144836.png"></p><p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p><pre class="language-none"><code class="language-none">&lt;!-- 事务管理器 --&gt;&lt;bean id&#x3D;&quot;transactionManager&quot;class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;&lt;!-- 数据源 --&gt;&lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;&lt;&#x2F;bean&gt;复制代码</code></pre><blockquote><h2 id="TransactionDefinition接口介绍"><a href="#TransactionDefinition接口介绍" class="headerlink" title="TransactionDefinition接口介绍"></a>TransactionDefinition接口介绍</h2></blockquote><p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p><p><strong>那么什么是事务属性呢？</strong></p><p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p><p><img src="http://wumu.sciento.cn/img/20190803144913.png"></p><h3 id="TransactionDefinition接口中的方法如下："><a href="#TransactionDefinition接口中的方法如下：" class="headerlink" title="TransactionDefinition接口中的方法如下："></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p><p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p><pre class="language-none"><code class="language-none">public interface TransactionDefinition &#123;    &#x2F;&#x2F; 返回事务的传播行为    int getPropagationBehavior();     &#x2F;&#x2F; 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据    int getIsolationLevel();     &#x2F;&#x2F; 返回事务必须在多少秒内完成    &#x2F;&#x2F;返回事务的名字    String getName()；    int getTimeout();      &#x2F;&#x2F; 返回是否优化为只读事务。    boolean isReadOnly();&#125; 复制代码</code></pre><h3 id="（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）："><a href="#（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：" class="headerlink" title="（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）："></a>（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：</h3><p>我们先来看一下 <strong>并发事务带来的问题</strong> ，然后再来介绍一下 <strong>TransactionDefinition 接口</strong> 中定义了五个表示隔离级别的常量。</p><blockquote><h4 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h4></blockquote><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致一下的问题。</p><ul><li><p><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p></li><li><p><strong>丢失修改（Lost to modify）:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p><p>例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</p></li><li><p><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p></li><li><p><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p></li></ul><p><strong>不可重复度和幻读区别：</strong></p><p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p><p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。</p><p>例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p><blockquote><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4></blockquote><p>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p><ul><li><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong>    使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.</li><li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li><li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong>     允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li><li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong>     对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li><li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong>     最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li></ul><h3 id="（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）："><a href="#（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：" class="headerlink" title="（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）："></a>（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：</h3><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p><p><strong>支持当前事务的情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li></ul><p><strong>不支持当前事务的情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则抛出异常。</li></ul><p><strong>其他情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 <strong>PROPAGATION_NESTED</strong> 是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p><h3 id="3-事务超时属性-一个事务允许执行的最长时间"><a href="#3-事务超时属性-一个事务允许执行的最长时间" class="headerlink" title="(3) 事务超时属性(一个事务允许执行的最长时间)"></a>(3) 事务超时属性(一个事务允许执行的最长时间)</h3><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p><h3 id="4-事务只读属性（对事物资源是否执行只读操作）"><a href="#4-事务只读属性（对事物资源是否执行只读操作）" class="headerlink" title="(4) 事务只读属性（对事物资源是否执行只读操作）"></a>(4) 事务只读属性（对事物资源是否执行只读操作）</h3><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p><h3 id="5-回滚规则（定义事务回滚规则）"><a href="#5-回滚规则（定义事务回滚规则）" class="headerlink" title="(5) 回滚规则（定义事务回滚规则）"></a>(5) 回滚规则（定义事务回滚规则）</h3><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h2><p>下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BankService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BankDao</span> bankDao<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TransactionDefinition</span> txDefinition<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PlatformTransactionManager</span> txManager<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Long</span> fromId， <span class="token class-name">Long</span> toId， <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取一个事务</span>    <span class="token class-name">TransactionStatus</span> txStatus <span class="token operator">=</span> txManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>txDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> bankDao<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>fromId， toId， amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>txStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 事务提交</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>txStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 事务回滚</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Transfer Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>相应的配置文件如下所示：</code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bankService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footmark.spring.core.tx.programmatic.origin.BankServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bankDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bankDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txDefinition<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.transaction.support.DefaultTransactionDefinition<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>propagationBehaviorName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PROPAGATION_REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</code></pre><h2 id="基于-TransactionTemplate-的编程式事务管理"><a href="#基于-TransactionTemplate-的编程式事务管理" class="headerlink" title="基于 TransactionTemplate 的编程式事务管理"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BankService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BankDao</span> bankDao<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Long</span> fromId， <span class="token keyword">final</span> <span class="token class-name">Long</span> toId， <span class="token keyword">final</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doInTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> result<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        result <span class="token operator">=</span> bankDao<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>fromId， toId， amount<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Transfer Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>相应的配置文件如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"bankService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"footmark.spring.core.tx.programmatic.template.BankServiceImpl"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"bankDao"</span> ref<span class="token operator">=</span><span class="token string">"bankDao"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"transactionTemplate"</span> ref<span class="token operator">=</span><span class="token string">"transactionTemplate"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p><p>​    此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p><h2 id="基于底层-API-的编程式事务管理"><a href="#基于底层-API-的编程式事务管理" class="headerlink" title="基于底层 API 的编程式事务管理"></a>基于底层 API 的编程式事务管理</h2><p>　　下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BankService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BankDao</span> bankDao<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TransactionDefinition</span> txDefinition<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PlatformTransactionManager</span> txManager<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Long</span> fromId， <span class="token class-name">Long</span> toId， <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取一个事务</span>    <span class="token class-name">TransactionStatus</span> txStatus <span class="token operator">=</span> txManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>txDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> bankDao<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>fromId， toId， amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>txStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 事务提交</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>txStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 事务回滚</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Transfer Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>相应的配置文件如下所示：</code></pre><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bankService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footmark.spring.core.tx.programmatic.origin.BankServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bankDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bankDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txDefinition<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.transaction.support.DefaultTransactionDefinition<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>propagationBehaviorName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PROPAGATION_REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</p><h2 id="基于-TransactionTemplate-的编程式事务管理-1"><a href="#基于-TransactionTemplate-的编程式事务管理-1" class="headerlink" title="基于 TransactionTemplate 的编程式事务管理"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BankService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BankDao</span> bankDao<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Long</span> fromId， <span class="token keyword">final</span> <span class="token class-name">Long</span> toId， <span class="token keyword">final</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doInTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> result<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        result <span class="token operator">=</span> bankDao<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>fromId， toId， amount<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Transfer Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>相应的配置文件如下所示：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bankService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footmark.spring.core.tx.programmatic.template.BankServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bankDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bankDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p><p>　　此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p><h2 id="Spring-声明式事务管理"><a href="#Spring-声明式事务管理" class="headerlink" title="Spring 声明式事务管理"></a>Spring 声明式事务管理</h2><p>　　Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p><p>　　声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中作相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。总的来说，声明式事务得益于 Spring IoC容器 和 Spring AOP 机制的支持：IoC容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而由于事务管理本身就是一个典型的横切逻辑（正是 AOP 的用武之地），因此 Spring AOP 机制是声明式事务管理的直接实现者。</p><p>　　显然，声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要在XML文件中配置或者添加注解就可以获得完全的事务支持。因此，通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。</p><h2 id="基于-命名空间的声明式事务管理"><a href="#基于-命名空间的声明式事务管理" class="headerlink" title="基于  命名空间的声明式事务管理"></a>基于 <tx> 命名空间的声明式事务管理</h2><p>　　Spring 2.x 引入了 <tx> 命名空间，结合使用 <aop> 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。总的来说，开发者只需基于<tx>和<aop>命名空间在XML中进行简答配置便可实现声明式事务管理。下面基于<tx>使用Hibernate事务管理的配置文件：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置 DataSourece --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">"</span></span>    <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- results in a setDriverClassName(String) call --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/ssh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置 sessionFactory --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 数据源的设置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 用于持久化的实体类类列表 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotatedClasses<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>cn.edu.tju.rico.model.entity.User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>cn.edu.tju.rico.model.entity.Log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Hibernate 的配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hibernateProperties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 方言设置   --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hibernate.dialect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>org.hibernate.dialect.MySQLDialect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 显示sql --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hibernate.show_sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>           <span class="token comment">&lt;!-- 格式化sql --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hibernate.format_sql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 自动创建/更新数据表 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hibernate.hbm2ddl.auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置 TransactionManager --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.orm.hibernate3.HibernateTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置事务增强处理的切入点，以保证其被恰当的织入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 切点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* cn.edu.tju.rico.service.impl.*.*(..))<span class="token punctuation">"</span></span>        <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bussinessService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 声明式事务的切入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bussinessService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 由txAdvice切面定义事务增强处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- get打头的方法为只读方法,因此将read-only设为 true --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- 其他方法为读写方法,因此将read-only设为 false --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span>            <span class="token attr-name">isolation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span></code></pre><p> 事实上，Spring配置文件中关于事务的配置总是由三个部分组成，即：DataSource、TransactionManager和代理机制三部分，无论哪种配置方式，一般变化的只是代理机制这部分。其中，DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为 HibernateTransactionManager。如下图所示：</p><h2 id="基于-Transactional-的声明式事务管理"><a href="#基于-Transactional-的声明式事务管理" class="headerlink" title="基于 @Transactional 的声明式事务管理"></a>基于 @Transactional 的声明式事务管理</h2><p>　　除了基于命名空间的事务配置方式，Spring 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上：当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性；当作用于方法上时，该标注来覆盖类级别的定义。如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Long</span> fromId， <span class="token class-name">Long</span> toId， <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> bankDao<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>fromId， toId， amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>Spring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如下所示：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>tx<span class="token operator">:</span>annotation<span class="token operator">-</span>driven transaction<span class="token operator">-</span>manager<span class="token operator">=</span>"transactionManager”<span class="token operator">/</span><span class="token operator">></span></code></pre><p>1 与前面相似，transaction-manager、datasource 和 sessionFactory的配置不变，只需将基于<tx>和<aop>命名空间的配置更换为上述配置即可。</p><h2 id="Spring-声明式事务的本质"><a href="#Spring-声明式事务的本质" class="headerlink" title="Spring 声明式事务的本质"></a>Spring 声明式事务的本质</h2><p>　　就Spring 声明式事务而言，无论其基于 <tx> 命名空间的实现还是基于 @Transactional 的实现，其本质都是 Spring AOP 机制的应用：即通过以@Transactional的方式或者XML配置文件的方式向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。如下图所示：</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5b00c52ef265da0b95276091">https://juejin.im/post/5b00c52ef265da0b95276091</a></p><p><a href="https://blog.csdn.net/justloveyou_/article/details/73733278">https://blog.csdn.net/justloveyou_/article/details/73733278</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker教程</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker基本命令"><a href="#docker基本命令" class="headerlink" title="docker基本命令"></a>docker基本命令</h1><h2 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 查找镜像</span>docker search mysqldocker search -s <span class="token number">100</span> mysql <span class="token comment"># 搜索100star以上的mysql镜像</span><span class="token comment"># 2. 获取镜像</span>docker pull centos7<span class="token comment"># 3. 查找镜像</span>docker image <span class="token function">ls</span><span class="token comment"># 4. 删除镜像</span>docker rmi od16d0a97dd1 <span class="token comment"># 5. 创建镜像</span>docker build -t nginx:1.14.0 <span class="token builtin class-name">.</span></code></pre><h2 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 启动容器</span>docker run -it --rm php:7 <span class="token function">bash</span>  <span class="token comment"># 启动一个容器，并分配一个为终端，退出容器就会被删除</span>docker run -d -p <span class="token number">9000</span>:9000 php:7 <span class="token comment"># 运行我们常用的容器</span><span class="token comment"># 2. 查看容器的信息</span>docker inspect a47342323232 <span class="token comment"># image id</span><span class="token comment"># 3. 进入容器</span>docker <span class="token builtin class-name">exec</span> -it es2dffg2f2gh <span class="token function">bash</span> <span class="token comment">#image id ,bash根据系统会有不同</span><span class="token comment"># 4. 停止容器</span>docker stop 34fvd234234f<span class="token comment"># 5. 启动容器</span>docker start 3fg23fsfsfs<span class="token comment"># 6. 查看容器</span>docker <span class="token function">ps</span> <span class="token comment"># 查看启动的容器</span>docker <span class="token function">ps</span> -a <span class="token comment"># 查看全部容器</span><span class="token comment"># 7. 删除容器</span>docker <span class="token function">rm</span> d989ds82kjk </code></pre><h2 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用匿名volume</span>docker run -v 容器路径 <span class="token punctuation">..</span>.docker run -v host路径:容器路径 <span class="token punctuation">..</span>.<span class="token comment"># 使用volumes-from</span><span class="token number">1</span>. 创建一个容器<span class="token number">2</span>. Docker run —volumes-from data-container ubuntu ,可以共享文件</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>这个功能可能会更加重要，如果你已经使用</p><pre class="language-none"><code class="language-none">docker rm</code></pre><p>来删除你的容器，那可能有很多的孤立的Volume仍在占用着空间。</p><p>Volume只有在下列情况下才能被删除：</p><ul><li>该容器是用<code>docker rm －v</code>命令来删除的（<code>-v</code>是必不可少的）。</li><li><code>docker run</code>中使用了<code>--rm</code>参数</li></ul><p>即使用以上两种命令，也只能删除没有容器连接的Volume。连接到用户指定主机目录的Volume永远不会被docker删除。</p><p>除非你已经很小心的，总是像这样来运行容器，否则你将会在</p><pre class="language-none"><code class="language-none">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;vfs&#x2F;dir</code></pre><p>目录下得到一些僵尸文件和目录，并且还不容易说出它们到底代表什么。</p><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><pre class="language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM debian:wheezyMAINTAINER Steeve Morin &quot;steeve.morin@gmail.com&quot;RUN apt-get update &amp;&amp; apt-get -y install  unzip \                        xz-utils \                        curl \                        bc \                        git \                        build-essential \                        cpio \                        gcc-multilib libc6-i386 libc6-dev-i386 \                        kmod \                        squashfs-tools \                        genisoimage \                        xorriso \                        syslinux \                        automake \                        pkg-configENV KERNEL_VERSION  3.16.1ENV AUFS_BRANCH     aufs3.16# Fetch the kernel sourcesRUN curl --retry 10 https:&#x2F;&#x2F;www.kernel.org&#x2F;pub&#x2F;linux&#x2F;kernel&#x2F;v3.x&#x2F;linux-$KERNEL_VERSION.tar.xz | tar -C &#x2F; -xJ &amp;&amp; \    mv &#x2F;linux-$KERNEL_VERSION &#x2F;linux-kernel# Download AUFS and apply patches and files, then remove itRUN git clone -b $AUFS_BRANCH --depth 1 git:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;aufs&#x2F;aufs3-standalone &amp;&amp; \    cd aufs3-standalone &amp;&amp; \    cd &#x2F;linux-kernel &amp;&amp; \    cp -r &#x2F;aufs3-standalone&#x2F;Documentation &#x2F;linux-kernel &amp;&amp; \    cp -r &#x2F;aufs3-standalone&#x2F;fs &#x2F;linux-kernel &amp;&amp; \    cp -r &#x2F;aufs3-standalone&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;aufs_type.h &#x2F;linux-kernel&#x2F;include&#x2F;uapi&#x2F;linux&#x2F; &amp;&amp;\    for patch in aufs3-kbuild aufs3-base aufs3-mmap aufs3-standalone aufs3-loopback; do \        patch -p1 &lt; &#x2F;aufs3-standalone&#x2F;$patch.patch; \    doneCOPY kernel_config &#x2F;linux-kernel&#x2F;.configRUN jobs&#x3D;$(nproc); \    cd &#x2F;linux-kernel &amp;&amp; \    make -j $&#123;jobs&#125; oldconfig &amp;&amp; \    make -j $&#123;jobs&#125; bzImage &amp;&amp; \    make -j $&#123;jobs&#125; modules# The post kernel build processENV ROOTFS          &#x2F;rootfsENV TCL_REPO_BASE   http:&#x2F;&#x2F;tinycorelinux.net&#x2F;5.x&#x2F;x86ENV TCZ_DEPS        iptables \                    iproute2 \                    openssh openssl-1.0.0 \                    tar \                    gcc_libs \                    acpid \                    xz liblzma \                    git expat2 libiconv libidn libgpg-error libgcrypt libssh2 \                    nfs-utils tcp_wrappers portmap rpcbind libtirpc \                    curl ntpclient# Make the ROOTFSRUN mkdir -p $ROOTFS# Install the kernel modules in $ROOTFSRUN cd &#x2F;linux-kernel &amp;&amp; \    make INSTALL_MOD_PATH&#x3D;$ROOTFS modules_install firmware_install# Remove useless kernel modules, based on unclejack&#x2F;debian2dockerRUN cd $ROOTFS&#x2F;lib&#x2F;modules &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;sound&#x2F;* &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;drivers&#x2F;gpu&#x2F;* &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;drivers&#x2F;infiniband&#x2F;* &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;drivers&#x2F;isdn&#x2F;* &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;drivers&#x2F;media&#x2F;* &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;drivers&#x2F;staging&#x2F;lustre&#x2F;* &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;drivers&#x2F;staging&#x2F;comedi&#x2F;* &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;fs&#x2F;ocfs2&#x2F;* &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;net&#x2F;bluetooth&#x2F;* &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;net&#x2F;mac80211&#x2F;* &amp;&amp; \    rm -rf .&#x2F;*&#x2F;kernel&#x2F;net&#x2F;wireless&#x2F;*# Install libcapRUN curl -L ftp:&#x2F;&#x2F;ftp.de.debian.org&#x2F;debian&#x2F;pool&#x2F;main&#x2F;libc&#x2F;libcap2&#x2F;libcap2_2.22.orig.tar.gz | tar -C &#x2F; -xz &amp;&amp; \    cd &#x2F;libcap-2.22 &amp;&amp; \    sed -i &#39;s&#x2F;LIBATTR :&#x3D; yes&#x2F;LIBATTR :&#x3D; no&#x2F;&#39; Make.Rules &amp;&amp; \    sed -i &#39;s&#x2F;\(^CFLAGS :&#x3D; .*\)&#x2F;\1 -m32&#x2F;&#39; Make.Rules &amp;&amp; \    make &amp;&amp; \    mkdir -p output &amp;&amp; \    make prefix&#x3D;&#96;pwd&#96;&#x2F;output install &amp;&amp; \    mkdir -p $ROOTFS&#x2F;usr&#x2F;local&#x2F;lib &amp;&amp; \    cp -av &#96;pwd&#96;&#x2F;output&#x2F;lib64&#x2F;* $ROOTFS&#x2F;usr&#x2F;local&#x2F;lib# Make sure the kernel headers are installed for aufs-util, and then build itRUN cd &#x2F;linux-kernel &amp;&amp; \    make INSTALL_HDR_PATH&#x3D;&#x2F;tmp&#x2F;kheaders headers_install &amp;&amp; \    cd &#x2F; &amp;&amp; \    git clone git:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;aufs&#x2F;aufs-util &amp;&amp; \    cd &#x2F;aufs-util &amp;&amp; \    git checkout aufs3.9 &amp;&amp; \    CPPFLAGS&#x3D;&quot;-m32 -I&#x2F;tmp&#x2F;kheaders&#x2F;include&quot; CLFAGS&#x3D;$CPPFLAGS LDFLAGS&#x3D;$CPPFLAGS make &amp;&amp; \    DESTDIR&#x3D;$ROOTFS make install &amp;&amp; \    rm -rf &#x2F;tmp&#x2F;kheaders# Download the rootfs, don&#39;t unpack it though:RUN curl -L -o &#x2F;tcl_rootfs.gz $TCL_REPO_BASE&#x2F;release&#x2F;distribution_files&#x2F;rootfs.gz# Install the TCZ dependenciesRUN for dep in $TCZ_DEPS; do \    echo &quot;Download $TCL_REPO_BASE&#x2F;tcz&#x2F;$dep.tcz&quot; &amp;&amp;\        curl -L -o &#x2F;tmp&#x2F;$dep.tcz $TCL_REPO_BASE&#x2F;tcz&#x2F;$dep.tcz &amp;&amp; \        unsquashfs -f -d $ROOTFS &#x2F;tmp&#x2F;$dep.tcz &amp;&amp; \        rm -f &#x2F;tmp&#x2F;$dep.tcz ;\    doneCOPY VERSION $ROOTFS&#x2F;etc&#x2F;version# Get the Docker version that matches our boot2docker version# Note: &#96;docker version&#96; returns non-true when there is no server to askRUN curl -L -o $ROOTFS&#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker https:&#x2F;&#x2F;get.docker.io&#x2F;builds&#x2F;Linux&#x2F;x86_64&#x2F;docker-$(cat $ROOTFS&#x2F;etc&#x2F;version) &amp;&amp; \    chmod +x $ROOTFS&#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker &amp;&amp; \    &#123; $ROOTFS&#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker version || true; &#125;# get generate_certRUN curl -L -o $ROOTFS&#x2F;usr&#x2F;local&#x2F;bin&#x2F;generate_cert https:&#x2F;&#x2F;github.com&#x2F;SvenDowideit&#x2F;generate_cert&#x2F;releases&#x2F;download&#x2F;0.1&#x2F;generate_cert-0.1-linux-386&#x2F; &amp;&amp; \    chmod +x $ROOTFS&#x2F;usr&#x2F;local&#x2F;bin&#x2F;generate_cert# Get the git versioning infoCOPY .git &#x2F;git&#x2F;.gitRUN cd &#x2F;git &amp;&amp; \    GIT_BRANCH&#x3D;$(git rev-parse --abbrev-ref HEAD) &amp;&amp; \    GITSHA1&#x3D;$(git rev-parse --short HEAD) &amp;&amp; \    DATE&#x3D;$(date) &amp;&amp; \    echo &quot;$&#123;GIT_BRANCH&#125; : $&#123;GITSHA1&#125; - $&#123;DATE&#125;&quot; &gt; $ROOTFS&#x2F;etc&#x2F;boot2dockerCOPY rootfs&#x2F;isolinux &#x2F;isolinux# Copy our custom rootfsCOPY rootfs&#x2F;rootfs $ROOTFS# These steps can only be run once, so can&#39;t be in make_iso.sh (which can be run in chained Dockerfiles)# see https:&#x2F;&#x2F;github.com&#x2F;boot2docker&#x2F;boot2docker&#x2F;blob&#x2F;master&#x2F;doc&#x2F;BUILD.mdRUN    \# Make sure init scripts are executable &amp;&amp; \find $ROOTFS&#x2F;etc&#x2F;rc.d&#x2F; $ROOTFS&#x2F;usr&#x2F;local&#x2F;etc&#x2F;init.d&#x2F; -exec chmod +x &#39;&#123;&#125;&#39; &#39;;&#39; &amp;&amp; \# Download Tiny Core Linux rootfs  &amp;&amp; \( cd $ROOTFS &amp;&amp; zcat &#x2F;tcl_rootfs.gz | cpio -f -i -H newc -d --no-absolute-filenames ) &amp;&amp; \# Change MOTD &amp;&amp; \mv $ROOTFS&#x2F;usr&#x2F;local&#x2F;etc&#x2F;motd $ROOTFS&#x2F;etc&#x2F;motd &amp;&amp; \# Make sure we have the correct bootsync &amp;&amp; \mv $ROOTFS&#x2F;boot*.sh $ROOTFS&#x2F;opt&#x2F; &amp;&amp; \chmod +x $ROOTFS&#x2F;opt&#x2F;*.sh &amp;&amp; \# Make sure we have the correct shutdown &amp;&amp; \mv $ROOTFS&#x2F;shutdown.sh $ROOTFS&#x2F;opt&#x2F;shutdown.sh &amp;&amp; \chmod +x $ROOTFS&#x2F;opt&#x2F;shutdown.sh &amp;&amp; \# Add serial console &amp;&amp; \echo &quot;#!&#x2F;bin&#x2F;sh&quot; &gt; $ROOTFS&#x2F;usr&#x2F;local&#x2F;bin&#x2F;autologin &amp;&amp; \echo &quot;&#x2F;bin&#x2F;login -f docker&quot; &gt;&gt; $ROOTFS&#x2F;usr&#x2F;local&#x2F;bin&#x2F;autologin &amp;&amp; \chmod 755 $ROOTFS&#x2F;usr&#x2F;local&#x2F;bin&#x2F;autologin &amp;&amp; \echo &#39;ttyS0:2345:respawn:&#x2F;sbin&#x2F;getty -l &#x2F;usr&#x2F;local&#x2F;bin&#x2F;autologin 9600 ttyS0 vt100&#39; &gt;&gt; $ROOTFS&#x2F;etc&#x2F;inittab &amp;&amp; \# fix su - &amp;&amp; \echo root &gt; $ROOTFS&#x2F;etc&#x2F;sysconfig&#x2F;superuserCOPY rootfs&#x2F;make_iso.sh &#x2F;RUN &#x2F;make_iso.shCMD [&quot;cat&quot;, &quot;boot2docker.iso&quot;]</code></pre><ol><li><p>FROM指令和MAINTAINER指令</p><p>脚本的第1行是<code>FROM</code>指令。通过<code>FROM</code>指令，<code>docker</code>编译程序能够知道在哪个基础镜像执行来进行编译。所有的Dockerfile都必须以<code>FROM</code>指令开始。第二条指令<code>MAINTAINER</code>，用来标明这个镜像的维护者信息。</p></li><li><p>RUN指令</p><p>接下来是<code>RUN</code>指令。这条指令用来在<code>docker</code>的编译环境中运行指定命令。上面这条指令会在编译环境运行<code>/bin/sh -c &quot;apt-get update &amp;&amp; apt-get -y install ...&quot;</code>。<code>RUN</code>指令还有另外一种格式：</p><pre class="language-none"><code class="language-none">RUN [&quot;程序名&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code></pre><p>这种格式运行程序，可以免除运行<code>/bin/sh</code>的消耗。这种格式使用Json格式将程序名与所需参数组成一个字符串数组，所以如果参数中有引号等特殊字符，需要进行转义。</p></li><li><p>ENV指令</p><p><code>ENV</code>指令用来指定在执行<code>docker run</code>命令运行镜像时，自动设置的环境变量。这些环境变量可以通过<code>docker run</code>命令的<code>--evn</code>参数来进行修改。</p></li><li><p>COPY指令和ADD指令</p><p><code>COPY</code>指令用来将本地（Dockerfile所在位置）的文件或文件夹复制到编译环境的指定路径下。上面的例子里，boot2docker的Dockerfile希望将与Dockerfile同一目录下的<code>kernel_config</code>文件复制到编译环境的<code>/linux-kernal/.config</code>。Dockerfile还提供了另外一个类似的指令：<code>ADD</code>。在复制文件方面<code>ADD</code>指令和<code>COPY</code>指令的格式和效果是完全一样的。这两个指令的区别主要由两点：</p><ol><li><code>ADD</code>指令可以从一个URL地址下载内容复制到容器的文件系统中;</li><li><code>ADD</code>指令会将压缩打包格式的文件解开后复制到指定位置，而<code>COPY</code>指令只做复制操作。</li></ol></li><li><p>CMD指令</p><p>这是整个Dockerfile脚本的最后一条指令。当Dockerfile已经完成了所有环境的安装与配置，通过<code>CMD</code>指令来指示<code>docker run</code>命令运行镜像时要执行的命令。上面的例子里，在完成所有工作后，boot2docker的编译脚本将编译结果输出到本地环境下。</p></li><li><p>其他指令</p><p>上面我们通过boot2docker的Dockerfile脚本学习了几个最常用的指令。接下来我们再学习剩下的几个指令。</p><h3 id="EXPOSE指令"><a href="#EXPOSE指令" class="headerlink" title="EXPOSE指令"></a><code>EXPOSE</code>指令</h3><p><code>EXPOSE &lt;端口&gt; [&lt;端口&gt;...]</code>指令用于标明，这个镜像中的应用将会侦听某个端口，并且希望能将这个端口映射到主机的网络界面上。但是，为了安全，<code>docker run</code>命令如果没有带上响应的端口映射参数，<code>docker</code>并不会将端口映射出了。</p><h3 id="ENTRYPOINT指令"><a href="#ENTRYPOINT指令" class="headerlink" title="ENTRYPOINT指令"></a><code>ENTRYPOINT</code>指令</h3><p><code>ENTRYPOINT</code>指令和前面介绍过的<code>CMD</code>一样，用于标明一个镜像作为容器运行时，最后要执行的程序或命令。这两个指令有相同之处，也有区别。通过两个指令的配合使用可以配置出不同的效果。</p><p><code>ENTRYPOINT</code>指令有两种格式，<code>CMD</code>指令有三种格式：</p><pre class="language-none"><code class="language-none">ENTRYPOINT [&quot;程序名&quot;, &quot;参数1&quot;, &quot;参数2&quot;]ENTRYPOINT 命令 参数1 参数2CMD [&quot;程序名&quot;, &quot;参数1&quot;, &quot;参数2&quot;]CMD 命令 参数1 参数2CMD 参数1 参数2</code></pre><p><code>ENTRYPOINT</code>是容器运行程序的入口。也就是说，在<code>docker run</code>命令中指定的命令都将作为参数提供给<code>ENTRYPOINT</code>指定的程序。同样，上面列举的<code>CMD</code>指令格式的后面两种格式也将作为参数提供给<code>ENTRYPOINT</code>指定的程序。</p><p>默认的<code>ENTRYPOINT</code>是<code>/bin/sh -c</code>。你可以根据实际需要任意设置。但是如果在一个Dockerfile中出现了多个<code>ENTRYPOINT</code>指令，那么，只有最后一个<code>ENTRYPOINT</code>指令是起效的。</p><p>一种常用的设置是将命令与必要参数设置到<code>ENTRYPOINT</code>中，而运行时只提供其他选项。例如：你有一个MySQL的客户端程序运行在容器中，而客户端所需要的主机地址、用户名和密码你不希望每次都输入，你就可以将<code>ENTRYPOINT</code>设置成：<code>ENTRYPOINT mysql -u &lt;用户名&gt; -p &lt;密码&gt; -h &lt;主机名&gt;</code>。而你运行时，只需要指定数据库名。</p><h3 id="VOLUME指令"><a href="#VOLUME指令" class="headerlink" title="VOLUME指令"></a><code>VOLUME</code>指令</h3><pre class="language-none"><code class="language-none">VOLUME [&quot;路径&quot;]</code></pre><p><code>VOLUME</code>指令用于在容器内创建一个或多个卷。而更多的时候，是在执行<code>docker run</code>时指定要创建的卷以及本地路径来进行映射。关于这个用法将在后面的章节学习到。</p><h3 id="USER指令"><a href="#USER指令" class="headerlink" title="USER指令"></a><code>USER</code>指令</h3><pre class="language-none"><code class="language-none">USER 用户名或用户ID</code></pre><p><code>USER</code>指令用于容器内运行<code>RUN</code>指令或<code>CMD</code>指令的用户。例如，在构建一个nginx镜像时，你希望最后运行nginx的用户为nginx，就可以在<code>CMD [&quot;nginx&quot;]</code>之前将用户设置为<code>nginx</code>。</p><p>如果在运行<code>docker run</code>命令时设置了<code>-u 用户名</code>参数，那么将覆盖<code>USER</code>指令设置的用户。</p><h3 id="WORKDIR指令"><a href="#WORKDIR指令" class="headerlink" title="WORKDIR指令"></a><code>WORKDIR</code>指令</h3><pre class="language-none"><code class="language-none">WORKDIR 路径</code></pre><p><code>WORKDIR</code>指令用于设置执行<code>RUN</code>指令、<code>CMD</code>指令和<code>ENTRYPOINT</code>指令执行时的工作目录。在Dockerfile中可以多次设置<code>WORKDIR</code>，在每次设置之后的命令将使用新的路径。</p><h3 id="ONBUILD指令"><a href="#ONBUILD指令" class="headerlink" title="ONBUILD指令"></a><code>ONBUILD</code>指令</h3><pre class="language-none"><code class="language-none">ONBUILD 指令</code></pre><p><code>ONBUILD</code>指令用于设置一些指令，当本镜像作为基础镜像被其他Dockerfile用<code>FROM</code>指令引用时，在所有其他指令执行之前先执行这些指令。</p></li></ol><h1 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 批量启动</span>docker-compose up -d <span class="token comment"># 改名了实现了构建镜像、(重新)创建服务、启动服务，并关联服务相关的容器操作</span><span class="token comment"># 启动</span>docker-compose start <span class="token comment"># -f指定配置文件</span><span class="token comment"># 停止</span>docker-compose stop</code></pre><h2 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h2><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> dockercloud/hello<span class="token punctuation">-</span>world    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token number">8080</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> front<span class="token punctuation">-</span>tier      <span class="token punctuation">-</span> back<span class="token punctuation">-</span>tier  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> web    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> back<span class="token punctuation">-</span>tier  <span class="token key atrule">lb</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> dockercloud/haproxy    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> web    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> front<span class="token punctuation">-</span>tier      <span class="token punctuation">-</span> back<span class="token punctuation">-</span>tier    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock <span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">front-tier</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge  <span class="token key atrule">back-tier</span><span class="token punctuation">:</span><span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge</code></pre><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>version是compose的版本，下表是compose版本与docker版本对照表：</p><h3 id="services"><a href="#services" class="headerlink" title="services"></a>services</h3><p>services是用来配置定义每个容器启动参数，每个service就是一个容器，services下一级配置即是服务名称，例如上面示例中的redis, db等。</p><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>image是指定服务的镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。</p><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>服务除了可以基于指定的镜像，还可以基于一份 Dockerfile，在使用 up 启动之时执行构建任务，这个构建标签就是 build，它可以指定 Dockerfile 所在文件夹的路径。Compose 将会利用它自动构建这个镜像，然后使用这个镜像启动服务容器。</p><pre class="language-none"><code class="language-none">build: &#x2F;path&#x2F;to&#x2F;build&#x2F;dir</code></pre><p>也可以是相对路径，只要上下文确定就可以读取到 Dockerfile。</p><pre class="language-none"><code class="language-none">build: .&#x2F;dir</code></pre><p>设定上下文根目录，然后以该目录为准指定 Dockerfile。</p><pre class="language-none"><code class="language-none">build:  context: ..&#x2F;  dockerfile: path&#x2F;of&#x2F;Dockerfile</code></pre><blockquote><p>注意 build 都是一个目录，如果你要指定 Dockerfile 文件需要在 build 标签的子级标签中使用 dockerfile 标签指定，如上面的例子。<br> 如果你同时指定了 image 和 build 两个标签，那么 Compose 会构建镜像并且把镜像命名为 image 后面的那个名字。</p></blockquote><p>既然可以在 docker-compose.yml 中定义构建任务，那么一定少不了 arg 这个标签，就像 Dockerfile 中的 ARG 指令，它可以在构建过程中指定环境变量，但是在构建成功后取消，在 docker-compose.yml 文件中也支持这样的写法：</p><pre class="language-none"><code class="language-none">build:  context: .  args:    buildno: 1    password: secret</code></pre><p>下面这种写法也是支持的，一般来说下面的写法更适合阅读。</p><pre class="language-none"><code class="language-none">build:  context: .  args:    - buildno&#x3D;1    - password&#x3D;secret</code></pre><p>与 ENV 不同的是，ARG 是允许空值的。例如：</p><pre class="language-none"><code class="language-none">args:  - buildno  - password</code></pre><p>这样构建过程可以向它们赋值。</p><blockquote><p>注意：YAML 的布尔值（true, false, yes, no, on, off）必须要使用引号引起来（单引号、双引号均可），否则会当成字符串解析。</p></blockquote><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>使用 command 可以覆盖容器启动后默认执行的命令。</p><pre class="language-none"><code class="language-none">command: bundle exec thin -p 3000</code></pre><p>也可以写成类似 Dockerfile 中的格式：</p><pre class="language-none"><code class="language-none">command: [bundle, exec, thin, -p, 3000]</code></pre><h3 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h3><p>Compose 的容器名称格式是：&lt;项目名称&gt;&lt;服务名称&gt;&lt;序号&gt;<br>虽然可以自定义项目名称、服务名称，但是如果你想完全控制容器的命名，可以使用这个标签指定：</p><pre class="language-none"><code class="language-none">container_name: app</code></pre><p>这样容器的名字就指定为 app 了。</p><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h3><p>在使用 Compose 时，最大的好处就是少打启动命令，但是一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。<br> 例如在没启动数据库容器的时候启动了应用容器，这时候应用容器会因为找不到数据库而退出，为了避免这种情况我们需要加入一个标签，就是 depends_on，这个标签解决了容器的依赖、启动先后的问题。<br> 例如下面容器会先启动 redis 和 db 两个服务，最后才启动 web 服务：</p><pre class="language-none"><code class="language-none">version: &#39;2&#39;services:  web:    build: .    depends_on:      - db      - redis  redis:    image: redis  db:    image: postgres</code></pre><p>注意的是，默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系。</p><h3 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h3><p>和 –dns 参数一样用途，格式如下：</p><pre class="language-none"><code class="language-none">dns: 8.8.8.8</code></pre><p>也可以是一个列表：</p><pre class="language-none"><code class="language-none">dns:  - 8.8.8.8  - 9.9.9.9</code></pre><p>此外 dns_search 的配置也类似：</p><pre class="language-none"><code class="language-none">dns_search: example.comdns_search:  - dc1.example.com  - dc2.example.com</code></pre><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><p>和 arg 有几分类似，这个标签的作用是设置镜像变量，它可以保存变量到镜像里面，也就是说启动的容器也会包含这些变量设置，这是与 arg 最大的不同。<br> 一般 arg 标签的变量仅用在构建过程中。而 environment 和 Dockerfile 中的 ENV 指令一样会把变量一直保存在镜像、容器中，类似 docker run -e 的效果。</p><pre class="language-none"><code class="language-none">environment:  RACK_ENV: development  SHOW: &#39;true&#39;  SESSION_SECRET: environment:  - RACK_ENV&#x3D;development  - SHOW&#x3D;true  - SESSION_SECRET</code></pre><h3 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h3><p>添加主机名的标签，就是往/etc/hosts文件中添加一些记录，与Docker client的–add-host类似：</p><pre class="language-none"><code class="language-none">extra_hosts: - &quot;somehost:162.242.195.82&quot; - &quot;otherhost:50.31.209.229&quot;</code></pre><p>启动之后查看容器内部hosts：</p><pre class="language-none"><code class="language-none">162.242.195.82  somehost50.31.209.229   otherhost</code></pre><h3 id="labels"><a href="#labels" class="headerlink" title="labels"></a>labels</h3><p>向容器添加元数据，和Dockerfile的LABEL指令一个意思，格式如下：</p><pre class="language-none"><code class="language-none">labels:  com.example.description: &quot;Accounting webapp&quot;  com.example.department: &quot;Finance&quot;  com.example.label-with-empty-value: &quot;&quot;labels:  - &quot;com.example.description&#x3D;Accounting webapp&quot;  - &quot;com.example.department&#x3D;Finance&quot;  - &quot;com.example.label-with-empty-value&quot;</code></pre><p>映射端口的标签。<br> 使用HOST:CONTAINER格式或者只是指定容器的端口，宿主机会随机映射端口。</p><pre class="language-none"><code class="language-none">ports: - &quot;3000&quot; - &quot;8000:8000&quot; - &quot;49100:22&quot; - &quot;127.0.0.1:8001:8001&quot;</code></pre><blockquote><p>注意：当使用HOST:CONTAINER格式来映射端口时，如果你使用的容器端口小于60你可能会得到错误得结果，因为YAML将会解析xx:yy这种数字格式为60进制。所以建议采用字符串格式。</p></blockquote><h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h3><p>挂载一个目录或者一个已存在的数据卷容器，可以直接使用 [HOST:CONTAINER] 这样的格式，或者使用 [HOST:CONTAINER:ro] 这样的格式，后者对于容器来说，数据卷是只读的，这样可以有效保护宿主机的文件系统。<br> Compose的数据卷指定路径可以是相对路径，使用 . 或者 .. 来指定相对目录。<br> 数据卷的格式可以是下面多种形式：</p><pre class="language-none"><code class="language-none">volumes:  &#x2F;&#x2F; 只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的）。  - &#x2F;var&#x2F;lib&#x2F;mysql   &#x2F;&#x2F; 使用绝对路径挂载数据卷  - &#x2F;opt&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql   &#x2F;&#x2F; 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。  - .&#x2F;cache:&#x2F;tmp&#x2F;cache   &#x2F;&#x2F; 使用用户的相对路径（~&#x2F; 表示的目录是 &#x2F;home&#x2F;&lt;用户目录&gt;&#x2F; 或者 &#x2F;root&#x2F;）。  - ~&#x2F;configs:&#x2F;etc&#x2F;configs&#x2F;:ro   &#x2F;&#x2F; 已经存在的命名的数据卷。  - datavolume:&#x2F;var&#x2F;lib&#x2F;mysql</code></pre><p>如果你不使用宿主机的路径，你可以指定一个volume_driver。</p><pre class="language-none"><code class="language-none">volume_driver: mydriver</code></pre><h3 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h3><p>加入指定网络，格式如下：</p><pre class="language-none"><code class="language-none">services:  some-service:    networks:     - some-network     - other-network</code></pre><p>关于这个标签还有一个特别的子标签aliases，这是一个用来设置服务别名的标签，例如：</p><pre class="language-none"><code class="language-none">services:  some-service:    networks:      some-network:        aliases:         - alias1         - alias3      other-network:        aliases:         - alias2</code></pre><p>相同的服务可以在不同的网络有不同的别名。</p><h3 id="network-mode"><a href="#network-mode" class="headerlink" title="network_mode"></a>network_mode</h3><p>网络模式，与Docker client的–net参数类似，只是相对多了一个service:[service name] 的格式。<br> 例如：</p><pre class="language-none"><code class="language-none">network_mode: &quot;bridge&quot;network_mode: &quot;host&quot;network_mode: &quot;none&quot;network_mode: &quot;service:[service name]&quot;network_mode: &quot;container:[container name&#x2F;id]&quot;</code></pre><h1 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5b319c3cf265da597d0aa79d">https://juejin.im/post/5b319c3cf265da597d0aa79d</a></p><p><a href="https://github.com/zhangpeihao/LearningDocker/blob/master/manuscript/04-WriteDockerfile.md">https://github.com/zhangpeihao/LearningDocker/blob/master/manuscript/04-WriteDockerfile.md</a></p><p><a href="https://www.jianshu.com/p/4f14637f4b35">https://www.jianshu.com/p/4f14637f4b35</a></p><p><a href="http://dockone.io/article/128">http://dockone.io/article/128</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-装饰器</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="简单的装饰器"><a href="#简单的装饰器" class="headerlink" title="简单的装饰器"></a>简单的装饰器</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">use_logging</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"%s is running"</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 把 foo 当做参数传递进来时，执行func()就相当于执行foo()</span>    <span class="token keyword">return</span> wrapper<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'i am foo'</span><span class="token punctuation">)</span>foo <span class="token operator">=</span> use_logging<span class="token punctuation">(</span>foo<span class="token punctuation">)</span>  <span class="token comment"># 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment"># 执行foo()就相当于执行 wrapper()</span><span class="token triple-quoted-string string">'''WARNING:root:foo is runningi am foo'''</span></code></pre><h1 id="语法糖"><a href="#语法糖" class="headerlink" title="@ 语法糖"></a>@ 语法糖</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">use_logging</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">"%s is running"</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token decorator annotation punctuation">@use_logging</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"i am foo"</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="args、-kwargs"><a href="#args、-kwargs" class="headerlink" title="*args、**kwargs"></a>*args、**kwargs</h1><p>可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：</p><pre class="language-none"><code class="language-none">def foo(name):    print(&quot;i am %s&quot; % name)</code></pre><p>我们可以在定义 wrapper 函数的时候指定参数：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">"%s is running"</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper</code></pre><p>这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">"%s is running"</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper</code></pre><p>如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am %s, age %s, height %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这时，你就可以把 wrapper 函数指定关键字函数：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># args是一个数组，kwargs一个字典</span>        logging<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">"%s is running"</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper</code></pre><h1 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h1><p>装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如<code>@decorator(a)</code>。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">use_logging</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> level <span class="token operator">==</span> <span class="token string">"warn"</span><span class="token punctuation">:</span>                logging<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">"%s is running"</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>            <span class="token keyword">elif</span> level <span class="token operator">==</span> <span class="token string">"info"</span><span class="token punctuation">:</span>                logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"%s is running"</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>        <span class="token keyword">return</span> wrapper    <span class="token keyword">return</span> decorator<span class="token decorator annotation punctuation">@use_logging</span><span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">"warn"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"i am %s"</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用<code>@use_logging(level=&quot;warn&quot;)</code>调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@use_logging</span><span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">"warn"</span><span class="token punctuation">)</span>`等价于`@decorator</code></pre><h1 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h1><p>没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的<code>__call__</code>方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_func <span class="token operator">=</span> func    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'class decorator runing'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_func<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'class decorator ending'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@Foo</span><span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="functools-wraps"><a href="#functools-wraps" class="headerlink" title="functools.wraps"></a>functools.wraps</h3><p>使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的<code>docstring</code>、<code>__name__</code>、参数列表，先看例子：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 装饰器</span><span class="token keyword">def</span> <span class="token function">logged</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">with_logging</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> func<span class="token punctuation">.</span>__name__      <span class="token comment"># 输出 'with_logging'</span>        <span class="token keyword">print</span> func<span class="token punctuation">.</span>__doc__       <span class="token comment"># 输出 None</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> with_logging<span class="token comment"># 函数</span><span class="token decorator annotation punctuation">@logged</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token triple-quoted-string string">"""does some math"""</span>   <span class="token keyword">return</span> x <span class="token operator">+</span> x <span class="token operator">*</span> xlogged<span class="token punctuation">(</span>f<span class="token punctuation">)</span></code></pre><p>不难发现，函数 f 被<code>with_logging</code>取代了，当然它的<code>docstring</code>，<code>__name__</code>就是变成了<code>with_logging</code>函数的信息了。好在我们有<code>functools.wraps</code>，<code>wraps</code>本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">logged</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">with_logging</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> func<span class="token punctuation">.</span>__name__      <span class="token comment"># 输出 'f'</span>        <span class="token keyword">print</span> func<span class="token punctuation">.</span>__doc__       <span class="token comment"># 输出 'does some math'</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> with_logging<span class="token decorator annotation punctuation">@logged</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token triple-quoted-string string">"""does some math"""</span>   <span class="token keyword">return</span> x <span class="token operator">+</span> x <span class="token operator">*</span> x</code></pre><h1 id="装饰器顺序"><a href="#装饰器顺序" class="headerlink" title="装饰器顺序"></a>装饰器顺序</h1><p>一个函数还可以同时定义多个装饰器，比如：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@a</span><span class="token decorator annotation punctuation">@b</span><span class="token decorator annotation punctuation">@c</span><span class="token keyword">def</span> <span class="token function">f</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于</p><pre class="language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> a<span class="token punctuation">(</span>b<span class="token punctuation">(</span>c<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="与-区别"><a href="#与-区别" class="headerlink" title="*与**区别"></a>*与**区别</h2><p>在Python的函数定义中使用<em>args和**kwargs可传递可变参数。</em>args用作传递非命名键值可变长参数列表（位置参数），**kwargs用作传递键值可变长参数列表。在函数调用的时候也有解构的使用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_var_args</span><span class="token punctuation">(</span>farg<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"formal arg:"</span><span class="token punctuation">,</span> farg    <span class="token keyword">for</span> arg <span class="token keyword">in</span> args<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"another arg:"</span><span class="token punctuation">,</span> arg test_var_args<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''formal arg: 1another arg: twoanother arg: 3'''</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_var_kwargs</span><span class="token punctuation">(</span>farg<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"formal arg:"</span><span class="token punctuation">,</span> farg    <span class="token keyword">for</span> key <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"another keyword arg: %s: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> kwargs<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> test_var_kwargs<span class="token punctuation">(</span>farg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> myarg2<span class="token operator">=</span><span class="token string">"two"</span><span class="token punctuation">,</span> myarg3<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Required argument:  1Optional argument (*args):  2Optional argument (*args):  3Optional argument (*args):  4Optional argument k2 (*kwargs): 6Optional argument k1 (*kwargs): 5'''</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_var_args_call</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"arg1:"</span><span class="token punctuation">,</span> arg1    <span class="token keyword">print</span> <span class="token string">"arg2:"</span><span class="token punctuation">,</span> arg2    <span class="token keyword">print</span> <span class="token string">"arg3:"</span><span class="token punctuation">,</span> arg3 args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>test_var_args_call<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_var_args_call</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">"arg1:"</span><span class="token punctuation">,</span> arg1    <span class="token keyword">print</span> <span class="token string">"arg2:"</span><span class="token punctuation">,</span> arg2    <span class="token keyword">print</span> <span class="token string">"arg3:"</span><span class="token punctuation">,</span> arg3 kwargs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"arg3"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"arg2"</span><span class="token punctuation">:</span> <span class="token string">"two"</span><span class="token punctuation">&#125;</span>test_var_args_call<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://foofish.net/python-decorator.html">https://foofish.net/python-decorator.html</a></p><p><a href="https://www.biaodianfu.com/python-args-kwargs.html">https://www.biaodianfu.com/python-args-kwargs.html</a></p><p><a href="https://my.oschina.net/leejun2005/blog/477614">https://my.oschina.net/leejun2005/blog/477614</a> 例子介绍的很详细</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-字符串格式</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="格式化操作符（-）"><a href="#格式化操作符（-）" class="headerlink" title="格式化操作符（%）"></a>格式化操作符（%）</h1><p>“%”是Python风格的字符串格式化操作符，非常类似C语言里的printf()函数的字符串格式化（C语言中也是使用%）。</p><p>下面整理了一下Python中字符串格式化符合：</p><table><thead><tr><th>格式化符号</th><th>说明</th></tr></thead><tbody><tr><td>%c</td><td>转换成字符（ASCII 码值，或者长度为一的字符串）</td></tr><tr><td>%r</td><td>优先用repr()函数进行字符串转换</td></tr><tr><td>%s</td><td>优先用str()函数进行字符串转换</td></tr><tr><td>%d / %i</td><td>转成有符号十进制数</td></tr><tr><td>%u</td><td>转成无符号十进制数</td></tr><tr><td>%o</td><td>转成无符号八进制数</td></tr><tr><td>%x / %X</td><td>转成无符号十六进制数（x / X 代表转换后的十六进制字符的大小写）</td></tr><tr><td>%e / %E</td><td>转成科学计数法（e / E控制输出e / E）</td></tr><tr><td>%f / %F</td><td>转成浮点数（小数部分自然截断）</td></tr><tr><td>%g / %G</td><td>%e和%f / %E和%F 的简写</td></tr><tr><td>%%</td><td>输出% （格式化字符串里面包括百分号，那么必须使用%%）</td></tr></tbody></table><p>这里列出的格式化符合都比较简单，唯一想要强调一下的就是”%s”和”%r”的差别。</p><p>看个简单的代码：</p><pre class="language-python" data-language="python"><code class="language-python">string <span class="token operator">=</span> <span class="token string">"Hello\tWill\n"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s"</span> <span class="token operator">%</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%r"</span> <span class="token operator">%</span>string<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Hello   Will'Hello\tWill\n''''</span></code></pre><p>补充：</p><p>Python打印值的时候会保持该值在Python代码中的状态，不是用户所希望看到的状态。而使用print打印值则不一样，print打印出来的值是用户所希望看到的状态。 str和repr的区别：</p><ol><li><p>str</p><p>把值转换为合理形式的字符串，给用户看的。str实际上类似于int，long，是一种类型。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"Hello,  world!"</span><span class="token punctuation">)</span><span class="token comment"># Hello,  world!            </span><span class="token keyword">print</span> <span class="token builtin">str</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token comment"># 1000                         </span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token comment"># 'Hello, world!'               # 字符串转换之后仍然是字符串</span><span class="token builtin">str</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token comment"># '1000'</span></code></pre></li><li><p>repr()</p><p>创建一个字符串，以合法python表达式的形式来表示值。repr()是一个函数。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token builtin">repr</span><span class="token punctuation">(</span><span class="token string">"Hello,  world!"</span><span class="token punctuation">)</span><span class="token comment"># 'Hello,  world!'</span><span class="token keyword">print</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token comment"># 1000L</span><span class="token builtin">repr</span><span class="token punctuation">(</span><span class="token string">"Hello,  world!"</span><span class="token punctuation">)</span><span class="token comment"># "'Hello,  world!'"</span><span class="token builtin">repr</span><span class="token punctuation">(</span>1000L<span class="token punctuation">)</span><span class="token comment"># '1000L'</span></code></pre></li></ol><h1 id="格式化操作辅助符"><a href="#格式化操作辅助符" class="headerlink" title="格式化操作辅助符"></a>格式化操作辅助符</h1><p>通过”%”可以进行字符串格式化，但是”%”经常会结合下面的辅助符一起使用。</p><table><thead><tr><th><strong>辅助符号</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>*****</td><td>定义宽度或者小数点精度</td></tr><tr><td><strong>-</strong></td><td>用做左对齐</td></tr><tr><td><strong>+</strong></td><td>在正数前面显示加号(+)</td></tr><tr><td><strong>#</strong></td><td>在八进制数前面显示零(0)，在十六进制前面显示”0x”或者”0X”（取决于用的是”x”还是”X”）</td></tr><tr><td><strong>0</strong></td><td>显示的数字前面填充”0”而不是默认的空格</td></tr><tr><td><strong>(var)</strong></td><td>映射变量（通常用来处理字段类型的参数）</td></tr><tr><td><strong>m.n</strong></td><td>m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）</td></tr></tbody></table><pre class="language-python" data-language="python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d to hex is %x"</span> <span class="token operator">%</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d to hex is %X"</span> <span class="token operator">%</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d to hex is %#x"</span> <span class="token operator">%</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d to hex is %#X"</span> <span class="token operator">%</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 浮点数</span>f <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"value of f is: %.4f"</span> <span class="token operator">%</span>f<span class="token punctuation">)</span><span class="token comment"># 指定宽度和对齐</span>students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Wilber"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"Will"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"June"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name: %10s, age: %10d"</span> <span class="token operator">%</span><span class="token punctuation">(</span>students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name: %-10s, age: %-10d"</span> <span class="token operator">%</span><span class="token punctuation">(</span>students<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> students<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name: %*s, age: %0*d"</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> students<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> students<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># dict参数</span><span class="token keyword">for</span> student <span class="token keyword">in</span> students<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%(name)s is %(age)d years old"</span> <span class="token operator">%</span>student<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''100 to hex is 64100 to hex is 64100 to hex is 0x64100 to hex is 0X64value of f is: 3.1416name:     Wilber, age:         27name: Will      , age: 28        name:       June, age: 0000000027Wilber is 27 years oldWill is 28 years oldJune is 27 years old'''</span></code></pre><h1 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h1><p>其实，在Python中进行字符串的格式化，除了格式化操作符，还可以使用string模块中的字符串模板（Template）对象。下面就主要看看Template对象的substitute()方法：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> string <span class="token keyword">import</span> TemplatesTemp <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">'Hi ,$name,$$ '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sTemp<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'wumu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Hi ,wumu,$ '''</span></code></pre><h1 id="format"><a href="#format" class="headerlink" title="format"></a>format</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 位置参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; is &#123;&#125; years old"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"Wilber"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hi, &#123;0&#125;! &#123;0&#125; is &#123;1&#125; years old"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"Wilber"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关键字参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;name&#125; is &#123;age&#125; years old"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Wilber"</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 下标参数</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Wilber"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0[0]&#125; is &#123;0[1]&#125; years old"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 填充与对齐</span><span class="token comment"># ^、&lt;、>分别是居中、左对齐、右对齐，后面带宽度</span><span class="token comment"># :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:&lt;8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:^8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:0>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:a>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'3.14'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 浮点数精度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:.4f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:0>10.4f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 进制</span><span class="token comment"># b、d、o、x分别是二进制、十进制、八进制、十六进制</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:b&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:d&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:o&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:#X&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 千位分隔符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:,&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">15700000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Wilber is 28 years oldHi, Wilber! Wilber is 28 years oldWilber is 28 years oldWilber is 28 years old    3.143.14      3.14  00003.14aaaa3.143.141600003.141610111113b0xb0XB15,700,000,000'''</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.cnblogs.com/wilber2013/p/4641616.html">https://www.cnblogs.com/wilber2013/p/4641616.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql自带的数据库</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h1><ol><li><p>SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。</p></li><li><p>TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的　　结果取之此表。</p></li><li><p>COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。</p></li><li><p>STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。</p></li><li><p>USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。</p></li><li><p>SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。</p></li><li><p>TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。</p></li><li><p>COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。</p></li><li><p>CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。</p></li><li><p>COLLATIONS表：提供了关于各字符集的对照信息。</p></li><li><p>COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。</p></li><li><p>TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。</p></li><li><p>KEY_COLUMN_USAGE表：描述了具有约束的键列。</p></li><li><p>ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于　　　　　　　INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。</p></li><li><p>VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。</p></li><li><p>TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表。</p></li></ol><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h1 id="performance-schema"><a href="#performance-schema" class="headerlink" title="performance_schema"></a>performance_schema</h1><p> 需要设置参数： performance_schema 才可以启动该功能</p><p>按照相关的标准对进行的事件统计表, 表也是只读的，只能turcate</p><p>　　events_waits_summary_by_instance             </p><p>　　events_waits_summary_by_thread_by_event_name </p><p>　　events_waits_summary_global_by_event_name    </p><p>　　file_summary_by_event_name                   </p><p>　　file_summary_by_instance   </p><ul><li><p>setup_consumers 描述各种事件</p></li><li><p>setup_instruments 描述这个数据库下的表名以及是否开启监控。</p></li><li><p>setup_timers   描述 监控选项已经采样频率的时间间隔</p></li><li><p>events_waits_current  记录当前正在发生的等待事件，这个表是只读的表，不能update ，delete ，但是可以truncate</p></li><li><p>性能历史表 ：events_waits_history  只保留每个线程（thread） 的最近的10个事件</p></li><li><p>性能历史表 ：events_waits_history_long 记录最近的10000个事件  标准的先进先出（FIFO) 这俩表也是只读表，只能truncate</p></li></ul><h1 id="sakila"><a href="#sakila" class="headerlink" title="sakila"></a>sakila</h1><p>　　这是一个MySQL的一个样本数据库，里边都是一些例子表。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql修改字符集</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol><li>字符集（character set）：定义了字符以及字符的编码。</li><li>字符序（collation）：定义了字符的比较规则。</li></ol><h1 id="Mysql字符集"><a href="#Mysql字符集" class="headerlink" title="Mysql字符集"></a>Mysql字符集</h1><ol><li>一个字符集对应至少一种字符序（一般是1对多）。</li><li>两个不同的字符集不能有相同的字符序。</li><li>每个字符集都有默认的字符序。</li></ol><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 第一种方式SHOW CHARACTER SET;-- 第二种方式use information_schema;select * from CHARACTER_SETS;-- 例子SHOW CHARACTER SET WHERE Charset&#x3D;&quot;utf8&quot;;SHOW CHARACTER SET LIKE &quot;utf8%&quot;;</code></pre><h1 id="Mysql字符序"><a href="#Mysql字符序" class="headerlink" title="Mysql字符序"></a>Mysql字符序</h1><pre class="language-mysql" data-language="mysql"><code class="language-mysql">-- 第一种方式SHOW COLLATION WHERE Charset &#x3D; &#39;utf8&#39;;-- 第二种方式USE information_schema;SELECT * FROM COLLATIONS WHERE CHARACTER_SET_NAME&#x3D;&quot;utf8&quot;;</code></pre><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>字符序的命名，以其对应的字符集作为前缀，如下所示。比如字符序<code>utf8_general_ci</code>，标明它是字符集<code>utf8</code>的字符序。</p><p>更多规则可以参考 <a href="https://dev.mysql.com/doc/refman/5.7/en/charset-collation-names.html">官方文档</a>。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">[information_schema]&gt; SELECT CHARACTER_SET_NAME, COLLATION_NAME FROM COLLATIONS WHERE CHARACTER_SET_NAME&#x3D;&quot;utf8&quot; limit 2; </code></pre><h1 id="设置修改"><a href="#设置修改" class="headerlink" title="设置修改"></a>设置修改</h1><ol><li><p>修改数据库字符集</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER DATABASE db_name DEFAULT CHARACTER SET character_name [COLLATE ...];把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集：ALTER TABLE tbl_name CONVERT TO CHARACTER SET character_name [COLLATE ...]如：ALTER TABLE logtest CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre></li><li><p>修改表的默认字符集</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE tbl_name DEFAULT CHARACTER SET character_name [COLLATE...];如：ALTER TABLE logtest DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre></li><li><p>修改字段的字符集</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE tbl_name CHANGE c_name c_name CHARACTER SET character_name [COLLATE ...];如：ALTER TABLE logtest CHANGE title title VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre></li><li><p>查看数据库编码</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SHOW CREATE DATABASE db_name;</code></pre></li><li><p>查看表编码</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SHOW CREATE TABLE tbl_name;</code></pre></li><li><p>查看字段编码</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SHOW FULL COLUMNS FROM tbl_name;</code></pre></li><li><p>查看系统的编码字符</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">SHOW VARIABLES WHERE Variable_name LIKE &#39;character\_set\_%&#39; OR Variable_name LIKE &#39;collation%&#39;;</code></pre></li><li><p>MySQL字符集设置</p><p>系统变量：</p><pre class="language-sh" data-language="sh"><code class="language-sh">– character_set_server：默认的内部操作字符集– character_set_client：客户端来源数据使用的字符集– character_set_connection：连接层字符集– character_set_results：查询结果字符集– character_set_database：当前选中数据库的默认字符集– character_set_system：系统元数据(字段名等)字符集– 还有以collation_开头的同上面对应的变量，用来描述字符序。</code></pre><p>用introducer指定文本字符串的字符集：</p><p>– 格式为：[_charset] ‘string’ [COLLATE collation]</p><p>– 例如：</p><pre class="language-sql" data-language="sql"><code class="language-sql">• <span class="token keyword">SELECT</span> _latin1 ‘string’<span class="token punctuation">;</span>• <span class="token keyword">SELECT</span> _utf8 ‘你好’ <span class="token keyword">COLLATE</span> utf8_general_ci<span class="token punctuation">;</span>–<span class="token operator">-</span>  由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。</code></pre><h4 id="MySQL中的字符集转换过程"><a href="#MySQL中的字符集转换过程" class="headerlink" title="MySQL中的字符集转换过程"></a>MySQL中的字符集转换过程</h4><ol><li>MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</li><li>进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</li></ol><p>• 使用每个数据字段的CHARACTER SET设定值；</p><p>• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</p><p>• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</p><p>• 若上述值不存在，则使用character_set_server设定值。</p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html">https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html</a></p><p><a href="https://www.cnblogs.com/qiumingcheng/p/10336170.html">https://www.cnblogs.com/qiumingcheng/p/10336170.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理Odoo服务器实例</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>全书完整目录请见：<a href="https://alanhou.org/odoo12-cookbook/">Odoo 12开发者指南（Cookbook）第三版</a></p><p>本章中，我们将讲解如下内容：</p><ul><li>配置插件路径</li><li>更新插件模块列表</li><li>标准化你的实例目录布局</li><li>安装并升级本地插件模块</li><li>对插件应用修改</li><li>应用及尝试建议的拉取请求</li></ul><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在<a href="https://alanhou.org/installing-odoo-development-environment/">第一章 安装Odoo开发环境</a>中，我们看了如何使用与编辑器一同发布的标准核心插件来设置 Odoo 实例。本章集中讲解为 Odoo 实例添加非核心插件。Odoo中，你可以从多个目录中加载插件。此外，推荐你将第三方插件（如OCA模块）或你自定义的插件放在一个单独的文件夹中，这样可以避免与 Odoo 核心模块产生冲突。甚至Odoo 企业版也是一种类型的插件目录，你需要像普通插件目录一样加载它。</p><blockquote><p>ℹ️<strong>有关用词 – 插件(add-on) vs. 模块(module)</strong></p><p>本书中，我们使用插件或插件模块来指代 Odoo 所预期安装的 Python 包。用户界面常使用应用（app）或模块的表达 ，但我们更愿意保留模块一词来表示Python模块或包，它们不一定是 Odoo 插件，而应用（app）来表示适当定义为应用的插件模块，表示它不是Odoo主菜单中的入口。</p></blockquote><h2 id="配置插件路径"><a href="#配置插件路径" class="headerlink" title="配置插件路径"></a>配置插件路径</h2><p>通过addons_path参数的配置，你可以在 Odoo 中加载自己的插件模块。在Odoo初始化一个新数据库时，它会搜索在addons_path配置参数中给定的这些目录。addons_path会在这些目录中搜索潜在的插件模块。addons_path中所列出的目录预期应包含子目录，每个子目录是一个插件模块。在数据库初始化完成后，你将能够安装这些目录中所给出的模块。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>这一部分假定你已经准备好了实例并生成了配置文件，如在<a href="https://alanhou.org/installing-odoo-development-environment/">第一章 安装Odoo开发环境</a>中<em>在一个文件中存储实例配置</em>一节所描述。Odoo的源码存放在<del>/odoo-dev/odoo中，而配置文件存放在</del>/odoo-dev/myinstance.cfg中。</p><h3 id="如何配置…"><a href="#如何配置…" class="headerlink" title="如何配置…"></a>如何配置…</h3><p>按如下步骤在实例的addons_path中添加~/odoo-dev/local-addons目录：</p><ol><li><p>编辑你的实例的配置文件，即 ~/odoo-dev/my-instance.cfg。</p></li><li><p>定位到以addons_path =开头一行，默认，你会看到如下内容：</p></li></ol><pre class="language-none"><code class="language-none">addons_path &#x3D; ~&#x2F;odoo-dev&#x2F;odoo&#x2F;odoo&#x2F;addons,~&#x2F;odoo-dev&#x2F;odoo&#x2F;add-ons </code></pre><p>   译者注：</p><p>   当前默认生成的配置文件中为绝对路径，且仅包含xxx/odoo/addons</p><ol start="3"><li>修改该行，添加一个逗号（英文半角），并接你想想要添加为addons_的目录名称，如以下代码所示：</li></ol>  <pre class="language-none"><code class="language-none">addons_path &#x3D; ~&#x2F;odoo-dev&#x2F;odoo&#x2F;odoo&#x2F;addons,~&#x2F;odoo-dev&#x2F;odoo&#x2F;addons,~&#x2F;odoo-dev&#x2F;local-addons </code></pre><ol start="4"><li><p>重启你的实例</p><pre class="language-none"><code class="language-none">$ ~&#x2F;odoo-dev&#x2F;odoo&#x2F;odoo-bin -c my-instance.cfg </code></pre></li></ol><h3 id="运行原理…"><a href="#运行原理…" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>在重启 Odoo 时，会读取配置文件。addons_path变量的值应为一个逗号分隔的目录列表。可接受相对路径，但它们是相对于当前工作目录的，因此应在配置文件中尽量避免。</p><p>至此，~/odoo-dev/local-addons中包含的新插件尚不在该实例的可用模块列表中。为此，你需要执行一个额外的操作，在下一部分<em>更新插件模块列表</em>中会进行讲解。</p><h3 id="扩展知识…"><a href="#扩展知识…" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>在第一次调用 odoo-bin脚本来初始化新数据库时，你可以传递一个带逗号分隔目录列表的–addons-path命令行参数。这会以所提供插件路径中所找到的所有插件来初始化可用插件模块列表。这么做时，你要显式地包含基础插件目录（odoo/odoo/addons）以及核心插件目录（odoo/addons）。</p><p>与前面稍有不同的是本地插件目录不能为空（<strong>译者注：</strong>请先阅读下面的小贴士），它必须要至少包含一个子目录，并包含插件模块的最小化结构。在<a href="https://alanhou.org/creating-odoo-add-on-modules/">第四章 创建Odoo插件模块</a>中，我们会来看如何编写你自己的模块。同时，这里有一个生成内容来满足Odoo要求的快捷版黑科技：</p><pre class="language-none"><code class="language-none">$ mkdir -p ~&#x2F;odoo-dev&#x2F;local-addons&#x2F;dummy$ touch ~&#x2F;odoo-dev&#x2F;local-addons&#x2F;dummy&#x2F;__init__.py$ echo &#39;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&#39; &gt; \~&#x2F;odoo-dev&#x2F;local-addons&#x2F;dummy&#x2F;__manifest__.py </code></pre><p>你可以使用–save选项来保存配置文件的路径：</p><pre class="language-none"><code class="language-none">$ odoo&#x2F;odoo-bin -d mydatabase \--add-ons-path&#x3D;&quot;odoo&#x2F;odoo&#x2F;addons,odoo&#x2F;addons,~&#x2F;odoo-dev&#x2F;local-addons&quot; \--save -c ~&#x2F;odoo-dev&#x2F;my-instance.cfg --stop-after-init </code></pre><p>本例中，使用相对路径不会有问题，因为它们会在配置文件中转化为绝对路径。</p><blockquote><p><strong>小贴士：</strong>因为Odoo仅当从命令行中设置路径时在插件路径的目录中查看插件，而不是在从配置文件中加载路径的时候，dummy已不再必要。因此，你可以删除它（或保留到你确定不需要新建一个配置文件时）。</p></blockquote><h2 id="更新插件模块列表"><a href="#更新插件模块列表" class="headerlink" title="更新插件模块列表"></a>更新插件模块列表</h2><p>我们在前面的部分已经说到，在向插件路径添加目录时，仅仅重启Odoo服务是不足以安装其中一个新插件模块的。Odoo还需要有一个指定动作来扫描路径并更新可用插件模块的列表。</p><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><p>启动你的实例并使用管理员账号连接它。然后，激活开发者模式（如果你不知道如何激活开发者模式，请参见<a href="https://alanhou.org/installing-odoo-development-environment/">第一章 安装Odoo开发环境</a>）。</p><h3 id="如何更新…"><a href="#如何更新…" class="headerlink" title="如何更新…"></a>如何更新…</h3><p>要更新你实例中的可用插件模块列表，你需要执行如下步骤：</p><ol><li>打开Apps菜单</li><li>点击Update Apps List：<br><a href="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg"><img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例"></a></li><li>在弹出对话框中，点击Update按钮：<br><a href="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg"><img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例"></a></li><li>在更新的最后，你可以点击Apps入口来查看已更新的可用插件模块列表。你将需要删除Apps搜索框中的默认过滤器来查看所有模块。</li></ol><h3 id="运行原理…-1"><a href="#运行原理…-1" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>在点击了Update按钮之后，Odoo会读取插件路径配置变量。对于列表中的每一个目录，它会查看包含保存在插件模块目录中名为<strong>manifest</strong>.py的插件声明文件的直接子目录。Odoo读取声明内容，并预期查找其中的Python字典。除非声明内容中包含一个键installable的值为False，插件模块的元数据就会存储在数据库中。如果模块已存在，则更新相关信息。否则，会创建一条新记录。如果此前可用的插件模块未找到，则从列表中删除该记录。</p><blockquote><p>ℹ️仅在初始化数据库后添加了新的插件路径时才需要更新应用列表。如果你在初始化数据库之前在配置文件中添加了新插件路径，那么就无需手动更新模块列表。</p></blockquote><h2 id="标准化你的实例目录布局"><a href="#标准化你的实例目录布局" class="headerlink" title="标准化你的实例目录布局"></a>标准化你的实例目录布局</h2><p>我们推荐你在开发和生产环境都使用相似的目录布局。这一标准化会在你要执行运维时体现出用处，它也会缓解你日常工作的压力。</p><p>这一部分创建将相似生命周期或相似用途的文件分组放在标准化子目录中的目录结构。请自由按照自己的需求来调整这一结构，但请确保你将这一结构在某处进行记录存档。</p><h3 id="如何标准化…"><a href="#如何标准化…" class="headerlink" title="如何标准化…"></a>如何标准化…</h3><p>创建所推荐实例布局，你需要执行如下步骤：</p><p><strong>译者注：</strong>读者也可直接使用 Alan 在 GitHub 上准备的<a href="https://github.com/alanhou/odoo12-cookbook/tree/master/Chapter02">安装脚本</a>进行操作</p><ol><li><p>为实例创建一个目录：</p><pre class="language-none"><code class="language-none">$ mkdir ~&#x2F;odoo-dev&#x2F;projectname$ cd ~&#x2F;odoo-dev&#x2F;projectname </code></pre></li><li><p>在名为env/的子目录中创建一个Python虚拟环境：</p><pre class="language-none"><code class="language-none">$ virtualenv -p python3 env </code></pre></li><li><p>创建一些子目录，如下：</p><pre class="language-none"><code class="language-none">$ mkdir src local bin filestore logs </code></pre><p>这些子目录的功能如下：</p><ul><li>src/：这包含Odoo本身的一个拷贝，以及一些第三方插件项目（我们在下一步中添加了Odoo源码）</li><li>local/：这用于保存你针对具体实例的插件</li><li>bin/：这包含各类帮助可执行shell脚本</li><li>filestore/：这用于文件存储</li><li>logs/（可选）：这用于存储服务日志文件</li></ul></li><li><p>克隆Odoo并安装所需依赖包（参见</p><p>第一章 安装Odoo开发环境</p><p>获取更多内容）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/odoo/odoo.git src/odoo$ env/bin/pip3 <span class="token function">install</span> -r src/odoo/requirements.txt </code></pre></li><li><p>以bin/odoo保存如下shell脚本：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ROOT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> $0<span class="token variable">)</span></span>/<span class="token punctuation">..</span><span class="token assign-left variable">PYTHON</span><span class="token operator">=</span><span class="token variable">$ROOT</span>/env/bin/python3<span class="token assign-left variable">ODOO</span><span class="token operator">=</span><span class="token variable">$ROOT</span>/src/odoo/odoo-bin<span class="token variable">$PYTHON</span> <span class="token variable">$ODOO</span> -c <span class="token variable">$ROOT</span>/projectname.cfg <span class="token string">"<span class="token variable">$@</span>"</span><span class="token builtin class-name">exit</span> <span class="token variable">$?</span></code></pre></li><li><p>让该脚本可执行：</p><pre class="language-none"><code class="language-none">$ chmod +x bin&#x2F;odoo </code></pre></li><li><p>创建一个空的本地模块dummy：</p></li></ol><pre class="language-none"><code class="language-none">$ mkdir -p local&#x2F;dummy$ touch local&#x2F;dummy&#x2F;__init__.py$ echo &#39;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&#39; &gt;\local&#x2F;dummy&#x2F;__manifest__.py </code></pre><ol start="8"><li>为你的实例生成配置文件：</li></ol><pre class="language-none"><code class="language-none">$ bin&#x2F;odoo --stop-after-init --save \ --addons-path src&#x2F;odoo&#x2F;odoo&#x2F;addons,src&#x2F;odoo&#x2F;addons,local \ --data-dir filestore </code></pre><ol start="9"><li>添加一个.gitignore文件，用于告诉GitHub排除这些给定目录，这样Git在提交代码时就会忽略掉这些目录，例如 filestore/, env/, logs/和src/：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dotfiles, with exceptions:</span>.*<span class="token operator">!</span>.gitignore<span class="token comment"># python compiled files</span>*.py<span class="token punctuation">[</span>co<span class="token punctuation">]</span><span class="token comment"># emacs backup files</span>*~<span class="token comment"># not tracked subdirectories</span>/env//src//filestore//logs/</code></pre><ol start="10"><li>为这个实例创建一个Git仓库并将已添加的文件添加到Git中：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> init$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>$ <span class="token function">git</span> commit -m <span class="token string">"initial version of projectname"</span></code></pre><h3 id="运行原理…-2"><a href="#运行原理…-2" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>我们生成了一个有明确标签目录和独立角色的干净的目录结构。我使用了不同的目录来存储如下内容：</p><ul><li>由其它人所维护的代码（src/中）</li><li>本地相关的具体代码</li><li>实例的文件存储</li></ul><p>通过为每个项目建一个virtualenv环境，我们可以确保该项目的依赖文件不会与其它项目的依赖产生冲突，这些项目你可能运行着不同的Odoo版本或使用了不同的第三方插件模块，这将需要不同版本的Python依赖。这当然也会带来一部分磁盘空间的开销。</p><p>以类似的方式，通过为我们不同的项目使用不同的Odoo拷贝以及第三方插件模块，我们可以让每个项目单独的进行推进并仅在需要时在这些实例上安装更新，因此也减少了引入回退的风险。</p><p>bin/odoo允许我们不用记住各个路径或激活虚拟环境就可以运行服务。这还为我们设置了配置文件。你可以在其中添加其它脚本来协助你的日常工作。例如，你可以添加一个脚本来检查运行实例所需的第三方项目。</p><p>有关配置文件，我们仅展示了这里需要设置的最小化选项，但很明显你可以设置更多，例如数据库名、数据库过滤器或项目所监听的端口。有关这一话题的更多信息，请参见<a href="https://alanhou.org/installing-odoo-development-environment/">第一章 安装Odoo开发环境</a>。</p><p>最后，通过在Git仓库中管理所有这些，在不同的电脑上复制这一设置及在团队中分享开发内容变得相当容易。</p><blockquote><p><strong>小贴士：</strong>加速贴士</p><p>要加速项目的创建，你可以创建一个包含空结构的模板仓库，并为每个项目复制（fork）该仓库。这会省却你重新输入bin/odoo脚本、.gitignore及其它所需模板文件（持续集成配置、README.md、ChangeLog等等）所花费的时间。</p></blockquote><h3 id="参见内容"><a href="#参见内容" class="headerlink" title="参见内容"></a>参见内容</h3><p>如果你喜欢这种方法，我们建议你尝试<a href="https://alanhou.org/server-deployment/">第三章 服务器部署</a>中的使用 Docker 运行 Odoo 一部分的内容。</p><h3 id="扩展知识…-1"><a href="#扩展知识…-1" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>复杂模块的开发要求有各类配置选项，在想要尝试任何配置选项时都会要更新配置文件。更新配置常常是一件头痛的事，避免它的一种方式是通过命令行传递所有配置选项，如下：</p><ol><li>手动激活虚拟环境：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">source</span> env/bin/activate</code></pre><ol start="2"><li>进行Odoo源代码目录：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> src/odoo</code></pre><ol start="3"><li>运行服务：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">./odoo-bin --addons-path<span class="token operator">=</span>addons,<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/local -d test-12 -i account,sale,purchase --log-level<span class="token operator">=</span>debug</code></pre><p>第三步中，我们直接通过命令行传递了一些参数。第一个是–addons-path，它加载Odoo的核心插件目录addons，以及你自己的插件目录local，在其中你可以放自己的插件模块。选项-d会使用test-12数据库或者在该数据库不存在时新建一个数据库。选项-i 会安装会计、销售和采购模块。接着，我们传递了log-level选项来将日志级别提升为debug，这样日志中会显示更多的信息。</p><blockquote><p>ℹ️通过使用命令行，你可以快速地修改配置选项。你也可以在Terminal中查看实时日志。所有可用选项可参见<a href="https://alanhou.org/installing-odoo-development-environment/">第一章 安装Odoo开发环境</a>，或使用-help命令来查看所有的选项列表及各个选项的描述。</p></blockquote><h2 id="安装并升级本地插件模块"><a href="#安装并升级本地插件模块" class="headerlink" title="安装并升级本地插件模块"></a>安装并升级本地插件模块</h2><p>Odoo 功能的核心来自于它的插件模块。Odoo自带的插件是你所拥有的财富，同时你也可以在应用商店下载一些插件模块或者自己写。</p><p>这一部分中，我们将展示如何通过网页界面及命令行来安装并升级插件模块。</p><p>对这些操作使用命令行的主要好处包含可以同时作用于一个以上的插件以及在安装或升级的过程中可以清晰地浏览到服务端日志，对于开发模式或编写脚本安装实例时都非常有用。</p><h3 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h3><p>确保你有一个运行中的 Odoo 实例，且数据库已初始化、插件路径已进行恰当地设置。在这一部分中，我们将安装/升级一些插件模块。</p><h3 id="如何安装升级…"><a href="#如何安装升级…" class="headerlink" title="如何安装升级…"></a>如何安装升级…</h3><p>安装或升级插件有两种方法-可以使用网页界面或命令行。</p><h4 id="通过网页界面"><a href="#通过网页界面" class="headerlink" title="通过网页界面"></a>通过网页界面</h4><p>可按照如下步骤来使用网页界面安装新的插件模块到数据库中：</p><ol><li>使用管理员账户连接实例并打开Apps菜单<br><a href="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg"><img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例"></a></li><li>使用搜索框来定位你想要安装的插件。这里有一些帮助你完成该任务的操作指南：<ul><li>激活Not Installed过滤器</li><li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li><li>在搜索框中输入模块名的一部分并使用它来作为模块过滤器</li><li>你会发现使用列表视图可以阅读到更多的信息</li></ul></li><li>点击卡片中模块名下的Install按钮。</li></ol><p>注意有些Odoo插件模块需要有外部Python依赖，如果你的系统中未安装该Python依赖，那么 Odoo 会中止安装并显示如下的对话框：</p><p><a href="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg"><img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例"></a><br><strong>译者注：</strong>按正常安装不会出现一错误，需通过 pip uninstall pyldap 才能复现这一错误</p><p>修复这一问题，仅需在你的系统中安装相关的Python依赖即可。</p><p>要升级已安装到数据库的模块，使用如下步骤：</p><ol><li>使用管理员账户连接到实例</li><li>打开Apps菜单</li><li>点击Apps:<br><a href="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg"><img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例"></a></li><li>使用搜索框来定位你所安装的插件。有如下的小贴士：<ul><li>激活Installed过滤器</li><li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li><li>在搜索框中输入部分插件模块的名称并按下 Enter 来使用它作为模块过滤器。例如，输入CRM并按下 Enter 来搜索CRM应用</li><li>你会发现使用列表视图可以阅读到更多的信息</li></ul></li><li>点击卡片右上角的的三个点，然后点击Upgrade选项：</li></ol><p><a href="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg"><img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例"></a></p><p>激活开发者模式来查看模块的技术名称。如果你不知道如何激活开发者模式，请参见<a href="https://alanhou.org/installing-odoo-development-environment/">第一章 安装Odoo开发环境</a>：</p><p><a href="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg"><img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例"></a></p><p>在激活开发者模式之后，它会以红色显示模块的技术名称。如果你使用的是Odoo社区版，会看到一些带有Upgrade的附加应用。这些是Odoo企业版的应用，要想安装/使用它们，需要购买一个证书。</p><h4 id="通过命令行"><a href="#通过命令行" class="headerlink" title="通过命令行"></a>通过命令行</h4><p>要在你的数据库中安装新插件，可按照如下步骤：</p><ol><li><p>查找插件的名称。这是包含<strong>manifest</strong>.py文件的目录名，不带前面的路径。</p></li><li><p>停止实例。如果你在操作生产数据库，请进行备份。</p></li><li><p>运行如下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">odoo/odoo-bin -c instance.cfg -d dbname -i addon1,addon2 --stop-after-init</code></pre></li></ol><p>   译者注：</p><p>   请将addon1,addon2替换为你所要安装的插件名</p><blockquote><p><strong>小贴士：</strong>你可以省略掉-d dbname，因为这在配置文件中进行了设置。</p></blockquote><ol start="4"><li>重新启动实例</li></ol><h3 id="运行原理…-3"><a href="#运行原理…-3" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>插件模块的安装和升级是两个紧密关联的操作，但有一些重要的区别，在下面两部分中进行了强调：</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>在你安装插件时，Odoo以提供的名称检查它的可用插件列表中未安装插件。它还会检查该插件的依赖，并且如果有依赖的话，它会在安装插件前递归安装这些依赖。</p><p>单个模块的安装包含如下步骤：</p><ol><li>如果存在，运行插件preinit钩子</li><li>从Python源代码中加载模型定义并在必要时更新数据库结构（参见<a href="https://alanhou.org/application-models/">第五章 应用模型</a>了解更多信息）</li><li>加载插件的数据文件并在必要时更新数据库内容（参见<a href="https://alanhou.org/odoo12-module-data/">第七章 模块数据</a>了解更多信息）</li><li>如果实例中启用了演示数据则安装插件演示数据</li><li>如果存在，运行插件postinit钩子</li><li>运行对插件视图定义的验证</li><li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href="https://alanhou.org/automated-test-cases/">第十八章 自动化测试用例</a>了解更多信息）</li><li>在数据库中更新模块状态</li><li>从插件的翻译文件中更新数据库中的翻译（参见<a href="https://alanhou.org/internationalization/">第十二章 国际化</a>了解更多信息）</li></ol><blockquote><p>ℹ️preinit和postinit钩子分别使用pre_init_hook和post_init_hook键名在<strong>manifest</strong>.py文件中定义。这些钩子用于在插件模块的安装之前及之后触发Python函数。参见<a href="https://alanhou.org/creating-odoo-add-on-modules/">第四章 创建Odoo插件模块</a>了解更多有关 init 钩子的知识。</p></blockquote><h4 id="插件升级"><a href="#插件升级" class="headerlink" title="插件升级"></a>插件升级</h4><p>升级插件时，Odoo以给定的名称在可用的插件模块列表中检查已安装插件。它还会检查该插件的反向依赖（即依赖于所升级插件的那些插件）。如果存在，则也会对它们进行递归升级。</p><p>单个插件模块的升级过程包含如下步骤：</p><ol><li>如果有的话，先运行插件模块的预迁移步骤（参见<a href="https://alanhou.org/odoo12-module-data/">第七章 模块数据</a>了解更多信息）</li><li>从Python源码中加载模型定义并在必要时更新数据库结构（参见<a href="https://alanhou.org/application-models/">第五章 应用模型</a>了解更多信息）</li><li>加载插件的数据文件并在必要时更新数据库内容（参见<a href="https://alanhou.org/odoo12-module-data/">第七章 模块数据</a>了解更多信息）</li><li>如果实例中启用了演示数据更新插件演示数据</li><li>如果模块有任何迁移方法的话，先运行插件模块的后置迁移步骤（参见<a href="https://alanhou.org/odoo12-module-data/">第七章 模块数据</a>了解更多信息）</li><li>运行对插件视图定义的验证</li><li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href="https://alanhou.org/automated-test-cases/">第十八章 自动化测试用例</a>了解更多信息）</li><li>在数据库中更新模块状态</li><li>从插件的翻译文件中更新数据库中的翻译（参见<a href="https://alanhou.org/internationalization/">第十二章 国际化</a>了解更多信息）</li></ol><blockquote><p>ℹ️注意更新未安装的插件模块什么也不会做。但是安装已安装的插件模块会重新安装该插件，这会通过一些包含数据的数据文件产生一些预期外的问题，这些文件可能应由用户进行更新而非在常规的模块升级处理时进行更新（参见<a href="https://alanhou.org/odoo12-module-data/">第七章 模块数据</a>中使用noupdate和forcecreate标记部分的内容）。通过用户界面不存在错误的风险，但通过命令行时则有可能发生。</p></blockquote><h3 id="扩展知识…-2"><a href="#扩展知识…-2" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>要当心依赖的处理。假定有一个实例你想要安装sale、sale_stock和sale_specific插件，sale_specific依赖于sale_stock，而sale_stock依赖于sale。要安装这三者，你只需要安装sale_specific，因为它会递归安装sale_stock和sale这两个依赖。要升级这两者，你需要升级sale，因为这样会递归升级其反向依赖，sale_stock和sale_specific。</p><p>管理依赖另一个比较搞的地方是在你向已经有一个版本安装了的插件添加依赖的时候。我们继续通过前例来理解这一问题。想像一下你在sale_specific中添加了一个对stock_dropshipping的依赖。更新sale_specific插件不会自动安装新的依赖，也会要求安装sale_specific。在这种情况下，你会收到非常糟糕的错误消息，因为插件的Python代码没有成功的加载，而插件的数据和模型表则存在于数据库中。要解决这一问题，你需要停止该实例并手动安装新的依赖。</p><h2 id="从GitHub安装插件模块"><a href="#从GitHub安装插件模块" class="headerlink" title="从GitHub安装插件模块"></a>从GitHub安装插件模块</h2><p>GitHub是第三方插件的一个很好的来源。很多Odoo合作伙伴使用GitHub来分享他们内部维护的插件，而Odoo社区联盟（OCA）在GitHub上共同维护着几百个插件。在你开始编写自己的插件之前，确保查看是否已有可用的插件或者作为初始以继续扩展插件。</p><p>这一部分向你展示如何从GitHub上克隆OCA的partner-contact项目并让其中所包含的插件模块在我们实例中可用。</p><h3 id="准备工作-3"><a href="#准备工作-3" class="headerlink" title="准备工作"></a>准备工作</h3><p>假设你想要改变你的实例中地址的处理方式，你的客户需要在Odoo两个字段（街道和街道2）之外的第三个字段来存储地址。你肯定是可以编写自己的插件来为res.partne添加一个字段的，但如果想要让地址在发票上以合适的格式显示，问题就要比看上去麻烦一些了。所幸，你邮件列表上的某个人告诉了你partner_address_street3插件，由OCA作为partner-contact项目的一部分进行维护。</p><p>本部分中所使用的路径反映了我们在<em>标准化你的实例目录布局</em>一节中所推荐的布局。</p><h3 id="如何安装…"><a href="#如何安装…" class="headerlink" title="如何安装…"></a>如何安装…</h3><p>按照如下步骤来安装partner_address_street3：</p><ol><li>进入你的项目目录：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/odoo-dev/my-odoo/src</code></pre><ol start="2"><li>在src/目录中克隆partner-contact项目的12.0分支：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone --branch <span class="token number">12.0</span> <span class="token punctuation">\</span>https://github.com/OCA/partner-contact.git src/partner-contact</code></pre><ol start="3"><li><p>修改插件路径来包含该目录并更新你的实例中的插件列表（参见本章中的配置插件路径和更新插件模块列表一节）。instance.cfg中的addons_path一行应该是这样的：</p><pre class="language-none"><code class="language-none">addons_path &#x3D; ~&#x2F;odoo-dev&#x2F;my-odoo&#x2F;src&#x2F;odoo&#x2F;odoo&#x2F;addons, \~&#x2F;odoo-dev&#x2F;my-odoo&#x2F;src&#x2F;odoo&#x2F;addons, \~&#x2F;odoo-dev&#x2F;my-odoo&#x2F;src&#x2F;, \~&#x2F;odoo-dev&#x2F;local-addons</code></pre></li><li><p>安装partner_address_street3插件（如果你不知道如何安装该模块，参见前面一节，安装并升级本地插件模块）</p></li></ol><h3 id="运行原理…-4"><a href="#运行原理…-4" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>所有 Odoo社区联盟的代码仓库都将他们自己的插件放在单独的目录中，这与Odoo对插件路径中目录的预期是相一致的。因此，只需复制某处的仓库并将其添加到插件路径中就够了。</p><h3 id="扩展知识…-3"><a href="#扩展知识…-3" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>有些维护者遵循不同的方法，每个插件模块一个仓库，放在仓库的根目录下。这种情况下，你需要创建一个新的目录，在这个目录中添加插件路径并克隆你所需的维护者的插件到该目录中。记住在每次添加一个新仓库拷贝时要更新插件模块列表。</p><h2 id="对插件应用修改"><a href="#对插件应用修改" class="headerlink" title="对插件应用修改"></a>对插件应用修改</h2><p>GitHub上可用的大部分插件需要进行修改并且不遵循Odoo对其稳定发行版所强制的规则。它们可能收到漏洞修复或改善，包含你提交的问题或功能请求，这些修改可能会引入数据库模式的修改或数据文件和视图中的更新。这一部分讲解如何安装升级后的版本。</p><h3 id="准备工作-4"><a href="#准备工作-4" class="headerlink" title="准备工作"></a>准备工作</h3><p>假定你对partner_address_street3报告了一个问题并收到通知说该问题已在partner-contact项目12.0分支的最近一次修订中得以解决。这种情况下，你可以使用最新版本来更新你的实例。</p><h3 id="如何修改…"><a href="#如何修改…" class="headerlink" title="如何修改…"></a>如何修改…</h3><p>要对GitHub的插件进行源的变更，需执行如下步骤：</p><ol><li><p>停止使用该插件的实例。</p></li><li><p>如果是生产实例请做一个备份（参见<a href="https://alanhou.org/installing-odoo-development-environment/">第一章 安装Odoo开发环境</a>中<em>管理Odoo服务端数据库</em>一节）。</p></li><li><p>进入克隆了partner-contact的目录：</p></li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</code></pre><ol start="4"><li>为该项目创建一个本地标签，这样万一出现了崩溃你可以进行回退：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout <span class="token number">12.0</span>$ <span class="token function">git</span> tag <span class="token number">12.0</span>-before-update-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> --iso<span class="token variable">)</span></span></code></pre><ol start="4"><li>获取源码的最新版本：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pull --ff-only</code></pre><ol start="6"><li><p>在你的数据库中更新partner_address_street3插件（参见<em>安装并升级本地插件模块</em>一节）</p></li><li><p>重启实例</p></li></ol><h3 id="运行原理…-5"><a href="#运行原理…-5" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>通常，插件模块的开发者有时会发布插件的最新版本。这一更新一般包含漏洞修复及新功能。这里，我们将获取一个插件的新版本并在我们的实例中更新它。</p><p>如果git pull –ff-only失败的话，你可以使用如下命令回退到前一个版本：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$  <span class="token function">git</span> reset --hard <span class="token number">12.0</span>-before-update-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> --iso<span class="token variable">)</span></span></code></pre><p>然后，你可以尝试git pull（不添加–ff-only），它会产生一个合并，但这表示你对插件做了本地修改。</p><h3 id="扩展知识…-4"><a href="#扩展知识…-4" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>如果更新这一步崩溃了，参见<a href="https://alanhou.org/installing-odoo-development-environment/">第一章 安装Odoo开发环境</a><em>从源码更新Odoo</em>一节获取恢复的操作指南。记住要总是在一个生产数据库的拷贝上先进行测试。</p><h2 id="应用及尝试建议的拉取请求"><a href="#应用及尝试建议的拉取请求" class="headerlink" title="应用及尝试建议的拉取请求"></a>应用及尝试建议的拉取请求</h2><p>在GitHub的世界中，拉取请求（PR）是由开发者所提交的请求，这样项目维护人员可以添加一些新的开发。比如一个 PR 可能包含漏洞修复或新功能。这里请求在拉取到主分支之前会进行审核和测试。</p><p>这一部分讲解如何对你的 Odoo 项目应用一个PR来测试漏洞修复的改进。</p><h3 id="准备工作-5"><a href="#准备工作-5" class="headerlink" title="准备工作"></a>准备工作</h3><p>在前一节中，假定你对partner_address_street3 报告了一个问题并收到一条通知在拉取请求中问题已修复，尚未合并到项目的12.0分支中。开发人员要求你验证PR #123中的修复状况。你需要使用这一分支更新一个测试实例。</p><p>你不应在生产数据库直接使用该分支，因此先创建一个带有生产数据库拷贝的测试环境（参见<a href="https://alanhou.org/installing-odoo-development-environment/">第一章 安装Odoo开发环境</a>和<a href="https://alanhou.org/server-deployment/">第三章 服务器部署</a>）。</p><h3 id="如何操作…"><a href="#如何操作…" class="headerlink" title="如何操作…"></a>如何操作…</h3><p>应用并测试一个插件的GitHub拉取请求，你需要执行如下步骤：</p><ol><li><p>停止实例</p></li><li><p>进入partner-contact所被克隆的目录：</p></li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</code></pre><ol start="3"><li>为该项目创建一个本地标签，这样万一出现崩溃时你可以回退：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$  <span class="token function">git</span> checkout <span class="token number">12.0</span>$ <span class="token function">git</span> tag <span class="token number">12.0</span>-before-update-<span class="token punctuation">$(</span>date --iso</code></pre><ol start="4"><li>拉取pull请求的分支。这么做最容易的方式是使用PR编号，在开发者与你沟通时你应该可以看到。在本例中，这个拉取请求编号是123：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pull origin pull/123/head</code></pre><ol start="5"><li><p>在你的数据库中更新partner_address_street3插件模块并重启该实例（如果你不知道如何更新该模块的话请参见<em>安装并升级本地插件模块</em>一节）</p></li><li><p>测试该更新 – 尝试重现问题，或测试你想要的功能。</p></li></ol><p>如果这不能运行，在GitHub的PR页面进行评论，说明你做了什么以及什么不能运行，这样开发者可以更新这个拉取请求。</p><p>如果它没有问题，也在PR页面说下；这是PR验证流程中非常重要的一部分；这会加速主分支中的合并。</p><h3 id="运行原理…-6"><a href="#运行原理…-6" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>我们在使用一个GitHub功能，使用pull/nnnn/head分支名称来通过编号进行拉取请求的拉取，其中nnnn是PR的编号。Git pull命令合并远程分支到我们的分支，在我们基础代码中应用修改。在这之后，我们更新插件模块、对其测试并向作者报回修改是成功或是失败。</p><h3 id="扩展知识…-5"><a href="#扩展知识…-5" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>如果你想要同步测试它们，你可以针对相同仓库的不同拉取请求重复本节中的第4步。如果你对结果很满意，你可以创建一个分支来保留对应用了改变的结果的引用：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout -b <span class="token number">12.0</span>-custom</code></pre><p>使用一个不同的分支会帮助你记住你没有从GitHub使用该版本，而是一个自定义的版本。</p><blockquote><p>ℹ️git branch命令可用于列出你仓库中的所有本地分支。</p></blockquote><p>从这开始，如果你需要应用来自GitHub中12.0分支的最近一个审核版本，你需要不使用–ff-only来拉取它：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> pull origin <span class="token number">12.0</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> odoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>__import__在python中的区别</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>作用：导入/引入一个python标准模块，其中包括.py文件、带有<strong>init</strong>.py文件的目录(自定义模块)。</p><p>import module_name[,module1,…]  </p><p>from module import *|child[,child1,…]  </p><p>注意：多次重复使用import语句时，不会重新加载被指定的模块，只是把对该模块的内存地址给引用到本地变量环境。</p><p>实例：</p><p>pythontab.py  </p><pre class="language-python" data-language="python"><code class="language-python">`<span class="token comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></code></pre><p>test.py  </p><pre class="language-none"><code class="language-none">&#96;#!&#x2F;usr&#x2F;bin&#x2F;env python    &#96;&#96;#encoding: utf-8  &#96;&#96;import&#96; &#96;pythontab   &#96;&#96;#第一次会打印pythontab里面的语句  &#96;&#96;import&#96; &#96;os  &#96;&#96;#再次导入os后，其内存地址和pythontab里面的是一样的，因此这里只是对os的本地引用  &#96;&#96;print&#96; &#96;&#39;in c&#39;&#96;&#96;,&#96;&#96;id&#96;&#96;(os)  &#96;&#96;import&#96; &#96;pythontab  &#96;&#96;#第二次不会打印pythontab里面的语句，因为没有重新加载&#96;</code></pre><h3 id="reload"><a href="#reload" class="headerlink" title="reload"></a>reload</h3><p>作用：对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。</p><p>import os</p><p>reload(os)</p><p>说明：</p><p>reload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；不能支持from。。import。。格式的模块进行重新加载。</p><p>实例：</p><p>pythontab.py  </p><pre class="language-python" data-language="python"><code class="language-python">`<span class="token comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></code></pre><p>test.py  </p><pre class="language-python" data-language="python"><code class="language-python">`<span class="token comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次import会打印pythontab里面的语句  ``print` `id``(pythontab) ``#原来pythontab的内存地址  ``reload``(pythontab)  ``#第二次reload还会打印pythontab里面的语句，因为有重新加载  ``print` `id``(pythontab) ``#reload后pythontab的内存地址，和原来一样`</span></code></pre><p>扩展：</p><p>上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。</p><pre class="language-python" data-language="python"><code class="language-python">`<span class="token comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys   ``#引用sys模块进来，并不是进行sys的第一次加载  ``reload``(sys)  ``#重新加载sys  ``sys.setdefaultencoding(``'utf8'``)  ``##调用setdefaultencoding函数`</span></code></pre><p>上面的代码是正确的，再测试下面的代码</p><pre class="language-python" data-language="python"><code class="language-python">`<span class="token comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys     ``sys.setdefaultencoding(``'utf8'``)`</span></code></pre><p>上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：</p><pre class="language-python" data-language="python"><code class="language-python">`<span class="token comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys    ``reload``(sys)   ``sys.setdefaultencoding(``'utf8'``)    ``del` `sys.setdefaultencoding   ``##删除原来的setdefaultencoding函数     ``sys.setdefaultencoding(``'gb2312'``)`</span></code></pre><p>那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，在里面可以找到main() –&gt; setencoding()–&gt;sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。</p><h3 id="import-1"><a href="#import-1" class="headerlink" title="import"></a><strong>import</strong></h3><p>作用：</p><p>同import语句同样的功能，但<strong>import__是一个函数，并且只接收字符串作为参数，所以它的作用就可想而知了。其实import语句就是调用这个函数进行导入工作的，import sys &lt;==&gt;sys = __import</strong>(‘sys’)</p><p>使用：</p><p><strong>import</strong>(module_name[, globals[, locals[, fromlist]]]) #可选参数默认为globals(),locals(),[]</p><p><strong>import</strong>(‘os’)    </p><p><strong>import</strong>(‘os’,globals(),locals(),[‘path’,’pip’])  #等价于from os import path, pip</p><p>说明：</p><p>通常在动态加载时可以使用到这个函数，比如你希望加载某个文件夹下的所用模块，但是其下的模块名称又会经常变化时，就可以使用这个函数动态加载所有模块了，最常见的场景就是插件功能的支持。</p><p>扩展：</p><p>既然可以通过字符串来动态导入模块，那么是否可以通过字符串动态重新加载模块吗？试试reload(‘os’)直接报错，是不是没有其他方式呢?虽然不能直接reload但是可以先unimport一个模块，然后再__import__来重新加载模块。现在看看unimport操作如何实现，在Python解释里可以通过globals(),locals(),vars(),dir()等函数查看到当前环境下加载的模块及其位置，但是这些都只能看不能删除，所以无法unimport；不过除此之外还有一个地方是专门存放模块的，这就是sys.modules，通过sys.modules可以查看所有的已加载并且成功的模块，而且比globals要多，说明默认会加载一些额外的模块，接下来就是unimport了。</p><pre class="language-python" data-language="python"><code class="language-python">`<span class="token comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys  ``__import__``(``'a'``)      ``#第一次导入会打印消息  ``del` `sys.modules[``'a'``]   ``#unimport  ``__import__``(``'a'``)    ``#再次导入还是会打印消息，因为已经unimport一次了  ``__import__``(``'a'``)    ``#这次就不会打印消息了`</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis分布式锁</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="单机Redis实现分布式锁"><a href="#单机Redis实现分布式锁" class="headerlink" title="单机Redis实现分布式锁"></a>单机Redis实现分布式锁</h1><h2 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h2><p>获取锁的过程很简单，客户端向Redis发送命令：</p><pre class="language-none"><code class="language-none">SET resource_name my_random_value NX PX 30000复制代码</code></pre><p><code>my_random_value</code>是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。 NX表示只有当<code>resource_name</code>对应的key值不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。 PX 30000表示这个锁有一个30秒的自动过期时间。</p><h2 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h2><pre class="language-none"><code class="language-none">if redis.call(&quot;get&quot;,KEYS[1]) &#x3D;&#x3D; ARGV[1] then    return redis.call(&quot;del&quot;,KEYS[1])else    return 0end复制代码</code></pre><p>之前获取锁的时候生成的<code>my_random_value</code> 作为参数传到Lua脚本里面，作为：<code>ARGV[1]</code>,而 <code>resource_name</code>作为<code>KEYS[1]</code>。Lua脚本可以保证操作的原子性。</p><h2 id="关于单点Redis实现分布式锁的讨论"><a href="#关于单点Redis实现分布式锁的讨论" class="headerlink" title="关于单点Redis实现分布式锁的讨论"></a>关于单点Redis实现分布式锁的讨论</h2><p>网络上有文章说用如下命令获取锁:</p><pre class="language-none"><code class="language-none">SETNX resource_name my_random_valueEXPIRE resource_name 30复制代码</code></pre><p>由于这两个命令不是原子的。如果客户端在执行完<code>SETNX</code>后<code>crash</code>了，那么就没有机会执行<code>EXPIRE</code>了，导致它一直持有这个锁，其他的客户端就永远获取不到这个锁了。</p><ul><li>为什么<code>my_random_value</code> 要设置成随机值? 保证了一个客户端释放的锁是自己持有的那个锁。如若不然，可能出现锁不安全的情况。</li></ul><pre class="language-none"><code class="language-none">客户端1获取锁成功。客户端1在某个操作上阻塞了很长时间。过期时间到了，锁自动释放了。客户端2获取到了对应同一个资源的锁。客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。复制代码</code></pre><ul><li>用 SETNX获取锁 网上大量文章说用如下命令获取锁：</li></ul><pre class="language-none"><code class="language-none">SETNX lock.foo &lt;current Unix time + lock timeout + 1&gt;复制代码</code></pre><p>原文在Redis对SETNX的官网说明，Redis官网文档建议用Set命令来代替，主要原因是SETNX不支持超时时间的设置。</p><p><a href="https://link.juejin.im/?target=https://redis.io/commands/setnx">redis.io/commands/se…</a></p><h1 id="Redis集群实现分布式锁"><a href="#Redis集群实现分布式锁" class="headerlink" title="Redis集群实现分布式锁"></a>Redis集群实现分布式锁</h1><p>上面的讨论中我们有一个非常重要的假设：Redis是单点的。如果Redis是集群模式，我们考虑如下场景:</p><pre class="language-none"><code class="language-none">客户端1从Master获取了锁。Master宕机了，存储锁的key还没有来得及同步到Slave上。Slave升级为Master。客户端2从新的Master获取到了对应同一个资源的锁。客户端1和客户端2同时持有了同一个资源的锁，锁不再具有安全性。复制代码</code></pre><p>就此问题，Redis作者antirez写了RedLock算法来解决这种问题。</p><h2 id="RedLock获取锁"><a href="#RedLock获取锁" class="headerlink" title="RedLock获取锁"></a>RedLock获取锁</h2><ul><li>获取当前时间。</li><li>按顺序依次向N个Redis节点执行获取锁的操作。这个获取操作跟前面基于单Redis节点的获取锁的过程相同，包含随机字符串my_random_value，也包含过期时间(比如PX 30000，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。</li><li>计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（&gt;= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。</li><li>如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。</li><li>如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起释放锁的操作（即前面介绍的单机Redis Lua脚本释放锁的方法）。</li></ul><h2 id="RedLock释放锁"><a href="#RedLock释放锁" class="headerlink" title="RedLock释放锁"></a>RedLock释放锁</h2><p>客户端向所有Redis节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。</p><h2 id="关于RedLock的问题讨论"><a href="#关于RedLock的问题讨论" class="headerlink" title="关于RedLock的问题讨论"></a>关于RedLock的问题讨论</h2><ul><li>如果有节点发生崩溃重启 假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：</li></ul><pre class="language-none"><code class="language-none">客户端1成功锁住了A, B, C，获取锁成功（但D和E没有锁住）。节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。节点C重启后，客户端2锁住了C, D, E，获取锁成功。客户端1和客户端2同时获得了锁。复制代码</code></pre><p>为了应对这一问题，antirez又提出了延迟重启(delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。</p><ul><li><p>如果客户端长期阻塞导致锁过期</p><p><img src="http://wumu.sciento.cn/img/16a07877f982bd5c.png"></p></li></ul><p>解释一下这个时序图，客户端1在获得锁之后发生了很长时间的GC pause，在此期间，它获得的锁过期了，而客户端2获得了锁。当客户端1从GC pause中恢复过来的时候，它不知道自己持有的锁已经过期了，它依然向共享资源（上图中是一个存储服务）发起了写数据请求，而这时锁实际上被客户端2持有，因此两个客户端的写请求就有可能冲突（锁的互斥作用失效了）。</p><p>如何解决这个问题呢?引入了fencing token的概念：</p><p><img src="http://wumu.sciento.cn/img/16a07879db4e469e.png"></p><p>客户端1先获取到的锁，因此有一个较小的fencing token，等于33，而客户端2后获取到的锁，有一个较大的fencing token，等于34。客户端1从GC pause中恢复过来之后，依然是向存储服务发送访问请求，但是带了fencing token = 33。存储服务发现它之前已经处理过34的请求，所以会拒绝掉这次33的请求。这样就避免了冲突。</p><p>但是其实这已经超出了Redis实现分布式锁的范围，单纯用Redis没有命令来实现生成Token。</p><ul><li>时钟跳跃问题 假设有5个Redis节点A, B, C, D, E。</li></ul><pre class="language-none"><code class="language-none">客户端1从Redis节点A, B, C成功获取了锁（多数节点）。由于网络问题，与D和E通信失败。节点C上的时钟发生了向前跳跃，导致它上面维护的锁快速过期。客户端2从Redis节点C, D, E成功获取了同一个资源的锁（多数节点）。客户端1和客户端2现在都认为自己持有了锁。这个问题用Redis实现分布式锁暂时无解。而生产环境这种情况是存在的。复制代码</code></pre><p>结论 Redis并不能实现严格意义上的分布式锁。但是这并不意味着上面讨论的方案一无是处。如果你的应用场景为了效率(efficiency)，协调各个客户端避免做重复的工作，即使锁失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。但是如果你的应用场景是为了正确性(correctness)，那么用Redis实现分布式锁并不合适，会存在各种各样的问题，且解决起来就很复杂，为了正确性，需要使用zab、raft共识算法，或者使用带有事务的数据库来实现严格意义上的分布式锁。</p><p>参考资料 Distributed locks with Redis 基于Redis的分布式锁到底安全吗（上）？ - 铁蕾的个人博客 <a href="https://link.juejin.im/?target=https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html">martin.kleppmann.com/2016/02/08/…</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>protobuf使用</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;github.com&#x2F;protocolbuffers&#x2F;protobuf&#x2F;releases&#x2F;download&#x2F;v3.6.1&#x2F;protobuf-all-3.6.1.zipunzop protobuf-all-3.6.1.zipcd protobuf-all-3.6.1.&#x2F;configure &amp;&amp; make &amp;&amp; make install</code></pre><h1 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h1><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 声明版本，默认是proto2syntax &#x3D; &quot;proto3&quot;;&#x2F;&#x2F; 声明包名package tutorialoption java_package &#x3D; &quot;com.example.tutorial&quot;;&#x2F;&#x2F; java类名option java_outer_classname &#x3D; &quot;AddressBookProtos&quot;;message Person &#123;    required string name &#x3D;1;    required int32 id &#x3D; 2;    optional string email &#x3D; 3;        enum PhoneType &#123;        MOBILE &#x3D; 0;        HOME &#x3D; 1;        WORK &#x3D; 2;    &#125;        message PhoneNumber &#123;        required string number &#x3D; 1;        optional PhoneType type &#x3D; 2[default &#x3D; HOME];     &#125;    repeated PhoneNumber phones &#x3D; 4;&#125;message AddressBook &#123;    repreated Person people &#x3D; 1;&#125;&#x2F;&#x2F; 保留字段，编程过程中某些功能没有想好，可以先把该tag 进行保留，以备以后使用。message Foo &#123;  reserved 2, 15, 9 to 11;  reserved &quot;foo&quot;, &quot;bar&quot;;&#125;</code></pre><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><blockquote><p><a href="https://blog.csdn.net/zxhoo/article/details/53228303">https://blog.csdn.net/zxhoo/article/details/53228303</a></p></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol><li>Standard Message Methods</li></ol><ul><li><code>isInitialized()</code>: checks if all the required fields have been set.</li><li><code>toString()</code>: returns a human-readable representation of the message, particularly useful for debugging.</li><li><code>mergeFrom(Message other)</code>: (builder only) merges the contents of <code>other</code> into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields.</li><li><code>clear()</code>: (builder only) clears all the fields back to the empty state.</li></ul><ol><li>Parsing and Serialization</li></ol><ul><li><code>byte[] toByteArray();</code>: serializes the message and returns a byte array containing its raw bytes.</li><li><code>static Person parseFrom(byte[] data);</code>: parses a message from the given byte array.</li><li><code>void writeTo(OutputStream output);</code>: serializes the message and writes it to an <code>OutputStream</code>.</li><li><code>static Person parseFrom(InputStream input);</code>: reads and parses a message from an <code>InputStream</code>.</li></ul><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>升级协议</li></ol><ul><li>you <em>must not</em> change the tag numbers of any existing fields.</li><li>you <em>must not</em> add or delete any required fields.</li><li>you <em>may</em> delete optional or repeated fields.</li><li>you <em>may</em> add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).</li></ul><ol><li>protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]。</li><li>不要让protobuf对象成为全局变量或者类成员，因为其clear方法只会把占用的内存空间清零，而不会释放，使得进程空间越来越大，可参考<a href="http://www.kuqin.com/shuoit/20141117/343247.html">《Protobuf使用不当导致的程序内存上涨问题》</a>。</li></ol><blockquote><p><a href="https://www.jianshu.com/p/27fdf44dd63b">https://www.jianshu.com/p/27fdf44dd63b</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go基本语法</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ol><li>duck typing了解</li></ol><p>在<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">程序设计</a>中，<strong>鸭子类型</strong>（英语：<strong>duck typing</strong>）是<a href="https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1">动态类型</a>的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前<a href="https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)">方法</a>和属性的集合”决定。</p><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><h1 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h1><h3 id="1-WaitGroup"><a href="#1-WaitGroup" class="headerlink" title="1. WaitGroup"></a>1. <code>WaitGroup</code></h3><pre class="language-none"><code class="language-none">Add()Done()Wait()</code></pre><h3 id="2-Context"><a href="#2-Context" class="headerlink" title="2. Context"></a>2. Context</h3><pre class="language-none"><code class="language-none"></code></pre><h2 id="Regexp"><a href="#Regexp" class="headerlink" title="Regexp"></a><code>Regexp</code></h2><blockquote><p><a href="https://www.cnblogs.com/golove/p/3269099.html">https://www.cnblogs.com/golove/p/3269099.html</a></p></blockquote><pre class="language-none"><code class="language-none">&#x2F;&#x2F; MatchStringmatched, err :&#x3D; regexp.MatchString(&quot;foo.*&quot;, &quot;seafood&quot;)fmt.Println(matched, err)matched, err &#x3D; regexp.MatchString(&quot;bar.*&quot;, &quot;seafood&quot;)fmt.Println(matched, err)&#x2F;&#x2F; false error parsing regexp: missing closing ): &#96;a(b&#96;matched, err &#x3D; regexp.MatchString(&quot;a(b&quot;, &quot;seafood&quot;)fmt.Println(matched, err)&#x2F;&#x2F; true &lt;nil&gt;matched, err &#x3D; regexp.MatchString(&#96;a\(b&#96;, &quot;a(b&quot;)fmt.Println(matched, err)&#x2F;&#x2F; false error parsing regexp: missing closing ): &#96;a(b&#96;matched, err &#x3D; regexp.MatchString(&#96;a(b&#96;, &quot;a(b&quot;)fmt.Println(matched, err)&#x2F;&#x2F; true &lt;nil&gt;matched, err &#x3D; regexp.MatchString(&quot;a\\(b&quot;, &quot;a(b&quot;)fmt.Println(matched, err)&#x2F;&#x2F; 将所有特殊字符进行转义fmt.Println(regexp.QuoteMeta(&quot;Escaping symbols like: .+*?()|[]&#123;&#125;^$&quot;))&#x2F;&#x2F; ExpandStringcontent :&#x3D; &#96;# comment lineoption1: value1option2: value2# another comment lineoption3: value3&#96;&#x2F;&#x2F; Regex pattern captures &quot;key: value&quot; pair from the content.pattern :&#x3D; regexp.MustCompile(&#96;(?m)(?P&lt;key&gt;\w+):\s+(?P&lt;value&gt;\w+)$&#96;)&#x2F;&#x2F; Template to convert &quot;key: value&quot; to &quot;key&#x3D;value&quot; by&#x2F;&#x2F; referencing the values captured by the regex pattern.template :&#x3D; &quot;$key&#x3D;$value\n&quot;result :&#x3D; []byte&#123;&#125;&#x2F;&#x2F; For each match of the regex in the content.for _, submatches :&#x3D; range pattern.FindAllStringSubmatchIndex(content, -1) &#123;    &#x2F;&#x2F; Apply the captured submatches to the template and append the output    &#x2F;&#x2F; to the result.    result &#x3D; pattern.ExpandString(result, template, content, submatches)&#125;fmt.Println(string(result))&#x2F;&#x2F; findAllStringre :&#x3D; regexp.MustCompile(&quot;a.&quot;)fmt.Println(re.FindAllString(&quot;paranormal&quot;, -1))fmt.Println(re.FindAllString(&quot;paranormal&quot;, 2))fmt.Println(re.FindAllString(&quot;graal&quot;, -1))fmt.Println(re.FindAllString(&quot;none&quot;, -1))&#x2F;&#x2F; FindAllStringSubmatchre :&#x3D; regexp.MustCompile(&quot;a(x*)b&quot;)fmt.Printf(&quot;%q\n&quot;, re.FindAllStringSubmatch(&quot;-ab-&quot;, -1))fmt.Printf(&quot;%q\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-&quot;, -1))fmt.Printf(&quot;%q\n&quot;, re.FindAllStringSubmatch(&quot;-ab-axb-&quot;, -1))fmt.Printf(&quot;%q\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-ab-&quot;, -1))&#x2F;&#x2F; findStringSubmatch，只查找第一个re :&#x3D; regexp.MustCompile(&quot;a(x*)b(y|z)c&quot;)fmt.Printf(&quot;%q\n&quot;, re.FindStringSubmatch(&quot;-axxxbyc-&quot;))fmt.Printf(&quot;%q\n&quot;, re.FindStringSubmatch(&quot;-abzc-&quot;))</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>makefile编写</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><pre class="language-none"><code class="language-none">.PHONY: build clean test package package-deb ui api statics requirements ui-requirements serve update-vendor internal&#x2F;statics internal&#x2F;migrations static&#x2F;swagger&#x2F;api.swagger.jsonPKGS :&#x3D; $(shell go list .&#x2F;... | grep -v &#x2F;vendor |grep -v lora-app-server&#x2F;api | grep -v &#x2F;migrations | grep -v &#x2F;static | grep -v &#x2F;ui)VERSION :&#x3D; $(shell git describe --always |sed -e &quot;s&#x2F;^v&#x2F;&#x2F;&quot;)build: ui&#x2F;build internal&#x2F;statics internal&#x2F;migrationsmkdir -p buildgo build $(GO_EXTRA_BUILD_ARGS) -ldflags &quot;-s -w -X main.version&#x3D;$(VERSION)&quot; -o build&#x2F;lora-app-server cmd&#x2F;lora-app-server&#x2F;main.goclean:@echo &quot;Cleaning up workspace&quot;@rm -rf build dist internal&#x2F;migrations internal&#x2F;static ui&#x2F;build static&#x2F;static@rm -f static&#x2F;index.html static&#x2F;icon.png static&#x2F;manifest.json static&#x2F;asset-manifest.json static&#x2F;service-worker.js@rm -rf static&#x2F;logo@rm -rf docs&#x2F;public@rm -rf disttest: internal&#x2F;statics internal&#x2F;migrations@echo &quot;Running tests&quot;@for pkg in $(PKGS) ; do \golint $$pkg ; \done@go vet $(PKGS)@go test -p 1 -v $(PKGS)documentation:@echo &quot;Building documentation&quot;@mkdir -p dist&#x2F;docs@cd docs &amp;&amp; hugo@cd docs&#x2F;public&#x2F; &amp;&amp; tar -pczf ..&#x2F;..&#x2F;dist&#x2F;lora-app-server-documentation.tar.gz .dist: ui&#x2F;build internal&#x2F;statics internal&#x2F;migrations@goreleaserbuild-snapshot: ui&#x2F;build internal&#x2F;statics internal&#x2F;migrations@goreleaser --snapshotpackage-deb: package@echo &quot;Building deb package&quot;@cd packaging &amp;&amp; TARGET&#x3D;deb .&#x2F;package.shui&#x2F;build:@echo &quot;Building ui&quot;@cd ui &amp;&amp; npm run build@mv ui&#x2F;build&#x2F;* staticapi:@echo &quot;Generating API code from .proto files&quot;@go generate api&#x2F;api.gointernal&#x2F;statics internal&#x2F;migrations: static&#x2F;swagger&#x2F;api.swagger.json@echo &quot;Generating static files&quot;@go generate cmd&#x2F;lora-app-server&#x2F;main.gostatic&#x2F;swagger&#x2F;api.swagger.json:@echo &quot;Generating combined Swagger JSON&quot;@GOOS&#x3D;&quot;&quot; GOARCH&#x3D;&quot;&quot; go run api&#x2F;swagger&#x2F;main.go api&#x2F;swagger &gt; static&#x2F;swagger&#x2F;api.swagger.json@cp api&#x2F;swagger&#x2F;*.json static&#x2F;swagger# shortcuts for developmentrequirements:echo &quot;Installing development tools&quot;go get -u github.com&#x2F;golang&#x2F;lint&#x2F;golintgo get -u github.com&#x2F;grpc-ecosystem&#x2F;grpc-gateway&#x2F;protoc-gen-grpc-gatewaygo get -u github.com&#x2F;grpc-ecosystem&#x2F;grpc-gateway&#x2F;protoc-gen-swaggergo get -u github.com&#x2F;golang&#x2F;protobuf&#x2F;protoc-gen-gogo get -u github.com&#x2F;elazarl&#x2F;go-bindata-assetfs&#x2F;...go get -u github.com&#x2F;jteeuwen&#x2F;go-bindata&#x2F;...go get -u github.com&#x2F;kisielk&#x2F;errcheckgo get -u github.com&#x2F;smartystreets&#x2F;goconveygo get -u golang.org&#x2F;x&#x2F;tools&#x2F;cmd&#x2F;stringergo get -u github.com&#x2F;golang&#x2F;dep&#x2F;cmd&#x2F;depgo get -u github.com&#x2F;goreleaser&#x2F;goreleaserdep ensure -vui-requirements:@echo &quot;Installing UI requirements&quot;@cd ui &amp;&amp; npm installserve: build@echo &quot;Starting Lora App Server&quot;.&#x2F;build&#x2F;lora-app-serverupdate-vendor:@echo &quot;Updating vendored packages&quot;@govendor update +externalrun-compose-test:docker-compose run --rm appserver make test</code></pre><h1 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h1><pre class="language-none"><code class="language-none">&lt;target&gt; : &lt;prerequisites&gt; [tab]  &lt;commands&gt;</code></pre><ul><li>target：执行的命令或者文件名。如果只是执行的命令这是<code>伪指令</code>，在大部分时候使用<code>.PHONY</code>声明伪指令，这样不仅仅提供效率，同时也避免和文件名冲突。</li><li>prerequisites：前置条件。</li><li>commands：需要执行的命令，<ul><li>前面需要添加<code>[tab]</code>，如果想要换成其他的，使用<code>.RECIPEPREFIX = ？</code>换成你喜欢的。</li><li>执行命令的时候会打印出相关的命令内容，这个叫做<code>回显</code>，如果不想显示出来可以在命令前面添加<code>@</code>。</li><li>命令执行的时候，每行命令在不同一个shell中执行，如果想在同一个shell中执行，有下面几个办法。</li><li>将命令写在同一行</li><li>在命令后面添加<code>\</code>，实现命令多行</li><li>使用<code>.ONESHELL:</code></li></ul></li></ul><h1 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h1><p>makefile可以通过<code>=、:=、?=、+=</code>给变量赋值，同时Make命令提供一系列内置变量，比如，((CC)指向当前使用的编译器，)(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html">手册</a>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/u010230971/article/details/80335613">https://blog.csdn.net/u010230971/article/details/80335613</a></p><p><a href="https://www.cnblogs.com/wang_yb/p/3990952.html">https://www.cnblogs.com/wang_yb/p/3990952.html</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/02/make.html">http://www.ruanyifeng.com/blog/2015/02/make.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-sessions</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h1><p><code>sqlSessionFactory</code>是工厂类的接口，默认实现是<code>DefaultSqlSessionFactory</code>，通过<code>sqlSessionFactoryBuilder</code>创建，我们不具体讨论配置文件的具体解析，主要分析mybatis的运行流程。</p><p><code>SqlSessionFactory</code>主要是用来创建<code>SqlSession</code>，<code>SqlSession</code>是线程不安全的，因此每次操作都要重新创建。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过数据源创建SqlSession，是我们比较常用的一种方式</span><span class="token keyword">private</span> <span class="token class-name">SqlSession</span> <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">,</span> <span class="token class-name">TransactionIsolationLevel</span> level<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> <span class="token class-name">TransactionFactory</span> transactionFactory <span class="token operator">=</span> <span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//通过事务工厂来产生一个事务</span>      tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//生成一个执行器(事务包含在执行器里)</span>      <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//然后产生一个DefaultSqlSession</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//如果打开事务出错，则关闭它</span>      <span class="token function">closeTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// may have fetched a connection so lets call close()</span>      <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error opening session.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//最后清空错误上下文</span>      <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token class-name">SqlSession</span></code></pre><p><code>SqlSession</code>有两方式调用方法，第一种方式是通过命名空间调用，第二种方式是<code>JavaBean</code>调用，也就是通过我们常用的Mapper接口进行调用。现在<code>Myabtis3</code>我们基本使用第二种方式。</p><p>通过Mapper接口进行调用，核心是 获取Mapper接口，并通过动态代理，进行方法拦截。</p><p><code>SqlSession</code>通过<code>getMapper</code>获取相应的Mapper接口。<code>SqlSession</code>的的数据库操作是调用Executor的相关方法。</p><p>在<code>getMapper</code>调用的时候，有几个核心的类</p><ol><li><code>MapperProxyFactory</code>:用于创建<code>MapperProxyd</code>的工厂方法</li><li><code>MapperProxy</code>:动态代理的<code>InvocationHandler</code>的实现，实际中就是执行sql语句</li><li><code>MapperRegistry</code></li><li><code>MapperMethood</code>:调用<code>SqlSession</code>的方法</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本操作</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不重新码字，可以<a href="https://link.juejin.im/?target=https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">参考廖雪峰老师的博文</a>，本文只对命令做归纳总结。</p><p>git的通用操作流程如下图（来源于网络）</p><p><img src="https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a" alt="git操作通用流程"></p><p>主要涉及到四个关键点：</p><ol><li>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</li><li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li><li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li><li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li></ol><p>更细节的来看：</p><p><img src="http://wumu.sciento.cn/img/162fcc0e7e711dc7.png"></p><p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p><p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p><ol><li><p>git管理配置的命令；</p><p><strong>几个核心存储区的交互命令：</strong></p></li><li><p>工作区与暂存区的交互；</p></li><li><p>暂存区与本地仓库（分支）上的交互；</p></li><li><p>本地仓库与远程仓库的交互。</p></li></ol><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">git安装</a></p><p><a href="https://git-scm.com/">https://git-scm.com/</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"email@example.com"</span>$ <span class="token function">git</span> config --global core.editor emacs$ <span class="token function">git</span> config --list$ <span class="token function">git</span> config user.name</code></pre><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> init  <span class="token comment"># 初始化工程</span>$ <span class="token function">git</span> <span class="token function">add</span> * <span class="token comment"># 将文件添加到暂存区</span>$ <span class="token function">git</span> commit -m  <span class="token comment"># 提交</span>$ <span class="token function">git</span> clone https://github.com/libgit2/libgit2</code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><ol><li><p>git add -A   保存所有的修改</p></li><li><p>git add .     保存新的添加和修改，但是不包括删除</p></li><li><p>git add -u   保存修改和删除，但是不包括新建文件。</p></li></ol><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><ol><li>git commit -m</li><li>git commit -ma   // -a是添加全部修改</li><li>git commit –amend</li></ol><h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><ol><li>git checkout — //使用暂缓区替换工作区</li><li>git checkout  切换分支</li><li>git checkout head — //直接使用本地参考的文件覆盖工作区文件</li></ol><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><ol><li>git rm  // 删除工作区，并且提交</li><li>git rm —cached  // 只删除暂存区</li><li>git rm -f   // 暂存区和工作区都删除</li></ol><h1 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h1><p><strong>谨慎使用！！！！！</strong></p><ul><li>–soft – 缓存区和工作目录都不会被改变</li><li>–mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响</li><li>–hard – 缓存区和工作目录都同步到你指定的提交</li></ul><h2 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h2><p>前提是已经提交，缺点：一次回滚过个记录会出现冲突。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go工程搭建</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="工程基本结构"><a href="#工程基本结构" class="headerlink" title="工程基本结构"></a>工程基本结构</h1>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql权限管理</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> zhangsan identified <span class="token keyword">by</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">current_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        ← 查看当前用户<span class="token keyword">SELECT</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span>                    ← 查看用户信息<span class="token keyword">SHOW</span> GRANTS<span class="token punctuation">;</span>                                                  ← 当前用户权限，会生成<span class="token keyword">SQL</span>语句<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'user'</span><span class="token variable">@'host'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'password'</span><span class="token punctuation">;</span>           ← 创建用户<span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'user'</span><span class="token variable">@'host'</span><span class="token punctuation">;</span>                                      ← 删除用户<span class="token keyword">RENAME</span> <span class="token keyword">USER</span> <span class="token string">'user'</span><span class="token variable">@'host'</span> <span class="token keyword">TO</span> <span class="token string">'fool'</span><span class="token variable">@'host'</span><span class="token punctuation">;</span>        </code></pre><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'new-password'</span><span class="token punctuation">;</span>   ← 修改密码<span class="token punctuation">(</span>recommand<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span><span class="token operator">=</span>PASSWORD<span class="token punctuation">(</span><span class="token string">'new-password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ← 修改密码mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">SET</span> password<span class="token operator">=</span>PASSWORD<span class="token punctuation">(</span><span class="token string">'new-password'</span><span class="token punctuation">)</span>       <span class="token keyword">WHERE</span> <span class="token keyword">USER</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">AND</span> Host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">SET</span> password<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>          ← 清除密码mysql<span class="token operator">></span> FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>$ mysqladmin <span class="token operator">-</span>uROOT <span class="token operator">-</span>pOLD_PASSWD password NEW_PASSWD                 ← 通过mysqladmin修改$ mysqladmin <span class="token operator">-</span>uROOT <span class="token operator">-</span>p flush<span class="token operator">-</span><span class="token keyword">privileges</span></code></pre><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'user'</span><span class="token variable">@'%'</span> <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">ALL</span>  <span class="token keyword">ON</span> <span class="token punctuation">[</span><span class="token keyword">TABLE</span> <span class="token operator">|</span> <span class="token keyword">DATABASE</span><span class="token punctuation">]</span> student<span class="token punctuation">,</span>course <span class="token keyword">TO</span> user1<span class="token punctuation">,</span>user2<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span><span class="token punctuation">,</span> <span class="token keyword">DELETE</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span> <span class="token keyword">TEMPORARY</span><span class="token punctuation">,</span> <span class="token keyword">ALTER</span><span class="token punctuation">,</span>       <span class="token keyword">DROP</span><span class="token punctuation">,</span> <span class="token keyword">REFERENCES</span><span class="token punctuation">,</span> <span class="token keyword">INDEX</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span><span class="token punctuation">,</span> <span class="token keyword">SHOW</span> <span class="token keyword">VIEW</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span> <span class="token keyword">ROUTINE</span><span class="token punctuation">,</span>       <span class="token keyword">ALTER</span> <span class="token keyword">ROUTINE</span><span class="token punctuation">,</span> <span class="token keyword">EXECUTE</span>       <span class="token keyword">ON</span> db<span class="token punctuation">.</span>tbl <span class="token keyword">TO</span> <span class="token string">'user'</span><span class="token variable">@'host'</span> <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> sampdb<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token keyword">PUBLIC</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>            ← 所有人，可以授权给其他人mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">UPDATE</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">SELECT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> tbl <span class="token keyword">TO</span> <span class="token keyword">user</span><span class="token punctuation">;</span>                ← 针对列赋值mysql<span class="token operator">></span> <span class="token keyword">SHOW</span> GRANTS <span class="token punctuation">[</span><span class="token keyword">FOR</span> <span class="token string">'user'</span><span class="token variable">@'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                              ← 查看权限信息mysql<span class="token operator">></span> <span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">'user'</span><span class="token variable">@'host'</span><span class="token punctuation">;</span>                         ← 撤销权限mysql<span class="token operator">></span> <span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span><span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span> <span class="token keyword">ON</span> db<span class="token punctuation">.</span>tbl <span class="token keyword">FROM</span> <span class="token string">'user'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><pre class="language-none"><code class="language-none">mysql&gt; CREATE USER &#39;admin&#39;@&#39;IP&#39; IDENTIFIED BY &#39;password&#39;;mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;admin&#39;@&#39;IP&#39;;mysql&gt; REVOKE ALL PRIVILEGES ON *.* FROM &#39;admin&#39;@&#39;IP&#39;;mysql&gt; DROP USER &#39;admin&#39;@&#39;IP&#39;;</code></pre><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span></code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="重置root密码"><a href="#重置root密码" class="headerlink" title="重置root密码"></a>重置root密码</h2><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">----- 1. 停止mysql服务器</span><span class="token comment"># systemctl stop mysqld</span><span class="token comment"># /opt/mysql-5.7/bin/mysqladmin -uroot -p'init-password' shutdown</span>Shutting down MySQL<span class="token punctuation">.</span><span class="token punctuation">.</span>     done<span class="token comment">----- 2. 获取跳过认证的启动参数</span><span class="token comment"># mysqld --help --verbose | grep 'skip-grant-tables' -A1</span>    <span class="token comment">--skip-grant-tables Start without grant tables. This gives all users FULL</span>                          ACCESS <span class="token keyword">to</span> <span class="token keyword">all</span> <span class="token keyword">tables</span><span class="token punctuation">.</span><span class="token comment">----- 3. 启动服务器，跳过认证</span><span class="token comment"># mysqld --skip-grant-tables --user=mysql &amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">10209</span><span class="token comment">----- 4. 取消密码</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">SET</span> password<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">2</span>  Changed: <span class="token number">2</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span></code></pre><h2 id="密码策略"><a href="#密码策略" class="headerlink" title="密码策略"></a>密码策略</h2><h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><p>validate_password_dictionary_file<br>插件用于验证密码强度的字典文件路径。</p><p>validate_password_length<br>密码最小长度，参数默认为8，它有最小值的限制，最小值为：validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)</p><p>validate_password_mixed_case_count<br>密码至少要包含的小写字母个数和大写字母个数。</p><p>validate_password_number_count<br>密码至少要包含的数字个数。</p><p>validate_password_policy<br>密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。有以下取值：<br>Policy                 Tests Performed<br>0 or LOW               Length<br>1 or MEDIUM         Length; numeric, lowercase/uppercase, and special characters<br>2 or STRONG        Length; numeric, lowercase/uppercase, and special characters; dictionary file<br>默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。</p><p>validate_password_special_char_count<br>密码至少要包含的特殊字符数。</p><h3 id="修改mysql参数配置"><a href="#修改mysql参数配置" class="headerlink" title="修改mysql参数配置"></a>修改mysql参数配置</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; set global validate_password_policy&#x3D;0;Query OK, 0 rows affected (0.05 sec)mysql&gt; set global validate_password_mixed_case_count&#x3D;0;Query OK, 0 rows affected (0.00 sec) mysql&gt; set global validate_password_number_count&#x3D;3;Query OK, 0 rows affected (0.00 sec) mysql&gt; set global validate_password_special_char_count&#x3D;0;Query OK, 0 rows affected (0.00 sec) mysql&gt; set global validate_password_length&#x3D;3;Query OK, 0 rows affected (0.00 sec) mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;+--------------------------------------+-------+| Variable_name                        | Value |+--------------------------------------+-------+| validate_password_dictionary_file    |       || validate_password_length             | 3     || validate_password_mixed_case_count   | 0     || validate_password_number_count       | 3     || validate_password_policy             | LOW   || validate_password_special_char_count | 0     |+--------------------------------------+-------+6 rows in set (0.00 sec)</code></pre><h2 id="MySQL-中-localhost-127-0-0-1-区别"><a href="#MySQL-中-localhost-127-0-0-1-区别" class="headerlink" title="MySQL 中 localhost 127.0.0.1 区别"></a>MySQL 中 localhost 127.0.0.1 区别</h2><p><code>%</code> 是一个通配符，用以匹配所有的 IP 地址，但是不能匹配到 <code>locahost</code> 这个特殊的域名。</p><p>也就是说，如果要允许本地登录，单纯只配置一个 <code>%</code> 是不够的 (应该是说对这种方式是不够的)，需要同时配置一个 <code>locahost</code> 的账号。</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'foobar'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token keyword">user</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span> <span class="token operator">like</span> <span class="token string">'foobar%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+------+-------------------------------------------+</span><span class="token operator">|</span> <span class="token keyword">user</span>   <span class="token operator">|</span> host <span class="token operator">|</span> password                                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------+-------------------------------------------+</span><span class="token operator">|</span> foobar <span class="token operator">|</span> <span class="token operator">%</span>    <span class="token operator">|</span> <span class="token operator">*</span><span class="token number">6</span>BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------+-------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>$ mysql <span class="token operator">-</span>ufoobar <span class="token operator">-</span>h127<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token number">.1</span> <span class="token operator">-</span>P3307 <span class="token operator">-</span>p<span class="token string">'123456'</span>ERROR <span class="token number">1045</span> <span class="token punctuation">(</span><span class="token number">28000</span><span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> <span class="token keyword">user</span> <span class="token string">'foobar'</span><span class="token variable">@'localhost'</span> <span class="token punctuation">(</span><span class="token keyword">using</span> password: YES<span class="token punctuation">)</span></code></pre><p><a href="https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html">https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://jin-yang.github.io/post/mysql-users.html">https://jin-yang.github.io/post/mysql-users.html</a></p><p><a href="https://www.cnblogs.com/Richardzhu/p/3318595.html">https://www.cnblogs.com/Richardzhu/p/3318595.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装mysql</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="添加-MySQL-YUM-源"><a href="#添加-MySQL-YUM-源" class="headerlink" title="添加 MySQL YUM 源"></a>添加 MySQL YUM 源</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$wget</span> <span class="token string">'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span><span class="token variable">$sudo</span> <span class="token function">rpm</span> -Uvh mysql57-community-release-el7-11.noarch.rpm<span class="token variable">$yum</span> repolist all <span class="token operator">|</span> <span class="token function">grep</span> mysqlmysql-connectors-community/x86_64 MySQL Connectors Community                  <span class="token number">36</span>mysql-tools-community/x86_64      MySQL Tools Community                       <span class="token number">47</span>mysql57-community/x86_64          MySQL <span class="token number">5.7</span> Community Server                 <span class="token number">187</span></code></pre><h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><pre class="language-none"><code class="language-none">## 安装最新版$sudo yum install mysql-community-server$ sudo yum install mysql   ## 安装客户端## 安装老版本## 1. yum-config-manager$ sudo dnf config-manager --disable mysql57-community$ sudo dnf config-manager --enable mysql56-community$ yum repolist | grep mysqlmysql-connectors-community&#x2F;x86_64 MySQL Connectors Community                  36mysql-tools-community&#x2F;x86_64      MySQL Tools Community                       47mysql56-community&#x2F;x86_64          MySQL 5.6 Community Server                 327## 2. 直接修改 &#x2F;etc&#x2F;yum.repos.d&#x2F;mysql-community.repo# Enable to use MySQL 5.6[mysql56-community]name&#x3D;MySQL 5.6 Community Serverbaseurl&#x3D;http:&#x2F;&#x2F;repo.mysql.com&#x2F;yum&#x2F;mysql-5.6-community&#x2F;el&#x2F;7&#x2F;$basearch&#x2F;enabled&#x3D;1 #表示当前版本是安装gpgcheck&#x3D;1gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-mysql[mysql57-community]name&#x3D;MySQL 5.7 Community Serverbaseurl&#x3D;http:&#x2F;&#x2F;repo.mysql.com&#x2F;yum&#x2F;mysql-5.7-community&#x2F;el&#x2F;7&#x2F;$basearch&#x2F;enabled&#x3D;0 #默认这个是 1gpgcheck&#x3D;1gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-mysql</code></pre><h1 id="启动Mysql"><a href="#启动Mysql" class="headerlink" title="启动Mysql"></a>启动Mysql</h1><pre class="language-none"><code class="language-none">$sudo service mysqld start $sudo systemctl start mysqld #CentOS 7$sudo systemctl status mysqld● mysqld.service - MySQL Community Server   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service; enabled; vendor preset: disabled)   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago  Process: 2482 ExecStartPost&#x3D;&#x2F;usr&#x2F;bin&#x2F;mysql-systemd-start post (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)  Process: 2421 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;mysql-systemd-start pre (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS) Main PID: 2481 (mysqld_safe)   CGroup: &#x2F;system.slice&#x2F;mysqld.service           ├─2481 &#x2F;bin&#x2F;sh &#x2F;usr&#x2F;bin&#x2F;mysqld_safe --basedir&#x3D;&#x2F;usr           └─2647 &#x2F;usr&#x2F;sbin&#x2F;mysqld --basedir&#x3D;&#x2F;usr --datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql --plugin-dir&#x3D;&#x2F;usr&#x2F;...</code></pre><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><pre class="language-none"><code class="language-none">## 获取临时密码sudo grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log$ mysql -uroot -p  #输入查看到的密码mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyNewPass4!&#39;;</code></pre><p>mysql的密码存在安全等级</p><pre class="language-none"><code class="language-none">shell&gt; mysql_secure_installation</code></pre><pre class="language-none"><code class="language-none">mysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;</code></pre><p><strong>validate_password_number_count</strong>参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。</p><p><strong>validate_password_special_char_count</strong>参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。</p><p><strong>validate_password_mixed_case_count</strong>参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。</p><p><strong>validate_password_length</strong>参数是密码的长度，这个参数由下面的公式生成</p><p>validate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)</p><p><strong>validate_password_dictionary_file</strong>参数是指定密码验证的字典文件路径。</p><p><strong>validate_password_policy</strong>这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。</p><h2 id="修改密码策略"><a href="#修改密码策略" class="headerlink" title="修改密码策略"></a>修改密码策略</h2><p>更改密码策略为LOW  </p><pre class="language-none"><code class="language-none">mysql&gt; set global validate_password_policy&#x3D;0;</code></pre><p>更改密码长度  </p><pre class="language-none"><code class="language-none">mysql&gt; set global validate_password_length&#x3D;0;</code></pre><h2 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h2><pre class="language-none"><code class="language-none">## 会提示设置5个关键位置## 设置 root 密码## 禁止 root 账号远程登录## 禁止匿名账号（anonymous）登录## 删除测试库## 是否确认修改$ mysql_secure_installation</code></pre><h1 id="安装三方插件"><a href="#安装三方插件" class="headerlink" title="安装三方插件"></a>安装三方插件</h1><pre class="language-none"><code class="language-none">yum --disablerepo&#x3D;\* --enablerepo&#x3D;&#39;mysql*-community*&#39; list available</code></pre><h1 id="修改编码"><a href="#修改编码" class="headerlink" title="修改编码"></a>修改编码</h1><pre class="language-none"><code class="language-none">## &#x2F;etc&#x2F;my.cnf[client]default-character-set &#x3D; utf8[mysqld]default-storage-engine &#x3D; INNODBcharacter-set-server &#x3D; utf8collation-server &#x3D; utf8_general_ci #不区分大小写collation-server &#x3D;  utf8_bin #区分大小写collation-server &#x3D; utf8_unicode_ci #比 utf8_general_ci 更准确</code></pre><h1 id="修改服务器时间"><a href="#修改服务器时间" class="headerlink" title="修改服务器时间"></a>修改服务器时间</h1><pre class="language-none"><code class="language-none">## mysql 中默认的时间戳是 UTC 时间，需要改为服务器时间的话官网提供了 3 种方式$ mysql_tzinfo_to_sql tz_dir$ mysql_tzinfo_to_sql tz_file tz_name$ mysql_tzinfo_to_sql --leap tz_file## tz_dir 代表服务器时间数据库，CentOS 7 中默认的目录为 &#x2F;usr&#x2F;share&#x2F;zoneinfo ，tz_name 为具体的时区。如果设置的时区需要闰秒，则使用 --leap，具体的用法如下：$ mysql_tzinfo_to_sql &#x2F;usr&#x2F;share&#x2F;zoneinfo | mysql -u root -p mysql$ mysql_tzinfo_to_sql tz_file tz_name | mysql -u root mysql$ mysql_tzinfo_to_sql --leap tz_file | mysql -u root mysql&gt; set global time_zone &#x3D; &#39;+8:00&#39;;  ##修改mysql全局时区为北京时间，即我们所在的东8区&gt; set time_zone &#x3D; &#39;+8:00&#39;;  ##修改当前会话时区&gt; flush privileges;  #立即生效## 通过修改my.cnf配置文件来修改时区# vim &#x2F;etc&#x2F;my.cnf  ##在[mysqld]区域中加上default-time_zone &#x3D; &#39;+8:00&#39;# &#x2F;etc&#x2F;init.d&#x2F;mysqld restart  ##重启mysql使新时区生效</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ngrok环境搭建</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><ol><li><p>配置golang环境</p><ol><li><p>安装go</p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> golang</code></pre></li><li><p>配置<code>GOPATH</code></p></li></ol></li><li><p>安装git2</p><pre class="language-ba&#39;sh" data-language="ba&#39;sh"><code class="language-ba&#39;sh">sudo yum remove gitsudo yum install epel-releasesudo yum install https:&#x2F;&#x2F;centos7.iuscommunity.org&#x2F;ius-release.rpmsudo yum install git2u</code></pre></li><li><p>下载ngrok</p><pre class="language-bash" data-language="bash"><code class="language-bash">go get github.com/inconshreveable/ngrok</code></pre></li></ol><h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><ol><li><p>使用let’s encrypt证书</p><ol><li><p>申请证书（具体看申请证书，主要通配符证书和三级域名）</p></li><li><p>修改证书</p><p>客户端证书</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ngrok<span class="token function">cp</span> /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt</code></pre><p>服务端证书</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt<span class="token function">cp</span> /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key</code></pre></li></ol></li></ol><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><ol><li><p>编译服务端</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> release-server</code></pre></li><li><p>编译客户端</p><p>不同平台的客户端需要分开编译。不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 <span class="token function">make</span> release-client<span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 <span class="token function">make</span> release-client<span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>arm <span class="token function">make</span> release-client</code></pre></li></ol><h1 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h1><p>在开启之前，请主要端口是否开放</p><pre class="language-bash" data-language="bash"><code class="language-bash">./ngrokd -domain<span class="token operator">=</span>ngrok.sciento.top -httpAddr<span class="token operator">=</span>:9580 -httpsAddr<span class="token operator">=</span>:9443 -tunnelAddr<span class="token operator">=</span><span class="token string">":9444"</span></code></pre><h1 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h1><ol><li><p>配置文件,具体看官方文档</p><pre class="language-none"><code class="language-none">server_addr: &quot;ngrok.sciento.top:9444&quot;trust_host_root_certs: falsetunnels:  http:    subdomain: &quot;demo&quot;    proto:      http: &quot;9000&quot;        https:    subdomain: &quot;demo&quot;    proto:      https: &quot;9000&quot;</code></pre></li><li><p>启动</p><pre class="language-bash" data-language="bash"><code class="language-bash">./ngrok -config<span class="token operator">=</span>ngrok.cfg start http https</code></pre></li></ol><h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><ol><li><p>安装nginx</p></li><li><p>配置</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  demo<span class="token punctuation">.</span>ngrok<span class="token punctuation">.</span>xncoding<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">return</span>       <span class="token number">301</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>demo<span class="token punctuation">.</span>ngrok<span class="token punctuation">.</span>xncoding<span class="token punctuation">.</span>com<span class="token variable">$request_uri</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">443</span> <span class="token keyword">ssl</span> http2<span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  demo<span class="token punctuation">.</span>ngrok<span class="token punctuation">.</span>xncoding<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">charset</span> utf<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span>live<span class="token operator">/</span>demo<span class="token punctuation">.</span>ngrok<span class="token punctuation">.</span>xncoding<span class="token punctuation">.</span>com<span class="token operator">/</span>fullchain<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>    <span class="token keyword">ssl_certificate_key</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span>live<span class="token operator">/</span>demo<span class="token punctuation">.</span>ngrok<span class="token punctuation">.</span>xncoding<span class="token punctuation">.</span>com<span class="token operator">/</span>privkey<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>    <span class="token keyword">ssl_trusted_certificate</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span>live<span class="token operator">/</span>demo<span class="token punctuation">.</span>ngrok<span class="token punctuation">.</span>xncoding<span class="token punctuation">.</span>com<span class="token operator">/</span>chain<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>    <span class="token keyword">access_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>ngrok<span class="token punctuation">.</span>log main<span class="token punctuation">;</span>    <span class="token keyword">error_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>ngrok_error<span class="token punctuation">.</span>log error<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">5442</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_redirect</span> off<span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> Host       <span class="token variable">$http_host</span><span class="token punctuation">:</span><span class="token number">5442</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP  <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.xncoding.com/2017/12/29/web/ngrok.html">https://www.xncoding.com/2017/12/29/web/ngrok.html</a></p><p><a href="https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/">https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/</a></p><p><a href="https://www.jianshu.com/p/c5c9d071e395">https://www.jianshu.com/p/c5c9d071e395</a></p><p><a href="http://ngrok.cn/docs.html#tcp">http://ngrok.cn/docs.html#tcp</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Druid初始化</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// bug fixed for dead lock, for issue #2980</span>        <span class="token class-name">DruidDriver</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">"interrupt"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span> init <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//双重检查</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            initStackTrace <span class="token operator">=</span> <span class="token class-name">Utils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token class-name">DruidDriver</span><span class="token punctuation">.</span><span class="token function">createDataSourceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> delta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100000</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>connectionIdSeedUpdater<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>statementIdSeedUpdater<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>resultSetIdSeedUpdater<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>transactionIdSeedUpdater<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">initFromWrapDriverUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Filter</span> filter <span class="token operator">:</span> filters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                filter<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dbType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dbType<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>dbType <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getDbType</span><span class="token punctuation">(</span>jdbcUrl<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">JdbcConstants</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dbType<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token class-name">JdbcConstants</span><span class="token punctuation">.</span>MARIADB<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dbType<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token class-name">JdbcConstants</span><span class="token punctuation">.</span>ALIYUN_ADS<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dbType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">boolean</span> cacheServerConfigurationSet <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connectProperties<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"cacheServerConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    cacheServerConfigurationSet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"cacheServerConfiguration"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    cacheServerConfigurationSet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheServerConfigurationSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>connectProperties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cacheServerConfiguration"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxActive <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"illegal maxActive "</span> <span class="token operator">+</span> maxActive<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxActive <span class="token operator">&lt;</span> minIdle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"illegal maxActive "</span> <span class="token operator">+</span> maxActive<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getInitialSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> maxActive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"illegal initialSize "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialSize <span class="token operator">+</span> <span class="token string">", maxActive "</span> <span class="token operator">+</span> maxActive<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeBetweenLogStatsMillis <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> useGlobalDataSourceStat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"timeBetweenLogStatsMillis not support useGlobalDataSourceStat=true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxEvictableIdleTimeMillis <span class="token operator">&lt;</span> minEvictableIdleTimeMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">"maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>driverClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>driverClass <span class="token operator">=</span> driverClass<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">initFromSPIServiceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 处理驱动</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>driver <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>driverClass <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>driverClass<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>driverClass <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getDriverClassName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MockDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    driver <span class="token operator">=</span> <span class="token class-name">MockDriver</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>jdbcUrl <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>driverClass <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> driverClass<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">"url not set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                                       driver <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">createDriver</span><span class="token punctuation">(</span>driverClassLoader<span class="token punctuation">,</span> driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>driverClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>driverClass <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token comment">// 进行参数的核对，没有什么逻辑</span>            <span class="token function">initCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 为不同的数据库处理异常，这个可以借鉴</span>            <span class="token function">initExceptionSorter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">initValidConnectionChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 做了一些检查，不知道</span>            <span class="token function">validationQueryCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建数据统计对象</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUseGlobalDataSourceStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dataSourceStat <span class="token operator">=</span> <span class="token class-name">JdbcDataSourceStat</span><span class="token punctuation">.</span><span class="token function">getGlobal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSourceStat <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dataSourceStat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcDataSourceStat</span><span class="token punctuation">(</span><span class="token string">"Global"</span><span class="token punctuation">,</span> <span class="token string">"Global"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dbType<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">JdbcDataSourceStat</span><span class="token punctuation">.</span><span class="token function">setGlobal</span><span class="token punctuation">(</span>dataSourceStat<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSourceStat<span class="token punctuation">.</span><span class="token function">getDbType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dataSourceStat<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dbType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                dataSourceStat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcDataSourceStat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dbType<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connectProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            dataSourceStat<span class="token punctuation">.</span><span class="token function">setResetStatEnable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resetStatEnable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建连接池</span>            connections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidConnectionHolder</span><span class="token punctuation">[</span>maxActive<span class="token punctuation">]</span><span class="token punctuation">;</span>            evictConnections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidConnectionHolder</span><span class="token punctuation">[</span>maxActive<span class="token punctuation">]</span><span class="token punctuation">;</span>            keepAliveConnections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidConnectionHolder</span><span class="token punctuation">[</span>maxActive<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">SQLException</span> connectError <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// 同步或者异步创建线程池</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>createScheduler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> asyncInit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> initialSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    createTaskCount<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token class-name">CreateConnectionTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateConnectionTask</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>createSchedulerFuture <span class="token operator">=</span> createScheduler<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>asyncInit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// init connections</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>poolingCount <span class="token operator">&lt;</span> initialSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">PhysicalConnectionInfo</span> pyConnectInfo <span class="token operator">=</span> <span class="token function">createPhysicalConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">DruidConnectionHolder</span> holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pyConnectInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                        connections<span class="token punctuation">[</span>poolingCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> holder<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"init datasource error, url: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>initExceptionThrow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            connectError <span class="token operator">=</span> ex<span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>poolingCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    poolingPeak <span class="token operator">=</span> poolingCount<span class="token punctuation">;</span>                    poolingPeakTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 用来打印线程池</span>            <span class="token function">createAndLogThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token function">createAndStartCreatorThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 停止</span>            <span class="token function">createAndStartDestroyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 等待线程创建完成</span>            initedLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            init <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            initedTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 注册mbean</span>            <span class="token function">registerMbean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connectError <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> poolingCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> connectError<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 检查连接池，防止连接池超出最大连接池</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>keepAlive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// async fill to minIdle</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>createScheduler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minIdle<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        createTaskCount<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token class-name">CreateConnectionTask</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateConnectionTask</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>createSchedulerFuture <span class="token operator">=</span> createScheduler<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emptySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"&#123;dataSource-"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125; init error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"&#123;dataSource-"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125; init error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"&#123;dataSource-"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125; init error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 初始化成功</span>            inited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment">// 解锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>init <span class="token operator">&amp;&amp;</span> LOG<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"&#123;dataSource-"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    msg <span class="token operator">+=</span> <span class="token string">","</span><span class="token punctuation">;</span>                    msg <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                msg <span class="token operator">+=</span> <span class="token string">"&#125; inited"</span><span class="token punctuation">;</span>                LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="相关的类"><a href="#相关的类" class="headerlink" title="相关的类"></a>相关的类</h1><ol><li>Runnable</li><li>Thread</li><li>Callable:比Runnable有个返回值</li><li>Future</li><li>FutureTask</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlx基本使用</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class="language-bash" data-language="bash"><code class="language-bash">go get github.com/jmoiron/sqlx</code></pre><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB <span class="token comment">// exactly the same as the built-in</span>db <span class="token operator">=</span> sqlx<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token string">":memory:"</span><span class="token punctuation">)</span> <span class="token comment">// from a pre-existing sql.DB; note the required driverName</span>db <span class="token operator">=</span> sqlx<span class="token punctuation">.</span><span class="token function">NewDb</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token string">":memory:"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"sqlite3"</span><span class="token punctuation">)</span> <span class="token comment">// force a connection and test that it worked</span>err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="Exec"><a href="#Exec" class="headerlink" title="Exec"></a>Exec</h2><p>直接执行，适合add,update,delete</p><pre class="language-go" data-language="go"><code class="language-go">schema <span class="token operator">:=</span> <span class="token string">`CREATE TABLE place (    country text,    city text NULL,    telcode integer);`</span> <span class="token comment">// execute a query on the server</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span> <span class="token comment">// or, you can use MustExec, which panics on error</span>cityState <span class="token operator">:=</span> <span class="token string">`INSERT INTO place (country, telcode) VALUES (?, ?)`</span>countryCity <span class="token operator">:=</span> <span class="token string">`INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`</span>db<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span>cityState<span class="token punctuation">,</span> <span class="token string">"Hong Kong"</span><span class="token punctuation">,</span> <span class="token number">852</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span>cityState<span class="token punctuation">,</span> <span class="token string">"Singapore"</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span>countryCity<span class="token punctuation">,</span> <span class="token string">"South Africa"</span><span class="token punctuation">,</span> <span class="token string">"Johannesburg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span></code></pre><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>查询数据库，适合select</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// fetch all places from the db</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"SELECT country, city, telcode FROM place"</span><span class="token punctuation">)</span> <span class="token comment">// iterate over each row</span><span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> country <span class="token builtin">string</span>    <span class="token comment">// note that city can be NULL, so we use the NullString type</span>    <span class="token keyword">var</span> city    sql<span class="token punctuation">.</span>NullString    <span class="token keyword">var</span> telcode <span class="token builtin">int</span>    err <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>country<span class="token punctuation">,</span> <span class="token operator">&amp;</span>city<span class="token punctuation">,</span> <span class="token operator">&amp;</span>telcode<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// queryx 可以对结果转换成结构体</span><span class="token keyword">var</span> person2 Userrowxs<span class="token punctuation">,</span>err <span class="token operator">:=</span>db<span class="token punctuation">.</span><span class="token function">Queryx</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM sys_user LIMIT 1"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> rowxs<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rowxs<span class="token punctuation">.</span><span class="token function">StructScan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>person2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><pre class="language-go" data-language="go"><code class="language-go">p <span class="token operator">:=</span> Place<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>pp <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Place<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// this will pull the first place directly into p</span>err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token string">"SELECT * FROM place LIMIT 1"</span><span class="token punctuation">)</span> <span class="token comment">// this will pull places with telcode > 50 into the slice pp</span>err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pp<span class="token punctuation">,</span> <span class="token string">"SELECT * FROM place WHERE telcode > ?"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">// they work with regular types as well</span><span class="token keyword">var</span> id <span class="token builtin">int</span>err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">,</span> <span class="token string">"SELECT count(*) FROM place"</span><span class="token punctuation">)</span> <span class="token comment">// fetch at most 10 place names</span><span class="token keyword">var</span> names <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>names<span class="token punctuation">,</span> <span class="token string">"SELECT name FROM place LIMIT 10"</span><span class="token punctuation">)</span></code></pre><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// this will not work if connection pool > 1</span>db<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span><span class="token string">"BEGIN;"</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">MustExec</span><span class="token punctuation">(</span><span class="token string">"COMMIT;"</span><span class="token punctuation">)</span></code></pre><h1 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h1><pre class="language-go" data-language="go"><code class="language-go">stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE telcode=?`</span><span class="token punctuation">)</span>row <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span> tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>txStmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE telcode=?`</span><span class="token punctuation">)</span>row <span class="token operator">=</span> txStmt<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token number">852</span><span class="token punctuation">)</span></code></pre><h1 id="Named-Queries"><a href="#Named-Queries" class="headerlink" title="Named Queries"></a>Named Queries</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// named query with a struct</span>p <span class="token operator">:=</span> Place<span class="token punctuation">&#123;</span>Country<span class="token punctuation">:</span> <span class="token string">"South Africa"</span><span class="token punctuation">&#125;</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">NamedQuery</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE country=:country`</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token comment">// named query with a map</span>m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"city"</span><span class="token punctuation">:</span> <span class="token string">"Johannesburg"</span><span class="token punctuation">&#125;</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">NamedExec</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE city=:city`</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>p <span class="token operator">:=</span> Place<span class="token punctuation">&#123;</span>TelephoneCode<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">&#125;</span>pp <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Place<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// select all telcodes > 50</span>nstmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">PrepareNamed</span><span class="token punctuation">(</span><span class="token string">`SELECT * FROM place WHERE telcode > :telcode`</span><span class="token punctuation">)</span>err <span class="token operator">=</span> nstmt<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pp<span class="token punctuation">,</span> p<span class="token punctuation">)</span>arg <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>    <span class="token string">"published"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"authors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>query<span class="token punctuation">,</span> args<span class="token punctuation">,</span> err <span class="token operator">:=</span> sqlx<span class="token punctuation">.</span><span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)"</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span>query<span class="token punctuation">,</span> args<span class="token punctuation">,</span> err <span class="token operator">:=</span> sqlx<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span>query <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Rebind</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="http://jmoiron.github.io/sqlx/">http://jmoiron.github.io/sqlx/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery基本操作</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 基本选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#id'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.class'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'element'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'select1 ,select2'</span><span class="token punctuation">)</span><span class="token comment">//可以使用css选择器</span><span class="token comment">// 层次选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'ancestor descendant'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'parent >child'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'prev+next'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'prev~siblings'</span><span class="token punctuation">)</span><span class="token comment">//获取所有同辈元素</span></code></pre><h1 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// attr</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">)</span><span class="token comment">//获取属性</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"background"</span><span class="token operator">:</span><span class="token string">"white"</span><span class="token punctuation">,</span><span class="token string">"height"</span><span class="token operator">:</span><span class="token string">"200px"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// css</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'background'</span><span class="token operator">:</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">"height"</span><span class="token operator">:</span><span class="token string">'200px'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// width height</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// addClass</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'className'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// removeAttr</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'background'</span><span class="token punctuation">)</span><span class="token comment">// removeClass 没参数删除所有</span><span class="token comment">// hasClass</span><span class="token comment">// 创建节点</span><span class="token keyword">var</span> p <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;p>hello&lt;/p>'</span><span class="token punctuation">)</span><span class="token comment">// append() 添加内容</span><span class="token comment">// appendTo()</span><span class="token comment">// prepend() 向元素内部前面添加内容</span><span class="token comment">// prependTo()</span>​<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> html&lt;p>hello&lt;/p>​</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;i>hi!&lt;/i>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>​<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> html&lt;p>&lt;i>hi!&lt;/i>hello&lt;/p>​</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>    <span class="token comment">// 在相应位置添加元素，是在元素的外面</span><span class="token comment">// after</span><span class="token comment">// insertAfter</span><span class="token comment">// before</span><span class="token comment">//insertBefore</span><span class="token comment">// remove()</span><span class="token comment">// detach()：和remove()几乎一样，不同的是detach方法不会删除节点所绑定的事件和附加的数据</span><span class="token comment">// empty() 清空内容</span><span class="token comment">// clone()复制节点，可以有参数true，当有true参数时，将同时复制节点所绑定的事件</span><span class="token comment">// replaceWith 将匹配的节点替换成指定的节点</span><span class="token comment">// replaceAll() 只是用一个</span><span class="token comment">// wrap 包裹节点</span><span class="token comment">// wrapAll</span><span class="token comment">// wrapInner 将匹配的节点内部的节点或者文本内容用指定的节点包裹起来</span>​<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p>我是内容&lt;/p>​</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrapInner</span><span class="token punctuation">(</span><span class="token string">"&lt;span>&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p>&lt;span>我是内容&lt;/span>&lt;/p>​</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token comment">// html()</span><span class="token comment">// text()</span><span class="token comment">// val()</span><span class="token comment">// children()</span><span class="token comment">// next()</span><span class="token comment">// prev()</span><span class="token comment">// siblings()</span><span class="token comment">// closest() 获取最近的符合匹配的一个父元素</span>​<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>&lt;div class="div2">&lt;p>我是内容&lt;/p>&lt;/div>&lt;/div>​</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token keyword">var</span> $div<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回class为div2的div元素</span><span class="token comment">// parent()</span><span class="token comment">// parents()</span><span class="token comment">// offset()</span><span class="token comment">// position()</span><span class="token comment">// scrollTop()</span><span class="token comment">// scrollLeft()</span></code></pre><h1 id="事件与动画"><a href="#事件与动画" class="headerlink" title="事件与动画"></a>事件与动画</h1><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mouseover<span class="token comment">// 合成事件</span><span class="token function">hover</span><span class="token punctuation">(</span>enter<span class="token punctuation">,</span>leave<span class="token punctuation">)</span><span class="token function">toggle</span><span class="token punctuation">(</span>fn1<span class="token punctuation">,</span>fn2<span class="token punctuation">)</span>       <span class="token comment">// 阻止事件</span>event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// unbind 移除事件</span><span class="token comment">// trigger 触发事件</span><span class="token comment">// 动画</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fadeLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       </code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/3e2768c8dad4">jQuery简明参考手册——30分钟快速入门jQuery</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud-eureka</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="建立工程"><a href="#建立工程" class="headerlink" title="建立工程"></a>建立工程</h1><ol><li><p>添加依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>添加<code>Application</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>添加配置文件</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">registerWithEureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">## 是否注册到eureka server</span>    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment">## 是否获取Eureka server 注册信息，单机可以设置为false</span>    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span>/eureka/<span class="token comment">## 默认http://localhost:8761/eureka</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> eurka<span class="token punctuation">-</span>server</code></pre></li><li><p>运行工程，访问<code>127.0.0.1:9761</code>可以看到web界面。</p></li></ol><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><ol><li><p>添加依赖</p><pre class="language-none"><code class="language-none">&lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;           &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;       &lt;&#x2F;dependency&gt;</code></pre></li><li><p>添加配置</p><ul><li>老版本</li></ul><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">security</span><span class="token punctuation">:</span><span class="token key atrule">basic</span><span class="token punctuation">:</span><span class="token boolean important">true</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> wumu      <span class="token key atrule">password</span><span class="token punctuation">:</span> wumu </code></pre><ul><li>新版本</li></ul><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">security</span><span class="token punctuation">:</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> wumu      <span class="token key atrule">password</span><span class="token punctuation">:</span> wumu</code></pre></li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>在依赖包中同时添加的<code>spring-cloud-starter-netflix-eureka-server</code>与<code>springb-boot-starter-web</code>两个依赖会导致tomcat的依赖问题，应用不能启动。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> spring-cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tiemline设计方案</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.myway5.com/index.php/2017/06/29/timeline-design/">朋友圈式的TIMELINE设计方案</a></p><p><a href="https://blog.csdn.net/u011035407/article/details/78592787">朋友圈的设计及实现</a></p><p><a href="https://cloud.tencent.com/developer/article/1350690">几个大型网站的Feeds(Timeline)设计简单对比</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找附近的人</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="GeoHash"><a href="#GeoHash" class="headerlink" title="GeoHash"></a>GeoHash</h1><p>比较原始的方法，简单方便</p><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>计算公式</p><pre class="language-none"><code class="language-none">C &#x3D; sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)Distance &#x3D; R*Arccos(C)*Pi&#x2F;180</code></pre><p>在经纬度小节中我们了解了两个公式用来计算两个位置之间的距离, 该小节我们以测试数据说明如何实现.<br>测试需要的表结构和数据:</p><pre class="language-none"><code class="language-none">表结构:CREATE TABLE &#96;geotest&#96; (  &#96;userid&#96; int(10) NOT NULL,  &#96;longitude&#96; decimal(9,6) NOT NULL,  &#96;latitude&#96; decimal(9,6) NOT NULL,  &#96;create_time&#96; datetime DEFAULT NULL,  UNIQUE KEY &#96;unq_uid&#96; (&#96;userid&#96;),  KEY &#96;idx_lat_lng&#96; (&#96;longitude&#96;,&#96;latitude&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8测试数据:insert geotest values(10000, 116.417480, 40.003033, now());insert geotest values(10001, 116.437480, 40.004033, now());insert geotest values(10002, 116.457480, 40.005033, now());insert geotest values(10003, 116.477480, 40.006033, now());............</code></pre><p>第一种公式中, google 为我们介绍了如何使用 <a href="https://developers.google.com/maps/articles/phpsqlsearch_v3#findnearsql">sql</a> 来获取附近的点, 如下所示, 我们选用 6371km 作为地球的半径,根据上述小节的计算公式推断:</p><pre class="language-none"><code class="language-none">C &#x3D; sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)Distance &#x3D; R*Arccos(C)*Pi&#x2F;180</code></pre><p>google 地图的计算公式可以参考 <a href="http://www.arubin.org/files/geo_search.pdf">geo_search</a></p><p>两个位置之间的距离则可以换算成以下公式:</p><pre class="language-none"><code class="language-none">R*arccos( cos( radians(latA)*cos( radians(latB) ) * cos( radians(lonA - lonB) )) + sin( radians(latA)*cos(latB) ))</code></pre><p>radians 函数计算出相应的弧度信息, 得到下面的 sql:</p><pre class="language-none"><code class="language-none">SELECT  user_id, (    6371 * acos (      cos ( radians(40.003033) )      * cos( radians( latitude ) )      * cos( radians( longitude ) - radians(116.417481) )      + sin ( radians(40.003033) )      * sin( radians( latitude ) )    )  ) AS distanceFROM geotestHAVING distance &lt; 1ORDER BY distanceLIMIT 0 , 20;</code></pre><p>上面的 sql 从 geotest 中从 geotest 表中获取到经度(116.417481) 和纬度(40.003033) 位置附近 1km 所有的user_id 信息.<br>观察这个 sql, 可以预见到在表数据较大的时候仅建立复合索引 <code>idx_lat_lng</code> 肯定会遇到性能瓶颈, 因为每行记录都需要做相关的运算, 才能跑出最后的结果.</p><p>所以要提高该 sql 的性能就需要尽量过滤不需要的 longitude 和 latitude 两列的值. 参考 <a href="http://www.arubin.org/files/geo_search.pdf">geo_search</a> 和 <a href="http://stackoverflow.com/questions/1006654/fastest-way-to-find-distance-between-two-lat-long-points">fastest-way-to-find-distance</a>, 在近距离的情况下我们可以认为当前区域内的所有位置都在一个平面内, 虽然有点误差, 但是比起地球这么大的椭球, 我们完全可以忽略其中的误差. 以经纬度来讲, 1 纬度约等于 69 英里, 大约 111044.736 米, 其中的换算公式为:</p><pre class="language-none"><code class="language-none">1°latitude  ~&#x3D; 69 miles1°longitude ~&#x3D; cos(latitude)*69 miles</code></pre><p>所以对于位置信息(lng, lat), 我们可以计算出以其为中心周边指定距离的四个点, 如下图所示:</p><pre class="language-none"><code class="language-none">+-------------+|             ||             ||      +      ||             ||             |+-------------+</code></pre><p>计算公式如下:</p><pre class="language-none"><code class="language-none">lng1 &#x3D; lon - dist&#x2F;abs(cos(radians(lat))*69)lng2 &#x3D; lon + dist&#x2F;abs(cos(radians(lat))*69)lat1 &#x3D; lat - (dist&#x2F;69);lat2 &#x3D; lat + (dist&#x2F;69);</code></pre><p>四个点的坐标就分别为 (lng1, lat1), (lng1, lat2), (lng2, lat1), (lng2, lat2), 所以存在于该四个点组成的平面之间的点即可以被认为在(lng, lat) 的 dist 距离内.</p><p>基于上述的规则, 修改 sql 为以下:</p><pre class="language-none"><code class="language-none">SELECT  user_id, (    6371 * acos (      cos ( radians(40.003033) )      * cos( radians( latitude ) )      * cos( radians( longitude ) - radians(116.417481) )      + sin ( radians(40.003033) )      * sin( radians( latitude ) )    )  ) AS distanceFROM geotestWHERE longitude BETWEEN lng1 AND lng2AND latitude BETWEEN lat1 AND lat2HAVING distance &lt; 1ORDER BY distanceLIMIT 0 , 20;</code></pre><p>这样就能很好的使用索引, 如果还想增加超时设置, 可以在 sql 里加上 create_time 条件进行过滤, 比如只查找最近一天的附近的用户. 另外开发者也可以结合使用 sphinx 或 elasticsearch 得到更好的性能.</p><p>下面为根据上面介绍的规则整理成存储过程, 方便开发者调用访问. 这里我们将地球半径的公里数转换为米即为 6371392.89m, 69英里则转为 111044.736m, 如下存储过程返回 user_id 和 距离(米):</p><pre class="language-none"><code class="language-none">DELIMITER $$drop procedure if exists geo_dist$$create procedure geo_dist(IN lng decimal(9, 6), IN lat decimal(9, 6), IN dist int)begin   declare lng1 decimal(9, 6); declare lng2 decimal(16, 13);   declare lat1 decimal(9, 6); declare lat1 decimal(16, 13);   -- calculate lng and lat for the rectangle, in meters unit   set lng1 &#x3D; lng - dist&#x2F;abs(cos(radians(lat))*111044.736);   set lng2 &#x3D; lng + dist&#x2F;abs(cos(radians(lat))*111044.736);   set lat1 &#x3D; lat - (dist&#x2F;111044.736);   set lat2 &#x3D; lat + (dist&#x2F;111044.736);   -- run the query     select user_id, round((        6371392.89 * acos (         cos ( radians(lat) )         * cos( radians( latitude ) )         * cos( radians( longitude ) - radians(lng) )         + sin ( radians(lat) )         * sin( radians( latitude ) )       )     ), 0) AS distance     from user_position     where lng between lng1 and lng2     and lat between lat1 and lat2     having distance &lt; dist     ORDER BY distance     LIMIT 0 , 20;END$$DELIMITER ;</code></pre><p>运行存储过程, 取出该经纬度下附近 5km 的用户和距离(m):</p><pre class="language-none"><code class="language-none">mysql &gt; call geo_dist(116.4174800000000, 40.0030330000000, 5000);+---------+----------+| user_id | distance |+---------+----------+|   10000 |        0 ||   10001 |     1707 ||   10002 |     3414 |+---------+----------+3 rows in set (0.00 sec)Query OK, 0 rows affected (0.01 sec)</code></pre><p>10001 用户和指定的经纬度距离为1707米, 我们在 redis 3.2 版本中进行简单测试, 可以看到结果都很相近:</p><pre class="language-none"><code class="language-none">127.0.0.1:6380&gt; geoadd tttt 116.417480 40.003033 t1(integer) 0127.0.0.1:6380&gt; geoadd tttt 116.437481 40.004034 t2(integer) 0127.0.0.1:6380&gt; GEODIST tttt t1 t2&quot;1707.5093&quot;</code></pre><h1 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h1><p>创建位置索引</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://arstercz.com/%E4%BD%BF%E7%94%A8-mysql-%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/">使用 MySQL 实现搜索附近的人</a></p><p><a href="https://zhuanlan.zhihu.com/p/35940647">GeoHash算法学习讲解、解析及原理分析</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mongodb </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot-mongodb使用</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a>基本注解</h1><ol><li><code>@id</code></li><li><code>@Document</code></li><li><code>@DBRef</code></li><li><code>$Indexed</code></li><li><code>@CompoundIndex</code></li><li><code>@GenSpatialIndexed</code></li><li><code>@Transient</code></li><li><code>@PersistenceConstructor</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cordova打包vue</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://segmentfault.com/a/1190000013159076">https://segmentfault.com/a/1190000013159076</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle表管理</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><pre class="language-none"><code class="language-none">## 字符型char 定长，后面空格补全varchar2() 变长clob 字符型大对象## 数字类型numbernumber(5，2) 标识5位有效数，2位小数-999.99-999.99number(5) 5位整数## 日期类型datetimestramp## 图片blob 二进制4g,为了安全可以放入数据库</code></pre><h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><pre class="language-none"><code class="language-none">create table table_name()drop table table_name;rename table_name to other_table_name;alter table table_name add ...;alter table table_name modify ...;alter table table_name drop column ...;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle基本管理</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">## 创建用户</span><span class="token keyword">create</span> <span class="token keyword">user</span> test identified <span class="token keyword">by</span> test<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment">## 删除用户</span><span class="token keyword">delete</span> test <span class="token punctuation">(</span><span class="token keyword">cascade</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">## 修改用户</span><span class="token keyword">alter</span> <span class="token keyword">user</span> test identified <span class="token keyword">by</span> wumu<span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">user</span> test expire<span class="token punctuation">;</span><span class="token comment">## 用户口令</span><span class="token comment">## 密码输错三次就密码锁定2天</span><span class="token keyword">create</span> profile lock_account <span class="token keyword">limit</span> failed_login_attempts <span class="token number">3</span> password_lock_time <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">user</span> tea profile lock_account<span class="token punctuation">;</span><span class="token comment">## 解锁</span><span class="token keyword">alter</span> <span class="token keyword">user</span> tea account <span class="token keyword">unlock</span><span class="token punctuation">;</span><span class="token comment">## 每10天需要修改密码，宽限期为两天</span><span class="token keyword">create</span> profile myprofile <span class="token keyword">limit</span> password_life_time <span class="token number">10</span> password_grace_time <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">user</span> tea profile myprofile<span class="token punctuation">;</span><span class="token comment">## 口令10天后可以重用</span><span class="token keyword">create</span> profile password_history <span class="token keyword">limit</span> password_lift_time <span class="token number">10</span> password_grace_time <span class="token number">2</span> password_reuse_time <span class="token number">10</span><span class="token comment">## 撤销profile</span><span class="token keyword">drop</span> profile my_profile <span class="token keyword">CASCADE</span>；</code></pre><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><pre class="language-none"><code class="language-none">## 授权grant system_privilege|all privileges to &#123;user identified by password |role|&#125;[with admin option]grant object_privileage | Allon schema.objectto user | role[with admin option][with the grant any object]grant select on test to wumu with grant option;grant connect tp wumu with admin option;## create session 用于登录## dba 管路员## resource 可以建表## desc table_name## 撤销权限## 如果授权者的权限被撤回，那么它的被授予者也会失去相关的权限invoke system_privilege from user|roleinvoke object_privilege|All on scheme.object from user|role [cascade contraints]## 查询权限## 系统权限放在DBA_SYS_PRIVS## 对象权限放在数据字典DBA_TAB_PRIVS</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue插件开发</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><p>插件的功能包括全局方法和属性、指令、mixin、实例方法。插件都有一个<code>install</code>方法，第一个参数是<code>Vue</code>，第二个参数是<code>options</code>。</p><pre class="language-js" data-language="js"><code class="language-js">MyPlugin<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Vue<span class="token punctuation">.</span><span class="token function-variable function">myGlobalMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1. 添加全局方法或属性，如: vue-custom-element</span>    <span class="token comment">// 逻辑...</span>  <span class="token punctuation">&#125;</span>  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch</span>    <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 3. 通过全局 mixin方法添加一些组件选项，如: vuex</span>      <span class="token comment">// 逻辑...</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现</span>    <span class="token comment">// 逻辑...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="vue-toast"><a href="#vue-toast" class="headerlink" title="vue-toast"></a><code>vue-toast</code></h1>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSqlParser教程</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//获取所有使用过的表</span><span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token class-name">CCJSqlParserUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM MY_TABLE1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Select</span> selectStatement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Select</span><span class="token punctuation">)</span> statement<span class="token punctuation">;</span>        <span class="token class-name">TablesNamesFinder</span> tablesNamesFinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TablesNamesFinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tableList <span class="token operator">=</span> tablesNamesFinder<span class="token punctuation">.</span><span class="token function">getTableList</span><span class="token punctuation">(</span>selectStatement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="应用别名"><a href="#应用别名" class="headerlink" title="应用别名"></a>应用别名</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// SELECT a AS A1, b AS A2, c AS A3 FROM test</span><span class="token class-name">Select</span> select <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Select</span><span class="token punctuation">)</span> <span class="token class-name">CCJSqlParserUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"select a,b,c from test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">AddAliasesVisitor</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddAliasesVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        select<span class="token punctuation">.</span><span class="token function">getSelectBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="添加一列或者表达式"><a href="#添加一列或者表达式" class="headerlink" title="添加一列或者表达式"></a>添加一列或者表达式</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// SELECT a, b FROM mytable</span><span class="token class-name">Select</span> select <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Select</span><span class="token punctuation">)</span> <span class="token class-name">CCJSqlParserUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"select a from mytable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SelectUtils</span><span class="token punctuation">.</span><span class="token function">addExpression</span><span class="token punctuation">(</span>select<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="添加where语句"><a href="#添加where语句" class="headerlink" title="添加where语句"></a>添加where语句</h2><h3 id="新建where"><a href="#新建where" class="headerlink" title="新建where"></a>新建where</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Select</span> select <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Select</span><span class="token punctuation">)</span> <span class="token class-name">CCJSqlParserUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"select name from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PlainSelect</span> plainSelect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PlainSelect</span><span class="token punctuation">)</span> select<span class="token punctuation">.</span><span class="token function">getSelectBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>plainSelect<span class="token punctuation">.</span><span class="token function">getWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">EqualsTo</span> equalsTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EqualsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            equalsTo<span class="token punctuation">.</span><span class="token function">setLeftExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            equalsTo<span class="token punctuation">.</span><span class="token function">setRightExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongValue</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            plainSelect<span class="token punctuation">.</span><span class="token function">setWhere</span><span class="token punctuation">(</span>equalsTo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre><h3 id="添加where"><a href="#添加where" class="headerlink" title="添加where"></a>添加where</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Select</span> select <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Select</span><span class="token punctuation">)</span> <span class="token class-name">CCJSqlParserUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"select name from user where id = 1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PlainSelect</span> plainSelect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PlainSelect</span><span class="token punctuation">)</span> select<span class="token punctuation">.</span><span class="token function">getSelectBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 原where表达式</span>    <span class="token class-name">Expression</span> where <span class="token operator">=</span> plainSelect<span class="token punctuation">.</span><span class="token function">getWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 新增的查询条件表达式</span>    <span class="token class-name">EqualsTo</span> equalsTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EqualsTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    equalsTo<span class="token punctuation">.</span><span class="token function">setLeftExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    equalsTo<span class="token punctuation">.</span><span class="token function">setRightExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringValue</span><span class="token punctuation">(</span><span class="token string">"'张三'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 用and链接条件</span>    <span class="token class-name">AndExpression</span> and <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AndExpression</span><span class="token punctuation">(</span>where<span class="token punctuation">,</span> equalsTo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置新的where条件</span>    plainSelect<span class="token punctuation">.</span><span class="token function">setWhere</span><span class="token punctuation">(</span>and<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="添加null"><a href="#添加null" class="headerlink" title="添加null"></a>添加null</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Select</span> select <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Select</span><span class="token punctuation">)</span> <span class="token class-name">CCJSqlParserUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"select name from user where id = 1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">PlainSelect</span> plainSelect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PlainSelect</span><span class="token punctuation">)</span> select<span class="token punctuation">.</span><span class="token function">getSelectBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 原where表达式</span>   <span class="token class-name">Expression</span> where <span class="token operator">=</span> plainSelect<span class="token punctuation">.</span><span class="token function">getWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 新增的null判断条件</span>   <span class="token class-name">IsNullExpression</span> isNullExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IsNullExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   isNullExpression<span class="token punctuation">.</span><span class="token function">setLeftExpression</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   isNullExpression<span class="token punctuation">.</span><span class="token function">setNot</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 用and链接条件</span>   <span class="token class-name">AndExpression</span> and <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AndExpression</span><span class="token punctuation">(</span>where<span class="token punctuation">,</span> isNullExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置新的where条件</span>   plainSelect<span class="token punctuation">.</span><span class="token function">setWhere</span><span class="token punctuation">(</span>and<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h1><h2 id="扩展插入"><a href="#扩展插入" class="headerlink" title="扩展插入"></a>扩展插入</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// INSERT INTO mytable (col1) VALUES (1)</span><span class="token comment">// INSERT INTO mytable (col1, col2) VALUES (1, 5)</span><span class="token comment">// INSERT INTO mytable (col1, col2, col3) VALUES (1, 5, 10)</span><span class="token class-name">Insert</span> insert <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Insert</span><span class="token punctuation">)</span> <span class="token class-name">CCJSqlParserUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"insert into mytable (col1) values (1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>insert<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        insert<span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">"col2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        insert<span class="token punctuation">.</span><span class="token function">getItemsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ItemsListVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">SubSelect</span> subSelect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Not supported yet."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ExpressionList</span> expressionList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                expressionList<span class="token punctuation">.</span><span class="token function">getExpressions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongValue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">MultiExpressionList</span> multiExprList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Not supported yet."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>insert<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        insert<span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">"col3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ExpressionList</span><span class="token punctuation">)</span> insert<span class="token punctuation">.</span><span class="token function">getItemsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpressions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongValue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="建立select"><a href="#建立select" class="headerlink" title="建立select"></a>建立select</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Select</span> select <span class="token operator">=</span> <span class="token class-name">SelectUtils</span><span class="token punctuation">.</span><span class="token function">buildSelectFromTable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token string">"mytable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Select</span> select <span class="token operator">=</span> <span class="token class-name">SelectUtils</span><span class="token punctuation">.</span><span class="token function">buildSelectFromTableAndExpressions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token string">"mytable"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Select</span> select <span class="token operator">=</span> <span class="token class-name">SelectUtils</span><span class="token punctuation">.</span><span class="token function">buildSelectFromTableAndExpressions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token string">"mytable"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"a+b"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="代替字符串的值"><a href="#代替字符串的值" class="headerlink" title="代替字符串的值"></a>代替字符串的值</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span><span class="token string">"SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN ('11111111111111', '22222222222222');"</span><span class="token punctuation">;</span><span class="token class-name">Select</span> select <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Select</span><span class="token punctuation">)</span> <span class="token class-name">CCJSqlParserUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Start of value modification</span><span class="token class-name">StringBuilder</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ExpressionDeParser</span> expressionDeParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpressionDeParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">StringValue</span> stringValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"XXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">SelectDeParser</span> deparser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectDeParser</span><span class="token punctuation">(</span>expressionDeParser<span class="token punctuation">,</span>buffer <span class="token punctuation">)</span><span class="token punctuation">;</span>expressionDeParser<span class="token punctuation">.</span><span class="token function">setSelectVisitor</span><span class="token punctuation">(</span>deparser<span class="token punctuation">)</span><span class="token punctuation">;</span>expressionDeParser<span class="token punctuation">.</span><span class="token function">setBuffer</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>select<span class="token punctuation">.</span><span class="token function">getSelectBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>deparser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//End of value modification</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Result is: SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN (XXXX, XXXX)</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>jsqlparser<span class="token punctuation">.</span></span><span class="token class-name">JSQLParserException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>jsqlparser<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">LongValue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>jsqlparser<span class="token punctuation">.</span>expression<span class="token punctuation">.</span></span><span class="token class-name">StringValue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>jsqlparser<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">CCJSqlParserUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>jsqlparser<span class="token punctuation">.</span>statement<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>jsqlparser<span class="token punctuation">.</span>util<span class="token punctuation">.</span>deparser<span class="token punctuation">.</span></span><span class="token class-name">ExpressionDeParser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>jsqlparser<span class="token punctuation">.</span>util<span class="token punctuation">.</span>deparser<span class="token punctuation">.</span></span><span class="token class-name">SelectDeParser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>jsqlparser<span class="token punctuation">.</span>util<span class="token punctuation">.</span>deparser<span class="token punctuation">.</span></span><span class="token class-name">StatementDeParser</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplaceColumnValues</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReplaceColumnAndLongValues</span> <span class="token keyword">extends</span> <span class="token class-name">ExpressionDeParser</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">StringValue</span> stringValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">LongValue</span> longValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">cleanStatement</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JSQLParserException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExpressionDeParser</span> expr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplaceColumnAndLongValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SelectDeParser</span> selectDeparser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectDeParser</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        expr<span class="token punctuation">.</span><span class="token function">setSelectVisitor</span><span class="token punctuation">(</span>selectDeparser<span class="token punctuation">)</span><span class="token punctuation">;</span>        expr<span class="token punctuation">.</span><span class="token function">setBuffer</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StatementDeParser</span> stmtDeparser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatementDeParser</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> selectDeparser<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token class-name">CCJSqlParserUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        stmt<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>stmtDeparser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stmtDeparser<span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JSQLParserException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cleanStatement</span><span class="token punctuation">(</span><span class="token string">"SELECT 'abc', 5 FROM mytable WHERE col='test'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cleanStatement</span><span class="token punctuation">(</span><span class="token string">"UPDATE table1 A SET A.columna = 'XXX' WHERE A.cod_table = 'YYY'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cleanStatement</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO example (num, name, address, tel) VALUES (1, 'name', 'test ', '1234-1234')"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cleanStatement</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM table1 where col=5 and col2=4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*SELECT ?, ? FROM mytable WHERE col = ?UPDATE table1 A SET A.columna = ? WHERE A.cod_table = ?INSERT INTO example (num, name, address, tel) VALUES (?, ?, ?, ?)DELETE FROM table1 WHERE col = ? AND col2 = ?*/</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://github.com/JSQLParser/JSqlParser/wiki">https://github.com/JSQLParser/JSqlParser/wiki</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react入门教程</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="webpack4初始化"><a href="#webpack4初始化" class="headerlink" title="webpack4初始化"></a>webpack4初始化</h1><pre class="language-none"><code class="language-none">cnpm i -D webpackcnpm i -D webpack-cli  &#x2F;&#x2F;相关的命令</code></pre><h1 id="相应包的安装"><a href="#相应包的安装" class="headerlink" title="相应包的安装"></a>相应包的安装</h1><ol><li>react 专门用于创建组件和虚拟DOM，同事组件的生命周期在这个包中。</li><li>react-dom 专门进行dom操作的，最主要的应用场景，就是ReactDom.render()</li></ol><h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><ol><li>babel-node 一个命令行工具</li><li>babel-register 可以实现动态转换</li><li>babel-core 核心包</li><li>babel-preset-env 一个套餐</li></ol><h1 id="jsx使用"><a href="#jsx使用" class="headerlink" title="jsx使用"></a>jsx使用</h1><h2 id="安装babel插件"><a href="#安装babel插件" class="headerlink" title="安装babel插件"></a>安装babel插件</h2><pre class="language-none"><code class="language-none">cnpm i babel-core babel-loader babel-plugin-transform-runtime -Dcnpm i babel-preset-env babel-preset-stage-0 -Dcnpm i babel-preset-react -D</code></pre><h2 id="添加-babelrc配置文件"><a href="#添加-babelrc配置文件" class="headerlink" title="添加.babelrc配置文件"></a>添加.babelrc配置文件</h2><pre class="language-none"><code class="language-none">&#123;    &quot;presets&quot;:[&quot;env&quot;,&quot;stage-0&quot;,&quot;react&quot;],    &quot;plugins&quot;:[&quot;transform-runtime&quot;]&#125;</code></pre><p>##添加babel-loader配置项</p><pre class="language-none"><code class="language-none">module：&#123;    rules:[        &#123;test:&#x2F;\.js|jsx&#x2F;,use:&#39;babel-loader&#39;,exclude:&#x2F;node_modules&#x2F;&#125;    ]&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置web服务器"><a href="#配置web服务器" class="headerlink" title="配置web服务器"></a>配置web服务器</h2><pre class="language-none"><code class="language-none">server &#123;    listen      80;    server_name api.lufficc.com  *.lufficc.com;    location &#x2F;images&#x2F; &#123;        root &#x2F;data;    &#125;    location &#x2F; &#123;        proxy_pass https:&#x2F;&#x2F;lufficc.com;    &#125;&#125;</code></pre><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><pre class="language-none"><code class="language-none">server&#123;      listen 80;      server_name search.lufficc.com;      location &#x2F; &#123;              proxy_pass https:&#x2F;&#x2F;www.baidu.com;      &#125;&#125;</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://lufficc.com/blog/configure-nginx-as-a-web-server">https://lufficc.com/blog/configure-nginx-as-a-web-server</a></p><p><a href="https://blog.csdn.net/hj7jay/article/details/53905943">https://blog.csdn.net/hj7jay/article/details/53905943</a> <a href="http://www.nginx.cn/76.html">http://www.nginx.cn/76.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7修改网卡</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="修改mac"><a href="#修改mac" class="headerlink" title="修改mac"></a>修改mac</h1><p>使用virtualbox导入一个虚拟机时mac地址是一样的，此时需要修改。 修改mac地址直接在virtualBox的<code>setting&gt;network</code>配置中进行修改。</p><h1 id="修改网卡名称"><a href="#修改网卡名称" class="headerlink" title="修改网卡名称"></a>修改网卡名称</h1><h2 id="修改网卡的配置文件"><a href="#修改网卡的配置文件" class="headerlink" title="修改网卡的配置文件"></a>修改网卡的配置文件</h2><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eno16777736 &#x2F;&#x2F;修改NAME，DEVICE 成希望的（不要加ifcfg）mv ifcfg-eno16777736 ifcfg-eth0 &#x2F;&#x2F;修改配置文件的名字</code></pre><h2 id="禁用可预测命名规则"><a href="#禁用可预测命名规则" class="headerlink" title="禁用可预测命名规则"></a>禁用可预测命名规则</h2><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;default&#x2F;grub</code></pre><p>添加内核参数： net.ifnames=0 biosdevname=0</p><pre class="language-none"><code class="language-none">[root@ansheng network-scripts]# vi &#x2F;etc&#x2F;default&#x2F;grubGRUB_TIMEOUT&#x3D;5GRUB_DISTRIBUTOR&#x3D;&quot;$(sed &#39;s, release .*$,,g&#39; &#x2F;etc&#x2F;system-release)&quot;GRUB_DEFAULT&#x3D;savedGRUB_DISABLE_SUBMENU&#x3D;trueGRUB_TERMINAL_OUTPUT&#x3D;&quot;console&quot;GRUB_CMDLINE_LINUX&#x3D;&quot;rd.lvm.lv&#x3D;centos&#x2F;root rd.lvm.lv&#x3D;centos&#x2F;swap rhgb quiet net.ifnames&#x3D;0 biosdevname&#x3D;0&quot;GRUB_DISABLE_RECOVERY&#x3D;&quot;true&quot;</code></pre><h2 id="用-grub2-mkconfig-命令重新生成GRUB配置并更新内核"><a href="#用-grub2-mkconfig-命令重新生成GRUB配置并更新内核" class="headerlink" title="用 grub2-mkconfig 命令重新生成GRUB配置并更新内核"></a>用 grub2-mkconfig 命令重新生成GRUB配置并更新内核</h2><pre class="language-none"><code class="language-none">[root@ansheng network-scripts]# grub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfgGenerating grub configuration file ...Found linux image: &#x2F;boot&#x2F;vmlinuz-3.10.0-327.el7.x86_64Found initrd image: &#x2F;boot&#x2F;initramfs-3.10.0-327.el7.x86_64.imgFound linux image: &#x2F;boot&#x2F;vmlinuz-0-rescue-4dd6b54f74c94bff9e92c61d669fc195Found initrd image: &#x2F;boot&#x2F;initramfs-0-rescue-4dd6b54f74c94bff9e92c61d669fc195.imgdone</code></pre><p>重启系统</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvc-server安装</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="centos-安装-vnc-server"><a href="#centos-安装-vnc-server" class="headerlink" title="centos 安装 vnc server"></a>centos 安装 vnc server</h2><p>VNC需要系统安装的有桌面，如果是生产环境服务器，安装时使用的最小化安装，那么进行下面操作按章GNOME 桌面。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出的组列表里有GNOME Desktop。</span>yum grouplist  <span class="token comment">#安装之</span>yum groupinstall -y <span class="token string">"GNOME Desktop"</span> <span class="token comment"># 安装完成后，修改默认启动方式为图形化界面</span>systemctl set-default graphical.target  //设置成图形模式 <span class="token comment"># 如果要换回来 </span>systemctl set-default multi-user.target  //设置成命令模式 <span class="token comment">#然后重启系统即可</span></code></pre><p>第一步：安装VNC服务软件，使用root用户执行以下命令（以下操作没有特别说明均在root用户）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> tigervnc-server -y</code></pre><p><img src="https://img-blog.csdnimg.cn/2019011120374466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>安装后可以使用如下命令来验证是否安装成功：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> tigervnc-server</code></pre><p><img src="https://img-blog.csdnimg.cn/20190111204109802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>第二步：复制vnc的启动操作脚本, vncserver@:1.service中的：1表示”桌面号”，启动的端口号就是5900+桌面号，即是5901，如果再有一个就是2啦，端口号加1就是5902，以此类推：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</code></pre><p>第三步：编辑 /etc/systemd/system/vncserver@:1.service</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/systemd/system/vncserver@<span class="token punctuation">\</span>:1.service</code></pre><p><img src="https://img-blog.csdnimg.cn/20190111205105834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img">vnc配置文件修改前</p><p>找到其中的<USER> ，修改成自己的用户名，如果是root用户登录桌面就使用root用户，如果使用普通用户登录桌面使用普通用户，这里笔者使用用户名：cy</p><p><img src="https://img-blog.csdnimg.cn/20190111205309803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img">vnc配置文件修改后</p><p>修改完毕后保存退出vim。</p><p>第四步：设置vnc密码，执行su cy，切换到刚配置文件设置的cy用户，执行（这一步是在cy用户下操作），输入两次密码，输入完成后会提示是否设置view-only password（<em>“View-only</em> <em>password”密码，</em>只允许查看,无控制权限。）这个可设可不设：</p><pre class="language-bash" data-language="bash"><code class="language-bash">vncpasswd</code></pre><p><img src="https://img-blog.csdnimg.cn/20190111205934208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>第五步：启动服务：</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start vncserver@<span class="token punctuation">\</span>:1.service</code></pre><p>第一次输入启动服务命令可能会要求输入（从新加载配置文件，新增和配置文件发生变化时都需要执行 daemon-reload 子命令）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload</code></pre><p>执行完毕之后在执行启动命令就可以了：</p><p><img src="https://img-blog.csdnimg.cn/20190111205848408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>可以加入开机启动，下次开机就会自动启动啦：</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> vncserver@<span class="token punctuation">\</span>:1.service</code></pre><p>第六步：查看端口是否监听：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -lnpt<span class="token operator">|</span><span class="token function">grep</span> Xvnc</code></pre><p><img src="https://img-blog.csdnimg.cn/20190111211103409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img">这里我们可以看到5901端口已经被监听</p><p>第七步：开放防火墙的5901端口：</p><pre class="language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">5901</span>/tcp --permanent</code></pre><p>如果防火墙没有启动需要先启动防火墙。</p><p><img src="https://img-blog.csdnimg.cn/2019011121160287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>当然也可以狠一点，直接停止防火墙：</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.service</code></pre><p><img src="https://img-blog.csdnimg.cn/20190111211803178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>停止之后该需要禁止开机启动：</p><pre class="language-none"><code class="language-none">systemctl disable firewalld.service</code></pre><p>第八步：关闭SELinux，编辑/etc/selinux/config 文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/selinux/config</code></pre><p><img src="https://img-blog.csdnimg.cn/20190111212208680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>将selinux设置为disabled</p><p><img src="https://img-blog.csdnimg.cn/2019011121253381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>到这里vnc服务已经安装完毕，下面就可使用vnc客户端来连接。</p><p>第九步：在vnc客户端（vnc viewer）输入服务器IP:桌面号（如192.168.31.100:1），输入后回车：</p><p><img src="https://img-blog.csdnimg.cn/20190111213220647.png" alt="img"></p><p>第十步：输入IP后会弹出确认，点击contiue即可：</p><p><img src="https://img-blog.csdnimg.cn/20190111213443826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>第十一步：输入vnc密码：</p><p><img src="https://img-blog.csdnimg.cn/20190111213532135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>第十二步：登录成功，输入远程机器密码（登录成功后需要输入远程机器的用户的密码，如果没有密码就可以直接进入系统）：</p><p><img src="https://img-blog.csdnimg.cn/20190111214637416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>第十三步：成功进入远程桌面：</p><p><img src="https://img-blog.csdnimg.cn/20190111214719914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70" alt="img"></p><p>至此整个CentOS7.x 的VNC服务安装完毕^_^。</p><p>小贴士：vnc服务只能在局域网使用，如果在外网，则需要有公网IP地址，VNC不仅具备内网穿透功能。</p><h2 id="ubuntu-安装-vnc-viewer"><a href="#ubuntu-安装-vnc-viewer" class="headerlink" title="ubuntu 安装 vnc viewer"></a>ubuntu 安装 vnc viewer</h2><p>vnc view的网站<code>https://www.realvnc.com/en/connect/download/viewer/</code></p><pre class="language-none"><code class="language-none">sudo dpkg -i VNC-Viewer-6.17.1113-Linux-x64.deb</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://my.oschina.net/huhaoren/blog/497394">https://my.oschina.net/huhaoren/blog/497394</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox磁盘扩容</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="扩展磁盘文件"><a href="#扩展磁盘文件" class="headerlink" title="扩展磁盘文件"></a>扩展磁盘文件</h2><h3 id="VDI"><a href="#VDI" class="headerlink" title="VDI"></a>VDI</h3><pre class="language-none"><code class="language-none">VBoxManage modifyhd centos.vdi --resize 16000  # 单位M</code></pre><h3 id="VMDK"><a href="#VMDK" class="headerlink" title="VMDK"></a>VMDK</h3><pre class="language-none"><code class="language-none">VBoxManage clonehd &quot;centos.vmdk&quot; &quot;centos.vdi&quot; --format vdi     # vmdk是转换前的文件，vdi是转换之后的文件VBoxManage modifyhd &quot;centos.vdi&quot; --resize 16000                # 这里的单位是MVBoxManage clonehd &quot;centos.vdi&quot; &quot;resized.vmdk&quot; --format vmdk   #可以再转回来</code></pre><h2 id="使用克隆"><a href="#使用克隆" class="headerlink" title="使用克隆"></a>使用克隆</h2><p>本人在使用的时候，前面两种方式不能实现，采用第三种方式</p><pre class="language-none"><code class="language-none">VBoxManage createhd -filename centos7-main-64g -size 65536 -format VDI -variant Standard  # 创建一个新的磁盘，磁盘大小为想要的大小VBoxManage clonemedium ..&#x2F;centos7-main\ Clone&#x2F;centos7-main\ Clone.vdi centos7-main-64g.vdi --existing  # 将原有的磁盘复制到新磁盘上</code></pre><h2 id="磁盘扩容"><a href="#磁盘扩容" class="headerlink" title="磁盘扩容"></a>磁盘扩容</h2><p>这里可以使用gparted进行磁盘的扩容</p><ol><li>下载gparted-live镜像</li><li>设置iso镜像开机启动</li><li>进行分区的修改</li></ol><h2 id="LVM扩容"><a href="#LVM扩容" class="headerlink" title="LVM扩容"></a>LVM扩容</h2><p>如果你没有使用逻辑卷就可以跳过这节。如果使用逻辑卷也可以通过添加新磁盘的形式对文件系统进行扩容，这种方式更加简单方便。</p><h3 id="创建PE、VG"><a href="#创建PE、VG" class="headerlink" title="创建PE、VG"></a>创建PE、VG</h3><h3 id="扩展LV"><a href="#扩展LV" class="headerlink" title="扩展LV"></a>扩展LV</h3><pre class="language-none"><code class="language-none">sudo vgextend VolGroup &#x2F;dev&#x2F;sda4       # 通过新卷的方式扩展到卷组lvresize -l +122 &#x2F;dev&#x2F;centos&#x2F;root      # 直接扩容</code></pre><h3 id="刷新逻辑分区容量"><a href="#刷新逻辑分区容量" class="headerlink" title="刷新逻辑分区容量"></a>刷新逻辑分区容量</h3><pre class="language-none"><code class="language-none">xfs_growfs &#x2F;devices&#x2F;centos&#x2F;root    # resize2fs是不能成功的</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lorawan协议（中文版）</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>网关和服务器之间的协议是有目的的非常基本的，仅用于演示目的，或用于私有和可靠的网络。</p><p>这里没有网关或服务器的认证，并且确认仅用于网络质量评估，而不是 纠正UDP数据报丢失（无重试）。</p><h1 id="系统原理和相关定义"><a href="#系统原理和相关定义" class="headerlink" title="系统原理和相关定义"></a>系统原理和相关定义</h1><pre class="language-none"><code class="language-none"> ((( Y )))     |     |+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+| +--+-----------+     +------+ |       xx x  x     xxx        |        || |              |     |      | |      xx  Internet  xx        |        || | Concentrator |&lt;---&gt;| Host |&lt;-------xx     or    xx--------&gt;|        || |              | SPI |      | |      xx  Intranet  xx        | Server || +--------------+     +------+ |       xxxx   x   xxxx        |        ||    ^                     ^    |           xxxxxxxx           |        ||    | PPS +-------+ NMEA  |    |                              |        ||    +-----|  GPS  |-------+    |                              +--------+|          | (opt) |            ||          +-------+            ||                               ||             Gateway           |+- - - - - - - - - - - - - - - -+</code></pre><ul><li><strong>网关</strong>：无线电RX / TX板，基于Semtech多通道调制解调器（SX130x），收发器（SX135x）和/或低功耗独立调制解调器（SX127x）。</li><li><strong>主机</strong>：运行包转发器的嵌入式计算机。通过SPI链路驱动集中器。 GPS：具有“每秒1脉冲”的GNSS（GPS，伽利略，GLONASS等）接收器 输出和到主机的串行链接，以发送包含时间和地理坐标数据的NMEA帧。可选的。</li><li><strong>网关</strong>：由至少一个无线电集中器，主机，一些组成的设备网络连接到互联网或专用网络（以太网，3G，Wifi，微波链路），以及可选的GPS接收器进行同步。</li><li><strong>服务器</strong>：一种抽象计算机，它将处理由网关接收和转发的RF数据包，并发出RF数据包以响应网关必须发出的数据包。</li></ul><p>假设网关可以在NAT后面或防火墙停止任何传入连接。 假设服务器具有静态IP地址（或通过DNS服务可解决的地址），并且能够接收特定端口上的传入连接。</p><h1 id="上行协议"><a href="#上行协议" class="headerlink" title="上行协议"></a>上行协议</h1><p>3.1 时序图</p><pre class="language-none"><code class="language-none">+---------+                                                    +---------+| Gateway |                                                    | Server  |+---------+                                                    +---------+     | -----------------------------------\                         |     |-| When 1-N RF packets are received |                         |     | ------------------------------------                         |     |                                                              |     | PUSH_DATA (token X, GW MAC, JSON payload)                    |     |-------------------------------------------------------------&gt;|     |                                                              |     |                                           PUSH_ACK (token X) |     |&lt;-------------------------------------------------------------|     |                              ------------------------------\ |     |                              | process packets *after* ack |-|     |                              ------------------------------- |     |                                                              |</code></pre><h2 id="PUSH-DATA-包"><a href="#PUSH-DATA-包" class="headerlink" title="PUSH_DATA 包"></a><code>PUSH_DATA</code> 包</h2><p>网关使用该数据包类型主要是将所接收的RF分组和相关联的元数据转发到服务器。</p><table><thead><tr><th>字节</th><th>功能</th></tr></thead><tbody><tr><td>0</td><td>协议版本2</td></tr><tr><td>1-2</td><td>随机凭证</td></tr><tr><td>3</td><td>PUSH_DATA标识<code>0x00</code></td></tr><tr><td>4-11</td><td>网关唯一标识（MAC地址）</td></tr><tr><td>12-结束</td><td><code>JSON</code>对象，看第4章</td></tr></tbody></table><h2 id="PUSH-ACK包"><a href="#PUSH-ACK包" class="headerlink" title="PUSH_ACK包"></a><code>PUSH_ACK</code>包</h2><p>服务器使用该数据包类型立即确认收到的所有PUSH_DATA数据包。</p><table><thead><tr><th>字节</th><th>功能</th></tr></thead><tbody><tr><td>0</td><td>协议版本2</td></tr><tr><td>1-2</td><td>与<code>PUSH_DATA</code>包中相同的凭证，用于确认</td></tr><tr><td>3</td><td><code>PUSH_ACK</code>标识<code>0x01</code></td></tr></tbody></table><h1 id="上行JSON数据结构"><a href="#上行JSON数据结构" class="headerlink" title="上行JSON数据结构"></a>上行<code>JSON</code>数据结构</h1><p>根对象包含名为<code>&quot;rxpk&quot;</code>的数组：</p><pre class="language-none"><code class="language-none">&#123;&quot;rxpk&quot;:[ &#123;...&#125;, ...]&#125;</code></pre><p>该数组包含至少一个<code>JSON</code>对象，每个对象包含一个RF数据包以及包含以下字段的关联元数据：</p><table><thead><tr><th>名称</th><th>类别</th><th>功能</th></tr></thead><tbody><tr><td>time</td><td>string</td><td>UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format</td></tr><tr><td>tmst</td><td>number</td><td>Internal timestamp of “RX finished” event (32b unsigned)</td></tr><tr><td>freq</td><td>number</td><td>RX central frequency in MHz (unsigned float, Hz precision)</td></tr><tr><td>chan</td><td>number</td><td>Concentrator “IF” channel used for RX (unsigned integer)</td></tr><tr><td>rfch</td><td>number</td><td>Concentrator “RF chain” used for RX (unsigned integer)</td></tr><tr><td>stat</td><td>number</td><td>CRC status: 1 = OK, -1 = fail, 0 = no CRC</td></tr><tr><td>modu</td><td>string</td><td>Modulation identifier “LORA” or “FSK”</td></tr><tr><td>datr</td><td>string</td><td>LoRa datarate identifier (eg. SF12BW500)</td></tr><tr><td>datr</td><td>number</td><td>FSK datarate (unsigned, in bits per second)</td></tr><tr><td>codr</td><td>string</td><td>LoRa ECC coding rate identifier</td></tr><tr><td>rssi</td><td>number</td><td>RSSI in dBm (signed integer, 1 dB precision)</td></tr><tr><td>lsnr</td><td>number</td><td>Lora SNR ratio in dB (signed float, 0.1 dB precision)</td></tr><tr><td>size</td><td>number</td><td>RF packet payload size in bytes (unsigned integer)</td></tr><tr><td>data</td><td>string</td><td>Base64 encoded RF packet payload, padded</td></tr></tbody></table><p>示例（为了便于阅读而添加了空格，缩进和换行符）：</p><pre class="language-none"><code class="language-none">&#123;&quot;rxpk&quot;:[&#123;&quot;time&quot;:&quot;2013-03-31T16:21:17.528002Z&quot;,&quot;tmst&quot;:3512348611,&quot;chan&quot;:2,&quot;rfch&quot;:0,&quot;freq&quot;:866.349812,&quot;stat&quot;:1,&quot;modu&quot;:&quot;LORA&quot;,&quot;datr&quot;:&quot;SF7BW125&quot;,&quot;codr&quot;:&quot;4&#x2F;6&quot;,&quot;rssi&quot;:-35,&quot;lsnr&quot;:5.1,&quot;size&quot;:32,&quot;data&quot;:&quot;-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84&quot;&#125;,&#123;&quot;time&quot;:&quot;2013-03-31T16:21:17.530974Z&quot;,&quot;tmst&quot;:3512348514,&quot;chan&quot;:9,&quot;rfch&quot;:1,&quot;freq&quot;:869.1,&quot;stat&quot;:1,&quot;modu&quot;:&quot;FSK&quot;,&quot;datr&quot;:50000,&quot;rssi&quot;:-75,&quot;size&quot;:16,&quot;data&quot;:&quot;VEVTVF9QQUNLRVRfMTIzNA&#x3D;&#x3D;&quot;&#125;,&#123;&quot;time&quot;:&quot;2013-03-31T16:21:17.532038Z&quot;,&quot;tmst&quot;:3316387610,&quot;chan&quot;:0,&quot;rfch&quot;:0,&quot;freq&quot;:863.00981,&quot;stat&quot;:1,&quot;modu&quot;:&quot;LORA&quot;,&quot;datr&quot;:&quot;SF10BW125&quot;,&quot;codr&quot;:&quot;4&#x2F;7&quot;,&quot;rssi&quot;:-38,&quot;lsnr&quot;:5.5,&quot;size&quot;:32,&quot;data&quot;:&quot;ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass&quot;&#125;]&#125;</code></pre><p>根对象还可以包含名为<code>&quot;stat&quot;</code>的对象：</p><pre class="language-none"><code class="language-none">&#123;&quot;rxpk&quot;:[ &#123;...&#125;, ...],&quot;stat&quot;:&#123;...&#125;&#125;</code></pre><p>数据包可能不包含<code>&quot;rxpk&quot;</code>数组而是“stat”对象。</p><pre class="language-none"><code class="language-none">&#123;&quot;stat&quot;:&#123;...&#125;&#125;</code></pre><p>该对象包含网关的状态，包含以下字段：</p><table><thead><tr><th>名称</th><th>类型</th><th>功能</th></tr></thead><tbody><tr><td>time</td><td>string</td><td>UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format</td></tr><tr><td>lati</td><td>number</td><td>GPS latitude of the gateway in degree (float, N is +)</td></tr><tr><td>long</td><td>number</td><td>GPS latitude of the gateway in degree (float, E is +)</td></tr><tr><td>alti</td><td>number</td><td>GPS altitude of the gateway in meter RX (integer)</td></tr><tr><td>rxnb</td><td>number</td><td>Number of radio packets received (unsigned integer)</td></tr><tr><td>rxok</td><td>number</td><td>Number of radio packets received with a valid PHY CRC</td></tr><tr><td>rxfw</td><td>number</td><td>Number of radio packets forwarded (unsigned integer)</td></tr><tr><td>ackr</td><td>number</td><td>Percentage of upstream datagrams that were acknowledged</td></tr><tr><td>dwnb</td><td>number</td><td>Number of downlink datagrams received (unsigned integer)</td></tr><tr><td>txnb</td><td>number</td><td>Number of packets emitted (unsigned integer)</td></tr></tbody></table><p>示例（为了便于阅读而添加了空格，缩进和换行符）：</p><pre class="language-none"><code class="language-none">&#123;&quot;stat&quot;:&#123;&quot;time&quot;:&quot;2014-01-12 08:59:28 GMT&quot;,&quot;lati&quot;:46.24000,&quot;long&quot;:3.25230,&quot;alti&quot;:145,&quot;rxnb&quot;:2,&quot;rxok&quot;:2,&quot;rxfw&quot;:2,&quot;ackr&quot;:100.0,&quot;dwnb&quot;:2,&quot;txnb&quot;:2&#125;&#125;</code></pre><h1 id="下行协议"><a href="#下行协议" class="headerlink" title="下行协议"></a>下行协议</h1><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><pre class="language-none"><code class="language-none">+---------+                                                    +---------+| Gateway |                                                    | Server  |+---------+                                                    +---------+     | -----------------------------------\                         |     |-| Every N seconds (keepalive time) |                         |     | ------------------------------------                         |     |                                                              |     | PULL_DATA (token Y, MAC@)                                    |     |-------------------------------------------------------------&gt;|     |                                                              |     |                                           PULL_ACK (token Y) |     |&lt;-------------------------------------------------------------|     |                                                              |+---------+                                                    +---------+| Gateway |                                                    | Server  |+---------+                                                    +---------+     |      ------------------------------------------------------\ |     |      | Anytime after first PULL_DATA for each packet to TX |-|     |      ------------------------------------------------------- |     |                                                              |     |                            PULL_RESP (token Z, JSON payload) |     |&lt;-------------------------------------------------------------|     |                                                              |     | TX_ACK (token Z, JSON payload)                               |     |-------------------------------------------------------------&gt;|</code></pre><h2 id="PULL-DATA包"><a href="#PULL-DATA包" class="headerlink" title="PULL_DATA包"></a>PULL_DATA包</h2><p>网关使用该数据包类型来轮询来自服务器的数据。</p><p>此数据交换由网关初始化，因为如果网关位于NAT后面，服务器可能无法将数据包发送到网关。 当网关初始化交换机时，将打开通向服务器的网络路由，并允许数据包在两个方向上流动。 网关必须定期发送PULL_DATA数据包，以确保网络路由保持打开状态，以便服务器随时使用。</p><table><thead><tr><th>Bytes</th><th>Function</th></tr></thead><tbody><tr><td>0</td><td>protocol version = 2</td></tr><tr><td>1-2</td><td>random token</td></tr><tr><td>3</td><td>PULL_DATA identifier 0x02</td></tr><tr><td>4-11</td><td>Gateway unique identifier (MAC address)</td></tr></tbody></table><h3 id="PULL-ACK-包"><a href="#PULL-ACK-包" class="headerlink" title="PULL_ACK 包"></a><code>PULL_ACK</code> 包</h3><p>服务器使用该数据包类型来确认网络路由是否已打开，以及服务器是否可以随时发送PULL_RESP数据包。</p><table><thead><tr><th>Bytes</th><th>Function</th></tr></thead><tbody><tr><td>0</td><td>protocol version = 2</td></tr><tr><td>1-2</td><td>same token as the PULL_DATA packet to acknowledge</td></tr><tr><td>3</td><td><code>PULL_ACK</code> identifier <code>0x04</code></td></tr></tbody></table><h3 id="PULL-RESP-包"><a href="#PULL-RESP-包" class="headerlink" title="PULL_RESP 包"></a>PULL_RESP 包</h3><p>服务器使用该数据包类型来发送必须由网关发出的RF数据包和相关元数据。</p><table><thead><tr><th>Bytes</th><th>Function</th></tr></thead><tbody><tr><td>0</td><td>protocol version = 2</td></tr><tr><td>1-2</td><td>random token</td></tr><tr><td>3</td><td>PULL_RESP identifier 0x03</td></tr><tr><td>4-end</td><td>JSON object, starting with {, ending with }, see section 6</td></tr></tbody></table><h3 id="TX-ACK-包"><a href="#TX-ACK-包" class="headerlink" title="TX_ACK 包"></a>TX_ACK 包</h3><p>网关使用该分组类型向服务器发送反馈，以通知网关是否已接受或拒绝下行链路请求。 数据报可以选项包含一个JSON字符串，以提供有关acknoledge的更多详细信息。 如果没有JSON（空字符串），这意味着没有发生错误。</p><table><thead><tr><th>Bytes</th><th>Function</th></tr></thead><tbody><tr><td>0</td><td>protocol version = 2</td></tr><tr><td>1-2</td><td>same token as the PULL_RESP packet to acknowledge</td></tr><tr><td>3</td><td>TX_ACK identifier 0x05</td></tr><tr><td>4-11</td><td>Gateway unique identifier (MAC address)</td></tr><tr><td>12-end</td><td>[optional] JSON object, starting with {, ending with }, see section 6</td></tr></tbody></table><h2 id="下行JSON数据结构"><a href="#下行JSON数据结构" class="headerlink" title="下行JSON数据结构"></a>下行<code>JSON</code>数据结构</h2><hr><p>PULL_RESP数据包的根对象必须包含名为“txpk”的对象：</p><pre class="language-none"><code class="language-none">&#123;&quot;txpk&quot;: &#123;...&#125;&#125;</code></pre><p>该对象包含要发出的RF数据包以及与以下字段相关联的元数据：</p><table><thead><tr><th>Name</th><th>Type</th><th>Function</th></tr></thead><tbody><tr><td>imme</td><td>bool</td><td>Send packet immediately (will ignore tmst &amp; time)</td></tr><tr><td>tmst</td><td>number</td><td>Send packet on a certain timestamp value (will ignore time)</td></tr><tr><td>time</td><td>string</td><td>Send packet at a certain time (GPS synchronization required)</td></tr><tr><td>freq</td><td>number</td><td>TX central frequency in MHz (unsigned float, Hz precision)</td></tr><tr><td>rfch</td><td>number</td><td>Concentrator “RF chain” used for TX (unsigned integer)</td></tr><tr><td>powe</td><td>number</td><td>TX output power in dBm (unsigned integer, dBm precision)</td></tr><tr><td>modu</td><td>string</td><td>Modulation identifier “LORA” or “FSK”</td></tr><tr><td>datr</td><td>string</td><td>LoRa datarate identifier (eg. SF12BW500)</td></tr><tr><td>datr</td><td>number</td><td>FSK datarate (unsigned, in bits per second)</td></tr><tr><td>codr</td><td>string</td><td>LoRa ECC coding rate identifier</td></tr><tr><td>fdev</td><td>number</td><td>FSK frequency deviation (unsigned integer, in Hz)</td></tr><tr><td>ipol</td><td>bool</td><td>Lora modulation polarization inversion</td></tr><tr><td>prea</td><td>number</td><td>RF preamble size (unsigned integer)</td></tr><tr><td>size</td><td>number</td><td>RF packet payload size in bytes (unsigned integer)</td></tr><tr><td>data</td><td>string</td><td>Base64 encoded RF packet payload, padding optional</td></tr><tr><td>ncrc</td><td>bool</td><td>If true, disable the CRC of the physical layer (optional)</td></tr></tbody></table><p>大多数字段都是可选的。如果省略字段，将使用默认参数。 示例（为便于阅读而添加了空格，缩进和换行符）：</p><pre class="language-none"><code class="language-none">&#123;&quot;txpk&quot;:&#123;&quot;imme&quot;:true,&quot;freq&quot;:864.123456,&quot;rfch&quot;:0,&quot;powe&quot;:14,&quot;modu&quot;:&quot;LORA&quot;,&quot;datr&quot;:&quot;SF11BW125&quot;,&quot;codr&quot;:&quot;4&#x2F;6&quot;,&quot;ipol&quot;:false,&quot;size&quot;:32,&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;&#125;&#125;&#123;&quot;txpk&quot;:&#123;&quot;imme&quot;:true,&quot;freq&quot;:861.3,&quot;rfch&quot;:0,&quot;powe&quot;:12,&quot;modu&quot;:&quot;FSK&quot;,&quot;datr&quot;:50000,&quot;fdev&quot;:3000,&quot;size&quot;:32,&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;&#125;&#125;</code></pre><p>TX_ACK数据包的根对象必须包含名为“txpk_ack”的对象：</p><pre class="language-none"><code class="language-none">&#123;&quot;txpk_ack&quot;: &#123;...&#125;&#125;</code></pre><p>该对象包含有关相关PULL_RESP数据包的状态信息。</p><table><thead><tr><th>Name</th><th>Type</th><th>Function</th></tr></thead><tbody><tr><td>error</td><td>string</td><td>Indication about success or type of failure that occured for downlink request.</td></tr></tbody></table><p>可能的错误有：</p><table><thead><tr><th>Value</th><th>Definition</th></tr></thead><tbody><tr><td>NONE</td><td>Packet has been programmed for downlink</td></tr><tr><td>TOO_LATE</td><td>Rejected because it was already too late to program this packet for downlink</td></tr><tr><td>TOO_EARLY</td><td>Rejected because downlink packet timestamp is too much in advance</td></tr><tr><td>COLLISION_PACKET</td><td>Rejected because there was already a packet programmed in requested timeframe</td></tr><tr><td>COLLISION_BEACON</td><td>Rejected because there was already a beacon planned in requested timeframe</td></tr><tr><td>TX_FREQ</td><td>Rejected because requested frequency is not supported by TX RF chain</td></tr><tr><td>TX_POWER</td><td>Rejected because requested power is not supported by gateway</td></tr><tr><td>GPS_UNLOCKED</td><td>Rejected because GPS is unlocked, so GPS timestamp cannot be used</td></tr></tbody></table><p>示例（为便于阅读而添加了空格，缩进和换行符）：</p><pre class="language-none"><code class="language-none">&#123;&quot;txpk_ack&quot;:&#123;&quot;error&quot;:&quot;COLLISION_PACKET&quot;&#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> lorawan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lorawan协议</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><hr><p>The protocol between the gateway and the server is purposefully very basic and for demonstration purpose only, or for use on private and reliable networks.</p><p>There is no authentication of the gateway or the server, and the acknowledges are only used for network quality assessment, not to correct UDP datagrams losses (no retries).</p><h2 id="System-schematic-and-definitions"><a href="#System-schematic-and-definitions" class="headerlink" title="System schematic and definitions"></a>System schematic and definitions</h2><hr><pre class="language-none"><code class="language-none"> ((( Y )))     |     |+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+| +--+-----------+     +------+ |       xx x  x     xxx        |        || |              |     |      | |      xx  Internet  xx        |        || | Concentrator |&lt;---&gt;| Host |&lt;-------xx     or    xx--------&gt;|        || |              | SPI |      | |      xx  Intranet  xx        | Server || +--------------+     +------+ |       xxxx   x   xxxx        |        ||    ^                     ^    |           xxxxxxxx           |        ||    | PPS +-------+ NMEA  |    |                              |        ||    +-----|  GPS  |-------+    |                              +--------+|          | (opt) |            ||          +-------+            ||                               ||             Gateway           |+- - - - - - - - - - - - - - - -+</code></pre><p><strong>Concentrator</strong>: radio RX/TX board, based on Semtech multichannel modems (SX130x), transceivers (SX135x) and/or low-power stand-alone modems (SX127x).</p><p><strong>Host</strong>: embedded computer on which the packet forwarder is run. Drives the concentrator through a SPI link.</p><p><strong>GPS</strong>: GNSS (GPS, Galileo, GLONASS, etc) receiver with a “1 Pulse Per Second” output and a serial link to the host to send NMEA frames containing time and geographical coordinates data. Optional.</p><p><strong>Gateway</strong>: a device composed of at least one radio concentrator, a host, some network connection to the internet or a private network (Ethernet, 3G, Wifi, microwave link), and optionally a GPS receiver for synchronization.</p><p><strong>Server</strong>: an abstract computer that will process the RF packets received and forwarded by the gateway, and issue RF packets in response that the gateway will have to emit.</p><p>It is assumed that the gateway can be behind a NAT or a firewall stopping any incoming connection. It is assumed that the server has an static IP address (or an address solvable through a DNS service) and is able to receive incoming connections on a specific port.</p><h2 id="Upstream-protocol"><a href="#Upstream-protocol" class="headerlink" title="Upstream protocol"></a>Upstream protocol</h2><hr><h3 id="Sequence-diagram"><a href="#Sequence-diagram" class="headerlink" title="Sequence diagram"></a>Sequence diagram</h3><pre class="language-none"><code class="language-none">+---------+                                                    +---------+| Gateway |                                                    | Server  |+---------+                                                    +---------+     | -----------------------------------\                         |     |-| When 1-N RF packets are received |                         |     | ------------------------------------                         |     |                                                              |     | PUSH_DATA (token X, GW MAC, JSON payload)                    |     |-------------------------------------------------------------&gt;|     |                                                              |     |                                           PUSH_ACK (token X) |     |&lt;-------------------------------------------------------------|     |                              ------------------------------\ |     |                              | process packets *after* ack |-|     |                              ------------------------------- |     |                                                              |</code></pre><h3 id="PUSH-DATA-packet"><a href="#PUSH-DATA-packet" class="headerlink" title="PUSH_DATA packet"></a>PUSH_DATA packet</h3><p>That packet type is used by the gateway mainly to forward the RF packets received, and associated metadata, to the server.</p><table><thead><tr><th>Bytes</th><th>Function</th></tr></thead><tbody><tr><td>0</td><td>protocol version = 2</td></tr><tr><td>1-2</td><td>random token</td></tr><tr><td>3</td><td>PUSH_DATA identifier 0x00</td></tr><tr><td>4-11</td><td>Gateway unique identifier (MAC address)</td></tr><tr><td>12-end</td><td>JSON object, starting with {, ending with }, see section 4</td></tr></tbody></table><h3 id="PUSH-ACK-packet"><a href="#PUSH-ACK-packet" class="headerlink" title="PUSH_ACK packet"></a>PUSH_ACK packet</h3><p>That packet type is used by the server to acknowledge immediately all the PUSH_DATA packets received.</p><table><thead><tr><th>Bytes</th><th>Function</th></tr></thead><tbody><tr><td>0</td><td>protocol version = 2</td></tr><tr><td>1-2</td><td>same token as the PUSH_DATA packet to acknowledge</td></tr><tr><td>3</td><td>PUSH_ACK identifier 0x01</td></tr></tbody></table><h2 id="Upstream-JSON-data-structure"><a href="#Upstream-JSON-data-structure" class="headerlink" title="Upstream JSON data structure"></a>Upstream JSON data structure</h2><hr><p>The root object can contain an array named “rxpk”:</p><pre class="language-none"><code class="language-none">&#123;&quot;rxpk&quot;:[ &#123;...&#125;, ...]&#125;</code></pre><p>That array contains at least one JSON object, each object contain a RF packet and associated metadata with the following fields:</p><table><thead><tr><th>Name</th><th>Type</th><th>Function</th></tr></thead><tbody><tr><td>time</td><td>string</td><td>UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format</td></tr><tr><td>tmst</td><td>number</td><td>Internal timestamp of “RX finished” event (32b unsigned)</td></tr><tr><td>freq</td><td>number</td><td>RX central frequency in MHz (unsigned float, Hz precision)</td></tr><tr><td>chan</td><td>number</td><td>Concentrator “IF” channel used for RX (unsigned integer)</td></tr><tr><td>rfch</td><td>number</td><td>Concentrator “RF chain” used for RX (unsigned integer)</td></tr><tr><td>stat</td><td>number</td><td>CRC status: 1 = OK, -1 = fail, 0 = no CRC</td></tr><tr><td>modu</td><td>string</td><td>Modulation identifier “LORA” or “FSK”</td></tr><tr><td>datr</td><td>string</td><td>LoRa datarate identifier (eg. SF12BW500)</td></tr><tr><td>datr</td><td>number</td><td>FSK datarate (unsigned, in bits per second)</td></tr><tr><td>codr</td><td>string</td><td>LoRa ECC coding rate identifier</td></tr><tr><td>rssi</td><td>number</td><td>RSSI in dBm (signed integer, 1 dB precision)</td></tr><tr><td>lsnr</td><td>number</td><td>Lora SNR ratio in dB (signed float, 0.1 dB precision)</td></tr><tr><td>size</td><td>number</td><td>RF packet payload size in bytes (unsigned integer)</td></tr><tr><td>data</td><td>string</td><td>Base64 encoded RF packet payload, padded</td></tr></tbody></table><p>Example (white-spaces, indentation and newlines added for readability):</p><pre class="language-none"><code class="language-none">&#123;&quot;rxpk&quot;:[&#123;&quot;time&quot;:&quot;2013-03-31T16:21:17.528002Z&quot;,&quot;tmst&quot;:3512348611,&quot;chan&quot;:2,&quot;rfch&quot;:0,&quot;freq&quot;:866.349812,&quot;stat&quot;:1,&quot;modu&quot;:&quot;LORA&quot;,&quot;datr&quot;:&quot;SF7BW125&quot;,&quot;codr&quot;:&quot;4&#x2F;6&quot;,&quot;rssi&quot;:-35,&quot;lsnr&quot;:5.1,&quot;size&quot;:32,&quot;data&quot;:&quot;-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84&quot;&#125;,&#123;&quot;time&quot;:&quot;2013-03-31T16:21:17.530974Z&quot;,&quot;tmst&quot;:3512348514,&quot;chan&quot;:9,&quot;rfch&quot;:1,&quot;freq&quot;:869.1,&quot;stat&quot;:1,&quot;modu&quot;:&quot;FSK&quot;,&quot;datr&quot;:50000,&quot;rssi&quot;:-75,&quot;size&quot;:16,&quot;data&quot;:&quot;VEVTVF9QQUNLRVRfMTIzNA&#x3D;&#x3D;&quot;&#125;,&#123;&quot;time&quot;:&quot;2013-03-31T16:21:17.532038Z&quot;,&quot;tmst&quot;:3316387610,&quot;chan&quot;:0,&quot;rfch&quot;:0,&quot;freq&quot;:863.00981,&quot;stat&quot;:1,&quot;modu&quot;:&quot;LORA&quot;,&quot;datr&quot;:&quot;SF10BW125&quot;,&quot;codr&quot;:&quot;4&#x2F;7&quot;,&quot;rssi&quot;:-38,&quot;lsnr&quot;:5.5,&quot;size&quot;:32,&quot;data&quot;:&quot;ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass&quot;&#125;]&#125;</code></pre><p>The root object can also contain an object named “stat” :</p><pre class="language-none"><code class="language-none">&#123;&quot;rxpk&quot;:[ &#123;...&#125;, ...],&quot;stat&quot;:&#123;...&#125;&#125;</code></pre><p>It is possible for a packet to contain no “rxpk” array but a “stat” object.</p><pre class="language-none"><code class="language-none">&#123;&quot;stat&quot;:&#123;...&#125;&#125;</code></pre><p>That object contains the status of the gateway, with the following fields:</p><table><thead><tr><th>Name</th><th>Type</th><th>Function</th></tr></thead><tbody><tr><td>time</td><td>string</td><td>UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format</td></tr><tr><td>lati</td><td>number</td><td>GPS latitude of the gateway in degree (float, N is +)</td></tr><tr><td>long</td><td>number</td><td>GPS latitude of the gateway in degree (float, E is +)</td></tr><tr><td>alti</td><td>number</td><td>GPS altitude of the gateway in meter RX (integer)</td></tr><tr><td>rxnb</td><td>number</td><td>Number of radio packets received (unsigned integer)</td></tr><tr><td>rxok</td><td>number</td><td>Number of radio packets received with a valid PHY CRC</td></tr><tr><td>rxfw</td><td>number</td><td>Number of radio packets forwarded (unsigned integer)</td></tr><tr><td>ackr</td><td>number</td><td>Percentage of upstream datagrams that were acknowledged</td></tr><tr><td>dwnb</td><td>number</td><td>Number of downlink datagrams received (unsigned integer)</td></tr><tr><td>txnb</td><td>number</td><td>Number of packets emitted (unsigned integer)</td></tr></tbody></table><p>Example (white-spaces, indentation and newlines added for readability):</p><pre class="language-none"><code class="language-none">&#123;&quot;stat&quot;:&#123;&quot;time&quot;:&quot;2014-01-12 08:59:28 GMT&quot;,&quot;lati&quot;:46.24000,&quot;long&quot;:3.25230,&quot;alti&quot;:145,&quot;rxnb&quot;:2,&quot;rxok&quot;:2,&quot;rxfw&quot;:2,&quot;ackr&quot;:100.0,&quot;dwnb&quot;:2,&quot;txnb&quot;:2&#125;&#125;</code></pre><h2 id="Downstream-protocol"><a href="#Downstream-protocol" class="headerlink" title="Downstream protocol"></a>Downstream protocol</h2><hr><h3 id="Sequence-diagram-1"><a href="#Sequence-diagram-1" class="headerlink" title="Sequence diagram"></a>Sequence diagram</h3><pre class="language-none"><code class="language-none">+---------+                                                    +---------+| Gateway |                                                    | Server  |+---------+                                                    +---------+     | -----------------------------------\                         |     |-| Every N seconds (keepalive time) |                         |     | ------------------------------------                         |     |                                                              |     | PULL_DATA (token Y, MAC@)                                    |     |-------------------------------------------------------------&gt;|     |                                                              |     |                                           PULL_ACK (token Y) |     |&lt;-------------------------------------------------------------|     |                                                              |+---------+                                                    +---------+| Gateway |                                                    | Server  |+---------+                                                    +---------+     |      ------------------------------------------------------\ |     |      | Anytime after first PULL_DATA for each packet to TX |-|     |      ------------------------------------------------------- |     |                                                              |     |                            PULL_RESP (token Z, JSON payload) |     |&lt;-------------------------------------------------------------|     |                                                              |     | TX_ACK (token Z, JSON payload)                               |     |-------------------------------------------------------------&gt;|</code></pre><h3 id="PULL-DATA-packet"><a href="#PULL-DATA-packet" class="headerlink" title="PULL_DATA packet"></a>PULL_DATA packet</h3><p>That packet type is used by the gateway to poll data from the server.</p><p>This data exchange is initialized by the gateway because it might be impossible for the server to send packets to the gateway if the gateway is behind a NAT.</p><p>When the gateway initialize the exchange, the network route towards the server will open and will allow for packets to flow both directions. The gateway must periodically send PULL_DATA packets to be sure the network route stays open for the server to be used at any time.</p><table><thead><tr><th>Bytes</th><th>Function</th></tr></thead><tbody><tr><td>0</td><td>protocol version = 2</td></tr><tr><td>1-2</td><td>random token</td></tr><tr><td>3</td><td>PULL_DATA identifier 0x02</td></tr><tr><td>4-11</td><td>Gateway unique identifier (MAC address)</td></tr></tbody></table><h3 id="PULL-ACK-packet"><a href="#PULL-ACK-packet" class="headerlink" title="PULL_ACK packet"></a>PULL_ACK packet</h3><p>That packet type is used by the server to confirm that the network route is open and that the server can send PULL_RESP packets at any time.</p><table><thead><tr><th>Bytes</th><th>Function</th></tr></thead><tbody><tr><td>0</td><td>protocol version = 2</td></tr><tr><td>1-2</td><td>same token as the PULL_DATA packet to acknowledge</td></tr><tr><td>3</td><td>PULL_ACK identifier 0x04</td></tr></tbody></table><h3 id="PULL-RESP-packet"><a href="#PULL-RESP-packet" class="headerlink" title="PULL_RESP packet"></a>PULL_RESP packet</h3><p>That packet type is used by the server to send RF packets and associated metadata that will have to be emitted by the gateway.</p><table><thead><tr><th>Bytes</th><th>Function</th></tr></thead><tbody><tr><td>0</td><td>protocol version = 2</td></tr><tr><td>1-2</td><td>random token</td></tr><tr><td>3</td><td>PULL_RESP identifier 0x03</td></tr><tr><td>4-end</td><td>JSON object, starting with {, ending with }, see section 6</td></tr></tbody></table><h3 id="TX-ACK-packet"><a href="#TX-ACK-packet" class="headerlink" title="TX_ACK packet"></a>TX_ACK packet</h3><p>That packet type is used by the gateway to send a feedback to the server to inform if a downlink request has been accepted or rejected by the gateway. The datagram may optionnaly contain a JSON string to give more details on acknoledge. If no JSON is present (empty string), this means than no error occured.</p><table><thead><tr><th>Bytes</th><th>Function</th></tr></thead><tbody><tr><td>0</td><td>protocol version = 2</td></tr><tr><td>1-2</td><td>same token as the PULL_RESP packet to acknowledge</td></tr><tr><td>3</td><td>TX_ACK identifier 0x05</td></tr><tr><td>4-11</td><td>Gateway unique identifier (MAC address)</td></tr><tr><td>12-end</td><td>[optional] JSON object, starting with {, ending with }, see section 6</td></tr></tbody></table><h2 id="Downstream-JSON-data-structure"><a href="#Downstream-JSON-data-structure" class="headerlink" title="Downstream JSON data structure"></a>Downstream JSON data structure</h2><hr><p>The root object of PULL_RESP packet must contain an object named “txpk”:</p><pre class="language-none"><code class="language-none">&#123;&quot;txpk&quot;: &#123;...&#125;&#125;</code></pre><p>That object contain a RF packet to be emitted and associated metadata with the following fields:</p><table><thead><tr><th>Name</th><th>Type</th><th>Function</th></tr></thead><tbody><tr><td>imme</td><td>bool</td><td>Send packet immediately (will ignore tmst &amp; time)</td></tr><tr><td>tmst</td><td>number</td><td>Send packet on a certain timestamp value (will ignore time)</td></tr><tr><td>time</td><td>string</td><td>Send packet at a certain time (GPS synchronization required)</td></tr><tr><td>freq</td><td>number</td><td>TX central frequency in MHz (unsigned float, Hz precision)</td></tr><tr><td>rfch</td><td>number</td><td>Concentrator “RF chain” used for TX (unsigned integer)</td></tr><tr><td>powe</td><td>number</td><td>TX output power in dBm (unsigned integer, dBm precision)</td></tr><tr><td>modu</td><td>string</td><td>Modulation identifier “LORA” or “FSK”</td></tr><tr><td>datr</td><td>string</td><td>LoRa datarate identifier (eg. SF12BW500)</td></tr><tr><td>datr</td><td>number</td><td>FSK datarate (unsigned, in bits per second)</td></tr><tr><td>codr</td><td>string</td><td>LoRa ECC coding rate identifier</td></tr><tr><td>fdev</td><td>number</td><td>FSK frequency deviation (unsigned integer, in Hz)</td></tr><tr><td>ipol</td><td>bool</td><td>Lora modulation polarization inversion</td></tr><tr><td>prea</td><td>number</td><td>RF preamble size (unsigned integer)</td></tr><tr><td>size</td><td>number</td><td>RF packet payload size in bytes (unsigned integer)</td></tr><tr><td>data</td><td>string</td><td>Base64 encoded RF packet payload, padding optional</td></tr><tr><td>ncrc</td><td>bool</td><td>If true, disable the CRC of the physical layer (optional)</td></tr></tbody></table><p>Most fields are optional. If a field is omitted, default parameters will be used.</p><p>Examples (white-spaces, indentation and newlines added for readability):</p><pre class="language-none"><code class="language-none">&#123;&quot;txpk&quot;:&#123;&quot;imme&quot;:true,&quot;freq&quot;:864.123456,&quot;rfch&quot;:0,&quot;powe&quot;:14,&quot;modu&quot;:&quot;LORA&quot;,&quot;datr&quot;:&quot;SF11BW125&quot;,&quot;codr&quot;:&quot;4&#x2F;6&quot;,&quot;ipol&quot;:false,&quot;size&quot;:32,&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;&#125;&#125;&#123;&quot;txpk&quot;:&#123;&quot;imme&quot;:true,&quot;freq&quot;:861.3,&quot;rfch&quot;:0,&quot;powe&quot;:12,&quot;modu&quot;:&quot;FSK&quot;,&quot;datr&quot;:50000,&quot;fdev&quot;:3000,&quot;size&quot;:32,&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;&#125;&#125;</code></pre><p>The root object of TX_ACK packet must contain an object named “txpk_ack”:</p><pre class="language-none"><code class="language-none">&#123;&quot;txpk_ack&quot;: &#123;...&#125;&#125;</code></pre><p>That object contain status information concerning the associated PULL_RESP packet.</p><table><thead><tr><th>Name</th><th>Type</th><th>Function</th></tr></thead><tbody><tr><td>error</td><td>string</td><td>Indication about success or type of failure that occured for downlink request.</td></tr></tbody></table><p>The possible values of “error” field are:</p><table><thead><tr><th>Value</th><th>Definition</th></tr></thead><tbody><tr><td>NONE</td><td>Packet has been programmed for downlink</td></tr><tr><td>TOO_LATE</td><td>Rejected because it was already too late to program this packet for downlink</td></tr><tr><td>TOO_EARLY</td><td>Rejected because downlink packet timestamp is too much in advance</td></tr><tr><td>COLLISION_PACKET</td><td>Rejected because there was already a packet programmed in requested timeframe</td></tr><tr><td>COLLISION_BEACON</td><td>Rejected because there was already a beacon planned in requested timeframe</td></tr><tr><td>TX_FREQ</td><td>Rejected because requested frequency is not supported by TX RF chain</td></tr><tr><td>TX_POWER</td><td>Rejected because requested power is not supported by gateway</td></tr><tr><td>GPS_UNLOCKED</td><td>Rejected because GPS is unlocked, so GPS timestamp cannot be used</td></tr></tbody></table><p>Examples (white-spaces, indentation and newlines added for readability):</p><pre class="language-none"><code class="language-none">&#123;&quot;txpk_ack&quot;:&#123;&quot;error&quot;:&quot;COLLISION_PACKET&quot;&#125;&#125;</code></pre><h2 id="Revisions"><a href="#Revisions" class="headerlink" title="Revisions"></a>Revisions</h2><hr><h3 id="v1-3"><a href="#v1-3" class="headerlink" title="v1.3"></a>v1.3</h3><ul><li>Added downlink feedback from gateway to server (PULL_RESP -&gt; TX_ACK)</li></ul><h3 id="v1-2"><a href="#v1-2" class="headerlink" title="v1.2"></a>v1.2</h3><ul><li>Added value of FSK bitrate for upstream.</li><li>Added parameters for FSK bitrate and frequency deviation for downstream.</li></ul><h3 id="v1-1"><a href="#v1-1" class="headerlink" title="v1.1"></a>v1.1</h3><ul><li>Added syntax for status report JSON object on upstream.</li></ul><h3 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h3><ul><li>Initial version.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> lorawan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>let-us-encrypt证书</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><p>为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。</p><ol><li>客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：</li></ol><ul><li><p>dns-01：给域名添加一个 DNS TXT 记录。</p></li><li><p>http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。</p></li><li><p>tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。</p><p>而申请通配符证书，只能使用 dns-01 的方式</p></li></ul><ol start="2"><li>ACME v2 和 v1 协议是互相不兼容的，为了使用 v2 版本，客户端需要创建另外一个账户（代表客户端操作者），以 Certbot 客户端为例，大家可以查看：</li><li>Enumerable Orders 和限制</li></ol><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.eff.org/certbot-auto<span class="token function">chmod</span> a+x ./certbot-auto</code></pre><h1 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h1><pre class="language-bash" data-language="bash"><code class="language-bash">./certbot-auto certonly  -d *.newyingyong.cn --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory</code></pre><ul><li>certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。</li><li>–manual 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择</li><li>-d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn（可以替换为你自己的域名）</li><li>-preferred-challenges dns，使用 DNS 方式校验域名所有权</li><li>–server，Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。</li></ul><h1 id="添加记录"><a href="#添加记录" class="headerlink" title="添加记录"></a>添加记录</h1><p>根据命令行提示，填写相关的内容，注意在添加记录的时候，要等到记录生效才确定。</p><pre class="language-none"><code class="language-none">-------------------------------------------------------------------------------Please deploy a DNS TXT record under the name_acme-challenge.newyingyong.cn with the following value:2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQBefore continuing, verify the record is deployed.-------------------------------------------------------------------------------Press Enter to ContinueWaiting for verification...Cleaning up challenges</code></pre><pre class="language-none"><code class="language-none">## 检测记录生效$ dig  -t txt  _acme-challenge.newyingyong.cn @8.8.8.8</code></pre><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>查看当前服务器所配置的证书</p><pre class="language-bash" data-language="bash"><code class="language-bash">certbot-auto certificates</code></pre><ol><li><p>使用申请的普通证书，使用<code>certbot-auto renew</code></p></li><li><p>使用通配符证书。</p><ol><li>添加DNS记录</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au.git</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">./certbot-auto renew --cert-name simplehttps.com  --manual-auth-hook /脚本目录/au.sh </code></pre></li><li><p>自动更新</p></li></ol><pre class="language-none"><code class="language-none">1 1 *&#x2F;1 * * root certbot-auto renew --manual --preferred-challenges dns  --manual-auth-hook &#x2F;脚本目录&#x2F;sslupdate.sh </code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/c5c9d071e395">https://www.jianshu.com/p/c5c9d071e395</a></p><p><a href="https://www.jianshu.com/p/074e147b68b0">https://www.jianshu.com/p/074e147b68b0</a></p><p><a href="https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au">certbot工具</a><br><a href="https://segmentfault.com/a/1190000015354547">https://segmentfault.com/a/1190000015354547</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><ol><li>transition-duration</li><li>transition-property</li><li>transition-delay</li><li>transition-timing-function</li></ol><h1 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h1><ol><li><p>@keyframes</p></li><li><p>animation</p><ol><li>animation-name</li><li>animation-duration</li><li>animation-timing-function</li><li>animation-delay</li><li>animation-iteration-count</li><li>animation-fill-mode</li><li>animation-direction</li><li>animation-play-state(这个要写在最下面，不然不会生效)</li></ol></li></ol><h1 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h1><ol><li>none</li><li>translate(x,y)/translate3d(x,y,z)</li><li>translateX(x)/translateY(y)/translateZ(z)</li><li>materix/materix3d</li><li>scale/scale3d</li><li>scaleX/scaleY/scaleZ</li><li>rotate/rotate3d</li><li>rotateX/rotateY/rotateZ</li><li>skew/skewX/skewY</li><li>perspective</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除inline-block之间的间隙</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>两个<code>inline-block</code>之间存在间隙，这是因为<code>html</code>元素换行导致的（换行和元素之间的空格、tabs、多个空格，结果一样，最后都是一个空格）</p><h1 id="移除空格"><a href="#移除空格" class="headerlink" title="移除空格"></a>移除空格</h1><p>如果我们使用html minimize工具，会清除html之间的空格。如果没有使用就需要我们手动去除。该方法简单但是不推荐使用，阅读不方便。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 方法一 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 方法二 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 方法三 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!----></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!----></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h1 id="负值margin"><a href="#负值margin" class="headerlink" title="负值margin"></a>负值margin</h1><p>不推荐使用，每个浏览器之间的间隙不同。</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">nav a</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> -4px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="父元素font-size设置为0"><a href="#父元素font-size设置为0" class="headerlink" title="父元素font-size设置为0"></a>父元素font-size设置为0</h1><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.space</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.space a</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这种方法是推荐使用的，但是在ie和Chrome浏览器(新的浏览器没有问题)上可能出现问题，因为在chrome上有最小字体限制。改进方法如下。</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.space</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="使用letter-spacing"><a href="#使用letter-spacing" class="headerlink" title="使用letter-spacing"></a>使用letter-spacing</h1><p><code>letter-spacing</code>用于修改字符间的间隙。</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.space</span> <span class="token punctuation">&#123;</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> -3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.space a</span> <span class="token punctuation">&#123;</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="使用word-spacing"><a href="#使用word-spacing" class="headerlink" title="使用word-spacing"></a>使用word-spacing</h1><p><code>word-spacing</code>修改单词之间的间隙</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.space</span> <span class="token punctuation">&#123;</span>    <span class="token property">word-spacing</span><span class="token punctuation">:</span> -6px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.space a</span> <span class="token punctuation">&#123;</span>    <span class="token property">word-spacing</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="使用浮动"><a href="#使用浮动" class="headerlink" title="使用浮动"></a>使用浮动</h1><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">a</span><span class="token punctuation">&#123;</span>    <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/">https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/</a></p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><blockquote><p> <a href="https://codepen.io/wumuwumu/pen/WYmKYX">https://codepen.io/wumuwumu/pen/WYmKYX</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
